<?xml version="1.0"?>
<robot name="carbot" xmlns:xacro="http://wiki.ros.org/xacro">


    <xacro:property name="car_length" value="0.3"/>
    <xacro:property name="car_width" value="0.13"/>
    <xacro:property name="car_height" value="0.05"/>
    <xacro:property name="chassis_mass" value="2.0"/>

    <!-- turning to left -->
    <xacro:property name="min_steer" value="-0.52"/>
    <!-- turning to right -->
    <xacro:property name="max_steer" value="0.52"/>

    <xacro:property name="front_axle_width" value="0.18"/>
    <xacro:property name="back_axle_width" value="0.17"/>
    <xacro:property name="axle_mass" value="0.1"/>

    <xacro:property name="wheel_width" value="0.03"/>
    <xacro:property name="wheel_radius" value="0.051"/>
    <xacro:property name="wheel_gape" value="0.02"/>
    <!-- TODO(lwalter) pass these in as args -->


    <xacro:include filename="$(find carbot_description)/urdf/carbot.gazebo"/>

    <!-- don't use macro names that are the same as other key names
      like 'box', 'cylinder', etc. otherwise get Invalid parameter "size"
    -->
    <xacro:macro name="block" params="name length width height mass r:=0.5 b:=0.5 g:=0.5">
        <link name="${name}">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${length} ${width} ${height}"/>
                </geometry>
                <material name="${name}_gray">
                    <color rgba="${r} ${g} ${b} 1"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${length} ${width} ${height}"/>
                </geometry>
            </collision>
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="${mass}"/>
                <inertia
                        ixx="${mass / 12.0 * (width * width + height * height)}" ixy="0.0" ixz="0.0"
                        iyy="${mass / 12.0 * (length * length + height * height)}" iyz="0.0"
                        izz="${mass / 12.0 * (length * length + width * width)}"/>
            </inertial>
        </link>
    </xacro:macro>

    <!-- a wheel that rotates around the y axis, rolls forward toward the x axis -->
    <!--origin xyz="${length/2} ${width/2} ${height/2}" /-->
    <xacro:macro name="wheel" params="name width radius mass">
        <link name="${name}">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder length="${width}" radius="${radius}"/>
                </geometry>
                <material name="${name}_black">
                    <color rgba="0.2 0.2 0.2 1"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder length="${width}" radius="${radius}"/>
                </geometry>
            </collision>
            <inertial>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <mass value="${mass}"/>
                <inertia
                        ixx="${mass / 12.0 * (3 * radius * radius + width * width)}" ixy="0.0" ixz="0.0"
                        iyy="${mass / 12.0 * (3 * radius * radius + width * width)}" iyz="0.0"
                        izz="${mass / 2.0 * (radius * radius)}"/>
            </inertial>
        </link>
    </xacro:macro>

    <xacro:macro name="generic_wheel" params="name parent radius width">

        <xacro:wheel name="wheel_${name}" width="${wheel_width}" radius="${wheel_radius}" mass="0.1"/>
        <joint name="wheel_${name}_axle" type="continuous">
            <parent link="${parent}"/>
            <child link="wheel_${name}"/>
            <origin xyz="0 0 ${-car_height/4}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
            <limit effort="10.0" velocity="0.5"/>
        </joint>

        <!-- indicate whether the wheel is spinning -->
        <xacro:block name="wheel_${name}_hubcap" length="${1.6 * wheel_radius}"
                     width="${1.1 * wheel_width}" height="${0.2 * wheel_width}" mass="0.1"
                     r="0.95" g="0.95" b="0.95"/>
        <joint name="wheel_${name}_hubcap_joint" type="fixed">
            <parent link="wheel_${name}"/>
            <child link="wheel_${name}_hubcap"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </joint>

        <transmission name="${name}_tran">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="wheel_${name}_axle">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="${name}_motor">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <gazebo reference="wheel_${name}">
            <mu1>800</mu1>
            <mu2>100</mu2>
            <kp value="10000000.0"/>
            <kd value="1.0"/>
        </gazebo>

    </xacro:macro>  <!-- generic wheel -->

    <!-- TODO(lucasw) make a wheel xacro to get common code out of
        fixed_wheel and steered_wheel -->
    <xacro:macro name="fixed_wheel" params="name parent y">
        <xacro:block name="${name}" length="${car_width/8.0}"
                     width="${car_width/8.0}" height="${car_width/8.0}" mass="0.1"/>
        <joint name="${name}_axle" type="fixed">
            <parent link="${parent}"/>
            <child link="${name}"/>
            <origin xyz="0 ${y} 0" rpy="0 0 0"/>
        </joint>

        <xacro:generic_wheel name="${name}" parent="${name}"
                             radius="${wheel_radius}" width="${wheel_width}"/>
    </xacro:macro>

    <xacro:macro name="steered_wheel" params="name parent y">
        <xacro:block name="${name}_steer" length="${car_width/8.0}"
                     width="${car_width/8.0}" height="${car_width/8.0}" mass="0.1"/>
        <joint name="${name}_steer_joint" type="revolute">
            <parent link="${parent}"/>
            <child link="${name}_steer"/>
            <origin xyz="0 ${y} 0" rpy="0 0 0"/>
            <origin xyz="0 ${y} 0" rpy="0 0 0"/>
            <axis xyz="0 0 -1"/>
            <limit effort="1.0" upper="${max_steer}" lower="${min_steer}" velocity="0.01"/>
        </joint>

        <transmission name="${name}_steer_tran">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${name}_steer_joint">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="${name}_steer_motor">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1000</mechanicalReduction>
            </actuator>
        </transmission>

        <xacro:generic_wheel name="${name}" parent="${name}_steer"
                             radius="${wheel_radius}" width="${wheel_width}"/>
    </xacro:macro>

    <link name="base_link"/>
    <xacro:block name="chassis_link" length="${car_length}"
                 width="${car_width}" height="${car_height}" mass="${chassis_mass}"/>
    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis_link"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>
    <!-- virtual joint that allows visualization of where the
      base_link is steering (given the lead steer joint)
      -->
    <link name="base_steer"/>
    <joint name="base_steer_joint" type="revolute">
        <!--parent link="base_link"/-->
        <parent link="base_link"/>
        <child link="base_steer"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <axis xyz="0 0 -1"/>
        <limit effort="10000.0" upper="${max_steer}" lower="${min_steer}" velocity="0.01"/>
    </joint>

    <!-- every link has to have inertia in order for it to work in gazebo
      even if it just connects two inertia links- without it the child link
      that doesn't have inertia won't appear.
      -->
    <xacro:block name="front_axle" length="${car_width/8.0}"
                 width="${front_axle_width}" height="${car_width/8.0}" mass="${axle_mass}"/>
    <joint name="front_axle_joint" type="fixed">
        <parent link="base_link"/>
        <child link="front_axle"/>
        <origin xyz="${0.5625 * car_length} 0 0" rpy="0 0 0"/>
    </joint>

    <!-- this is the virtual joint that represents the front of the bicycle
      in the bicycle model, it will be controlled and the left and right
      actual joints will respond to it appropriately to maintain a steer center
      -->
    <link name="lead_steer"/>
    <joint name="lead_steer_joint" type="revolute">
        <!-- TODO(lwalter) may want to put this at base_link instead- but
          maybe thinking about moving in terms of where to put the front
          bumper makes more sense than where to put the center of the vehicle?
          -->
        <!--parent link="base_link"/-->
        <parent link="front_axle"/>
        <child link="lead_steer"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <axis xyz="0 0 -1"/>
        <limit effort="10000.0" upper="${max_steer}" lower="${min_steer}" velocity="0.01"/>
    </joint>
    <!-- virtual wheel that will represent the desired velocity
      of the vehicle (so need radius encoded in it also) -->
    <link name="wheel_lead"/>
    <joint name="wheel_lead_axle" type="continuous">
        <parent link="lead_steer"/>
        <child link="wheel_lead"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000.0" velocity="0.5"/>
    </joint>

    <xacro:steered_wheel name="front_left" parent="front_axle"
                         y="${front_axle_width/2 + wheel_width/2 + wheel_gape}"/>
    <xacro:steered_wheel name="front_right" parent="front_axle"
                         y="${-front_axle_width/2 - wheel_width/2 - wheel_gape}"/>

    <xacro:block name="back_axle" length="${car_width/8.0}"
                 width="${back_axle_width}" height="${car_width/8.0}" mass="${axle_mass}"/>
    <joint name="back_axle_joint" type="fixed">
        <parent link="base_link"/>
        <child link="back_axle"/>
        <origin xyz="${-0.5625 * car_length} 0 0" rpy="0 0 0"/>
    </joint>

    <xacro:fixed_wheel name="back_left" parent="back_axle"
                       y="${back_axle_width/2 + wheel_width/2 + wheel_gape}"/>
    <xacro:fixed_wheel name="back_right" parent="back_axle"
                       y="${-back_axle_width/2 - wheel_width/2 - wheel_gape}"/>


    <joint name="scan_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_scan"/>
        <origin xyz="0 0.0 ${car_height}" rpy="0 0 0"/>
    </joint>
    <link name="base_scan">
        <visual>
            <origin xyz="0 0 0.0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="package://carbot_description/meshes/lds.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="dark"/>
        </visual>
        <!--<collision>-->
        <!--<origin xyz="0.015 0 -0.0065" rpy="0 0 0"/>-->
        <!--<geometry>-->
        <!--<cylinder length="0.0315" radius="0.055"/>-->
        <!--</geometry>-->
        <!--</collision>-->
        <inertial>
            <mass value="0.114"/>
            <origin xyz="0 0 0"/>
            <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
        </inertial>
    </link>


    <joint name="camera_joint" type="fixed">
        <origin xyz="${car_width/2} 0 ${car_height}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="camera_link"/>
    </joint>
    <link name="camera_link">
    </link>
    <joint name="camera_rgb_joint" type="fixed">
        <origin xyz="${car_width/2} 0 ${car_height}" rpy="0 0 0"/>
        <parent link="camera_link"/>
        <child link="camera_rgb_frame"/>
    </joint>
    <link name="camera_rgb_frame"/>
    <joint name="camera_rgb_optical_joint" type="fixed">
        <origin xyz="${car_width/2} 0 ${car_height}" rpy="-1.57 0 -1.57"/>
        <parent link="camera_rgb_frame"/>
        <child link="camera_rgb_optical_frame"/>
    </joint>
    <link name="camera_rgb_optical_frame"/>



</robot>
