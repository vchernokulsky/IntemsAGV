#! /usr/bin/env python
from __future__ import division

import rospy
from math import pi, asin
import socket
from geometry_msgs.msg import Twist, Pose
from nav_msgs.msg import Odometry
from std_msgs.msg import Float32
import json


class SocketClient:
    def __init__(self):
        self.IP = '192.168.22.178'
        self.PORT = 23
        self.BUFFER_SIZE = 1024

    def get_speeds(self):
        l_vel = 0
        r_vel = 0
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            rospy.loginfo("socket set")
            s.connect((self.IP, self.PORT))
            rospy.loginfo("socket connected")
            data = s.recv(self.BUFFER_SIZE)
            rospy.loginfo("data received")
            rospy.loginfo(data)
            s.close()
            json_dict = json.loads(data.decode('utf-8'))

            l_vel = json_dict['l_vel']
            r_vel = json_dict['r_vel']
        except Exception as e:
            rospy.logerr(e)
        finally:
            return l_vel, r_vel

    def set_ip(self, ip):
        self.IP = ip

    def set_port(self, port):
        self.PORT = port


class RobotNode:

    def __init__(self):
        self.leftSpeed = 0
        self.rightSpeed = 0
        self.socketClient = SocketClient()

        self.rate = 5.0

        self.leftPub = rospy.Publisher('lwheel_speed', Float32, queue_size=1)
        self.rightPub = rospy.Publisher('rwheel_speed', Float32, queue_size=1)

    def main(self):
        rospy.init_node('diff_drive_robot_get')
        rospy.loginfo("{0} started".format(rospy.get_name()))

        self.rate = rospy.Rate(float(rospy.get_param('~rate', 5.0)))
        self.socketClient.set_ip(str(rospy.get_param('~ip', '192.168.22.178')))
        self.socketClient.set_port(int(rospy.get_param('~port', 23)))

        while not rospy.is_shutdown():
            self.publish()
            self.rate.sleep()

    def publish(self):
        self.leftSpeed, self.rightSpeed = self.socketClient.get_speeds()
        self.leftPub.publish(float(self.leftSpeed))
        self.rightPub.publish(float(self.rightSpeed))


if __name__ == '__main__':
    try:
        node = RobotNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
