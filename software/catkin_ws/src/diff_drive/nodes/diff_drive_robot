#! /usr/bin/env python
from __future__ import division

import rospy
from math import pi, asin
import socket
from geometry_msgs.msg import Twist, Pose
from nav_msgs.msg import Odometry
from std_msgs.msg import Int32


class SocketClient:
    def __init__(self):
        self.IP = '192.168.22.177'
        self.PORT = 23
        self.BUFFER_SIZE = 1024

        self.MAX_VEL = 30
        self.MIN_VEL = 220

        self.STOP = 0
        self.FORWARD = 1
        self.BACKWARD = 2

        self.left_dir = self.STOP
        self.left_speed = 0
        self.right_dir = self.STOP
        self.right_speed = 0

    def print_speeds(self):
        data_str = str(self.left_dir) + ";" + str(self.left_speed) + ";" + str(self.right_dir) + ";" + str(self.right_speed)
        rospy.loginfo(data_str)

    def send_speeds(self):
        self.print_speeds()
        data = bytearray([self.left_dir, self.left_speed, self.right_dir, self.right_speed])
        # try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        rospy.loginfo("socket set")
        rospy.loginfo("socket: ip = %s; port = %s", self.IP, self.PORT)
        s.connect((self.IP, self.PORT))
        rospy.loginfo("socket connected")
        s.sendall(data)
        rospy.loginfo("data sent")
        # except Exception as e:
        #     rospy.loginfo("!!!")
        #     rospy.loginfo(e)

    def set_ip(self, ip):
        self.IP = ip

    def set_port(self, port):
        self.PORT = port

    def set_max_vel(self, vel):
        self.MAX_VEL = vel

    def set_min_vel(self, vel):
        self.MIN_VEL = vel

    def set_speeds(self, left, right):
        self.left_dir = self.get_direction(left)
        self.right_dir = self.get_direction(right)
        self.left_speed = self.clip(left)
        self.right_speed = self.clip(right)

    def set_stop(self):
        self.left_dir = self.STOP
        self.left_speed = 0
        self.right_dir = self.STOP
        self.right_speed = 0

    def get_direction(self, value):
        if value < 0:
            return self.BACKWARD
        if value > 0:
            return self.FORWARD
        return self.STOP

    def clip(self, speed):
        value = abs(speed)
        if self.MIN_VEL > value > 0:
            return self.MIN_VEL
        elif value > self.MAX_VEL:
            return self.MAX_VEL
        return int(value)


class RobotNode:

    def __init__(self):
        self.leftSpeed = 0
        self.rightSpeed = 0
        self.socketClient = SocketClient()

        self.rate = 10.0
        self.timeout = 0.5
        self.lastTime = 0

    def main(self):
        rospy.init_node('diff_drive_robot_send')
        rospy.loginfo("{0} started".format(rospy.get_name()))

        rospy.Subscriber('lwheel_desired_rate', Int32, self.left_callback)
        rospy.Subscriber('rwheel_desired_rate', Int32, self.right_callback)

        self.rate = float(rospy.get_param('~rate', 5.0))
        self.timeout = float(rospy.get_param('~timeout', 0.5))

        self.socketClient.set_ip(str(rospy.get_param('~ip', '192.168.22.177')))
        self.socketClient.set_port(int(rospy.get_param('~port', 23)))
        self.socketClient.set_max_vel(int(rospy.get_param('~max_vel', 220)))
        self.socketClient.set_min_vel(int(rospy.get_param('~min_vel', 30)))

        rate = rospy.Rate(self.rate)
        self.lastTime = rospy.get_time()
        while not rospy.is_shutdown():
            self.publish()
            rate.sleep()

    def publish(self):
        new_time = rospy.get_time()
        diff_time = new_time - self.lastTime
        self.lastTime = new_time
        if diff_time > self.timeout:
            self.socketClient.set_stop()
        self.socketClient.send_speeds()

    def left_callback(self, left_speed):
        self.leftSpeed = left_speed.data
        self.socketClient.set_speeds(self.leftSpeed, self.rightSpeed)
        # self.publish()

    def right_callback(self, right_speed):
        self.rightSpeed = right_speed.data
        self.socketClient.set_speeds(self.leftSpeed, self.rightSpeed)
        # self.publish()


if __name__ == '__main__':
    try:
        node = RobotNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
