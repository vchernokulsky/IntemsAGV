
SLMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008064  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008490  08008490  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008498  08008498  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080084a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c0  20000098  08008540  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  08008540  00024258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220ef  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000489d  00000000  00000000  000421b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001710  00000000  00000000  00046a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001548  00000000  00000000  00048168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d550  00000000  00000000  000496b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013416  00000000  00000000  00066c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3a5e  00000000  00000000  0007a016  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011da74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007790  00000000  00000000  0011daf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081ec 	.word	0x080081ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	080081ec 	.word	0x080081ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f006 ffb0 	bl	8007524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f006 fdfc 	bl	80071c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200040b4 	.word	0x200040b4

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200040b4 	.word	0x200040b4

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800063a:	bf00      	nop
 800063c:	f7ff ffde 	bl	80005fc <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff4c 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff61 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff54 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e159      	b.n	8000aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000838:	2201      	movs	r2, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8148 	bne.w	8000ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x4a>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	69b9      	ldr	r1, [r7, #24]
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0203 	and.w	r2, r3, #3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00b      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	2b11      	cmp	r3, #17
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d130      	bne.n	8000964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80a2 	beq.w	8000ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009be:	4a51      	ldr	r2, [pc, #324]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2ec>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d019      	beq.n	8000a1e <HAL_GPIO_Init+0x202>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a47      	ldr	r2, [pc, #284]	; (8000b0c <HAL_GPIO_Init+0x2f0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x1fe>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_GPIO_Init+0x2f4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x1fa>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <HAL_GPIO_Init+0x2f8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x1f6>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <HAL_GPIO_Init+0x2fc>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x1f2>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a30:	4934      	ldr	r1, [pc, #208]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a62:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a8c:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	f67f aea2 	bls.w	8000838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b3c:	e003      	b.n	8000b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f806 	bl	8000b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e22d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d075      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bba:	4ba3      	ldr	r3, [pc, #652]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d00c      	beq.n	8000be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc6:	4ba0      	ldr	r3, [pc, #640]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d112      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bd2:	4b9d      	ldr	r3, [pc, #628]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bde:	d10b      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be0:	4b99      	ldr	r3, [pc, #612]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d05b      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x108>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d157      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e208      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d106      	bne.n	8000c10 <HAL_RCC_OscConfig+0x74>
 8000c02:	4b91      	ldr	r3, [pc, #580]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e01d      	b.n	8000c4c <HAL_RCC_OscConfig+0xb0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x98>
 8000c1a:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a8a      	ldr	r2, [pc, #552]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b88      	ldr	r3, [pc, #544]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a87      	ldr	r2, [pc, #540]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00b      	b.n	8000c4c <HAL_RCC_OscConfig+0xb0>
 8000c34:	4b84      	ldr	r3, [pc, #528]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a83      	ldr	r2, [pc, #524]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a80      	ldr	r2, [pc, #512]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fcd2 	bl	80005fc <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fcce 	bl	80005fc <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e1cd      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	4b76      	ldr	r3, [pc, #472]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0xc0>
 8000c7a:	e014      	b.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fcbe 	bl	80005fc <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fcba 	bl	80005fc <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	; 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1b9      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0xe8>
 8000ca2:	e000      	b.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb2:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cbe:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cca:	4b5f      	ldr	r3, [pc, #380]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d116      	bne.n	8000d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x152>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e18d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4952      	ldr	r1, [pc, #328]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	e03a      	b.n	8000d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	4b4f      	ldr	r3, [pc, #316]	; (8000e4c <HAL_RCC_OscConfig+0x2b0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc73 	bl	80005fc <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc6f 	bl	80005fc <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e16e      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4940      	ldr	r1, [pc, #256]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <HAL_RCC_OscConfig+0x2b0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc52 	bl	80005fc <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc4e 	bl	80005fc <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e14d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d030      	beq.n	8000de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d016      	beq.n	8000dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_RCC_OscConfig+0x2b4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc32 	bl	80005fc <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc2e 	bl	80005fc <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e12d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x200>
 8000dba:	e015      	b.n	8000de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_RCC_OscConfig+0x2b4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc1b 	bl	80005fc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dca:	f7ff fc17 	bl	80005fc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e116      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f0      	bne.n	8000dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a0 	beq.w	8000f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10f      	bne.n	8000e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d121      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbdd 	bl	80005fc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	e011      	b.n	8000e6a <HAL_RCC_OscConfig+0x2ce>
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000
 8000e50:	42470e80 	.word	0x42470e80
 8000e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e58:	f7ff fbd0 	bl	80005fc <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e0cf      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x478>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
 8000e7e:	4b66      	ldr	r3, [pc, #408]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8a:	e01c      	b.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x312>
 8000e94:	4b60      	ldr	r3, [pc, #384]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e98:	4a5f      	ldr	r2, [pc, #380]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea0:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea4:	4a5c      	ldr	r2, [pc, #368]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	4a59      	ldr	r2, [pc, #356]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb95 	bl	80005fc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb91 	bl	80005fc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e08e      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ee      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x33a>
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb7f 	bl	80005fc <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fb7b 	bl	80005fc <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e078      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ee      	bne.n	8000f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d105      	bne.n	8000f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d064      	beq.n	8001008 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d05c      	beq.n	8001004 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d141      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb50 	bl	80005fc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fb4c 	bl	80005fc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e04b      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	3b01      	subs	r3, #1
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	491d      	ldr	r1, [pc, #116]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb25 	bl	80005fc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fb21 	bl	80005fc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e020      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x41a>
 8000fd4:	e018      	b.n	8001008 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb0e 	bl	80005fc <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fb0a 	bl	80005fc <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e009      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x448>
 8001002:	e001      	b.n	8001008 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40007000 	.word	0x40007000
 8001018:	40023800 	.word	0x40023800
 800101c:	42470060 	.word	0x42470060

08001020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0ca      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001034:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d90c      	bls.n	800105c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0b6      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d020      	beq.n	80010aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001074:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800107a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800107e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800108c:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	494c      	ldr	r1, [pc, #304]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d044      	beq.n	8001140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d119      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e07d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e06d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e065      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f023 0203 	bic.w	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4933      	ldr	r1, [pc, #204]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001110:	f7ff fa74 	bl	80005fc <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	e00a      	b.n	800112e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff fa70 	bl	80005fc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f241 3288 	movw	r2, #5000	; 0x1388
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e04d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 020c 	and.w	r2, r3, #12
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	429a      	cmp	r2, r3
 800113e:	d1eb      	bne.n	8001118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d20c      	bcs.n	8001168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e030      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	490d      	ldr	r1, [pc, #52]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f000 f81d 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 80011aa:	4601      	mov	r1, r0
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	fa21 f303 	lsr.w	r3, r1, r3
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f006 f9ae 	bl	8007524 <HAL_InitTick>

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	08008400 	.word	0x08008400
 80011e0:	20000030 	.word	0x20000030

080011e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d007      	beq.n	8001216 <HAL_RCC_GetSysClockFreq+0x32>
 8001206:	2b08      	cmp	r3, #8
 8001208:	d008      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x38>
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 80b4 	bne.w	8001378 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001212:	60bb      	str	r3, [r7, #8]
       break;
 8001214:	e0b3      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001218:	60bb      	str	r3, [r7, #8]
      break;
 800121a:	e0b0      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800121c:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001224:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001226:	4b58      	ldr	r3, [pc, #352]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04a      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001232:	4b55      	ldr	r3, [pc, #340]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	ea03 0501 	and.w	r5, r3, r1
 8001248:	ea04 0602 	and.w	r6, r4, r2
 800124c:	4629      	mov	r1, r5
 800124e:	4632      	mov	r2, r6
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	0154      	lsls	r4, r2, #5
 800125a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800125e:	014b      	lsls	r3, r1, #5
 8001260:	4619      	mov	r1, r3
 8001262:	4622      	mov	r2, r4
 8001264:	1b49      	subs	r1, r1, r5
 8001266:	eb62 0206 	sbc.w	r2, r2, r6
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	f04f 0400 	mov.w	r4, #0
 8001272:	0194      	lsls	r4, r2, #6
 8001274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001278:	018b      	lsls	r3, r1, #6
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	eb64 0402 	sbc.w	r4, r4, r2
 8001280:	f04f 0100 	mov.w	r1, #0
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	00e2      	lsls	r2, r4, #3
 800128a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800128e:	00d9      	lsls	r1, r3, #3
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	195b      	adds	r3, r3, r5
 8001296:	eb44 0406 	adc.w	r4, r4, r6
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	0262      	lsls	r2, r4, #9
 80012a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012a8:	0259      	lsls	r1, r3, #9
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7fe ffe8 	bl	8000290 <__aeabi_uldivmod>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e049      	b.n	800135c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	f04f 0400 	mov.w	r4, #0
 80012d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	ea03 0501 	and.w	r5, r3, r1
 80012de:	ea04 0602 	and.w	r6, r4, r2
 80012e2:	4629      	mov	r1, r5
 80012e4:	4632      	mov	r2, r6
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	f04f 0400 	mov.w	r4, #0
 80012ee:	0154      	lsls	r4, r2, #5
 80012f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f4:	014b      	lsls	r3, r1, #5
 80012f6:	4619      	mov	r1, r3
 80012f8:	4622      	mov	r2, r4
 80012fa:	1b49      	subs	r1, r1, r5
 80012fc:	eb62 0206 	sbc.w	r2, r2, r6
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f04f 0400 	mov.w	r4, #0
 8001308:	0194      	lsls	r4, r2, #6
 800130a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800130e:	018b      	lsls	r3, r1, #6
 8001310:	1a5b      	subs	r3, r3, r1
 8001312:	eb64 0402 	sbc.w	r4, r4, r2
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	00e2      	lsls	r2, r4, #3
 8001320:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001324:	00d9      	lsls	r1, r3, #3
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	195b      	adds	r3, r3, r5
 800132c:	eb44 0406 	adc.w	r4, r4, r6
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	02a2      	lsls	r2, r4, #10
 800133a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800133e:	0299      	lsls	r1, r3, #10
 8001340:	460b      	mov	r3, r1
 8001342:	4614      	mov	r4, r2
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f04f 0400 	mov.w	r4, #0
 800134e:	461a      	mov	r2, r3
 8001350:	4623      	mov	r3, r4
 8001352:	f7fe ff9d 	bl	8000290 <__aeabi_uldivmod>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	0c1b      	lsrs	r3, r3, #16
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	3301      	adds	r3, #1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	60bb      	str	r3, [r7, #8]
      break;
 8001376:	e002      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800137a:	60bb      	str	r3, [r7, #8]
      break;
 800137c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137e:	68bb      	ldr	r3, [r7, #8]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	00f42400 	.word	0x00f42400
 8001390:	007a1200 	.word	0x007a1200

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff0 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b4:	4601      	mov	r1, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0a9b      	lsrs	r3, r3, #10
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	08008410 	.word	0x08008410

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffdc 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013dc:	4601      	mov	r1, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0b5b      	lsrs	r3, r3, #13
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	08008410 	.word	0x08008410

080013fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	220f      	movs	r2, #15
 800140a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_RCC_GetClockConfig+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e056      	b.n	8001520 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f005 fec3 	bl	8007218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2202      	movs	r2, #2
 8001496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	ea42 0103 	orr.w	r1, r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	f003 0104 	and.w	r1, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_SPI_Transmit+0x22>
 8001546:	2302      	movs	r3, #2
 8001548:	e11e      	b.n	8001788 <HAL_SPI_Transmit+0x260>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001552:	f7ff f853 	bl	80005fc <HAL_GetTick>
 8001556:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d002      	beq.n	800156e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800156c:	e103      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_SPI_Transmit+0x52>
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800157e:	e0fa      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c6:	d107      	bne.n	80015d8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	d007      	beq.n	80015f6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fe:	d14b      	bne.n	8001698 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_SPI_Transmit+0xe6>
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d13e      	bne.n	800168c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	1c9a      	adds	r2, r3, #2
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001632:	e02b      	b.n	800168c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d112      	bne.n	8001668 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	1c9a      	adds	r2, r3, #2
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165c:	b29b      	uxth	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	86da      	strh	r2, [r3, #54]	; 0x36
 8001666:	e011      	b.n	800168c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001668:	f7fe ffc8 	bl	80005fc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d803      	bhi.n	8001680 <HAL_SPI_Transmit+0x158>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167e:	d102      	bne.n	8001686 <HAL_SPI_Transmit+0x15e>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	77fb      	strb	r3, [r7, #31]
          goto error;
 800168a:	e074      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ce      	bne.n	8001634 <HAL_SPI_Transmit+0x10c>
 8001696:	e04c      	b.n	8001732 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_SPI_Transmit+0x17e>
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d140      	bne.n	8001728 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	330c      	adds	r3, #12
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80016cc:	e02c      	b.n	8001728 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d113      	bne.n	8001704 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	330c      	adds	r3, #12
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	86da      	strh	r2, [r3, #54]	; 0x36
 8001702:	e011      	b.n	8001728 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001704:	f7fe ff7a 	bl	80005fc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d803      	bhi.n	800171c <HAL_SPI_Transmit+0x1f4>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171a:	d102      	bne.n	8001722 <HAL_SPI_Transmit+0x1fa>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001726:	e026      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1cd      	bne.n	80016ce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fba4 	bl	8001e84 <SPI_EndRxTxTransaction>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2220      	movs	r2, #32
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e000      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001774:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001786:	7ffb      	ldrb	r3, [r7, #31]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017ac:	d112      	bne.n	80017d4 <HAL_SPI_Receive+0x44>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2204      	movs	r2, #4
 80017ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f8e9 	bl	80019a2 <HAL_SPI_TransmitReceive>
 80017d0:	4603      	mov	r3, r0
 80017d2:	e0e2      	b.n	800199a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_SPI_Receive+0x52>
 80017de:	2302      	movs	r3, #2
 80017e0:	e0db      	b.n	800199a <HAL_SPI_Receive+0x20a>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017ea:	f7fe ff07 	bl	80005fc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d002      	beq.n	8001802 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
 80017fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001800:	e0c2      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_SPI_Receive+0x7e>
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001812:	e0b9      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2204      	movs	r2, #4
 8001818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	88fa      	ldrh	r2, [r7, #6]
 8001832:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185a:	d107      	bne.n	800186c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800186a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	2b40      	cmp	r3, #64	; 0x40
 8001878:	d007      	beq.n	800188a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d162      	bne.n	8001958 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001892:	e02e      	b.n	80018f2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d115      	bne.n	80018ce <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f103 020c 	add.w	r2, r3, #12
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80018cc:	e011      	b.n	80018f2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ce:	f7fe fe95 	bl	80005fc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d803      	bhi.n	80018e6 <HAL_SPI_Receive+0x156>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e4:	d102      	bne.n	80018ec <HAL_SPI_Receive+0x15c>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80018f0:	e04a      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1cb      	bne.n	8001894 <HAL_SPI_Receive+0x104>
 80018fc:	e031      	b.n	8001962 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d113      	bne.n	8001934 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	b292      	uxth	r2, r2
 8001918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	1c9a      	adds	r2, r3, #2
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001932:	e011      	b.n	8001958 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001934:	f7fe fe62 	bl	80005fc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d803      	bhi.n	800194c <HAL_SPI_Receive+0x1bc>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800194a:	d102      	bne.n	8001952 <HAL_SPI_Receive+0x1c2>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001956:	e017      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1cd      	bne.n	80018fe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa27 	bl	8001dba <SPI_EndRxTransaction>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2220      	movs	r2, #32
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e000      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08c      	sub	sp, #48	; 0x30
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_SPI_TransmitReceive+0x26>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e18a      	b.n	8001cde <HAL_SPI_TransmitReceive+0x33c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019d0:	f7fe fe14 	bl	80005fc <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00f      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x70>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f8:	d107      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x68>
 8001a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a10:	e15b      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x82>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x82>
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a2a:	e14e      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d003      	beq.n	8001a40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2205      	movs	r2, #5
 8001a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d007      	beq.n	8001a94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a9c:	d178      	bne.n	8001b90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x10a>
 8001aa6:	8b7b      	ldrh	r3, [r7, #26]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d166      	bne.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	1c9a      	adds	r2, r3, #2
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ad0:	e053      	b.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d11b      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d113      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	1c9a      	adds	r2, r3, #2
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d119      	bne.n	8001b5a <HAL_SPI_TransmitReceive+0x1b8>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d014      	beq.n	8001b5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	1c9a      	adds	r2, r3, #2
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b5a:	f7fe fd4f 	bl	80005fc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d807      	bhi.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b70:	d003      	beq.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b78:	e0a7      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1a6      	bne.n	8001ad2 <HAL_SPI_TransmitReceive+0x130>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1a1      	bne.n	8001ad2 <HAL_SPI_TransmitReceive+0x130>
 8001b8e:	e07c      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x1fc>
 8001b98:	8b7b      	ldrh	r3, [r7, #26]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d16b      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bc4:	e057      	b.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d11c      	bne.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d114      	bne.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	330c      	adds	r3, #12
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <HAL_SPI_TransmitReceive+0x2ae>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d014      	beq.n	8001c50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c50:	f7fe fcd4 	bl	80005fc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d803      	bhi.n	8001c68 <HAL_SPI_TransmitReceive+0x2c6>
 8001c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c66:	d102      	bne.n	8001c6e <HAL_SPI_TransmitReceive+0x2cc>
 8001c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c74:	e029      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1a2      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x224>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d19d      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8f8 	bl	8001e84 <SPI_EndRxTxTransaction>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001ca6:	e010      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	e000      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3730      	adds	r7, #48	; 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cf6:	e04c      	b.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfe:	d048      	beq.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d00:	f7fe fc7c 	bl	80005fc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d902      	bls.n	8001d16 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13d      	bne.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d2e:	d111      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d38:	d004      	beq.n	8001d44 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d107      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5c:	d10f      	bne.n	8001d7e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e00f      	b.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1a3      	bne.n	8001cf8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af02      	add	r7, sp, #8
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dce:	d111      	bne.n	8001df4 <SPI_EndRxTransaction+0x3a>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	d004      	beq.n	8001de4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d107      	bne.n	8001df4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dfc:	d12a      	bne.n	8001e54 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d012      	beq.n	8001e2e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff67 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02d      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e026      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff ff54 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01a      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e013      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff41 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e000      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <SPI_EndRxTxTransaction+0x7c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <SPI_EndRxTxTransaction+0x80>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0d5b      	lsrs	r3, r3, #21
 8001e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eae:	d112      	bne.n	8001ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff ff13 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d0f2      	beq.n	8001ed6 <SPI_EndRxTxTransaction+0x52>
 8001ef0:	e000      	b.n	8001ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8001ef2:	bf00      	nop
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000030 	.word	0x20000030
 8001f04:	165e9f81 	.word	0x165e9f81

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01d      	b.n	8001f56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f005 fa34 	bl	800739c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 fba2 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e01d      	b.n	8001ff4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f815 	bl	8001ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f000 fb53 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e083      	b.n	800212c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f005 f935 	bl	80072a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f000 fb13 	bl	8002690 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4313      	orrs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020b0:	f023 030c 	bic.w	r3, r3, #12
 80020b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	4313      	orrs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4313      	orrs	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0202 	mvn.w	r2, #2
 8002160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa6b 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa5d 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fa6e 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0204 	mvn.w	r2, #4
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa41 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa33 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa44 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa17 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa09 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa1a 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b10      	cmp	r3, #16
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2208      	movs	r2, #8
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9ed 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f9df 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9f0 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0201 	mvn.w	r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f004 fe68 	bl	8006f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fccb 	bl	8002c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9b5 	bl	800267a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d10e      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d107      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0220 	mvn.w	r2, #32
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fc95 	bl	8002c66 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e0b4      	b.n	80024c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	f200 809f 	bhi.w	80024b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080024b5 	.word	0x080024b5
 8002384:	080024b5 	.word	0x080024b5
 8002388:	080024b5 	.word	0x080024b5
 800238c:	080023f1 	.word	0x080023f1
 8002390:	080024b5 	.word	0x080024b5
 8002394:	080024b5 	.word	0x080024b5
 8002398:	080024b5 	.word	0x080024b5
 800239c:	08002433 	.word	0x08002433
 80023a0:	080024b5 	.word	0x080024b5
 80023a4:	080024b5 	.word	0x080024b5
 80023a8:	080024b5 	.word	0x080024b5
 80023ac:	08002473 	.word	0x08002473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f9ea 	bl	8002790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0208 	orr.w	r2, r2, #8
 80023ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	619a      	str	r2, [r3, #24]
      break;
 80023ee:	e062      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fa30 	bl	800285c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	021a      	lsls	r2, r3, #8
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]
      break;
 8002430:	e041      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa7b 	bl	8002934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0208 	orr.w	r2, r2, #8
 800244c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69d9      	ldr	r1, [r3, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
      break;
 8002470:	e021      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fac5 	bl	8002a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	61da      	str	r2, [r3, #28]
      break;
 80024b2:	e000      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80024b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_ConfigClockSource+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0a6      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x166>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d067      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0x120>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d80b      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x6c>
 8002524:	2b10      	cmp	r3, #16
 8002526:	d073      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d802      	bhi.n	8002532 <HAL_TIM_ConfigClockSource+0x62>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d06f      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002530:	e078      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002532:	2b20      	cmp	r3, #32
 8002534:	d06c      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d06a      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800253a:	e073      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d00d      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x8c>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d804      	bhi.n	800254e <HAL_TIM_ConfigClockSource+0x7e>
 8002544:	2b50      	cmp	r3, #80	; 0x50
 8002546:	d033      	beq.n	80025b0 <HAL_TIM_ConfigClockSource+0xe0>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d041      	beq.n	80025d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800254c:	e06a      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d066      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x152>
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d017      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800255a:	e063      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f000 fb16 	bl	8002b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800257e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
      break;
 8002588:	e04c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f000 faff 	bl	8002b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e039      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	461a      	mov	r2, r3
 80025be:	f000 fa73 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2150      	movs	r1, #80	; 0x50
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 facc 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80025ce:	e029      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	461a      	mov	r2, r3
 80025de:	f000 fa92 	bl	8002b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2160      	movs	r1, #96	; 0x60
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fabc 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80025ee:	e019      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	461a      	mov	r2, r3
 80025fe:	f000 fa53 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	4618      	mov	r0, r3
 800260a:	f000 faac 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 800260e:	e009      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 faa3 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00f      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d00b      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a31      	ldr	r2, [pc, #196]	; (8002778 <TIM_Base_SetConfig+0xe8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a30      	ldr	r2, [pc, #192]	; (800277c <TIM_Base_SetConfig+0xec>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <TIM_Base_SetConfig+0xf0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01b      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d017      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <TIM_Base_SetConfig+0xe8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <TIM_Base_SetConfig+0xec>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a20      	ldr	r2, [pc, #128]	; (8002780 <TIM_Base_SetConfig+0xf0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <TIM_Base_SetConfig+0xf4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <TIM_Base_SetConfig+0xf8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <TIM_Base_SetConfig+0xfc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800

08002790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <TIM_OC1_SetConfig+0xc8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10c      	bne.n	8002806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0308 	bic.w	r3, r3, #8
 80027f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <TIM_OC1_SetConfig+0xc8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800281c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40010000 	.word	0x40010000

0800285c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0320 	bic.w	r3, r3, #32
 80028a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <TIM_OC2_SetConfig+0xd4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10d      	bne.n	80028d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <TIM_OC2_SetConfig+0xd4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d113      	bne.n	8002908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000

08002934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10d      	bne.n	80029ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40010000 	.word	0x40010000

08002a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	031b      	lsls	r3, r3, #12
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <TIM_OC4_SetConfig+0x9c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d109      	bne.n	8002a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 030a 	bic.w	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	031b      	lsls	r3, r3, #12
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e032      	b.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e03f      	b.n	8002d20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f004 fbed 	bl	8007494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f90c 	bl	8002ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 8083 	bne.w	8002e50 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Transmit+0x2e>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07b      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x40>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e074      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd fc3d 	bl	80005fc <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d90:	e042      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d122      	bne.n	8002df0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f850 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e046      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3302      	adds	r3, #2
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	e017      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	e013      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f82d 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e023      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	60ba      	str	r2, [r7, #8]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1b7      	bne.n	8002d92 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f814 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e00a      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6a:	e02c      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e72:	d028      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	f7fd fbbf 	bl	80005fc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d21d      	bcs.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e00f      	b.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d0c3      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f30:	f023 030c 	bic.w	r3, r3, #12
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	f040 80e4 	bne.w	8003128 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aab      	ldr	r2, [pc, #684]	; (8003214 <UART_SetConfig+0x324>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <UART_SetConfig+0x84>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4aaa      	ldr	r2, [pc, #680]	; (8003218 <UART_SetConfig+0x328>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d16c      	bne.n	800304e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f74:	f7fe fa2e 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4aa3      	ldr	r2, [pc, #652]	; (800321c <UART_SetConfig+0x32c>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	011c      	lsls	r4, r3, #4
 8002f98:	f7fe fa1c 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fb2:	f7fe fa0f 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	4a93      	ldr	r2, [pc, #588]	; (800321c <UART_SetConfig+0x32c>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	; 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1aeb      	subs	r3, r5, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	3332      	adds	r3, #50	; 0x32
 8002fe0:	4a8e      	ldr	r2, [pc, #568]	; (800321c <UART_SetConfig+0x32c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fee:	441c      	add	r4, r3
 8002ff0:	f7fe f9f0 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb2 f5f3 	udiv	r5, r2, r3
 800300a:	f7fe f9e3 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 800300e:	4602      	mov	r2, r0
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009a      	lsls	r2, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	4a7d      	ldr	r2, [pc, #500]	; (800321c <UART_SetConfig+0x32c>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	1aeb      	subs	r3, r5, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	3332      	adds	r3, #50	; 0x32
 8003038:	4a78      	ldr	r2, [pc, #480]	; (800321c <UART_SetConfig+0x32c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	f003 0207 	and.w	r2, r3, #7
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e154      	b.n	80032f8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800304e:	f7fe f9ad 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003052:	4602      	mov	r2, r0
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	4a6c      	ldr	r2, [pc, #432]	; (800321c <UART_SetConfig+0x32c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	011c      	lsls	r4, r3, #4
 8003072:	f7fe f99b 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003076:	4602      	mov	r2, r0
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fbb2 f5f3 	udiv	r5, r2, r3
 800308c:	f7fe f98e 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003090:	4602      	mov	r2, r0
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a5d      	ldr	r2, [pc, #372]	; (800321c <UART_SetConfig+0x32c>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2264      	movs	r2, #100	; 0x64
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	1aeb      	subs	r3, r5, r3
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a58      	ldr	r2, [pc, #352]	; (800321c <UART_SetConfig+0x32c>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c8:	441c      	add	r4, r3
 80030ca:	f7fe f96f 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80030e4:	f7fe f962 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	4a47      	ldr	r2, [pc, #284]	; (800321c <UART_SetConfig+0x32c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2264      	movs	r2, #100	; 0x64
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	1aeb      	subs	r3, r5, r3
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a42      	ldr	r2, [pc, #264]	; (800321c <UART_SetConfig+0x32c>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4422      	add	r2, r4
 8003124:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003126:	e0e7      	b.n	80032f8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a39      	ldr	r2, [pc, #228]	; (8003214 <UART_SetConfig+0x324>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <UART_SetConfig+0x24c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a38      	ldr	r2, [pc, #224]	; (8003218 <UART_SetConfig+0x328>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d171      	bne.n	8003220 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800313c:	f7fe f94a 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8003140:	4602      	mov	r2, r0
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4a31      	ldr	r2, [pc, #196]	; (800321c <UART_SetConfig+0x32c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	011c      	lsls	r4, r3, #4
 8003160:	f7fe f938 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8003164:	4602      	mov	r2, r0
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fbb2 f5f3 	udiv	r5, r2, r3
 800317a:	f7fe f92b 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <UART_SetConfig+0x32c>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2264      	movs	r2, #100	; 0x64
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	1aeb      	subs	r3, r5, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <UART_SetConfig+0x32c>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	441c      	add	r4, r3
 80031b6:	f7fe f90d 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80031d0:	f7fe f900 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4a0c      	ldr	r2, [pc, #48]	; (800321c <UART_SetConfig+0x32c>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2264      	movs	r2, #100	; 0x64
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	1aeb      	subs	r3, r5, r3
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <UART_SetConfig+0x32c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4422      	add	r2, r4
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	e071      	b.n	80032f8 <UART_SetConfig+0x408>
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003220:	f7fe f8c4 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003224:	4602      	mov	r2, r0
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4a31      	ldr	r2, [pc, #196]	; (8003300 <UART_SetConfig+0x410>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	011c      	lsls	r4, r3, #4
 8003244:	f7fe f8b2 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003248:	4602      	mov	r2, r0
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fbb2 f5f3 	udiv	r5, r2, r3
 800325e:	f7fe f8a5 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003262:	4602      	mov	r2, r0
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009a      	lsls	r2, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	4a21      	ldr	r2, [pc, #132]	; (8003300 <UART_SetConfig+0x410>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	; 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1aeb      	subs	r3, r5, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <UART_SetConfig+0x410>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	441c      	add	r4, r3
 800329a:	f7fe f887 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80032b4:	f7fe f87a 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <UART_SetConfig+0x410>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2264      	movs	r2, #100	; 0x64
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	1aeb      	subs	r3, r5, r3
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	3332      	adds	r3, #50	; 0x32
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <UART_SetConfig+0x410>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4422      	add	r2, r4
 80032f4:	609a      	str	r2, [r3, #8]
}
 80032f6:	e7ff      	b.n	80032f8 <UART_SetConfig+0x408>
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <WIZCHIP_READ+0x94>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <WIZCHIP_READ+0x94>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003318:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <WIZCHIP_READ+0x94>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <WIZCHIP_READ+0x24>
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <WIZCHIP_READ+0x94>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d114      	bne.n	8003352 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <WIZCHIP_READ+0x94>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	0c12      	lsrs	r2, r2, #16
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	4610      	mov	r0, r2
 8003334:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <WIZCHIP_READ+0x94>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	0a12      	lsrs	r2, r2, #8
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	4610      	mov	r0, r2
 8003342:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <WIZCHIP_READ+0x94>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	4610      	mov	r0, r2
 800334e:	4798      	blx	r3
 8003350:	e011      	b.n	8003376 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	b2db      	uxtb	r3, r3
 8003358:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	b2db      	uxtb	r3, r3
 8003360:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <WIZCHIP_READ+0x94>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f107 020c 	add.w	r2, r7, #12
 8003370:	2103      	movs	r1, #3
 8003372:	4610      	mov	r0, r2
 8003374:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <WIZCHIP_READ+0x94>)
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	4798      	blx	r3
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <WIZCHIP_READ+0x94>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <WIZCHIP_READ+0x94>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	4798      	blx	r3
   return ret;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000004 	.word	0x20000004

0800339c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4798      	blx	r3
   WIZCHIP.CS._select();
 80033ae:	4b21      	ldr	r3, [pc, #132]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d119      	bne.n	80033f8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	0c12      	lsrs	r2, r2, #16
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	4610      	mov	r0, r2
 80033d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	0a12      	lsrs	r2, r2, #8
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	4610      	mov	r0, r2
 80033de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	4610      	mov	r0, r2
 80033ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <WIZCHIP_WRITE+0x98>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	4610      	mov	r0, r2
 80033f4:	4798      	blx	r3
 80033f6:	e013      	b.n	8003420 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	b2db      	uxtb	r3, r3
 8003406:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <WIZCHIP_WRITE+0x98>)
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f107 020c 	add.w	r2, r7, #12
 800341a:	2104      	movs	r1, #4
 800341c:	4610      	mov	r0, r2
 800341e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <WIZCHIP_WRITE+0x98>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003426:	4b03      	ldr	r3, [pc, #12]	; (8003434 <WIZCHIP_WRITE+0x98>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4798      	blx	r3
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000004 	.word	0x20000004

08003438 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <WIZCHIP_READ_BUF+0x2a>
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d126      	bne.n	80034b0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	0c12      	lsrs	r2, r2, #16
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	0a12      	lsrs	r2, r2, #8
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4610      	mov	r0, r2
 800347c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	4610      	mov	r0, r2
 8003488:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800348a:	2300      	movs	r3, #0
 800348c:	82fb      	strh	r3, [r7, #22]
 800348e:	e00a      	b.n	80034a6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	8afa      	ldrh	r2, [r7, #22]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	188c      	adds	r4, r1, r2
 800349a:	4798      	blx	r3
 800349c:	4603      	mov	r3, r0
 800349e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80034a0:	8afb      	ldrh	r3, [r7, #22]
 80034a2:	3301      	adds	r3, #1
 80034a4:	82fb      	strh	r3, [r7, #22]
 80034a6:	8afa      	ldrh	r2, [r7, #22]
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3f0      	bcc.n	8003490 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80034ae:	e017      	b.n	80034e0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	f107 0210 	add.w	r2, r7, #16
 80034ce:	2103      	movs	r1, #3
 80034d0:	4610      	mov	r0, r2
 80034d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	4611      	mov	r1, r2
 80034dc:	68b8      	ldr	r0, [r7, #8]
 80034de:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80034e6:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <WIZCHIP_READ_BUF+0xbc>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4798      	blx	r3
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	20000004 	.word	0x20000004

080034f8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003506:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800350c:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d126      	bne.n	8003570 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	0c12      	lsrs	r2, r2, #16
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	4610      	mov	r0, r2
 800352e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	0a12      	lsrs	r2, r2, #8
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	4610      	mov	r0, r2
 800353c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	4610      	mov	r0, r2
 8003548:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	82fb      	strh	r3, [r7, #22]
 800354e:	e00a      	b.n	8003566 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	8afa      	ldrh	r2, [r7, #22]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	440a      	add	r2, r1
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	4610      	mov	r0, r2
 800355e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003560:	8afb      	ldrh	r3, [r7, #22]
 8003562:	3301      	adds	r3, #1
 8003564:	82fb      	strh	r3, [r7, #22]
 8003566:	8afa      	ldrh	r2, [r7, #22]
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3f0      	bcc.n	8003550 <WIZCHIP_WRITE_BUF+0x58>
 800356e:	e017      	b.n	80035a0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b2db      	uxtb	r3, r3
 8003576:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	b2db      	uxtb	r3, r3
 800357e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f107 0210 	add.w	r2, r7, #16
 800358e:	2103      	movs	r1, #3
 8003590:	4610      	mov	r0, r2
 8003592:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	4611      	mov	r1, r2
 800359c:	68b8      	ldr	r0, [r7, #8]
 800359e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80035a6:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <WIZCHIP_WRITE_BUF+0xbc>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4798      	blx	r3
}
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000004 	.word	0x20000004

080035b8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	81fb      	strh	r3, [r7, #14]
 80035c6:	2300      	movs	r3, #0
 80035c8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	3301      	adds	r3, #1
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fe94 	bl	8003304 <WIZCHIP_READ>
 80035dc:	4603      	mov	r3, r0
 80035de:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80035e0:	89bb      	ldrh	r3, [r7, #12]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	b29c      	uxth	r4, r3
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	3301      	adds	r3, #1
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fe86 	bl	8003304 <WIZCHIP_READ>
 80035f8:	4603      	mov	r3, r0
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4423      	add	r3, r4
 80035fe:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003600:	89bb      	ldrh	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01a      	beq.n	800363c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3301      	adds	r3, #1
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fe76 	bl	8003304 <WIZCHIP_READ>
 8003618:	4603      	mov	r3, r0
 800361a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800361c:	89fb      	ldrh	r3, [r7, #14]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	b29c      	uxth	r4, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3301      	adds	r3, #1
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fe68 	bl	8003304 <WIZCHIP_READ>
 8003634:	4603      	mov	r3, r0
 8003636:	b29b      	uxth	r3, r3
 8003638:	4423      	add	r3, r4
 800363a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800363c:	89fa      	ldrh	r2, [r7, #14]
 800363e:	89bb      	ldrh	r3, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d1c2      	bne.n	80035ca <getSn_TX_FSR+0x12>
   return val;
 8003644:	89fb      	ldrh	r3, [r7, #14]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bd90      	pop	{r4, r7, pc}

0800364e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800364e:	b590      	push	{r4, r7, lr}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003658:	2300      	movs	r3, #0
 800365a:	81fb      	strh	r3, [r7, #14]
 800365c:	2300      	movs	r3, #0
 800365e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3301      	adds	r3, #1
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fe49 	bl	8003304 <WIZCHIP_READ>
 8003672:	4603      	mov	r3, r0
 8003674:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003676:	89bb      	ldrh	r3, [r7, #12]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	b29c      	uxth	r4, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3301      	adds	r3, #1
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fe3b 	bl	8003304 <WIZCHIP_READ>
 800368e:	4603      	mov	r3, r0
 8003690:	b29b      	uxth	r3, r3
 8003692:	4423      	add	r3, r4
 8003694:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003696:	89bb      	ldrh	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01a      	beq.n	80036d2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3301      	adds	r3, #1
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fe2b 	bl	8003304 <WIZCHIP_READ>
 80036ae:	4603      	mov	r3, r0
 80036b0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	b29c      	uxth	r4, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3301      	adds	r3, #1
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fe1d 	bl	8003304 <WIZCHIP_READ>
 80036ca:	4603      	mov	r3, r0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	4423      	add	r3, r4
 80036d0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80036d2:	89fa      	ldrh	r2, [r7, #14]
 80036d4:	89bb      	ldrh	r3, [r7, #12]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d1c2      	bne.n	8003660 <getSn_RX_RSR+0x12>
   return val;
 80036da:	89fb      	ldrh	r3, [r7, #14]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}

080036e4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
 80036f0:	4613      	mov	r3, r2
 80036f2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80036fc:	88bb      	ldrh	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d048      	beq.n	8003794 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	3301      	adds	r3, #1
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fdf8 	bl	8003304 <WIZCHIP_READ>
 8003714:	4603      	mov	r3, r0
 8003716:	b29b      	uxth	r3, r3
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	b29c      	uxth	r4, r3
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	3301      	adds	r3, #1
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fdeb 	bl	8003304 <WIZCHIP_READ>
 800372e:	4603      	mov	r3, r0
 8003730:	b29b      	uxth	r3, r3
 8003732:	4423      	add	r3, r4
 8003734:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	79fa      	ldrb	r2, [r7, #7]
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	3202      	adds	r2, #2
 8003740:	00d2      	lsls	r2, r2, #3
 8003742:	4413      	add	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003746:	88bb      	ldrh	r3, [r7, #4]
 8003748:	461a      	mov	r2, r3
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f7ff fed3 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003752:	89fa      	ldrh	r2, [r7, #14]
 8003754:	88bb      	ldrh	r3, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3301      	adds	r3, #1
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003766:	461a      	mov	r2, r3
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	b29b      	uxth	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7ff fe12 	bl	800339c <WIZCHIP_WRITE>
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3301      	adds	r3, #1
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003784:	461a      	mov	r2, r3
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff fe05 	bl	800339c <WIZCHIP_WRITE>
 8003792:	e000      	b.n	8003796 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003794:	bf00      	nop
}
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}

0800379c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
 80037a8:	4613      	mov	r3, r2
 80037aa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80037b4:	88bb      	ldrh	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d048      	beq.n	800384c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3301      	adds	r3, #1
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fd9c 	bl	8003304 <WIZCHIP_READ>
 80037cc:	4603      	mov	r3, r0
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	b29c      	uxth	r4, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	3301      	adds	r3, #1
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fd8f 	bl	8003304 <WIZCHIP_READ>
 80037e6:	4603      	mov	r3, r0
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4423      	add	r3, r4
 80037ec:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	79fa      	ldrb	r2, [r7, #7]
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	3203      	adds	r2, #3
 80037f8:	00d2      	lsls	r2, r2, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80037fe:	88bb      	ldrh	r3, [r7, #4]
 8003800:	461a      	mov	r2, r3
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	68b8      	ldr	r0, [r7, #8]
 8003806:	f7ff fe17 	bl	8003438 <WIZCHIP_READ_BUF>
   ptr += len;
 800380a:	89fa      	ldrh	r2, [r7, #14]
 800380c:	88bb      	ldrh	r3, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	3301      	adds	r3, #1
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800381e:	461a      	mov	r2, r3
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7ff fdb6 	bl	800339c <WIZCHIP_WRITE>
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3301      	adds	r3, #1
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800383c:	461a      	mov	r2, r3
 800383e:	89fb      	ldrh	r3, [r7, #14]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7ff fda9 	bl	800339c <WIZCHIP_WRITE>
 800384a:	e000      	b.n	800384e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800384c:	bf00      	nop
}
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4623      	mov	r3, r4
 8003864:	71fb      	strb	r3, [r7, #7]
 8003866:	4603      	mov	r3, r0
 8003868:	71bb      	strb	r3, [r7, #6]
 800386a:	460b      	mov	r3, r1
 800386c:	80bb      	strh	r3, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d902      	bls.n	800387e <socket+0x2a>
 8003878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800387c:	e0f1      	b.n	8003a62 <socket+0x20e>
	switch(protocol)
 800387e:	79bb      	ldrb	r3, [r7, #6]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d004      	beq.n	800388e <socket+0x3a>
 8003884:	2b01      	cmp	r3, #1
 8003886:	db10      	blt.n	80038aa <socket+0x56>
 8003888:	2b04      	cmp	r3, #4
 800388a:	dc0e      	bgt.n	80038aa <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800388c:	e010      	b.n	80038b0 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 800388e:	f107 030c 	add.w	r3, r7, #12
 8003892:	2204      	movs	r2, #4
 8003894:	4619      	mov	r1, r3
 8003896:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800389a:	f7ff fdcd 	bl	8003438 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <socket+0x5c>
 80038a4:	f06f 0302 	mvn.w	r3, #2
 80038a8:	e0db      	b.n	8003a62 <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80038aa:	f06f 0304 	mvn.w	r3, #4
 80038ae:	e0d8      	b.n	8003a62 <socket+0x20e>
         break;
 80038b0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <socket+0x6e>
 80038bc:	f06f 0305 	mvn.w	r3, #5
 80038c0:	e0cf      	b.n	8003a62 <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d025      	beq.n	8003914 <socket+0xc0>
	{
   	switch(protocol)
 80038c8:	79bb      	ldrb	r3, [r7, #6]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d002      	beq.n	80038d4 <socket+0x80>
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d008      	beq.n	80038e4 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80038d2:	e024      	b.n	800391e <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11c      	bne.n	8003918 <socket+0xc4>
 80038de:	f06f 0305 	mvn.w	r3, #5
 80038e2:	e0be      	b.n	8003a62 <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80038ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	db02      	blt.n	80038fc <socket+0xa8>
 80038f6:	f06f 0305 	mvn.w	r3, #5
 80038fa:	e0b2      	b.n	8003a62 <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db06      	blt.n	800391c <socket+0xc8>
 800390e:	f06f 0305 	mvn.w	r3, #5
 8003912:	e0a6      	b.n	8003a62 <socket+0x20e>
   	}
   }
 8003914:	bf00      	nop
 8003916:	e002      	b.n	800391e <socket+0xca>
   	      break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <socket+0xca>
   	      break;
 800391c:	bf00      	nop
	close(sn);
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f8ad 	bl	8003a80 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	3301      	adds	r3, #1
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4618      	mov	r0, r3
 8003930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003934:	f023 030f 	bic.w	r3, r3, #15
 8003938:	b25a      	sxtb	r2, r3
 800393a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800393e:	4313      	orrs	r3, r2
 8003940:	b25b      	sxtb	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	f7ff fd29 	bl	800339c <WIZCHIP_WRITE>
    #endif
	if(!port)
 800394a:	88bb      	ldrh	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d110      	bne.n	8003972 <socket+0x11e>
	{
	   port = sock_any_port++;
 8003950:	4b46      	ldr	r3, [pc, #280]	; (8003a6c <socket+0x218>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	b291      	uxth	r1, r2
 8003958:	4a44      	ldr	r2, [pc, #272]	; (8003a6c <socket+0x218>)
 800395a:	8011      	strh	r1, [r2, #0]
 800395c:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800395e:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <socket+0x218>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003966:	4293      	cmp	r3, r2
 8003968:	d103      	bne.n	8003972 <socket+0x11e>
 800396a:	4b40      	ldr	r3, [pc, #256]	; (8003a6c <socket+0x218>)
 800396c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003970:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3301      	adds	r3, #1
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800397e:	461a      	mov	r2, r3
 8003980:	88bb      	ldrh	r3, [r7, #4]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b29b      	uxth	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7ff fd06 	bl	800339c <WIZCHIP_WRITE>
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	3301      	adds	r3, #1
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	461a      	mov	r2, r3
 800399e:	88bb      	ldrh	r3, [r7, #4]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7ff fcf9 	bl	800339c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	3301      	adds	r3, #1
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fcef 	bl	800339c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80039be:	bf00      	nop
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	3301      	adds	r3, #1
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fc99 	bl	8003304 <WIZCHIP_READ>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f3      	bne.n	80039c0 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	2201      	movs	r2, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	b21a      	sxth	r2, r3
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <socket+0x21c>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	4013      	ands	r3, r2
 80039ee:	b21b      	sxth	r3, r3
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <socket+0x21c>)
 80039f4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 0201 	and.w	r2, r3, #1
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	b21a      	sxth	r2, r3
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <socket+0x21c>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <socket+0x21c>)
 8003a12:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2201      	movs	r2, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	b21b      	sxth	r3, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <socket+0x220>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <socket+0x220>)
 8003a30:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <socket+0x224>)
 8003a36:	2100      	movs	r1, #0
 8003a38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <socket+0x228>)
 8003a40:	2100      	movs	r1, #0
 8003a42:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003a44:	bf00      	nop
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fc56 	bl	8003304 <WIZCHIP_READ>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f3      	beq.n	8003a46 <socket+0x1f2>
   return (int8_t)sn;
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000002 	.word	0x20000002
 8003a70:	200000b4 	.word	0x200000b4
 8003a74:	200000b6 	.word	0x200000b6
 8003a78:	200000b8 	.word	0x200000b8
 8003a7c:	200000c8 	.word	0x200000c8

08003a80 <close>:

int8_t close(uint8_t sn)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d902      	bls.n	8003a96 <close+0x16>
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a94:	e055      	b.n	8003b42 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fc79 	bl	800339c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003aaa:	bf00      	nop
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fc23 	bl	8003304 <WIZCHIP_READ>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f3      	bne.n	8003aac <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3301      	adds	r3, #1
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ad0:	211f      	movs	r1, #31
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fc62 	bl	800339c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	2201      	movs	r2, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	b21b      	sxth	r3, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	b21a      	sxth	r2, r3
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <close+0xcc>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b21b      	sxth	r3, r3
 8003aec:	4013      	ands	r3, r2
 8003aee:	b21b      	sxth	r3, r3
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <close+0xcc>)
 8003af4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2201      	movs	r2, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	b21a      	sxth	r2, r3
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <close+0xd0>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <close+0xd0>)
 8003b12:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4a0f      	ldr	r2, [pc, #60]	; (8003b54 <close+0xd4>)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <close+0xd8>)
 8003b22:	2100      	movs	r1, #0
 8003b24:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003b26:	bf00      	nop
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fbe5 	bl	8003304 <WIZCHIP_READ>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f3      	bne.n	8003b28 <close+0xa8>
	return SOCK_OK;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200000b4 	.word	0x200000b4
 8003b50:	200000b6 	.word	0x200000b6
 8003b54:	200000b8 	.word	0x200000b8
 8003b58:	200000c8 	.word	0x200000c8

08003b5c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d902      	bls.n	8003b78 <connect+0x1c>
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b76:	e0c6      	b.n	8003d06 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fbbf 	bl	8003304 <WIZCHIP_READ>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <connect+0x3a>
 8003b90:	f06f 0304 	mvn.w	r3, #4
 8003b94:	e0b7      	b.n	8003d06 <connect+0x1aa>
   CHECK_SOCKINIT();
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fbae 	bl	8003304 <WIZCHIP_READ>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b13      	cmp	r3, #19
 8003bac:	d002      	beq.n	8003bb4 <connect+0x58>
 8003bae:	f06f 0302 	mvn.w	r3, #2
 8003bb2:	e0a8      	b.n	8003d06 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	3201      	adds	r2, #1
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	3202      	adds	r2, #2
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	3203      	adds	r2, #3
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bea:	d002      	beq.n	8003bf2 <connect+0x96>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <connect+0x9c>
 8003bf2:	f06f 030b 	mvn.w	r3, #11
 8003bf6:	e086      	b.n	8003d06 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003bf8:	88bb      	ldrh	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <connect+0xa8>
 8003bfe:	f06f 030a 	mvn.w	r3, #10
 8003c02:	e080      	b.n	8003d06 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	3301      	adds	r3, #1
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003c10:	2204      	movs	r2, #4
 8003c12:	6839      	ldr	r1, [r7, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fc6f 	bl	80034f8 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	3301      	adds	r3, #1
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c26:	461a      	mov	r2, r3
 8003c28:	88bb      	ldrh	r3, [r7, #4]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7ff fbb2 	bl	800339c <WIZCHIP_WRITE>
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c44:	461a      	mov	r2, r3
 8003c46:	88bb      	ldrh	r3, [r7, #4]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f7ff fba5 	bl	800339c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	3301      	adds	r3, #1
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c5e:	2104      	movs	r1, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fb9b 	bl	800339c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003c66:	bf00      	nop
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fb45 	bl	8003304 <WIZCHIP_READ>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f3      	bne.n	8003c68 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <connect+0x1b4>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	fa42 f303 	asr.w	r3, r2, r3
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02b      	beq.n	8003cec <connect+0x190>
 8003c94:	2300      	movs	r3, #0
 8003c96:	e036      	b.n	8003d06 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fb2d 	bl	8003304 <WIZCHIP_READ>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3301      	adds	r3, #1
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003cc0:	2108      	movs	r1, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fb6a 	bl	800339c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003cc8:	f06f 030c 	mvn.w	r3, #12
 8003ccc:	e01b      	b.n	8003d06 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fb12 	bl	8003304 <WIZCHIP_READ>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8003ce6:	f06f 0303 	mvn.w	r3, #3
 8003cea:	e00c      	b.n	8003d06 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fb03 	bl	8003304 <WIZCHIP_READ>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b17      	cmp	r3, #23
 8003d02:	d1c9      	bne.n	8003c98 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003d04:	2301      	movs	r3, #1
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200000b4 	.word	0x200000b4

08003d14 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d902      	bls.n	8003d38 <send+0x24>
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d36:	e0de      	b.n	8003ef6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fadf 	bl	8003304 <WIZCHIP_READ>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d002      	beq.n	8003d56 <send+0x42>
 8003d50:	f06f 0304 	mvn.w	r3, #4
 8003d54:	e0cf      	b.n	8003ef6 <send+0x1e2>
   CHECK_SOCKDATA();
 8003d56:	88bb      	ldrh	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <send+0x4e>
 8003d5c:	f06f 030d 	mvn.w	r3, #13
 8003d60:	e0c9      	b.n	8003ef6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	3301      	adds	r3, #1
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fac8 	bl	8003304 <WIZCHIP_READ>
 8003d74:	4603      	mov	r3, r0
 8003d76:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b17      	cmp	r3, #23
 8003d7c:	d005      	beq.n	8003d8a <send+0x76>
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b1c      	cmp	r3, #28
 8003d82:	d002      	beq.n	8003d8a <send+0x76>
 8003d84:	f06f 0306 	mvn.w	r3, #6
 8003d88:	e0b5      	b.n	8003ef6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <send+0x1ec>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	fa42 f303 	asr.w	r3, r2, r3
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d039      	beq.n	8003e12 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3301      	adds	r3, #1
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff faaa 	bl	8003304 <WIZCHIP_READ>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003dce:	2110      	movs	r1, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fae3 	bl	800339c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	b21b      	sxth	r3, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	b21a      	sxth	r2, r3
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <send+0x1ec>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	4013      	ands	r3, r2
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <send+0x1ec>)
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	e00d      	b.n	8003e12 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <send+0xfa>
      {
         close(sn);
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fe3c 	bl	8003a80 <close>
         return SOCKERR_TIMEOUT;
 8003e08:	f06f 030c 	mvn.w	r3, #12
 8003e0c:	e073      	b.n	8003ef6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e071      	b.n	8003ef6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	3301      	adds	r3, #1
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fa70 	bl	8003304 <WIZCHIP_READ>
 8003e24:	4603      	mov	r3, r0
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003e2c:	88ba      	ldrh	r2, [r7, #4]
 8003e2e:	89bb      	ldrh	r3, [r7, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d901      	bls.n	8003e38 <send+0x124>
 8003e34:	89bb      	ldrh	r3, [r7, #12]
 8003e36:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fbbc 	bl	80035b8 <getSn_TX_FSR>
 8003e40:	4603      	mov	r3, r0
 8003e42:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3301      	adds	r3, #1
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fa57 	bl	8003304 <WIZCHIP_READ>
 8003e56:	4603      	mov	r3, r0
 8003e58:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b17      	cmp	r3, #23
 8003e5e:	d009      	beq.n	8003e74 <send+0x160>
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b1c      	cmp	r3, #28
 8003e64:	d006      	beq.n	8003e74 <send+0x160>
      {
         close(sn);
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fe09 	bl	8003a80 <close>
         return SOCKERR_SOCKSTATUS;
 8003e6e:	f06f 0306 	mvn.w	r3, #6
 8003e72:	e040      	b.n	8003ef6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <send+0x1f0>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	fa42 f303 	asr.w	r3, r2, r3
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <send+0x180>
 8003e88:	88ba      	ldrh	r2, [r7, #4]
 8003e8a:	89bb      	ldrh	r3, [r7, #12]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d901      	bls.n	8003e94 <send+0x180>
 8003e90:	2300      	movs	r3, #0
 8003e92:	e030      	b.n	8003ef6 <send+0x1e2>
      if(len <= freesize) break;
 8003e94:	88ba      	ldrh	r2, [r7, #4]
 8003e96:	89bb      	ldrh	r3, [r7, #12]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d900      	bls.n	8003e9e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003e9c:	e7cc      	b.n	8003e38 <send+0x124>
      if(len <= freesize) break;
 8003e9e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003ea0:	88ba      	ldrh	r2, [r7, #4]
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fc1c 	bl	80036e4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003eb8:	2120      	movs	r1, #32
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fa6e 	bl	800339c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003ec0:	bf00      	nop
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fa18 	bl	8003304 <WIZCHIP_READ>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f3      	bne.n	8003ec2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2201      	movs	r2, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	b21a      	sxth	r2, r3
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <send+0x1ec>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <send+0x1ec>)
 8003ef2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200000b6 	.word	0x200000b6
 8003f04:	200000b4 	.word	0x200000b4

08003f08 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d902      	bls.n	8003f2c <recv+0x24>
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f2a:	e09c      	b.n	8004066 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3301      	adds	r3, #1
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff f9e5 	bl	8003304 <WIZCHIP_READ>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d002      	beq.n	8003f4a <recv+0x42>
 8003f44:	f06f 0304 	mvn.w	r3, #4
 8003f48:	e08d      	b.n	8004066 <recv+0x15e>
   CHECK_SOCKDATA();
 8003f4a:	88bb      	ldrh	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <recv+0x4e>
 8003f50:	f06f 030d 	mvn.w	r3, #13
 8003f54:	e087      	b.n	8004066 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f9ce 	bl	8003304 <WIZCHIP_READ>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003f70:	89ba      	ldrh	r2, [r7, #12]
 8003f72:	88bb      	ldrh	r3, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d201      	bcs.n	8003f7c <recv+0x74>
 8003f78:	89bb      	ldrh	r3, [r7, #12]
 8003f7a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fb65 	bl	800364e <getSn_RX_RSR>
 8003f84:	4603      	mov	r3, r0
 8003f86:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff f9b5 	bl	8003304 <WIZCHIP_READ>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b17      	cmp	r3, #23
 8003fa2:	d026      	beq.n	8003ff2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b1c      	cmp	r3, #28
 8003fa8:	d11c      	bne.n	8003fe4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8003faa:	89bb      	ldrh	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d133      	bne.n	8004018 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fb00 	bl	80035b8 <getSn_TX_FSR>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	461c      	mov	r4, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff f99b 	bl	8003304 <WIZCHIP_READ>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d10d      	bne.n	8003ff2 <recv+0xea>
               {
                  close(sn);
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fd51 	bl	8003a80 <close>
                  return SOCKERR_SOCKSTATUS;
 8003fde:	f06f 0306 	mvn.w	r3, #6
 8003fe2:	e040      	b.n	8004066 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fd4a 	bl	8003a80 <close>
               return SOCKERR_SOCKSTATUS;
 8003fec:	f06f 0306 	mvn.w	r3, #6
 8003ff0:	e039      	b.n	8004066 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <recv+0x168>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	fa42 f303 	asr.w	r3, r2, r3
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <recv+0x108>
 8004006:	89bb      	ldrh	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <recv+0x108>
 800400c:	2300      	movs	r3, #0
 800400e:	e02a      	b.n	8004066 <recv+0x15e>
         if(recvsize != 0) break;
 8004010:	89bb      	ldrh	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8004016:	e7b1      	b.n	8003f7c <recv+0x74>
               if(recvsize != 0) break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <recv+0x116>
         if(recvsize != 0) break;
 800401c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800401e:	89ba      	ldrh	r2, [r7, #12]
 8004020:	88bb      	ldrh	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d201      	bcs.n	800402a <recv+0x122>
 8004026:	89bb      	ldrh	r3, [r7, #12]
 8004028:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800402a:	88ba      	ldrh	r2, [r7, #4]
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fbb3 	bl	800379c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	3301      	adds	r3, #1
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004042:	2140      	movs	r1, #64	; 0x40
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff f9a9 	bl	800339c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800404a:	bf00      	nop
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3301      	adds	r3, #1
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f953 	bl	8003304 <WIZCHIP_READ>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f3      	bne.n	800404c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004064:	88bb      	ldrh	r3, [r7, #4]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bd90      	pop	{r4, r7, pc}
 800406e:	bf00      	nop
 8004070:	200000b4 	.word	0x200000b4

08004074 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	70fb      	strb	r3, [r7, #3]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	2300      	movs	r3, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	807b      	strh	r3, [r7, #2]
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	807b      	strh	r3, [r7, #2]
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <reg_wizchip_cs_cbfunc+0x16>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <reg_wizchip_cs_cbfunc+0x3c>)
 8004154:	4a09      	ldr	r2, [pc, #36]	; (800417c <reg_wizchip_cs_cbfunc+0x40>)
 8004156:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <reg_wizchip_cs_cbfunc+0x3c>)
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <reg_wizchip_cs_cbfunc+0x44>)
 800415c:	615a      	str	r2, [r3, #20]
 800415e:	e005      	b.n	800416c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004160:	4a05      	ldr	r2, [pc, #20]	; (8004178 <reg_wizchip_cs_cbfunc+0x3c>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <reg_wizchip_cs_cbfunc+0x3c>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6153      	str	r3, [r2, #20]
   }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000004 	.word	0x20000004
 800417c:	08004091 	.word	0x08004091
 8004180:	0800409f 	.word	0x0800409f

08004184 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800418e:	bf00      	nop
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f9      	beq.n	8004190 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <reg_wizchip_spi_cbfunc+0x24>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <reg_wizchip_spi_cbfunc+0x50>)
 80041ac:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <reg_wizchip_spi_cbfunc+0x54>)
 80041b2:	61da      	str	r2, [r3, #28]
 80041b4:	e005      	b.n	80041c2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80041b6:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	61d3      	str	r3, [r2, #28]
   }
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000004 	.word	0x20000004
 80041d4:	080040e5 	.word	0x080040e5
 80041d8:	080040f5 	.word	0x080040f5

080041dc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80041e6:	bf00      	nop
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f9      	beq.n	80041e8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <reg_wizchip_spiburst_cbfunc+0x24>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <reg_wizchip_spiburst_cbfunc+0x50>)
 8004204:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004208:	4a09      	ldr	r2, [pc, #36]	; (8004230 <reg_wizchip_spiburst_cbfunc+0x54>)
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
 800420c:	e005      	b.n	800421a <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800420e:	4a06      	ldr	r2, [pc, #24]	; (8004228 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004214:	4a04      	ldr	r2, [pc, #16]	; (8004228 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000004 	.word	0x20000004
 800422c:	0800410b 	.word	0x0800410b
 8004230:	08004123 	.word	0x08004123

08004234 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	2206      	movs	r2, #6
 800423e:	4619      	mov	r1, r3
 8004240:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004244:	f7ff f8f8 	bl	8003438 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	2204      	movs	r2, #4
 800424e:	4619      	mov	r1, r3
 8004250:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004254:	f7ff f8f0 	bl	8003438 <WIZCHIP_READ_BUF>
 8004258:	f107 0310 	add.w	r3, r7, #16
 800425c:	2204      	movs	r2, #4
 800425e:	4619      	mov	r1, r3
 8004260:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004264:	f7ff f8e8 	bl	8003438 <WIZCHIP_READ_BUF>
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	2204      	movs	r2, #4
 800426e:	4619      	mov	r1, r3
 8004270:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004274:	f7ff f8e0 	bl	8003438 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	2000      	movs	r0, #0
 800427c:	f7ff f88e 	bl	800339c <WIZCHIP_WRITE>
   getMR(); // for delay
 8004280:	2000      	movs	r0, #0
 8004282:	f7ff f83f 	bl	8003304 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	2206      	movs	r2, #6
 800428a:	4619      	mov	r1, r3
 800428c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004290:	f7ff f932 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	2204      	movs	r2, #4
 800429a:	4619      	mov	r1, r3
 800429c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042a0:	f7ff f92a 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80042a4:	f107 0310 	add.w	r3, r7, #16
 80042a8:	2204      	movs	r2, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80042b0:	f7ff f922 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	2204      	movs	r2, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80042c0:	f7ff f91a 	bl	80034f8 <WIZCHIP_WRITE_BUF>
}
 80042c4:	bf00      	nop
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80042da:	f7ff ffab 	bl	8004234 <wizchip_sw_reset>
   if(txsize)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d03b      	beq.n	800435c <wizchip_init+0x90>
   {
      tmp = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e015      	b.n	800431a <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 80042ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	7bbb      	ldrb	r3, [r7, #14]
 80042fa:	4413      	add	r3, r2
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004304:	2b10      	cmp	r3, #16
 8004306:	dd02      	ble.n	800430e <wizchip_init+0x42>
 8004308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800430c:	e066      	b.n	80043dc <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800430e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431e:	2b07      	cmp	r3, #7
 8004320:	dde5      	ble.n	80042ee <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
 8004326:	e015      	b.n	8004354 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	3301      	adds	r3, #1
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004336:	4618      	mov	r0, r3
 8004338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	f7ff f82a 	bl	800339c <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3301      	adds	r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004358:	2b07      	cmp	r3, #7
 800435a:	dde5      	ble.n	8004328 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d03b      	beq.n	80043da <wizchip_init+0x10e>
   {
      tmp = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	e015      	b.n	8004398 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 800436c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4413      	add	r3, r2
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	4413      	add	r3, r2
 800437a:	b2db      	uxtb	r3, r3
 800437c:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800437e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004382:	2b10      	cmp	r3, #16
 8004384:	dd02      	ble.n	800438c <wizchip_init+0xc0>
 8004386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800438a:	e027      	b.n	80043dc <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	3301      	adds	r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439c:	2b07      	cmp	r3, #7
 800439e:	dde5      	ble.n	800436c <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e015      	b.n	80043d2 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80043a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	3301      	adds	r3, #1
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80043b4:	4618      	mov	r0, r3
 80043b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7fe ffeb 	bl	800339c <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d6:	2b07      	cmp	r3, #7
 80043d8:	dde5      	ble.n	80043a6 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2206      	movs	r2, #6
 80043f0:	4619      	mov	r1, r3
 80043f2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80043f6:	f7ff f87f 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	330e      	adds	r3, #14
 80043fe:	2204      	movs	r2, #4
 8004400:	4619      	mov	r1, r3
 8004402:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004406:	f7ff f877 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	330a      	adds	r3, #10
 800440e:	2204      	movs	r2, #4
 8004410:	4619      	mov	r1, r3
 8004412:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004416:	f7ff f86f 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3306      	adds	r3, #6
 800441e:	2204      	movs	r2, #4
 8004420:	4619      	mov	r1, r3
 8004422:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004426:	f7ff f867 	bl	80034f8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7c9a      	ldrb	r2, [r3, #18]
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <wizchip_setnetinfo+0x78>)
 8004430:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7cda      	ldrb	r2, [r3, #19]
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <wizchip_setnetinfo+0x78>)
 8004438:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7d1a      	ldrb	r2, [r3, #20]
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <wizchip_setnetinfo+0x78>)
 8004440:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7d5a      	ldrb	r2, [r3, #21]
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <wizchip_setnetinfo+0x78>)
 8004448:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7d9a      	ldrb	r2, [r3, #22]
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <wizchip_setnetinfo+0x7c>)
 8004450:	701a      	strb	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200000d0 	.word	0x200000d0
 8004460:	200000d4 	.word	0x200000d4

08004464 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2206      	movs	r2, #6
 8004470:	4619      	mov	r1, r3
 8004472:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004476:	f7fe ffdf 	bl	8003438 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	330e      	adds	r3, #14
 800447e:	2204      	movs	r2, #4
 8004480:	4619      	mov	r1, r3
 8004482:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004486:	f7fe ffd7 	bl	8003438 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	330a      	adds	r3, #10
 800448e:	2204      	movs	r2, #4
 8004490:	4619      	mov	r1, r3
 8004492:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004496:	f7fe ffcf 	bl	8003438 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3306      	adds	r3, #6
 800449e:	2204      	movs	r2, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80044a6:	f7fe ffc7 	bl	8003438 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <wizchip_getnetinfo+0x78>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <wizchip_getnetinfo+0x78>)
 80044b4:	785a      	ldrb	r2, [r3, #1]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <wizchip_getnetinfo+0x78>)
 80044bc:	789a      	ldrb	r2, [r3, #2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <wizchip_getnetinfo+0x78>)
 80044c4:	78da      	ldrb	r2, [r3, #3]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <wizchip_getnetinfo+0x7c>)
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	759a      	strb	r2, [r3, #22]
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200000d0 	.word	0x200000d0
 80044e0:	200000d4 	.word	0x200000d4

080044e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044f6:	2b84      	cmp	r3, #132	; 0x84
 80044f8:	d005      	beq.n	8004506 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	3303      	adds	r3, #3
 8004504:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004518:	f000 fe7c 	bl	8005214 <vTaskStartScheduler>
  
  return osOK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	bd80      	pop	{r7, pc}

08004522 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004524:	b089      	sub	sp, #36	; 0x24
 8004526:	af04      	add	r7, sp, #16
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <osThreadCreate+0x54>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01c      	beq.n	8004576 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685c      	ldr	r4, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681d      	ldr	r5, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691e      	ldr	r6, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ffc8 	bl	80044e4 <makeFreeRtosPriority>
 8004554:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800455e:	9202      	str	r2, [sp, #8]
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	9100      	str	r1, [sp, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4632      	mov	r2, r6
 8004568:	4629      	mov	r1, r5
 800456a:	4620      	mov	r0, r4
 800456c:	f000 fc98 	bl	8004ea0 <xTaskCreateStatic>
 8004570:	4603      	mov	r3, r0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e01c      	b.n	80045b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685c      	ldr	r4, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004582:	b29e      	uxth	r6, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ffaa 	bl	80044e4 <makeFreeRtosPriority>
 8004590:	4602      	mov	r2, r0
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	9200      	str	r2, [sp, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	4632      	mov	r2, r6
 800459e:	4629      	mov	r1, r5
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 fcd6 	bl	8004f52 <xTaskCreate>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045b0:	68fb      	ldr	r3, [r7, #12]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <osDelay+0x16>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	e000      	b.n	80045d2 <osDelay+0x18>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fdea 	bl	80051ac <vTaskDelay>
  
  return osOK;
 80045d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0208 	add.w	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f103 0208 	add.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f103 0208 	add.w	r2, r3, #8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469a:	d103      	bne.n	80046a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e00c      	b.n	80046be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3308      	adds	r3, #8
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e002      	b.n	80046b2 <vListInsert+0x2e>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d2f6      	bcs.n	80046ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	429a      	cmp	r2, r3
 8004720:	d103      	bne.n	800472a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	1e5a      	subs	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	e7fe      	b.n	8004772 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004774:	f001 fb7a 	bl	8005e6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	3b01      	subs	r3, #1
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	441a      	add	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	22ff      	movs	r2, #255	; 0xff
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d114      	bne.n	80047f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01a      	beq.n	8004808 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3310      	adds	r3, #16
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ff5e 	bl	8005698 <xTaskRemoveFromEventList>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d012      	beq.n	8004808 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <xQueueGenericReset+0xcc>)
 80047e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	e009      	b.n	8004808 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3310      	adds	r3, #16
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fef2 	bl	80045e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3324      	adds	r3, #36	; 0x24
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff feed 	bl	80045e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004808:	f001 fb5e 	bl	8005ec8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800480c:	2301      	movs	r3, #1
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <xQueueGenericCreate+0x28>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	e7fe      	b.n	8004842 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e004      	b.n	800485a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fbe0 	bl	8006024 <pvPortMalloc>
 8004864:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00f      	beq.n	800488c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	3348      	adds	r3, #72	; 0x48
 8004870:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800487a:	79fa      	ldrb	r2, [r7, #7]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f805 	bl	8004896 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800488c:	69bb      	ldr	r3, [r7, #24]
	}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e002      	b.n	80048b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048c4:	2101      	movs	r1, #1
 80048c6:	69b8      	ldr	r0, [r7, #24]
 80048c8:	f7ff ff40 	bl	800474c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	; 0x38
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048e2:	2300      	movs	r3, #0
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <xQueueGenericSend+0x30>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 8004902:	e7fe      	b.n	8004902 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <xQueueGenericSend+0x3e>
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <xQueueGenericSend+0x42>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericSend+0x44>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <xQueueGenericSend+0x5c>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	e7fe      	b.n	800492e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d103      	bne.n	800493e <xQueueGenericSend+0x6a>
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <xQueueGenericSend+0x6e>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericSend+0x70>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <xQueueGenericSend+0x88>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	e7fe      	b.n	800495a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800495c:	f001 f858 	bl	8005a10 <xTaskGetSchedulerState>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <xQueueGenericSend+0x98>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <xQueueGenericSend+0x9c>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <xQueueGenericSend+0x9e>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <xQueueGenericSend+0xb6>
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e7fe      	b.n	8004988 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800498a:	f001 fa6f 	bl	8005e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <xQueueGenericSend+0xcc>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d129      	bne.n	80049f4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a6:	f000 f96b 	bl	8004c80 <prvCopyDataToQueue>
 80049aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	3324      	adds	r3, #36	; 0x24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fe6d 	bl	8005698 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049c4:	4b3f      	ldr	r3, [pc, #252]	; (8004ac4 <xQueueGenericSend+0x1f0>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	e00a      	b.n	80049ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049dc:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <xQueueGenericSend+0x1f0>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049ec:	f001 fa6c 	bl	8005ec8 <vPortExitCritical>
				return pdPASS;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e063      	b.n	8004abc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049fa:	f001 fa65 	bl	8005ec8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e05c      	b.n	8004abc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fea5 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a16:	f001 fa57 	bl	8005ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a1a:	f000 fc59 	bl	80052d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1e:	f001 fa25 	bl	8005e6c <vPortEnterCritical>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSend+0x164>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a44:	d103      	bne.n	8004a4e <xQueueGenericSend+0x17a>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a4e:	f001 fa3b 	bl	8005ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a52:	1d3a      	adds	r2, r7, #4
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fe94 	bl	8005788 <xTaskCheckForTimeOut>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d124      	bne.n	8004ab0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a68:	f000 fa02 	bl	8004e70 <prvIsQueueFull>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d018      	beq.n	8004aa4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	3310      	adds	r3, #16
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fde8 	bl	8005650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a82:	f000 f98d 	bl	8004da0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a86:	f000 fc31 	bl	80052ec <xTaskResumeAll>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f af7c 	bne.w	800498a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <xQueueGenericSend+0x1f0>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	e772      	b.n	800498a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa6:	f000 f97b 	bl	8004da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aaa:	f000 fc1f 	bl	80052ec <xTaskResumeAll>
 8004aae:	e76c      	b.n	800498a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ab2:	f000 f975 	bl	8004da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab6:	f000 fc19 	bl	80052ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004aba:	2300      	movs	r3, #0
		}
	}
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3738      	adds	r7, #56	; 0x38
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <xQueueReceive+0x2e>
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	623b      	str	r3, [r7, #32]
 8004af4:	e7fe      	b.n	8004af4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <xQueueReceive+0x3c>
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <xQueueReceive+0x40>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <xQueueReceive+0x42>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <xQueueReceive+0x5a>
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e7fe      	b.n	8004b20 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b22:	f000 ff75 	bl	8005a10 <xTaskGetSchedulerState>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xQueueReceive+0x6a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueReceive+0x6e>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueReceive+0x70>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <xQueueReceive+0x88>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e7fe      	b.n	8004b4e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b50:	f001 f98c 	bl	8005e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01f      	beq.n	8004ba0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b64:	f000 f8f6 	bl	8004d54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	1e5a      	subs	r2, r3, #1
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fd8b 	bl	8005698 <xTaskRemoveFromEventList>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b88:	4b3c      	ldr	r3, [pc, #240]	; (8004c7c <xQueueReceive+0x1b4>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b98:	f001 f996 	bl	8005ec8 <vPortExitCritical>
				return pdPASS;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e069      	b.n	8004c74 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba6:	f001 f98f 	bl	8005ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e062      	b.n	8004c74 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb4:	f107 0310 	add.w	r3, r7, #16
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fdcf 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc2:	f001 f981 	bl	8005ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc6:	f000 fb83 	bl	80052d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bca:	f001 f94f 	bl	8005e6c <vPortEnterCritical>
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bda:	d103      	bne.n	8004be4 <xQueueReceive+0x11c>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf0:	d103      	bne.n	8004bfa <xQueueReceive+0x132>
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfa:	f001 f965 	bl	8005ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bfe:	1d3a      	adds	r2, r7, #4
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fdbe 	bl	8005788 <xTaskCheckForTimeOut>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d123      	bne.n	8004c5a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c14:	f000 f916 	bl	8004e44 <prvIsQueueEmpty>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	3324      	adds	r3, #36	; 0x24
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fd12 	bl	8005650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2e:	f000 f8b7 	bl	8004da0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f000 fb5b 	bl	80052ec <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d189      	bne.n	8004b50 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <xQueueReceive+0x1b4>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	e780      	b.n	8004b50 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c50:	f000 f8a6 	bl	8004da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c54:	f000 fb4a 	bl	80052ec <xTaskResumeAll>
 8004c58:	e77a      	b.n	8004b50 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5c:	f000 f8a0 	bl	8004da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c60:	f000 fb44 	bl	80052ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c66:	f000 f8ed 	bl	8004e44 <prvIsQueueEmpty>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f43f af6f 	beq.w	8004b50 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3730      	adds	r7, #48	; 0x30
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d14d      	bne.n	8004d42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fece 	bl	8005a4c <xTaskPriorityDisinherit>
 8004cb0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	e043      	b.n	8004d42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d119      	bne.n	8004cf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6898      	ldr	r0, [r3, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	f002 fe22 	bl	8007914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d32b      	bcc.n	8004d42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	e026      	b.n	8004d42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68d8      	ldr	r0, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	f002 fe08 	bl	8007914 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	441a      	add	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d207      	bcs.n	8004d30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	425b      	negs	r3, r3
 8004d2a:	441a      	add	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d105      	bne.n	8004d42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d4a:	697b      	ldr	r3, [r7, #20]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d018      	beq.n	8004d98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	441a      	add	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d303      	bcc.n	8004d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68d9      	ldr	r1, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	461a      	mov	r2, r3
 8004d92:	6838      	ldr	r0, [r7, #0]
 8004d94:	f002 fdbe 	bl	8007914 <memcpy>
	}
}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004da8:	f001 f860 	bl	8005e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004db4:	e011      	b.n	8004dda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d012      	beq.n	8004de4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3324      	adds	r3, #36	; 0x24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fc68 	bl	8005698 <xTaskRemoveFromEventList>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dce:	f000 fd3b 	bl	8005848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dce9      	bgt.n	8004db6 <prvUnlockQueue+0x16>
 8004de2:	e000      	b.n	8004de6 <prvUnlockQueue+0x46>
					break;
 8004de4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dee:	f001 f86b 	bl	8005ec8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004df2:	f001 f83b 	bl	8005e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dfe:	e011      	b.n	8004e24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fc43 	bl	8005698 <xTaskRemoveFromEventList>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e18:	f000 fd16 	bl	8005848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dce9      	bgt.n	8004e00 <prvUnlockQueue+0x60>
 8004e2c:	e000      	b.n	8004e30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e38:	f001 f846 	bl	8005ec8 <vPortExitCritical>
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e4c:	f001 f80e 	bl	8005e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e001      	b.n	8004e62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e62:	f001 f831 	bl	8005ec8 <vPortExitCritical>

	return xReturn;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e78:	f000 fff8 	bl	8005e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d102      	bne.n	8004e8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e001      	b.n	8004e92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e92:	f001 f819 	bl	8005ec8 <vPortExitCritical>

	return xReturn;
 8004e96:	68fb      	ldr	r3, [r7, #12]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08e      	sub	sp, #56	; 0x38
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xTaskCreateStatic+0x28>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	e7fe      	b.n	8004ec6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <xTaskCreateStatic+0x42>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ee2:	2354      	movs	r3, #84	; 0x54
 8004ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b54      	cmp	r3, #84	; 0x54
 8004eea:	d009      	beq.n	8004f00 <xTaskCreateStatic+0x60>
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e7fe      	b.n	8004efe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01e      	beq.n	8004f44 <xTaskCreateStatic+0xa4>
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f850 	bl	8004fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3e:	f000 f8cb 	bl	80050d8 <prvAddNewTaskToReadyList>
 8004f42:	e001      	b.n	8004f48 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f48:	697b      	ldr	r3, [r7, #20]
	}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08c      	sub	sp, #48	; 0x30
 8004f56:	af04      	add	r7, sp, #16
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f85c 	bl	8006024 <pvPortMalloc>
 8004f6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00e      	beq.n	8004f92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f74:	2054      	movs	r0, #84	; 0x54
 8004f76:	f001 f855 	bl	8006024 <pvPortMalloc>
 8004f7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
 8004f88:	e005      	b.n	8004f96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f001 f90c 	bl	80061a8 <vPortFree>
 8004f90:	e001      	b.n	8004f96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f80e 	bl	8004fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fc0:	69f8      	ldr	r0, [r7, #28]
 8004fc2:	f000 f889 	bl	80050d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e002      	b.n	8004fd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <prvInitialiseNewTask+0x46>
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e7fe      	b.n	8005020 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e012      	b.n	800504e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	7819      	ldrb	r1, [r3, #0]
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	3334      	adds	r3, #52	; 0x34
 8005038:	460a      	mov	r2, r1
 800503a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	3301      	adds	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	2b0f      	cmp	r3, #15
 8005052:	d9e9      	bls.n	8005028 <prvInitialiseNewTask+0x4c>
 8005054:	e000      	b.n	8005058 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005056:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	2b06      	cmp	r3, #6
 8005064:	d901      	bls.n	800506a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005066:	2306      	movs	r3, #6
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff face 	bl	8004622 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	3318      	adds	r3, #24
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fac9 	bl	8004622 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005094:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	f1c3 0207 	rsb	r2, r3, #7
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	69b8      	ldr	r0, [r7, #24]
 80050ba:	f000 fdb1 	bl	8005c20 <pxPortInitialiseStack>
 80050be:	4602      	mov	r2, r0
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d0:	bf00      	nop
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050e0:	f000 fec4 	bl	8005e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <prvAddNewTaskToReadyList+0xb8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	4a29      	ldr	r2, [pc, #164]	; (8005190 <prvAddNewTaskToReadyList+0xb8>)
 80050ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ee:	4b29      	ldr	r3, [pc, #164]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050f6:	4a27      	ldr	r2, [pc, #156]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <prvAddNewTaskToReadyList+0xb8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d110      	bne.n	8005126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005104:	f000 fbc4 	bl	8005890 <prvInitialiseTaskLists>
 8005108:	e00d      	b.n	8005126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800510a:	4b23      	ldr	r3, [pc, #140]	; (8005198 <prvAddNewTaskToReadyList+0xc0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d802      	bhi.n	8005126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <prvAddNewTaskToReadyList+0xc4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <prvAddNewTaskToReadyList+0xc4>)
 800512e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <prvAddNewTaskToReadyList+0xc8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4313      	orrs	r3, r2
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <prvAddNewTaskToReadyList+0xc8>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <prvAddNewTaskToReadyList+0xcc>)
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7ff fa6f 	bl	800463c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800515e:	f000 feb3 	bl	8005ec8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <prvAddNewTaskToReadyList+0xc0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00e      	beq.n	8005188 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	429a      	cmp	r2, r3
 8005176:	d207      	bcs.n	8005188 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <prvAddNewTaskToReadyList+0xd0>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200001d8 	.word	0x200001d8
 8005194:	200000d8 	.word	0x200000d8
 8005198:	200001e4 	.word	0x200001e4
 800519c:	200001f4 	.word	0x200001f4
 80051a0:	200001e0 	.word	0x200001e0
 80051a4:	200000dc 	.word	0x200000dc
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <vTaskDelay+0x60>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <vTaskDelay+0x2e>
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	e7fe      	b.n	80051d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80051da:	f000 f879 	bl	80052d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051de:	2100      	movs	r1, #0
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fcb7 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051e6:	f000 f881 	bl	80052ec <xTaskResumeAll>
 80051ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d107      	bne.n	8005202 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <vTaskDelay+0x64>)
 80051f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000200 	.word	0x20000200
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005222:	463a      	mov	r2, r7
 8005224:	1d39      	adds	r1, r7, #4
 8005226:	f107 0308 	add.w	r3, r7, #8
 800522a:	4618      	mov	r0, r3
 800522c:	f001 fb8a 	bl	8006944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	9202      	str	r2, [sp, #8]
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	460a      	mov	r2, r1
 8005242:	491d      	ldr	r1, [pc, #116]	; (80052b8 <vTaskStartScheduler+0xa4>)
 8005244:	481d      	ldr	r0, [pc, #116]	; (80052bc <vTaskStartScheduler+0xa8>)
 8005246:	f7ff fe2b 	bl	8004ea0 <xTaskCreateStatic>
 800524a:	4602      	mov	r2, r0
 800524c:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <vTaskStartScheduler+0xac>)
 800524e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <vTaskStartScheduler+0xac>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e001      	b.n	8005262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d115      	bne.n	8005294 <vTaskStartScheduler+0x80>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800527a:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <vTaskStartScheduler+0xb0>)
 800527c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005282:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <vTaskStartScheduler+0xb4>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005288:	4b10      	ldr	r3, [pc, #64]	; (80052cc <vTaskStartScheduler+0xb8>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800528e:	f000 fd4f 	bl	8005d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005292:	e00d      	b.n	80052b0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800529a:	d109      	bne.n	80052b0 <vTaskStartScheduler+0x9c>
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e7fe      	b.n	80052ae <vTaskStartScheduler+0x9a>
}
 80052b0:	bf00      	nop
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	08008204 	.word	0x08008204
 80052bc:	08005861 	.word	0x08005861
 80052c0:	200001fc 	.word	0x200001fc
 80052c4:	200001f8 	.word	0x200001f8
 80052c8:	200001e4 	.word	0x200001e4
 80052cc:	200001dc 	.word	0x200001dc

080052d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <vTaskSuspendAll+0x18>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	4a03      	ldr	r2, [pc, #12]	; (80052e8 <vTaskSuspendAll+0x18>)
 80052dc:	6013      	str	r3, [r2, #0]
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	20000200 	.word	0x20000200

080052ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <xTaskResumeAll+0x114>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <xTaskResumeAll+0x2a>
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	e7fe      	b.n	8005314 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005316:	f000 fda9 	bl	8005e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <xTaskResumeAll+0x114>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	4a37      	ldr	r2, [pc, #220]	; (8005400 <xTaskResumeAll+0x114>)
 8005322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <xTaskResumeAll+0x114>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d161      	bne.n	80053f0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800532c:	4b35      	ldr	r3, [pc, #212]	; (8005404 <xTaskResumeAll+0x118>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d05d      	beq.n	80053f0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005334:	e02e      	b.n	8005394 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005336:	4b34      	ldr	r3, [pc, #208]	; (8005408 <xTaskResumeAll+0x11c>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3318      	adds	r3, #24
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff f9d7 	bl	80046f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3304      	adds	r3, #4
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff f9d2 	bl	80046f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	2201      	movs	r2, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	4b2c      	ldr	r3, [pc, #176]	; (800540c <xTaskResumeAll+0x120>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4313      	orrs	r3, r2
 8005360:	4a2a      	ldr	r2, [pc, #168]	; (800540c <xTaskResumeAll+0x120>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a27      	ldr	r2, [pc, #156]	; (8005410 <xTaskResumeAll+0x124>)
 8005372:	441a      	add	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7ff f95e 	bl	800463c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <xTaskResumeAll+0x128>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <xTaskResumeAll+0x12c>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <xTaskResumeAll+0x11c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1cc      	bne.n	8005336 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a2:	f000 fb0f 	bl	80059c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <xTaskResumeAll+0x130>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b2:	f000 f837 	bl	8005424 <xTaskIncrementTick>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <xTaskResumeAll+0x12c>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f1      	bne.n	80053b2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <xTaskResumeAll+0x130>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <xTaskResumeAll+0x12c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e0:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <xTaskResumeAll+0x134>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053f0:	f000 fd6a 	bl	8005ec8 <vPortExitCritical>

	return xAlreadyYielded;
 80053f4:	68bb      	ldr	r3, [r7, #8]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000200 	.word	0x20000200
 8005404:	200001d8 	.word	0x200001d8
 8005408:	20000198 	.word	0x20000198
 800540c:	200001e0 	.word	0x200001e0
 8005410:	200000dc 	.word	0x200000dc
 8005414:	200000d8 	.word	0x200000d8
 8005418:	200001ec 	.word	0x200001ec
 800541c:	200001e8 	.word	0x200001e8
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542e:	4b50      	ldr	r3, [pc, #320]	; (8005570 <xTaskIncrementTick+0x14c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 808c 	bne.w	8005550 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005438:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <xTaskIncrementTick+0x150>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005440:	4a4c      	ldr	r2, [pc, #304]	; (8005574 <xTaskIncrementTick+0x150>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d11f      	bne.n	800548c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800544c:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <xTaskIncrementTick+0x154>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <xTaskIncrementTick+0x46>
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	e7fe      	b.n	8005468 <xTaskIncrementTick+0x44>
 800546a:	4b43      	ldr	r3, [pc, #268]	; (8005578 <xTaskIncrementTick+0x154>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	4b42      	ldr	r3, [pc, #264]	; (800557c <xTaskIncrementTick+0x158>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a40      	ldr	r2, [pc, #256]	; (8005578 <xTaskIncrementTick+0x154>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4a40      	ldr	r2, [pc, #256]	; (800557c <xTaskIncrementTick+0x158>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <xTaskIncrementTick+0x15c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a3e      	ldr	r2, [pc, #248]	; (8005580 <xTaskIncrementTick+0x15c>)
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	f000 fa9c 	bl	80059c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800548c:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <xTaskIncrementTick+0x160>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d34d      	bcc.n	8005532 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005496:	4b38      	ldr	r3, [pc, #224]	; (8005578 <xTaskIncrementTick+0x154>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <xTaskIncrementTick+0x80>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <xTaskIncrementTick+0x82>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	4b36      	ldr	r3, [pc, #216]	; (8005584 <xTaskIncrementTick+0x160>)
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054b0:	601a      	str	r2, [r3, #0]
					break;
 80054b2:	e03e      	b.n	8005532 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <xTaskIncrementTick+0x154>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d203      	bcs.n	80054d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054cc:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <xTaskIncrementTick+0x160>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
						break;
 80054d2:	e02e      	b.n	8005532 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff f90c 	bl	80046f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3318      	adds	r3, #24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f903 	bl	80046f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	4b23      	ldr	r3, [pc, #140]	; (8005588 <xTaskIncrementTick+0x164>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4a22      	ldr	r2, [pc, #136]	; (8005588 <xTaskIncrementTick+0x164>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a1f      	ldr	r2, [pc, #124]	; (800558c <xTaskIncrementTick+0x168>)
 8005510:	441a      	add	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7ff f88f 	bl	800463c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <xTaskIncrementTick+0x16c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	429a      	cmp	r2, r3
 800552a:	d3b4      	bcc.n	8005496 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800552c:	2301      	movs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005530:	e7b1      	b.n	8005496 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <xTaskIncrementTick+0x16c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005538:	4914      	ldr	r1, [pc, #80]	; (800558c <xTaskIncrementTick+0x168>)
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d907      	bls.n	800555a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e004      	b.n	800555a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <xTaskIncrementTick+0x170>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <xTaskIncrementTick+0x170>)
 8005558:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskIncrementTick+0x174>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005566:	697b      	ldr	r3, [r7, #20]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000200 	.word	0x20000200
 8005574:	200001dc 	.word	0x200001dc
 8005578:	20000190 	.word	0x20000190
 800557c:	20000194 	.word	0x20000194
 8005580:	200001f0 	.word	0x200001f0
 8005584:	200001f8 	.word	0x200001f8
 8005588:	200001e0 	.word	0x200001e0
 800558c:	200000dc 	.word	0x200000dc
 8005590:	200000d8 	.word	0x200000d8
 8005594:	200001e8 	.word	0x200001e8
 8005598:	200001ec 	.word	0x200001ec

0800559c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055a2:	4b26      	ldr	r3, [pc, #152]	; (800563c <vTaskSwitchContext+0xa0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <vTaskSwitchContext+0xa4>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055b0:	e03e      	b.n	8005630 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80055b2:	4b23      	ldr	r3, [pc, #140]	; (8005640 <vTaskSwitchContext+0xa4>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80055b8:	4b22      	ldr	r3, [pc, #136]	; (8005644 <vTaskSwitchContext+0xa8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	fab3 f383 	clz	r3, r3
 80055c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055c6:	7afb      	ldrb	r3, [r7, #11]
 80055c8:	f1c3 031f 	rsb	r3, r3, #31
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	491e      	ldr	r1, [pc, #120]	; (8005648 <vTaskSwitchContext+0xac>)
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e7fe      	b.n	80055f4 <vTaskSwitchContext+0x58>
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <vTaskSwitchContext+0xac>)
 8005602:	4413      	add	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3308      	adds	r3, #8
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <vTaskSwitchContext+0x8a>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a07      	ldr	r2, [pc, #28]	; (800564c <vTaskSwitchContext+0xb0>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000200 	.word	0x20000200
 8005640:	200001ec 	.word	0x200001ec
 8005644:	200001e0 	.word	0x200001e0
 8005648:	200000dc 	.word	0x200000dc
 800564c:	200000d8 	.word	0x200000d8

08005650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <vTaskPlaceOnEventList+0x24>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e7fe      	b.n	8005672 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <vTaskPlaceOnEventList+0x44>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3318      	adds	r3, #24
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff f801 	bl	8004684 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005682:	2101      	movs	r1, #1
 8005684:	6838      	ldr	r0, [r7, #0]
 8005686:	f000 fa65 	bl	8005b54 <prvAddCurrentTaskToDelayedList>
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200000d8 	.word	0x200000d8

08005698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <xTaskRemoveFromEventList+0x2a>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e7fe      	b.n	80056c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3318      	adds	r3, #24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff f815 	bl	80046f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <xTaskRemoveFromEventList+0xac>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11c      	bne.n	800570e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff f80c 	bl	80046f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	2201      	movs	r2, #1
 80056e4:	409a      	lsls	r2, r3
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <xTaskRemoveFromEventList+0xb0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <xTaskRemoveFromEventList+0xb0>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <xTaskRemoveFromEventList+0xb4>)
 80056fe:	441a      	add	r2, r3
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe ff98 	bl	800463c <vListInsertEnd>
 800570c:	e005      	b.n	800571a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3318      	adds	r3, #24
 8005712:	4619      	mov	r1, r3
 8005714:	480e      	ldr	r0, [pc, #56]	; (8005750 <xTaskRemoveFromEventList+0xb8>)
 8005716:	f7fe ff91 	bl	800463c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <xTaskRemoveFromEventList+0xbc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d905      	bls.n	8005734 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800572c:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <xTaskRemoveFromEventList+0xc0>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e001      	b.n	8005738 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005738:	697b      	ldr	r3, [r7, #20]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000200 	.word	0x20000200
 8005748:	200001e0 	.word	0x200001e0
 800574c:	200000dc 	.word	0x200000dc
 8005750:	20000198 	.word	0x20000198
 8005754:	200000d8 	.word	0x200000d8
 8005758:	200001ec 	.word	0x200001ec

0800575c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <vTaskInternalSetTimeOutState+0x24>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <vTaskInternalSetTimeOutState+0x28>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	200001f0 	.word	0x200001f0
 8005784:	200001dc 	.word	0x200001dc

08005788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <xTaskCheckForTimeOut+0x24>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e7fe      	b.n	80057aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <xTaskCheckForTimeOut+0x3e>
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e7fe      	b.n	80057c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80057c6:	f000 fb51 	bl	8005e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <xTaskCheckForTimeOut+0xb8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e2:	d102      	bne.n	80057ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e023      	b.n	8005832 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <xTaskCheckForTimeOut+0xbc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d007      	beq.n	8005806 <xTaskCheckForTimeOut+0x7e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005800:	2301      	movs	r3, #1
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	e015      	b.n	8005832 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	429a      	cmp	r2, r3
 800580e:	d20b      	bcs.n	8005828 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff9d 	bl	800575c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	e004      	b.n	8005832 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800582e:	2301      	movs	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005832:	f000 fb49 	bl	8005ec8 <vPortExitCritical>

	return xReturn;
 8005836:	69fb      	ldr	r3, [r7, #28]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200001dc 	.word	0x200001dc
 8005844:	200001f0 	.word	0x200001f0

08005848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <vTaskMissedYield+0x14>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	200001ec 	.word	0x200001ec

08005860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005868:	f000 f852 	bl	8005910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <prvIdleTask+0x28>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d9f9      	bls.n	8005868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <prvIdleTask+0x2c>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005884:	e7f0      	b.n	8005868 <prvIdleTask+0x8>
 8005886:	bf00      	nop
 8005888:	200000dc 	.word	0x200000dc
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	e00c      	b.n	80058b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <prvInitialiseTaskLists+0x60>)
 80058a8:	4413      	add	r3, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fe99 	bl	80045e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3301      	adds	r3, #1
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b06      	cmp	r3, #6
 80058ba:	d9ef      	bls.n	800589c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058bc:	480d      	ldr	r0, [pc, #52]	; (80058f4 <prvInitialiseTaskLists+0x64>)
 80058be:	f7fe fe90 	bl	80045e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058c2:	480d      	ldr	r0, [pc, #52]	; (80058f8 <prvInitialiseTaskLists+0x68>)
 80058c4:	f7fe fe8d 	bl	80045e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058c8:	480c      	ldr	r0, [pc, #48]	; (80058fc <prvInitialiseTaskLists+0x6c>)
 80058ca:	f7fe fe8a 	bl	80045e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058ce:	480c      	ldr	r0, [pc, #48]	; (8005900 <prvInitialiseTaskLists+0x70>)
 80058d0:	f7fe fe87 	bl	80045e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058d4:	480b      	ldr	r0, [pc, #44]	; (8005904 <prvInitialiseTaskLists+0x74>)
 80058d6:	f7fe fe84 	bl	80045e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <prvInitialiseTaskLists+0x78>)
 80058dc:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <prvInitialiseTaskLists+0x64>)
 80058de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <prvInitialiseTaskLists+0x7c>)
 80058e2:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <prvInitialiseTaskLists+0x68>)
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	200000dc 	.word	0x200000dc
 80058f4:	20000168 	.word	0x20000168
 80058f8:	2000017c 	.word	0x2000017c
 80058fc:	20000198 	.word	0x20000198
 8005900:	200001ac 	.word	0x200001ac
 8005904:	200001c4 	.word	0x200001c4
 8005908:	20000190 	.word	0x20000190
 800590c:	20000194 	.word	0x20000194

08005910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005916:	e019      	b.n	800594c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005918:	f000 faa8 	bl	8005e6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <prvCheckTasksWaitingTermination+0x4c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fee4 	bl	80046f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800592e:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <prvCheckTasksWaitingTermination+0x50>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3b01      	subs	r3, #1
 8005934:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <prvCheckTasksWaitingTermination+0x50>)
 8005936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <prvCheckTasksWaitingTermination+0x54>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3b01      	subs	r3, #1
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <prvCheckTasksWaitingTermination+0x54>)
 8005940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005942:	f000 fac1 	bl	8005ec8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f80e 	bl	8005968 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <prvCheckTasksWaitingTermination+0x54>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e1      	bne.n	8005918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005954:	bf00      	nop
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	200001ac 	.word	0x200001ac
 8005960:	200001d8 	.word	0x200001d8
 8005964:	200001c0 	.word	0x200001c0

08005968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005976:	2b00      	cmp	r3, #0
 8005978:	d108      	bne.n	800598c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fc12 	bl	80061a8 <vPortFree>
				vPortFree( pxTCB );
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fc0f 	bl	80061a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800598a:	e017      	b.n	80059bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005992:	2b01      	cmp	r3, #1
 8005994:	d103      	bne.n	800599e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fc06 	bl	80061a8 <vPortFree>
	}
 800599c:	e00e      	b.n	80059bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d009      	beq.n	80059bc <prvDeleteTCB+0x54>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e7fe      	b.n	80059ba <prvDeleteTCB+0x52>
	}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <prvResetNextTaskUnblockTime+0x44>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <prvResetNextTaskUnblockTime+0x14>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <prvResetNextTaskUnblockTime+0x16>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <prvResetNextTaskUnblockTime+0x48>)
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059e6:	e008      	b.n	80059fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <prvResetNextTaskUnblockTime+0x44>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4a05      	ldr	r2, [pc, #20]	; (8005a0c <prvResetNextTaskUnblockTime+0x48>)
 80059f8:	6013      	str	r3, [r2, #0]
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000190 	.word	0x20000190
 8005a0c:	200001f8 	.word	0x200001f8

08005a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <xTaskGetSchedulerState+0x34>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	e008      	b.n	8005a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <xTaskGetSchedulerState+0x38>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	e001      	b.n	8005a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a32:	2300      	movs	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a36:	687b      	ldr	r3, [r7, #4]
	}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	200001e4 	.word	0x200001e4
 8005a48:	20000200 	.word	0x20000200

08005a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d06c      	beq.n	8005b3c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a62:	4b39      	ldr	r3, [pc, #228]	; (8005b48 <xTaskPriorityDisinherit+0xfc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d009      	beq.n	8005a80 <xTaskPriorityDisinherit+0x34>
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e7fe      	b.n	8005a7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <xTaskPriorityDisinherit+0x50>
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	e7fe      	b.n	8005a9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa0:	1e5a      	subs	r2, r3, #1
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d044      	beq.n	8005b3c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d140      	bne.n	8005b3c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fe19 	bl	80046f6 <uxListRemove>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d115      	bne.n	8005af6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	491f      	ldr	r1, [pc, #124]	; (8005b4c <xTaskPriorityDisinherit+0x100>)
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xTaskPriorityDisinherit+0xaa>
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43da      	mvns	r2, r3
 8005aec:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <xTaskPriorityDisinherit+0x104>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4013      	ands	r3, r2
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <xTaskPriorityDisinherit+0x104>)
 8005af4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	f1c3 0207 	rsb	r2, r3, #7
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	2201      	movs	r2, #1
 8005b10:	409a      	lsls	r2, r3
 8005b12:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <xTaskPriorityDisinherit+0x104>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	4a0d      	ldr	r2, [pc, #52]	; (8005b50 <xTaskPriorityDisinherit+0x104>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <xTaskPriorityDisinherit+0x100>)
 8005b2a:	441a      	add	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fd82 	bl	800463c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b3c:	697b      	ldr	r3, [r7, #20]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200000d8 	.word	0x200000d8
 8005b4c:	200000dc 	.word	0x200000dc
 8005b50:	200001e0 	.word	0x200001e0

08005b54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b5e:	4b29      	ldr	r3, [pc, #164]	; (8005c04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b64:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fdc3 	bl	80046f6 <uxListRemove>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43da      	mvns	r2, r3
 8005b84:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b94:	d10a      	bne.n	8005bac <prvAddCurrentTaskToDelayedList+0x58>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	481a      	ldr	r0, [pc, #104]	; (8005c10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ba6:	f7fe fd49 	bl	800463c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005baa:	e026      	b.n	8005bfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d209      	bcs.n	8005bd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc4:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe fd57 	bl	8004684 <vListInsert>
}
 8005bd6:	e010      	b.n	8005bfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f7fe fd4d 	bl	8004684 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d202      	bcs.n	8005bfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005bf4:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6013      	str	r3, [r2, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	200001dc 	.word	0x200001dc
 8005c08:	200000d8 	.word	0x200000d8
 8005c0c:	200001e0 	.word	0x200001e0
 8005c10:	200001c4 	.word	0x200001c4
 8005c14:	20000194 	.word	0x20000194
 8005c18:	20000190 	.word	0x20000190
 8005c1c:	200001f8 	.word	0x200001f8

08005c20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3b04      	subs	r3, #4
 8005c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c50:	4a0c      	ldr	r2, [pc, #48]	; (8005c84 <pxPortInitialiseStack+0x64>)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3b14      	subs	r3, #20
 8005c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b04      	subs	r3, #4
 8005c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f06f 0202 	mvn.w	r2, #2
 8005c6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3b20      	subs	r3, #32
 8005c74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c76:	68fb      	ldr	r3, [r7, #12]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	08005c89 	.word	0x08005c89

08005c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <prvTaskExitError+0x50>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c9a:	d009      	beq.n	8005cb0 <prvTaskExitError+0x28>
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e7fe      	b.n	8005cae <prvTaskExitError+0x26>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cc2:	bf00      	nop
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0fc      	beq.n	8005cc4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	2000002c 	.word	0x2000002c
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <pxCurrentTCBConst2>)
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	6808      	ldr	r0, [r1, #0]
 8005ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cea:	f380 8809 	msr	PSP, r0
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8811 	msr	BASEPRI, r0
 8005cfa:	4770      	bx	lr
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst2>:
 8005d00:	200000d8 	.word	0x200000d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d08:	4808      	ldr	r0, [pc, #32]	; (8005d2c <prvPortStartFirstTask+0x24>)
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f380 8808 	msr	MSP, r0
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8814 	msr	CONTROL, r0
 8005d1a:	b662      	cpsie	i
 8005d1c:	b661      	cpsie	f
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	df00      	svc	0
 8005d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d2a:	bf00      	nop
 8005d2c:	e000ed08 	.word	0xe000ed08

08005d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d36:	4b44      	ldr	r3, [pc, #272]	; (8005e48 <xPortStartScheduler+0x118>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a44      	ldr	r2, [pc, #272]	; (8005e4c <xPortStartScheduler+0x11c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d109      	bne.n	8005d54 <xPortStartScheduler+0x24>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	e7fe      	b.n	8005d52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d54:	4b3c      	ldr	r3, [pc, #240]	; (8005e48 <xPortStartScheduler+0x118>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3d      	ldr	r2, [pc, #244]	; (8005e50 <xPortStartScheduler+0x120>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d109      	bne.n	8005d72 <xPortStartScheduler+0x42>
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e7fe      	b.n	8005d70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d72:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <xPortStartScheduler+0x124>)
 8005d74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	22ff      	movs	r2, #255	; 0xff
 8005d82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4b30      	ldr	r3, [pc, #192]	; (8005e58 <xPortStartScheduler+0x128>)
 8005d98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d9a:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005d9c:	2207      	movs	r2, #7
 8005d9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005da0:	e009      	b.n	8005db6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005da2:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4a2c      	ldr	r2, [pc, #176]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005daa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d0ef      	beq.n	8005da2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f1c3 0307 	rsb	r3, r3, #7
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d009      	beq.n	8005de2 <xPortStartScheduler+0xb2>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	e7fe      	b.n	8005de0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005de2:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005dea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dec:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005df4:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <xPortStartScheduler+0x12c>)
 8005df6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e00:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <xPortStartScheduler+0x130>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <xPortStartScheduler+0x130>)
 8005e06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e0c:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <xPortStartScheduler+0x130>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <xPortStartScheduler+0x130>)
 8005e12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e18:	f000 f8d6 	bl	8005fc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e1c:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <xPortStartScheduler+0x134>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e22:	f000 f8f5 	bl	8006010 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <xPortStartScheduler+0x138>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a0f      	ldr	r2, [pc, #60]	; (8005e68 <xPortStartScheduler+0x138>)
 8005e2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e32:	f7ff ff69 	bl	8005d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e36:	f7ff fbb1 	bl	800559c <vTaskSwitchContext>
	prvTaskExitError();
 8005e3a:	f7ff ff25 	bl	8005c88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	e000ed00 	.word	0xe000ed00
 8005e4c:	410fc271 	.word	0x410fc271
 8005e50:	410fc270 	.word	0x410fc270
 8005e54:	e000e400 	.word	0xe000e400
 8005e58:	20000204 	.word	0x20000204
 8005e5c:	20000208 	.word	0x20000208
 8005e60:	e000ed20 	.word	0xe000ed20
 8005e64:	2000002c 	.word	0x2000002c
 8005e68:	e000ef34 	.word	0xe000ef34

08005e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <vPortEnterCritical+0x54>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <vPortEnterCritical+0x54>)
 8005e8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <vPortEnterCritical+0x54>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d10e      	bne.n	8005eb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <vPortEnterCritical+0x58>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <vPortEnterCritical+0x48>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	e7fe      	b.n	8005eb2 <vPortEnterCritical+0x46>
	}
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	2000002c 	.word	0x2000002c
 8005ec4:	e000ed04 	.word	0xe000ed04

08005ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <vPortExitCritical+0x4c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <vPortExitCritical+0x22>
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	e7fe      	b.n	8005ee8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005eea:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <vPortExitCritical+0x4c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <vPortExitCritical+0x4c>)
 8005ef2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ef4:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <vPortExitCritical+0x4c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <vPortExitCritical+0x3e>
 8005efc:	2300      	movs	r3, #0
 8005efe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	2000002c 	.word	0x2000002c
	...

08005f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f20:	f3ef 8009 	mrs	r0, PSP
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <pxCurrentTCBConst>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f01e 0f10 	tst.w	lr, #16
 8005f30:	bf08      	it	eq
 8005f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	6010      	str	r0, [r2, #0]
 8005f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f44:	f380 8811 	msr	BASEPRI, r0
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f7ff fb24 	bl	800559c <vTaskSwitchContext>
 8005f54:	f04f 0000 	mov.w	r0, #0
 8005f58:	f380 8811 	msr	BASEPRI, r0
 8005f5c:	bc09      	pop	{r0, r3}
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	6808      	ldr	r0, [r1, #0]
 8005f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f66:	f01e 0f10 	tst.w	lr, #16
 8005f6a:	bf08      	it	eq
 8005f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f70:	f380 8809 	msr	PSP, r0
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst>:
 8005f80:	200000d8 	.word	0x200000d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fa0:	f7ff fa40 	bl	8005424 <xTaskIncrementTick>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <SysTick_Handler+0x3c>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <vPortSetupTimerInterrupt+0x34>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <vPortSetupTimerInterrupt+0x38>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <vPortSetupTimerInterrupt+0x3c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <vPortSetupTimerInterrupt+0x40>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	099b      	lsrs	r3, r3, #6
 8005fe4:	4a09      	ldr	r2, [pc, #36]	; (800600c <vPortSetupTimerInterrupt+0x44>)
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <vPortSetupTimerInterrupt+0x34>)
 8005fec:	2207      	movs	r2, #7
 8005fee:	601a      	str	r2, [r3, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000e010 	.word	0xe000e010
 8006000:	e000e018 	.word	0xe000e018
 8006004:	20000030 	.word	0x20000030
 8006008:	10624dd3 	.word	0x10624dd3
 800600c:	e000e014 	.word	0xe000e014

08006010 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006010:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006020 <vPortEnableVFP+0x10>
 8006014:	6801      	ldr	r1, [r0, #0]
 8006016:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800601a:	6001      	str	r1, [r0, #0]
 800601c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800601e:	bf00      	nop
 8006020:	e000ed88 	.word	0xe000ed88

08006024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006030:	f7ff f94e 	bl	80052d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006034:	4b57      	ldr	r3, [pc, #348]	; (8006194 <pvPortMalloc+0x170>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800603c:	f000 f90c 	bl	8006258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006040:	4b55      	ldr	r3, [pc, #340]	; (8006198 <pvPortMalloc+0x174>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 808c 	bne.w	8006166 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01c      	beq.n	800608e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006054:	2208      	movs	r2, #8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f023 0307 	bic.w	r3, r3, #7
 800606c:	3308      	adds	r3, #8
 800606e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <pvPortMalloc+0x6a>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e7fe      	b.n	800608c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d068      	beq.n	8006166 <pvPortMalloc+0x142>
 8006094:	4b41      	ldr	r3, [pc, #260]	; (800619c <pvPortMalloc+0x178>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d863      	bhi.n	8006166 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <pvPortMalloc+0x17c>)
 80060a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060a2:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <pvPortMalloc+0x17c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060a8:	e004      	b.n	80060b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d903      	bls.n	80060c6 <pvPortMalloc+0xa2>
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f1      	bne.n	80060aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060c6:	4b33      	ldr	r3, [pc, #204]	; (8006194 <pvPortMalloc+0x170>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d04a      	beq.n	8006166 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2208      	movs	r2, #8
 80060d6:	4413      	add	r3, r2
 80060d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad2      	subs	r2, r2, r3
 80060ea:	2308      	movs	r3, #8
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d91e      	bls.n	8006130 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <pvPortMalloc+0xf4>
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	e7fe      	b.n	8006116 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800612a:	69b8      	ldr	r0, [r7, #24]
 800612c:	f000 f8f6 	bl	800631c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <pvPortMalloc+0x178>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <pvPortMalloc+0x178>)
 800613c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800613e:	4b17      	ldr	r3, [pc, #92]	; (800619c <pvPortMalloc+0x178>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <pvPortMalloc+0x180>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d203      	bcs.n	8006152 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800614a:	4b14      	ldr	r3, [pc, #80]	; (800619c <pvPortMalloc+0x178>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <pvPortMalloc+0x180>)
 8006150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <pvPortMalloc+0x174>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	431a      	orrs	r2, r3
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006166:	f7ff f8c1 	bl	80052ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <pvPortMalloc+0x164>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e7fe      	b.n	8006186 <pvPortMalloc+0x162>
	return pvReturn;
 8006188:	69fb      	ldr	r3, [r7, #28]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3728      	adds	r7, #40	; 0x28
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20003e14 	.word	0x20003e14
 8006198:	20003e20 	.word	0x20003e20
 800619c:	20003e18 	.word	0x20003e18
 80061a0:	20003e0c 	.word	0x20003e0c
 80061a4:	20003e1c 	.word	0x20003e1c

080061a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d046      	beq.n	8006248 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061ba:	2308      	movs	r3, #8
 80061bc:	425b      	negs	r3, r3
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b20      	ldr	r3, [pc, #128]	; (8006250 <vPortFree+0xa8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <vPortFree+0x42>
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e7fe      	b.n	80061e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <vPortFree+0x5e>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	e7fe      	b.n	8006204 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <vPortFree+0xa8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d019      	beq.n	8006248 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d115      	bne.n	8006248 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortFree+0xa8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	43db      	mvns	r3, r3
 8006226:	401a      	ands	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800622c:	f7ff f850 	bl	80052d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <vPortFree+0xac>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4413      	add	r3, r2
 800623a:	4a06      	ldr	r2, [pc, #24]	; (8006254 <vPortFree+0xac>)
 800623c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f000 f86c 	bl	800631c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006244:	f7ff f852 	bl	80052ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006248:	bf00      	nop
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20003e20 	.word	0x20003e20
 8006254:	20003e18 	.word	0x20003e18

08006258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006262:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006264:	4b27      	ldr	r3, [pc, #156]	; (8006304 <prvHeapInit+0xac>)
 8006266:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3307      	adds	r3, #7
 8006276:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <prvHeapInit+0xac>)
 8006288:	4413      	add	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <prvHeapInit+0xb0>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006296:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <prvHeapInit+0xb0>)
 8006298:	2200      	movs	r2, #0
 800629a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062a4:	2208      	movs	r2, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <prvHeapInit+0xb4>)
 80062b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <prvHeapInit+0xb4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <prvHeapInit+0xb4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <prvHeapInit+0xb4>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <prvHeapInit+0xb8>)
 80062e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <prvHeapInit+0xbc>)
 80062ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <prvHeapInit+0xc0>)
 80062f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062f6:	601a      	str	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	2000020c 	.word	0x2000020c
 8006308:	20003e0c 	.word	0x20003e0c
 800630c:	20003e14 	.word	0x20003e14
 8006310:	20003e1c 	.word	0x20003e1c
 8006314:	20003e18 	.word	0x20003e18
 8006318:	20003e20 	.word	0x20003e20

0800631c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006324:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <prvInsertBlockIntoFreeList+0xac>)
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e002      	b.n	8006330 <prvInsertBlockIntoFreeList+0x14>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d8f7      	bhi.n	800632a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4413      	add	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	429a      	cmp	r2, r3
 800634a:	d108      	bne.n	800635e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d118      	bne.n	80063a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b15      	ldr	r3, [pc, #84]	; (80063cc <prvInsertBlockIntoFreeList+0xb0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d00d      	beq.n	800639a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	441a      	add	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e008      	b.n	80063ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <prvInsertBlockIntoFreeList+0xb0>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e003      	b.n	80063ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d002      	beq.n	80063ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20003e0c 	.word	0x20003e0c
 80063cc:	20003e14 	.word	0x20003e14

080063d0 <_ZN12SocketClientC1Ev>:
 */

#include "SocketClient.h"
SPI_HandleTypeDef *SocketClient::hspi1;

SocketClient::SocketClient() {
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <_ZN12SocketClientC1Ev+0x30>)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a08      	ldr	r2, [pc, #32]	; (8006404 <_ZN12SocketClientC1Ev+0x34>)
 80063e2:	330d      	adds	r3, #13
 80063e4:	6810      	ldr	r0, [r2, #0]
 80063e6:	6018      	str	r0, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ee:	825a      	strh	r2, [r3, #18]

}
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	080083e8 	.word	0x080083e8
 8006404:	0800820c 	.word	0x0800820c

08006408 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>:

void SocketClient::init(SPI_HandleTypeDef *main_hspi1, UartHelper *main_uart_helper) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
	hspi1 = main_hspi1;
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x54>)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6013      	str	r3, [r2, #0]
	uart_helper = main_uart_helper;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]

	 HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8006420:	2200      	movs	r2, #0
 8006422:	2140      	movs	r1, #64	; 0x40
 8006424:	480e      	ldr	r0, [pc, #56]	; (8006460 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x58>)
 8006426:	f7fa fb7b 	bl	8000b20 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 800642a:	2064      	movs	r0, #100	; 0x64
 800642c:	f7fa f8f2 	bl	8000614 <HAL_Delay>
	 HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8006430:	2201      	movs	r2, #1
 8006432:	2140      	movs	r1, #64	; 0x40
 8006434:	480a      	ldr	r0, [pc, #40]	; (8006460 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x58>)
 8006436:	f7fa fb73 	bl	8000b20 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 800643a:	2064      	movs	r0, #100	; 0x64
 800643c:	f7fa f8ea 	bl	8000614 <HAL_Delay>

	SocketClient::socket_init();
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f8e9 	bl	8006618 <_ZN12SocketClient11socket_initEv>
	(*uart_helper).printf("socket inited\r\n");
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	4906      	ldr	r1, [pc, #24]	; (8006464 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x5c>)
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fa27 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20003e24 	.word	0x20003e24
 8006460:	40020400 	.word	0x40020400
 8006464:	08008210 	.word	0x08008210

08006468 <_ZN12SocketClientD1Ev>:

SocketClient::~SocketClient() {
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	4a08      	ldr	r2, [pc, #32]	; (8006494 <_ZN12SocketClientD1Ev+0x2c>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
	(*uart_helper).printf("\r\ndestructor\r\n");
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	4907      	ldr	r1, [pc, #28]	; (8006498 <_ZN12SocketClientD1Ev+0x30>)
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fa0f 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
	SocketClient::socket_close();
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8b2 	bl	80065ec <_ZN12SocketClient12socket_closeEv>
}
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	080083e8 	.word	0x080083e8
 8006498:	08008220 	.word	0x08008220

0800649c <_ZN12SocketClientD0Ev>:
SocketClient::~SocketClient() {
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
}
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ffdf 	bl	8006468 <_ZN12SocketClientD1Ev>
 80064aa:	2114      	movs	r1, #20
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 f95e 	bl	800776e <_ZdlPvj>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_ZN12SocketClient14socket_connectEv>:
void SocketClient::socket_connect(){
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	uint8_t code = connect(http_socket, addr, port);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7918      	ldrb	r0, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f103 010d 	add.w	r1, r3, #13
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8a5b      	ldrh	r3, [r3, #18]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fd fb42 	bl	8003b5c <connect>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
    if(code < 0) {
    	(*uart_helper).printf("connect() failed, code = %d\r\n", code);
        close(http_socket);
        return;
    }
    (*uart_helper).printf("socket connected\r\n");
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4903      	ldr	r1, [pc, #12]	; (80064f0 <_ZN12SocketClient14socket_connectEv+0x34>)
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f9dc 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
}
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	08008230 	.word	0x08008230

080064f4 <_ZN12SocketClient11socket_sendEPKct>:
			len -= nbytes;
        }
    }
}

void SocketClient::socket_send(const char *pData, uint16_t len){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]

    while(len > 0) {
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d024      	beq.n	8006552 <_ZN12SocketClient11socket_sendEPKct+0x5e>
        int32_t nbytes = send(http_socket, (uint8_t*)pData, len);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	791b      	ldrb	r3, [r3, #4]
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fbff 	bl	8003d14 <send>
 8006516:	6178      	str	r0, [r7, #20]
        if(nbytes <= 0) {
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dc0c      	bgt.n	8006538 <_ZN12SocketClient11socket_sendEPKct+0x44>
        	(*uart_helper).printf("send() failed, %d returned\r\n", nbytes);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	490c      	ldr	r1, [pc, #48]	; (8006558 <_ZN12SocketClient11socket_sendEPKct+0x64>)
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f9ba 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
            close(http_socket);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	791b      	ldrb	r3, [r3, #4]
 8006530:	4618      	mov	r0, r3
 8006532:	f7fd faa5 	bl	8003a80 <close>
            return;
 8006536:	e00c      	b.n	8006552 <_ZN12SocketClient11socket_sendEPKct+0x5e>
        	HAL_Delay(50);
        } else{
			(*uart_helper).printf("%d bytes sent!\r\n", nbytes);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4907      	ldr	r1, [pc, #28]	; (800655c <_ZN12SocketClient11socket_sendEPKct+0x68>)
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f9ad 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
			len -= nbytes;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	b29b      	uxth	r3, r3
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	80fb      	strh	r3, [r7, #6]
    while(len > 0) {
 8006550:	e7d7      	b.n	8006502 <_ZN12SocketClient11socket_sendEPKct+0xe>
        }
    }
}
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	08008244 	.word	0x08008244
 800655c:	08008264 	.word	0x08008264

08006560 <_ZN12SocketClient14socket_receiveEPhtPm>:

void SocketClient::socket_receive(uint8_t *pData, uint16_t Size, uint32_t* rdmaInd){
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]

		int32_t nbytes = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
		uint16_t recvsize = getSn_RX_RSR(http_socket);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	791b      	ldrb	r3, [r3, #4]
 8006578:	4618      	mov	r0, r3
 800657a:	f7fd f868 	bl	800364e <getSn_RX_RSR>
 800657e:	4603      	mov	r3, r0
 8006580:	827b      	strh	r3, [r7, #18]
		if (recvsize > 0){
 8006582:	8a7b      	ldrh	r3, [r7, #18]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d007      	beq.n	8006598 <_ZN12SocketClient14socket_receiveEPhtPm+0x38>
			nbytes = recv(http_socket, pData, Size);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	791b      	ldrb	r3, [r3, #4]
 800658c:	88fa      	ldrh	r2, [r7, #6]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f7fd fcb9 	bl	8003f08 <recv>
 8006596:	6178      	str	r0, [r7, #20]
		}
		*rdmaInd = nbytes;
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	601a      	str	r2, [r3, #0]


		if(nbytes < 0) {
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da07      	bge.n	80065b4 <_ZN12SocketClient14socket_receiveEPhtPm+0x54>
			(*uart_helper).printf("\r\nrecv() failed, %d returned\r\n", nbytes);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	490d      	ldr	r1, [pc, #52]	; (80065e0 <_ZN12SocketClient14socket_receiveEPhtPm+0x80>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 f977 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
			return;
 80065b2:	e011      	b.n	80065d8 <_ZN12SocketClient14socket_receiveEPhtPm+0x78>
		}
		if (nbytes > 0){
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dd07      	ble.n	80065ca <_ZN12SocketClient14socket_receiveEPhtPm+0x6a>
			(*uart_helper).printf("\r\nrecv() %d returned\r\n", nbytes);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4908      	ldr	r1, [pc, #32]	; (80065e4 <_ZN12SocketClient14socket_receiveEPhtPm+0x84>)
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f96c 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
			return;
 80065c8:	e006      	b.n	80065d8 <_ZN12SocketClient14socket_receiveEPhtPm+0x78>
		} else {
			(*uart_helper).printf("\r\nrecv() socket busy\r\n");
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4906      	ldr	r1, [pc, #24]	; (80065e8 <_ZN12SocketClient14socket_receiveEPhtPm+0x88>)
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 f965 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
			return;
 80065d6:	bf00      	nop
		}
}
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	08008278 	.word	0x08008278
 80065e4:	08008298 	.word	0x08008298
 80065e8:	080082b0 	.word	0x080082b0

080065ec <_ZN12SocketClient12socket_closeEv>:


void SocketClient::socket_close(){
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	  close(http_socket);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	791b      	ldrb	r3, [r3, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fd fa41 	bl	8003a80 <close>
	  (*uart_helper).printf("Closing socket.\r\n");
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	4904      	ldr	r1, [pc, #16]	; (8006614 <_ZN12SocketClient12socket_closeEv+0x28>)
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f94b 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	080082c8 	.word	0x080082c8

08006618 <_ZN12SocketClient11socket_initEv>:

void SocketClient::socket_init(){
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8006620:	4938      	ldr	r1, [pc, #224]	; (8006704 <_ZN12SocketClient11socket_initEv+0xec>)
 8006622:	4839      	ldr	r0, [pc, #228]	; (8006708 <_ZN12SocketClient11socket_initEv+0xf0>)
 8006624:	f7fd fd8a 	bl	800413c <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(SocketClient::W5500_ReadByte, SocketClient::W5500_WriteByte);
 8006628:	4938      	ldr	r1, [pc, #224]	; (800670c <_ZN12SocketClient11socket_initEv+0xf4>)
 800662a:	4839      	ldr	r0, [pc, #228]	; (8006710 <_ZN12SocketClient11socket_initEv+0xf8>)
 800662c:	f7fd fdaa 	bl	8004184 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(SocketClient::W5500_ReadBuff, SocketClient::W5500_WriteBuff);
 8006630:	4938      	ldr	r1, [pc, #224]	; (8006714 <_ZN12SocketClient11socket_initEv+0xfc>)
 8006632:	4839      	ldr	r0, [pc, #228]	; (8006718 <_ZN12SocketClient11socket_initEv+0x100>)
 8006634:	f7fd fdd2 	bl	80041dc <reg_wizchip_spiburst_cbfunc>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2};
 8006638:	4b38      	ldr	r3, [pc, #224]	; (800671c <_ZN12SocketClient11socket_initEv+0x104>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	623b      	str	r3, [r7, #32]
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800663e:	f107 0220 	add.w	r2, r7, #32
 8006642:	f107 0320 	add.w	r3, r7, #32
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7fd fe3f 	bl	80042cc <wizchip_init>
    wiz_NetInfo net_info = {
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	60da      	str	r2, [r3, #12]
 800665c:	611a      	str	r2, [r3, #16]
 800665e:	f8c3 2013 	str.w	r2, [r3, #19]
 8006662:	2308      	movs	r3, #8
 8006664:	727b      	strb	r3, [r7, #9]
 8006666:	23dc      	movs	r3, #220	; 0xdc
 8006668:	72bb      	strb	r3, [r7, #10]
 800666a:	23ab      	movs	r3, #171	; 0xab
 800666c:	72fb      	strb	r3, [r7, #11]
 800666e:	231d      	movs	r3, #29
 8006670:	733b      	strb	r3, [r7, #12]
 8006672:	23e8      	movs	r3, #232	; 0xe8
 8006674:	737b      	strb	r3, [r7, #13]
 8006676:	23c0      	movs	r3, #192	; 0xc0
 8006678:	73bb      	strb	r3, [r7, #14]
 800667a:	23a8      	movs	r3, #168	; 0xa8
 800667c:	73fb      	strb	r3, [r7, #15]
 800667e:	2337      	movs	r3, #55	; 0x37
 8006680:	743b      	strb	r3, [r7, #16]
 8006682:	2372      	movs	r3, #114	; 0x72
 8006684:	747b      	strb	r3, [r7, #17]
 8006686:	23ff      	movs	r3, #255	; 0xff
 8006688:	74bb      	strb	r3, [r7, #18]
 800668a:	23ff      	movs	r3, #255	; 0xff
 800668c:	74fb      	strb	r3, [r7, #19]
 800668e:	23ff      	movs	r3, #255	; 0xff
 8006690:	753b      	strb	r3, [r7, #20]
 8006692:	23c0      	movs	r3, #192	; 0xc0
 8006694:	75bb      	strb	r3, [r7, #22]
 8006696:	23a8      	movs	r3, #168	; 0xa8
 8006698:	75fb      	strb	r3, [r7, #23]
 800669a:	2337      	movs	r3, #55	; 0x37
 800669c:	763b      	strb	r3, [r7, #24]
 800669e:	2301      	movs	r3, #1
 80066a0:	767b      	strb	r3, [r7, #25]
    	.mac = {0x00, 0x08, 0xdc, 0xab, 0x1d, 0xe8}, // MAC адрес
        .ip = {192, 168, 55, 114}, // IP адрес
        .sn = {255, 255, 255, 0}, // маска сети
        .gw = {192, 168,55, 1}}; // адрес шлюза
    wizchip_setnetinfo(&net_info);
 80066a2:	f107 0308 	add.w	r3, r7, #8
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fd fe9c 	bl	80043e4 <wizchip_setnetinfo>
    wizchip_getnetinfo(&net_info);
 80066ac:	f107 0308 	add.w	r3, r7, #8
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fed7 	bl	8004464 <wizchip_getnetinfo>
    SocketClient::http_socket = HTTP_SOCKET;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	711a      	strb	r2, [r3, #4]
    uint8_t code = socket(SocketClient::http_socket, Sn_MR_TCP, 10888, SF_IO_NONBLOCK );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7918      	ldrb	r0, [r3, #4]
 80066c0:	2301      	movs	r3, #1
 80066c2:	f642 2288 	movw	r2, #10888	; 0x2a88
 80066c6:	2101      	movs	r1, #1
 80066c8:	f7fd f8c4 	bl	8003854 <socket>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(code != SocketClient::http_socket) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80066da:	429a      	cmp	r2, r3
 80066dc:	d008      	beq.n	80066f0 <_ZN12SocketClient11socket_initEv+0xd8>
    	(*uart_helper).printf("socket() failed, code = %d\r\n", code);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80066e6:	490e      	ldr	r1, [pc, #56]	; (8006720 <_ZN12SocketClient11socket_initEv+0x108>)
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 f8d9 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
 80066ee:	e005      	b.n	80066fc <_ZN12SocketClient11socket_initEv+0xe4>
        return;
    }

    (*uart_helper).printf("Socket created, connecting...\r\n");
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	490b      	ldr	r1, [pc, #44]	; (8006724 <_ZN12SocketClient11socket_initEv+0x10c>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f8d2 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
}
 80066fc:	3728      	adds	r7, #40	; 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08006741 	.word	0x08006741
 8006708:	08006729 	.word	0x08006729
 800670c:	080067fb 	.word	0x080067fb
 8006710:	080067e1 	.word	0x080067e1
 8006714:	0800679d 	.word	0x0800679d
 8006718:	08006759 	.word	0x08006759
 800671c:	0800831c 	.word	0x0800831c
 8006720:	080082dc 	.word	0x080082dc
 8006724:	080082fc 	.word	0x080082fc

08006728 <_ZN12SocketClient12W5500_SelectEv>:

void SocketClient::W5500_Select(void) {
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800672c:	2200      	movs	r2, #0
 800672e:	2104      	movs	r1, #4
 8006730:	4802      	ldr	r0, [pc, #8]	; (800673c <_ZN12SocketClient12W5500_SelectEv+0x14>)
 8006732:	f7fa f9f5 	bl	8000b20 <HAL_GPIO_WritePin>
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40020400 	.word	0x40020400

08006740 <_ZN12SocketClient14W5500_UnselectEv>:

void SocketClient::W5500_Unselect(void) {
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8006744:	2201      	movs	r2, #1
 8006746:	2104      	movs	r1, #4
 8006748:	4802      	ldr	r0, [pc, #8]	; (8006754 <_ZN12SocketClient14W5500_UnselectEv+0x14>)
 800674a:	f7fa f9e9 	bl	8000b20 <HAL_GPIO_WritePin>
}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40020400 	.word	0x40020400

08006758 <_ZN12SocketClient14W5500_ReadBuffEPht>:

void SocketClient::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
    //HAL_SPI_Receive(SocketClient::hspi1, buff, len, HAL_MAX_DELAY);
	uint32_t begin = HAL_GetTick();
 8006764:	f7f9 ff4a 	bl	80005fc <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Receive(SocketClient::hspi1, buff, len, 100);
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <_ZN12SocketClient14W5500_ReadBuffEPht+0x40>)
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	887a      	ldrh	r2, [r7, #2]
 8006770:	2364      	movs	r3, #100	; 0x64
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	f7fb f80c 	bl	8001790 <HAL_SPI_Receive>
	uint32_t end = HAL_GetTick();
 8006778:	f7f9 ff40 	bl	80005fc <HAL_GetTick>
 800677c:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b6e      	cmp	r3, #110	; 0x6e
 8006786:	d902      	bls.n	800678e <_ZN12SocketClient14W5500_ReadBuffEPht+0x36>
		HAL_Delay(50);
 8006788:	2032      	movs	r0, #50	; 0x32
 800678a:	f7f9 ff43 	bl	8000614 <HAL_Delay>
	}
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20003e24 	.word	0x20003e24

0800679c <_ZN12SocketClient15W5500_WriteBuffEPht>:

void SocketClient::W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
    //HAL_SPI_Transmit(SocketClient::hspi1, buff, len, HAL_MAX_DELAY);
	uint32_t begin = HAL_GetTick();
 80067a8:	f7f9 ff28 	bl	80005fc <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Transmit(SocketClient::hspi1, buff, len, 100);
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <_ZN12SocketClient15W5500_WriteBuffEPht+0x40>)
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	2364      	movs	r3, #100	; 0x64
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	f7fa feb6 	bl	8001528 <HAL_SPI_Transmit>
	uint32_t end = HAL_GetTick();
 80067bc:	f7f9 ff1e 	bl	80005fc <HAL_GetTick>
 80067c0:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b6e      	cmp	r3, #110	; 0x6e
 80067ca:	d902      	bls.n	80067d2 <_ZN12SocketClient15W5500_WriteBuffEPht+0x36>
		HAL_Delay(50);
 80067cc:	2032      	movs	r0, #50	; 0x32
 80067ce:	f7f9 ff21 	bl	8000614 <HAL_Delay>
	}
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20003e24 	.word	0x20003e24

080067e0 <_ZN12SocketClient14W5500_ReadByteEv>:

uint8_t SocketClient::W5500_ReadByte(void) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80067e6:	1dfb      	adds	r3, r7, #7
 80067e8:	2101      	movs	r1, #1
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff ffb4 	bl	8006758 <_ZN12SocketClient14W5500_ReadBuffEPht>
    return byte;
 80067f0:	79fb      	ldrb	r3, [r7, #7]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <_ZN12SocketClient15W5500_WriteByteEh>:

void SocketClient::W5500_WriteByte(uint8_t byte) {
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8006804:	1dfb      	adds	r3, r7, #7
 8006806:	2101      	movs	r1, #1
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ffc7 	bl	800679c <_ZN12SocketClient15W5500_WriteBuffEPht>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <_ZN10UartHelperC1Ev>:
 */

#include <stdlib.h>
#include "UartHelper.h"

UartHelper::UartHelper() {
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	4a07      	ldr	r2, [pc, #28]	; (8006840 <_ZN10UartHelperC1Ev+0x28>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	char buff[20];
	uart_queue = xQueueCreate( 8, sizeof( buff ) );
 8006826:	2200      	movs	r2, #0
 8006828:	2114      	movs	r1, #20
 800682a:	2008      	movs	r0, #8
 800682c:	f7fd fff6 	bl	800481c <xQueueGenericCreate>
 8006830:	4602      	mov	r2, r0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]
}
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	080083f8 	.word	0x080083f8

08006844 <_ZN10UartHelperD1Ev>:

UartHelper::~UartHelper() {
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	4a04      	ldr	r2, [pc, #16]	; (8006860 <_ZN10UartHelperD1Ev+0x1c>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	080083f8 	.word	0x080083f8

08006864 <_ZN10UartHelperD0Ev>:
UartHelper::~UartHelper() {
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
}
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ffe9 	bl	8006844 <_ZN10UartHelperD1Ev>
 8006872:	210c      	movs	r1, #12
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 ff7a 	bl	800776e <_ZdlPvj>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>:

void UartHelper::init(UART_HandleTypeDef *main_huart){
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	huart = main_huart;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <_ZN10UartHelper6printfEPKcz>:

void UartHelper::printf(const char* fmt, ...) {
 80068a0:	b40e      	push	{r1, r2, r3}
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b089      	sub	sp, #36	; 0x24
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
	char buff[20];
    //int len = strlen(fmt);
    //void* buff = calloc(len+1, sizeof(char));
    va_list args;
    va_start(args, fmt);
 80068aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068ae:	60bb      	str	r3, [r7, #8]
    vsnprintf((char*)buff, sizeof(buff), fmt, args);
 80068b0:	f107 000c 	add.w	r0, r7, #12
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	2114      	movs	r1, #20
 80068ba:	f001 f97f 	bl	8007bbc <vsniprintf>
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6858      	ldr	r0, [r3, #4]
 80068c2:	f107 010c 	add.w	r1, r7, #12
 80068c6:	2300      	movs	r3, #0
 80068c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068cc:	f7fe f802 	bl	80048d4 <xQueueGenericSend>
    va_end(args);
}
 80068d0:	bf00      	nop
 80068d2:	3724      	adds	r7, #36	; 0x24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068da:	b003      	add	sp, #12
 80068dc:	4770      	bx	lr

080068de <_ZN10UartHelper6printfEPKh>:
void UartHelper::printf(const uint8_t* buff) {
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
//	uint8_t buff[20];
//    va_list args;
//    va_start(args, fmt);
//    vsnprintf(buff, sizeof(buff), fmt, args);
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6858      	ldr	r0, [r3, #4]
 80068ec:	4639      	mov	r1, r7
 80068ee:	2300      	movs	r3, #0
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f4:	f7fd ffee 	bl	80048d4 <xQueueGenericSend>
//    va_end(args);
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <_ZN10UartHelper8UARTTaskEv>:

void UartHelper::UARTTask()
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  char buff[20];
	  xQueueReceive( uart_queue, &( buff ), portMAX_DELAY );
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f107 0108 	add.w	r1, r7, #8
 8006910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe f8d7 	bl	8004ac8 <xQueueReceive>
	  int len = strlen(buff);
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4618      	mov	r0, r3
 8006920:	f7f9 fcae 	bl	8000280 <strlen>
 8006924:	4603      	mov	r3, r0
 8006926:	61fb      	str	r3, [r7, #28]
	  HAL_UART_Transmit(huart, (uint8_t*)buff, len, HAL_MAX_DELAY);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6898      	ldr	r0, [r3, #8]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	b29a      	uxth	r2, r3
 8006930:	f107 0108 	add.w	r1, r7, #8
 8006934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006938:	f7fc f9f6 	bl	8002d28 <HAL_UART_Transmit>
	  osDelay(50);
 800693c:	2032      	movs	r0, #50	; 0x32
 800693e:	f7fd fe3c 	bl	80045ba <osDelay>
  }
 8006942:	e7e1      	b.n	8006908 <_ZN10UartHelper8UARTTaskEv+0x8>

08006944 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a07      	ldr	r2, [pc, #28]	; (8006970 <vApplicationGetIdleTaskMemory+0x2c>)
 8006954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a06      	ldr	r2, [pc, #24]	; (8006974 <vApplicationGetIdleTaskMemory+0x30>)
 800695a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20003e28 	.word	0x20003e28
 8006974:	20003e7c 	.word	0x20003e7c

08006978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006978:	b5b0      	push	{r4, r5, r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800697e:	f7f9 fe07 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006982:	f000 f839 	bl	80069f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006986:	f000 fa45 	bl	8006e14 <MX_GPIO_Init>
  MX_SPI1_Init();
 800698a:	f000 f89f 	bl	8006acc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800698e:	f000 fa17 	bl	8006dc0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8006992:	f000 f929 	bl	8006be8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006996:	f000 f97b 	bl	8006c90 <MX_TIM3_Init>
  MX_TIM1_Init();
 800699a:	f000 f8cd 	bl	8006b38 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <main+0x64>)
 80069a0:	1d3c      	adds	r4, r7, #4
 80069a2:	461d      	mov	r5, r3
 80069a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fd fdb4 	bl	8004522 <osThreadCreate>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <main+0x68>)
 80069be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  setup(&huart2, &hspi1, &htim3, &htim3, &htim2, &htim1);
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <main+0x6c>)
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <main+0x70>)
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4b08      	ldr	r3, [pc, #32]	; (80069ec <main+0x74>)
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <main+0x74>)
 80069cc:	4908      	ldr	r1, [pc, #32]	; (80069f0 <main+0x78>)
 80069ce:	4809      	ldr	r0, [pc, #36]	; (80069f4 <main+0x7c>)
 80069d0:	f000 fb58 	bl	8007084 <setup>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80069d4:	f7fd fd9e 	bl	8004514 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80069d8:	e7fe      	b.n	80069d8 <main+0x60>
 80069da:	bf00      	nop
 80069dc:	0800832c 	.word	0x0800832c
 80069e0:	200040b8 	.word	0x200040b8
 80069e4:	200040fc 	.word	0x200040fc
 80069e8:	20004194 	.word	0x20004194
 80069ec:	200040bc 	.word	0x200040bc
 80069f0:	2000413c 	.word	0x2000413c
 80069f4:	200041d4 	.word	0x200041d4

080069f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b094      	sub	sp, #80	; 0x50
 80069fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069fe:	f107 0320 	add.w	r3, r7, #32
 8006a02:	2230      	movs	r2, #48	; 0x30
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 ffa8 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	605a      	str	r2, [r3, #4]
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	4b28      	ldr	r3, [pc, #160]	; (8006ac4 <SystemClock_Config+0xcc>)
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	4a27      	ldr	r2, [pc, #156]	; (8006ac4 <SystemClock_Config+0xcc>)
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a2c:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <SystemClock_Config+0xcc>)
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <SystemClock_Config+0xd0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <SystemClock_Config+0xd0>)
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <SystemClock_Config+0xd0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006a5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a62:	2302      	movs	r3, #2
 8006a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006a70:	2348      	movs	r3, #72	; 0x48
 8006a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a74:	2302      	movs	r3, #2
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006a78:	2307      	movs	r3, #7
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a7c:	f107 0320 	add.w	r3, r7, #32
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fa f88b 	bl	8000b9c <HAL_RCC_OscConfig>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006a8c:	f000 fa8e 	bl	8006fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a90:	230f      	movs	r3, #15
 8006a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a94:	2302      	movs	r3, #2
 8006a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	2102      	movs	r1, #2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fa fab7 	bl	8001020 <HAL_RCC_ClockConfig>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006ab8:	f000 fa78 	bl	8006fac <Error_Handler>
  }
}
 8006abc:	bf00      	nop
 8006abe:	3750      	adds	r7, #80	; 0x50
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	40007000 	.word	0x40007000

08006acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <MX_SPI1_Init+0x68>)
 8006ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ae4:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006af6:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b04:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006b18:	220a      	movs	r2, #10
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006b1c:	4804      	ldr	r0, [pc, #16]	; (8006b30 <MX_SPI1_Init+0x64>)
 8006b1e:	f7fa fc9f 	bl	8001460 <HAL_SPI_Init>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006b28:	f000 fa40 	bl	8006fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006b2c:	bf00      	nop
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	2000413c 	.word	0x2000413c
 8006b34:	40013000 	.word	0x40013000

08006b38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08c      	sub	sp, #48	; 0x30
 8006b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b3e:	f107 030c 	add.w	r3, r7, #12
 8006b42:	2224      	movs	r2, #36	; 0x24
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 ff08 	bl	800795c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b54:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <MX_TIM1_Init+0xac>)
 8006b58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b5a:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b60:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b80:	2303      	movs	r3, #3
 8006b82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006b94:	2302      	movs	r3, #2
 8006b96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006ba4:	f107 030c 	add.w	r3, r7, #12
 8006ba8:	4619      	mov	r1, r3
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006bac:	f7fb fa30 	bl	8002010 <HAL_TIM_Encoder_Init>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8006bb6:	f000 f9f9 	bl	8006fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4806      	ldr	r0, [pc, #24]	; (8006be0 <MX_TIM1_Init+0xa8>)
 8006bc8:	f7fc f808 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8006bd2:	f000 f9eb 	bl	8006fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006bd6:	bf00      	nop
 8006bd8:	3730      	adds	r7, #48	; 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	200040fc 	.word	0x200040fc
 8006be4:	40010000 	.word	0x40010000

08006be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006bee:	f107 030c 	add.w	r3, r7, #12
 8006bf2:	2224      	movs	r2, #36	; 0x24
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 feb0 	bl	800795c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bfc:	1d3b      	adds	r3, r7, #4
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006c04:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006c0c:	4b1f      	ldr	r3, [pc, #124]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006c18:	4b1c      	ldr	r3, [pc, #112]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c26:	4b19      	ldr	r3, [pc, #100]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006c40:	2302      	movs	r3, #2
 8006c42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006c44:	2301      	movs	r3, #1
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006c50:	f107 030c 	add.w	r3, r7, #12
 8006c54:	4619      	mov	r1, r3
 8006c56:	480d      	ldr	r0, [pc, #52]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c58:	f7fb f9da 	bl	8002010 <HAL_TIM_Encoder_Init>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8006c62:	f000 f9a3 	bl	8006fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006c6e:	1d3b      	adds	r3, r7, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4806      	ldr	r0, [pc, #24]	; (8006c8c <MX_TIM2_Init+0xa4>)
 8006c74:	f7fb ffb2 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8006c7e:	f000 f995 	bl	8006fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006c82:	bf00      	nop
 8006c84:	3730      	adds	r7, #48	; 0x30
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20004194 	.word	0x20004194

08006c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08e      	sub	sp, #56	; 0x38
 8006c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
 8006ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ca4:	f107 0320 	add.w	r3, r7, #32
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006cae:	1d3b      	adds	r3, r7, #4
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	611a      	str	r2, [r3, #16]
 8006cbc:	615a      	str	r2, [r3, #20]
 8006cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006cc0:	4b3d      	ldr	r3, [pc, #244]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006cc2:	4a3e      	ldr	r2, [pc, #248]	; (8006dbc <MX_TIM3_Init+0x12c>)
 8006cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 8006cc6:	4b3c      	ldr	r3, [pc, #240]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006cc8:	2228      	movs	r2, #40	; 0x28
 8006cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ccc:	4b3a      	ldr	r3, [pc, #232]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256;
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cda:	4b37      	ldr	r3, [pc, #220]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ce0:	4b35      	ldr	r3, [pc, #212]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006ce6:	4834      	ldr	r0, [pc, #208]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006ce8:	f7fb f90e 	bl	8001f08 <HAL_TIM_Base_Init>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8006cf2:	f000 f95b 	bl	8006fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d00:	4619      	mov	r1, r3
 8006d02:	482d      	ldr	r0, [pc, #180]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d04:	f7fb fbe4 	bl	80024d0 <HAL_TIM_ConfigClockSource>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8006d0e:	f000 f94d 	bl	8006fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006d12:	4829      	ldr	r0, [pc, #164]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d14:	f7fb f947 	bl	8001fa6 <HAL_TIM_PWM_Init>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8006d1e:	f000 f945 	bl	8006fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d22:	2300      	movs	r3, #0
 8006d24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006d2a:	f107 0320 	add.w	r3, r7, #32
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4821      	ldr	r0, [pc, #132]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d32:	f7fb ff53 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006d3c:	f000 f936 	bl	8006fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d40:	2360      	movs	r3, #96	; 0x60
 8006d42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	2200      	movs	r2, #0
 8006d54:	4619      	mov	r1, r3
 8006d56:	4818      	ldr	r0, [pc, #96]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d58:	f7fb faf4 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8006d62:	f000 f923 	bl	8006fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	2204      	movs	r2, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4812      	ldr	r0, [pc, #72]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d6e:	f7fb fae9 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8006d78:	f000 f918 	bl	8006fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	2208      	movs	r2, #8
 8006d80:	4619      	mov	r1, r3
 8006d82:	480d      	ldr	r0, [pc, #52]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d84:	f7fb fade 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8006d8e:	f000 f90d 	bl	8006fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006d92:	1d3b      	adds	r3, r7, #4
 8006d94:	220c      	movs	r2, #12
 8006d96:	4619      	mov	r1, r3
 8006d98:	4807      	ldr	r0, [pc, #28]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006d9a:	f7fb fad3 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8006da4:	f000 f902 	bl	8006fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006da8:	4803      	ldr	r0, [pc, #12]	; (8006db8 <MX_TIM3_Init+0x128>)
 8006daa:	f000 fb19 	bl	80073e0 <HAL_TIM_MspPostInit>

}
 8006dae:	bf00      	nop
 8006db0:	3738      	adds	r7, #56	; 0x38
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	200040bc 	.word	0x200040bc
 8006dbc:	40000400 	.word	0x40000400

08006dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006dc4:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006dc6:	4a12      	ldr	r2, [pc, #72]	; (8006e10 <MX_USART2_UART_Init+0x50>)
 8006dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006de4:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006de6:	220c      	movs	r2, #12
 8006de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dea:	4b08      	ldr	r3, [pc, #32]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006df0:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006df6:	4805      	ldr	r0, [pc, #20]	; (8006e0c <MX_USART2_UART_Init+0x4c>)
 8006df8:	f7fb ff49 	bl	8002c8e <HAL_UART_Init>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006e02:	f000 f8d3 	bl	8006fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006e06:	bf00      	nop
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200041d4 	.word	0x200041d4
 8006e10:	40004400 	.word	0x40004400

08006e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e1a:	f107 0314 	add.w	r3, r7, #20
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	4b4d      	ldr	r3, [pc, #308]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	4a4c      	ldr	r2, [pc, #304]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	6313      	str	r3, [r2, #48]	; 0x30
 8006e3a:	4b4a      	ldr	r3, [pc, #296]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	4b46      	ldr	r3, [pc, #280]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	4a45      	ldr	r2, [pc, #276]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	6313      	str	r3, [r2, #48]	; 0x30
 8006e56:	4b43      	ldr	r3, [pc, #268]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e62:	2300      	movs	r3, #0
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	4b3f      	ldr	r3, [pc, #252]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	4a3e      	ldr	r2, [pc, #248]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	6313      	str	r3, [r2, #48]	; 0x30
 8006e72:	4b3c      	ldr	r3, [pc, #240]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	60bb      	str	r3, [r7, #8]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	4b38      	ldr	r3, [pc, #224]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	4a37      	ldr	r2, [pc, #220]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e8e:	4b35      	ldr	r3, [pc, #212]	; (8006f64 <MX_GPIO_Init+0x150>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	607b      	str	r3, [r7, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2110      	movs	r1, #16
 8006e9e:	4832      	ldr	r0, [pc, #200]	; (8006f68 <MX_GPIO_Init+0x154>)
 8006ea0:	f7f9 fe3e 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f247 4145 	movw	r1, #29765	; 0x7445
 8006eaa:	4830      	ldr	r0, [pc, #192]	; (8006f6c <MX_GPIO_Init+0x158>)
 8006eac:	f7f9 fe38 	bl	8000b20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	21c0      	movs	r1, #192	; 0xc0
 8006eb4:	482e      	ldr	r0, [pc, #184]	; (8006f70 <MX_GPIO_Init+0x15c>)
 8006eb6:	f7f9 fe33 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_12;
 8006eba:	f241 430c 	movw	r3, #5132	; 0x140c
 8006ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ec0:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <MX_GPIO_Init+0x160>)
 8006ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ec8:	f107 0314 	add.w	r3, r7, #20
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4828      	ldr	r0, [pc, #160]	; (8006f70 <MX_GPIO_Init+0x15c>)
 8006ed0:	f7f9 fca4 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ee4:	f107 0314 	add.w	r3, r7, #20
 8006ee8:	4619      	mov	r1, r3
 8006eea:	481f      	ldr	r0, [pc, #124]	; (8006f68 <MX_GPIO_Init+0x154>)
 8006eec:	f7f9 fc96 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12 
                           PB13 PB14 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8006ef0:	f247 4345 	movw	r3, #29765	; 0x7445
 8006ef4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006efe:	2300      	movs	r3, #0
 8006f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	4619      	mov	r1, r3
 8006f08:	4818      	ldr	r0, [pc, #96]	; (8006f6c <MX_GPIO_Init+0x158>)
 8006f0a:	f7f9 fc87 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f0e:	23c0      	movs	r3, #192	; 0xc0
 8006f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f1e:	f107 0314 	add.w	r3, r7, #20
 8006f22:	4619      	mov	r1, r3
 8006f24:	4812      	ldr	r0, [pc, #72]	; (8006f70 <MX_GPIO_Init+0x15c>)
 8006f26:	f7f9 fc79 	bl	800081c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2105      	movs	r1, #5
 8006f2e:	2008      	movs	r0, #8
 8006f30:	f7f9 fc4a 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006f34:	2008      	movs	r0, #8
 8006f36:	f7f9 fc63 	bl	8000800 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2105      	movs	r1, #5
 8006f3e:	2009      	movs	r0, #9
 8006f40:	f7f9 fc42 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006f44:	2009      	movs	r0, #9
 8006f46:	f7f9 fc5b 	bl	8000800 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2105      	movs	r1, #5
 8006f4e:	2028      	movs	r0, #40	; 0x28
 8006f50:	f7f9 fc3a 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006f54:	2028      	movs	r0, #40	; 0x28
 8006f56:	f7f9 fc53 	bl	8000800 <HAL_NVIC_EnableIRQ>

}
 8006f5a:	bf00      	nop
 8006f5c:	3728      	adds	r7, #40	; 0x28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40023800 	.word	0x40023800
 8006f68:	40020000 	.word	0x40020000
 8006f6c:	40020400 	.word	0x40020400
 8006f70:	40020800 	.word	0x40020800
 8006f74:	10310000 	.word	0x10310000

08006f78 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
//		__HAL_TIM_SetCompare(htim, CHANNEL_REV1, speed * (-1));
//	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006f80:	2001      	movs	r0, #1
 8006f82:	f7fd fb1a 	bl	80045ba <osDelay>
 8006f86:	e7fb      	b.n	8006f80 <StartDefaultTask+0x8>

08006f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006f9a:	f7f9 fb1b 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40000800 	.word	0x40000800

08006fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <_Z15StartSecondTaskPKv>:
static TIM_HandleTypeDef *htim = nullptr;
static TIM_HandleTypeDef *htim2 = nullptr;


void StartSecondTask(void const * argument)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  uart_helper.printf("!!!!!!!!!!!!!!!!\n\0");
 8006fc4:	4904      	ldr	r1, [pc, #16]	; (8006fd8 <_Z15StartSecondTaskPKv+0x1c>)
 8006fc6:	4805      	ldr	r0, [pc, #20]	; (8006fdc <_Z15StartSecondTaskPKv+0x20>)
 8006fc8:	f7ff fc6a 	bl	80068a0 <_ZN10UartHelper6printfEPKcz>
	  osDelay(500);
 8006fcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006fd0:	f7fd faf3 	bl	80045ba <osDelay>
	  uart_helper.printf("!!!!!!!!!!!!!!!!\n\0");
 8006fd4:	e7f6      	b.n	8006fc4 <_Z15StartSecondTaskPKv+0x8>
 8006fd6:	bf00      	nop
 8006fd8:	08008348 	.word	0x08008348
 8006fdc:	20004084 	.word	0x20004084

08006fe0 <_Z13StartUARTTaskPKv>:
  }
}


void StartUARTTask(void const * argument)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	uart_helper.UARTTask();
 8006fe8:	4803      	ldr	r0, [pc, #12]	; (8006ff8 <_Z13StartUARTTaskPKv+0x18>)
 8006fea:	f7ff fc89 	bl	8006900 <_ZN10UartHelper8UARTTaskEv>
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20004084 	.word	0x20004084

08006ffc <_Z19StartSocketSendTaskPKv>:
//{
//	socket_client.socket_statecheck_task();
//}

void StartSocketSendTask(void const * argument)
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b0ad      	sub	sp, #180	; 0xb4
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	std::string str = "1234";
 8007004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fbb4 	bl	8007776 <_ZNSaIcEC1Ev>
 800700e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007012:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007016:	4918      	ldr	r1, [pc, #96]	; (8007078 <_Z19StartSocketSendTaskPKv+0x7c>)
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fc03 	bl	8007824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800701e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fba8 	bl	8007778 <_ZNSaIcED1Ev>
	 const static uint16_t rbuflen = 128;
	uint8_t rbuf[rbuflen];
	uint16_t Size = 5;
 8007028:	2305      	movs	r3, #5
 800702a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	uint32_t* rdmaInd;
	  for(;;)
	  {
		  socket_client.socket_receive(rbuf, Size, rdmaInd);
 800702e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8007032:	f107 010c 	add.w	r1, r7, #12
 8007036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800703a:	4810      	ldr	r0, [pc, #64]	; (800707c <_Z19StartSocketSendTaskPKv+0x80>)
 800703c:	f7ff fa90 	bl	8006560 <_ZN12SocketClient14socket_receiveEPhtPm>
		  uart_helper.printf(rbuf);
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	4619      	mov	r1, r3
 8007046:	480e      	ldr	r0, [pc, #56]	; (8007080 <_Z19StartSocketSendTaskPKv+0x84>)
 8007048:	f7ff fc49 	bl	80068de <_ZN10UartHelper6printfEPKh>
		  socket_client.socket_send(str.c_str(), str.length());
 800704c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fbc1 	bl	80077d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007056:	4604      	mov	r4, r0
 8007058:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fbb9 	bl	80077d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8007062:	4603      	mov	r3, r0
 8007064:	b29b      	uxth	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	4621      	mov	r1, r4
 800706a:	4804      	ldr	r0, [pc, #16]	; (800707c <_Z19StartSocketSendTaskPKv+0x80>)
 800706c:	f7ff fa42 	bl	80064f4 <_ZN12SocketClient11socket_sendEPKct>
		  osDelay(100);
 8007070:	2064      	movs	r0, #100	; 0x64
 8007072:	f7fd faa2 	bl	80045ba <osDelay>
		  socket_client.socket_receive(rbuf, Size, rdmaInd);
 8007076:	e7da      	b.n	800702e <_Z19StartSocketSendTaskPKv+0x32>
 8007078:	0800835c 	.word	0x0800835c
 800707c:	20004090 	.word	0x20004090
 8007080:	20004084 	.word	0x20004084

08007084 <setup>:
}

void setup(UART_HandleTypeDef *main_huart, SPI_HandleTypeDef *main_hspi1,
		TIM_HandleTypeDef *main_htim, TIM_HandleTypeDef *main_htim2,
		TIM_HandleTypeDef *main_encoder_htim1, TIM_HandleTypeDef *main_encoder_htim2)
{
 8007084:	b5b0      	push	{r4, r5, r7, lr}
 8007086:	b09a      	sub	sp, #104	; 0x68
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]

	  huart = main_huart;
 8007092:	4a27      	ldr	r2, [pc, #156]	; (8007130 <setup+0xac>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6013      	str	r3, [r2, #0]
	  hspi = main_hspi1;
 8007098:	4a26      	ldr	r2, [pc, #152]	; (8007134 <setup+0xb0>)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	6013      	str	r3, [r2, #0]
	  uart_helper.init(huart);
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <setup+0xac>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	4824      	ldr	r0, [pc, #144]	; (8007138 <setup+0xb4>)
 80070a6:	f7ff fbed 	bl	8006884 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>

	  socket_client.init(hspi, &uart_helper);
 80070aa:	4b22      	ldr	r3, [pc, #136]	; (8007134 <setup+0xb0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a22      	ldr	r2, [pc, #136]	; (8007138 <setup+0xb4>)
 80070b0:	4619      	mov	r1, r3
 80070b2:	4822      	ldr	r0, [pc, #136]	; (800713c <setup+0xb8>)
 80070b4:	f7ff f9a8 	bl	8006408 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>
	  HAL_Delay(1000 * 2);
 80070b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80070bc:	f7f9 faaa 	bl	8000614 <HAL_Delay>
	  socket_client.socket_connect();
 80070c0:	481e      	ldr	r0, [pc, #120]	; (800713c <setup+0xb8>)
 80070c2:	f7ff f9fb 	bl	80064bc <_ZN12SocketClient14socket_connectEv>


	  //****** UART **********
	  osThreadDef(UartTask, StartUARTTask, osPriorityNormal, 1, 256);
 80070c6:	4b1e      	ldr	r3, [pc, #120]	; (8007140 <setup+0xbc>)
 80070c8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80070cc:	461d      	mov	r5, r3
 80070ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(UartTask), NULL);
 80070da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80070de:	2100      	movs	r1, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fd fa1e 	bl	8004522 <osThreadCreate>

	  //========== ROS ===============
//

	  //****** UART Test ***************
	  osThreadDef(SecondTask, StartSecondTask, osPriorityNormal, 1, 256);
 80070e6:	4b17      	ldr	r3, [pc, #92]	; (8007144 <setup+0xc0>)
 80070e8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80070ec:	461d      	mov	r5, r3
 80070ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(SecondTask), NULL);
 80070fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd fa0e 	bl	8004522 <osThreadCreate>

	  //******* Socket Test *************
	  osThreadDef(SocketSendTask, StartSocketSendTask, osPriorityNormal, 1, 256);
 8007106:	4b10      	ldr	r3, [pc, #64]	; (8007148 <setup+0xc4>)
 8007108:	f107 0414 	add.w	r4, r7, #20
 800710c:	461d      	mov	r5, r3
 800710e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(SocketSendTask), NULL);
 800711a:	f107 0314 	add.w	r3, r7, #20
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd f9fe 	bl	8004522 <osThreadCreate>

}
 8007126:	bf00      	nop
 8007128:	3768      	adds	r7, #104	; 0x68
 800712a:	46bd      	mov	sp, r7
 800712c:	bdb0      	pop	{r4, r5, r7, pc}
 800712e:	bf00      	nop
 8007130:	2000407c 	.word	0x2000407c
 8007134:	20004080 	.word	0x20004080
 8007138:	20004084 	.word	0x20004084
 800713c:	20004090 	.word	0x20004090
 8007140:	08008370 	.word	0x08008370
 8007144:	08008398 	.word	0x08008398
 8007148:	080083c4 	.word	0x080083c4

0800714c <_Z41__static_initialization_and_destruction_0ii>:
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10a      	bne.n	8007172 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007162:	4293      	cmp	r3, r2
 8007164:	d105      	bne.n	8007172 <_Z41__static_initialization_and_destruction_0ii+0x26>
UartHelper uart_helper;
 8007166:	480c      	ldr	r0, [pc, #48]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007168:	f7ff fb56 	bl	8006818 <_ZN10UartHelperC1Ev>
SocketClient socket_client;
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800716e:	f7ff f92f 	bl	80063d0 <_ZN12SocketClientC1Ev>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800717e:	4293      	cmp	r3, r2
 8007180:	d105      	bne.n	800718e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007182:	4806      	ldr	r0, [pc, #24]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007184:	f7ff f970 	bl	8006468 <_ZN12SocketClientD1Ev>
UartHelper uart_helper;
 8007188:	4803      	ldr	r0, [pc, #12]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800718a:	f7ff fb5b 	bl	8006844 <_ZN10UartHelperD1Ev>
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20004084 	.word	0x20004084
 800719c:	20004090 	.word	0x20004090

080071a0 <_GLOBAL__sub_I_huart>:
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80071a8:	2001      	movs	r0, #1
 80071aa:	f7ff ffcf 	bl	800714c <_Z41__static_initialization_and_destruction_0ii>
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <_GLOBAL__sub_D_huart>:
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7ff ffc7 	bl	800714c <_Z41__static_initialization_and_destruction_0ii>
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <HAL_MspInit+0x54>)
 80071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ce:	4a11      	ldr	r2, [pc, #68]	; (8007214 <HAL_MspInit+0x54>)
 80071d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071d4:	6453      	str	r3, [r2, #68]	; 0x44
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <HAL_MspInit+0x54>)
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071de:	607b      	str	r3, [r7, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	2300      	movs	r3, #0
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_MspInit+0x54>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <HAL_MspInit+0x54>)
 80071ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f0:	6413      	str	r3, [r2, #64]	; 0x40
 80071f2:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HAL_MspInit+0x54>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80071fe:	2200      	movs	r2, #0
 8007200:	210f      	movs	r1, #15
 8007202:	f06f 0001 	mvn.w	r0, #1
 8007206:	f7f9 fadf 	bl	80007c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800

08007218 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a19      	ldr	r2, [pc, #100]	; (800729c <HAL_SPI_MspInit+0x84>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d12b      	bne.n	8007292 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <HAL_SPI_MspInit+0x88>)
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <HAL_SPI_MspInit+0x88>)
 8007244:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007248:	6453      	str	r3, [r2, #68]	; 0x44
 800724a:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <HAL_SPI_MspInit+0x88>)
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <HAL_SPI_MspInit+0x88>)
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	4a10      	ldr	r2, [pc, #64]	; (80072a0 <HAL_SPI_MspInit+0x88>)
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	6313      	str	r3, [r2, #48]	; 0x30
 8007266:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <HAL_SPI_MspInit+0x88>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007272:	23e0      	movs	r3, #224	; 0xe0
 8007274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007276:	2302      	movs	r3, #2
 8007278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800727e:	2303      	movs	r3, #3
 8007280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007282:	2305      	movs	r3, #5
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007286:	f107 0314 	add.w	r3, r7, #20
 800728a:	4619      	mov	r1, r3
 800728c:	4805      	ldr	r0, [pc, #20]	; (80072a4 <HAL_SPI_MspInit+0x8c>)
 800728e:	f7f9 fac5 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007292:	bf00      	nop
 8007294:	3728      	adds	r7, #40	; 0x28
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40013000 	.word	0x40013000
 80072a0:	40023800 	.word	0x40023800
 80072a4:	40020000 	.word	0x40020000

080072a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08c      	sub	sp, #48	; 0x30
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b0:	f107 031c 	add.w	r3, r7, #28
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	605a      	str	r2, [r3, #4]
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a32      	ldr	r2, [pc, #200]	; (8007390 <HAL_TIM_Encoder_MspInit+0xe8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d12d      	bne.n	8007326 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	4b31      	ldr	r3, [pc, #196]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 80072d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d2:	4a30      	ldr	r2, [pc, #192]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	6453      	str	r3, [r2, #68]	; 0x44
 80072da:	4b2e      	ldr	r3, [pc, #184]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	4b2a      	ldr	r3, [pc, #168]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	4a29      	ldr	r2, [pc, #164]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	6313      	str	r3, [r2, #48]	; 0x30
 80072f6:	4b27      	ldr	r3, [pc, #156]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007308:	2302      	movs	r3, #2
 800730a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007310:	2300      	movs	r3, #0
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007314:	2301      	movs	r3, #1
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007318:	f107 031c 	add.w	r3, r7, #28
 800731c:	4619      	mov	r1, r3
 800731e:	481e      	ldr	r0, [pc, #120]	; (8007398 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007320:	f7f9 fa7c 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007324:	e030      	b.n	8007388 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d12b      	bne.n	8007388 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	4b17      	ldr	r3, [pc, #92]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	4a16      	ldr	r2, [pc, #88]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	6413      	str	r3, [r2, #64]	; 0x40
 8007340:	4b14      	ldr	r3, [pc, #80]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	4b10      	ldr	r3, [pc, #64]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	4a0f      	ldr	r2, [pc, #60]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	6313      	str	r3, [r2, #48]	; 0x30
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <HAL_TIM_Encoder_MspInit+0xec>)
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007368:	2303      	movs	r3, #3
 800736a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800736c:	2302      	movs	r3, #2
 800736e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007370:	2300      	movs	r3, #0
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007374:	2300      	movs	r3, #0
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007378:	2301      	movs	r3, #1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800737c:	f107 031c 	add.w	r3, r7, #28
 8007380:	4619      	mov	r1, r3
 8007382:	4805      	ldr	r0, [pc, #20]	; (8007398 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007384:	f7f9 fa4a 	bl	800081c <HAL_GPIO_Init>
}
 8007388:	bf00      	nop
 800738a:	3730      	adds	r7, #48	; 0x30
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40010000 	.word	0x40010000
 8007394:	40023800 	.word	0x40023800
 8007398:	40020000 	.word	0x40020000

0800739c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <HAL_TIM_Base_MspInit+0x3c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10d      	bne.n	80073ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <HAL_TIM_Base_MspInit+0x40>)
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	4a09      	ldr	r2, [pc, #36]	; (80073dc <HAL_TIM_Base_MspInit+0x40>)
 80073b8:	f043 0302 	orr.w	r3, r3, #2
 80073bc:	6413      	str	r3, [r2, #64]	; 0x40
 80073be:	4b07      	ldr	r3, [pc, #28]	; (80073dc <HAL_TIM_Base_MspInit+0x40>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40023800 	.word	0x40023800

080073e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	605a      	str	r2, [r3, #4]
 80073f2:	609a      	str	r2, [r3, #8]
 80073f4:	60da      	str	r2, [r3, #12]
 80073f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a21      	ldr	r2, [pc, #132]	; (8007484 <HAL_TIM_MspPostInit+0xa4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d13c      	bne.n	800747c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	4b20      	ldr	r3, [pc, #128]	; (8007488 <HAL_TIM_MspPostInit+0xa8>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <HAL_TIM_MspPostInit+0xa8>)
 800740c:	f043 0302 	orr.w	r3, r3, #2
 8007410:	6313      	str	r3, [r2, #48]	; 0x30
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <HAL_TIM_MspPostInit+0xa8>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <HAL_TIM_MspPostInit+0xa8>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_TIM_MspPostInit+0xa8>)
 8007428:	f043 0304 	orr.w	r3, r3, #4
 800742c:	6313      	str	r3, [r2, #48]	; 0x30
 800742e:	4b16      	ldr	r3, [pc, #88]	; (8007488 <HAL_TIM_MspPostInit+0xa8>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800743a:	2332      	movs	r3, #50	; 0x32
 800743c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800743e:	2302      	movs	r3, #2
 8007440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007446:	2300      	movs	r3, #0
 8007448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800744a:	2302      	movs	r3, #2
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800744e:	f107 0314 	add.w	r3, r7, #20
 8007452:	4619      	mov	r1, r3
 8007454:	480d      	ldr	r0, [pc, #52]	; (800748c <HAL_TIM_MspPostInit+0xac>)
 8007456:	f7f9 f9e1 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800745a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007460:	2302      	movs	r3, #2
 8007462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007468:	2300      	movs	r3, #0
 800746a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800746c:	2302      	movs	r3, #2
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4619      	mov	r1, r3
 8007476:	4806      	ldr	r0, [pc, #24]	; (8007490 <HAL_TIM_MspPostInit+0xb0>)
 8007478:	f7f9 f9d0 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800747c:	bf00      	nop
 800747e:	3728      	adds	r7, #40	; 0x28
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40000400 	.word	0x40000400
 8007488:	40023800 	.word	0x40023800
 800748c:	40020400 	.word	0x40020400
 8007490:	40020800 	.word	0x40020800

08007494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08a      	sub	sp, #40	; 0x28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749c:	f107 0314 	add.w	r3, r7, #20
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	605a      	str	r2, [r3, #4]
 80074a6:	609a      	str	r2, [r3, #8]
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a19      	ldr	r2, [pc, #100]	; (8007518 <HAL_UART_MspInit+0x84>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d12b      	bne.n	800750e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <HAL_UART_MspInit+0x88>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	4a17      	ldr	r2, [pc, #92]	; (800751c <HAL_UART_MspInit+0x88>)
 80074c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c4:	6413      	str	r3, [r2, #64]	; 0x40
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <HAL_UART_MspInit+0x88>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	4b11      	ldr	r3, [pc, #68]	; (800751c <HAL_UART_MspInit+0x88>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	4a10      	ldr	r2, [pc, #64]	; (800751c <HAL_UART_MspInit+0x88>)
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	6313      	str	r3, [r2, #48]	; 0x30
 80074e2:	4b0e      	ldr	r3, [pc, #56]	; (800751c <HAL_UART_MspInit+0x88>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80074ee:	230c      	movs	r3, #12
 80074f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f2:	2302      	movs	r3, #2
 80074f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074f6:	2301      	movs	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074fa:	2303      	movs	r3, #3
 80074fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80074fe:	2307      	movs	r3, #7
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	4619      	mov	r1, r3
 8007508:	4805      	ldr	r0, [pc, #20]	; (8007520 <HAL_UART_MspInit+0x8c>)
 800750a:	f7f9 f987 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800750e:	bf00      	nop
 8007510:	3728      	adds	r7, #40	; 0x28
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40004400 	.word	0x40004400
 800751c:	40023800 	.word	0x40023800
 8007520:	40020000 	.word	0x40020000

08007524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08c      	sub	sp, #48	; 0x30
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8007534:	2200      	movs	r2, #0
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	201e      	movs	r0, #30
 800753a:	f7f9 f945 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800753e:	201e      	movs	r0, #30
 8007540:	f7f9 f95e 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <HAL_InitTick+0xa4>)
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <HAL_InitTick+0xa4>)
 800754e:	f043 0304 	orr.w	r3, r3, #4
 8007552:	6413      	str	r3, [r2, #64]	; 0x40
 8007554:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <HAL_InitTick+0xa4>)
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007560:	f107 0210 	add.w	r2, r7, #16
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7f9 ff46 	bl	80013fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007570:	f7f9 ff1c 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8007574:	4603      	mov	r3, r0
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <HAL_InitTick+0xa8>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	0c9b      	lsrs	r3, r3, #18
 8007584:	3b01      	subs	r3, #1
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8007588:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <HAL_InitTick+0xac>)
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <HAL_InitTick+0xb0>)
 800758c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <HAL_InitTick+0xac>)
 8007590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007594:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8007596:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <HAL_InitTick+0xac>)
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800759c:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <HAL_InitTick+0xac>)
 800759e:	2200      	movs	r2, #0
 80075a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_InitTick+0xac>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80075a8:	4809      	ldr	r0, [pc, #36]	; (80075d0 <HAL_InitTick+0xac>)
 80075aa:	f7fa fcad 	bl	8001f08 <HAL_TIM_Base_Init>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80075b4:	4806      	ldr	r0, [pc, #24]	; (80075d0 <HAL_InitTick+0xac>)
 80075b6:	f7fa fcd2 	bl	8001f5e <HAL_TIM_Base_Start_IT>
 80075ba:	4603      	mov	r3, r0
 80075bc:	e000      	b.n	80075c0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3730      	adds	r7, #48	; 0x30
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40023800 	.word	0x40023800
 80075cc:	431bde83 	.word	0x431bde83
 80075d0:	20004214 	.word	0x20004214
 80075d4:	40000800 	.word	0x40000800

080075d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075dc:	bf00      	nop
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075e6:	b480      	push	{r7}
 80075e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075ea:	e7fe      	b.n	80075ea <HardFault_Handler+0x4>

080075ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075f0:	e7fe      	b.n	80075f0 <MemManage_Handler+0x4>

080075f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075f2:	b480      	push	{r7}
 80075f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075f6:	e7fe      	b.n	80075f6 <BusFault_Handler+0x4>

080075f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075fc:	e7fe      	b.n	80075fc <UsageFault_Handler+0x4>

080075fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075fe:	b480      	push	{r7}
 8007600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007610:	2004      	movs	r0, #4
 8007612:	f7f9 fa9f 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007616:	bf00      	nop
 8007618:	bd80      	pop	{r7, pc}

0800761a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800761e:	2008      	movs	r0, #8
 8007620:	f7f9 fa98 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007624:	bf00      	nop
 8007626:	bd80      	pop	{r7, pc}

08007628 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800762c:	4802      	ldr	r0, [pc, #8]	; (8007638 <TIM4_IRQHandler+0x10>)
 800762e:	f7fa fd81 	bl	8002134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007632:	bf00      	nop
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20004214 	.word	0x20004214

0800763c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007640:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007644:	f7f9 fa86 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007648:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800764c:	f7f9 fa82 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}

08007654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
	return 1;
 8007658:	2301      	movs	r3, #1
}
 800765a:	4618      	mov	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <_kill>:

int _kill(int pid, int sig)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800766e:	f000 f917 	bl	80078a0 <__errno>
 8007672:	4602      	mov	r2, r0
 8007674:	2316      	movs	r3, #22
 8007676:	6013      	str	r3, [r2, #0]
	return -1;
 8007678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_exit>:

void _exit (int status)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800768c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff ffe7 	bl	8007664 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007696:	e7fe      	b.n	8007696 <_exit+0x12>

08007698 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <_sbrk+0x50>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <_sbrk+0x16>
		heap_end = &end;
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <_sbrk+0x50>)
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <_sbrk+0x54>)
 80076ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80076ae:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <_sbrk+0x50>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80076b4:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <_sbrk+0x50>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	466a      	mov	r2, sp
 80076be:	4293      	cmp	r3, r2
 80076c0:	d907      	bls.n	80076d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80076c2:	f000 f8ed 	bl	80078a0 <__errno>
 80076c6:	4602      	mov	r2, r0
 80076c8:	230c      	movs	r3, #12
 80076ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076d0:	e006      	b.n	80076e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <_sbrk+0x50>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	4a03      	ldr	r2, [pc, #12]	; (80076e8 <_sbrk+0x50>)
 80076dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200040a4 	.word	0x200040a4
 80076ec:	20004258 	.word	0x20004258

080076f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80076f4:	4b08      	ldr	r3, [pc, #32]	; (8007718 <SystemInit+0x28>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	4a07      	ldr	r2, [pc, #28]	; (8007718 <SystemInit+0x28>)
 80076fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <SystemInit+0x28>)
 8007706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800770a:	609a      	str	r2, [r3, #8]
#endif
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	e000ed00 	.word	0xe000ed00

0800771c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800771c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007754 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007720:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007722:	e003      	b.n	800772c <LoopCopyDataInit>

08007724 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007726:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007728:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800772a:	3104      	adds	r1, #4

0800772c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800772c:	480b      	ldr	r0, [pc, #44]	; (800775c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800772e:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007730:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007732:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007734:	d3f6      	bcc.n	8007724 <CopyDataInit>
  ldr  r2, =_sbss
 8007736:	4a0b      	ldr	r2, [pc, #44]	; (8007764 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007738:	e002      	b.n	8007740 <LoopFillZerobss>

0800773a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800773a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800773c:	f842 3b04 	str.w	r3, [r2], #4

08007740 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007742:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007744:	d3f9      	bcc.n	800773a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007746:	f7ff ffd3 	bl	80076f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800774a:	f000 f8af 	bl	80078ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800774e:	f7ff f913 	bl	8006978 <main>
  bx  lr    
 8007752:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007754:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8007758:	080084a8 	.word	0x080084a8
  ldr  r0, =_sdata
 800775c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007760:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8007764:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8007768:	20004258 	.word	0x20004258

0800776c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800776c:	e7fe      	b.n	800776c <ADC_IRQHandler>

0800776e <_ZdlPvj>:
 800776e:	f000 b800 	b.w	8007772 <_ZdlPv>

08007772 <_ZdlPv>:
 8007772:	f000 b8c7 	b.w	8007904 <free>

08007776 <_ZNSaIcEC1Ev>:
 8007776:	4770      	bx	lr

08007778 <_ZNSaIcED1Ev>:
 8007778:	4770      	bx	lr

0800777a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800777a:	b10a      	cbz	r2, 8007780 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800777c:	f000 b8ca 	b.w	8007914 <memcpy>
 8007780:	4770      	bx	lr
	...

08007784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007784:	b508      	push	{r3, lr}
 8007786:	680b      	ldr	r3, [r1, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	da02      	bge.n	8007792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800778c:	4809      	ldr	r0, [pc, #36]	; (80077b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800778e:	f000 f87c 	bl	800788a <_ZSt20__throw_length_errorPKc>
 8007792:	4293      	cmp	r3, r2
 8007794:	d908      	bls.n	80077a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8007796:	0052      	lsls	r2, r2, #1
 8007798:	4293      	cmp	r3, r2
 800779a:	d205      	bcs.n	80077a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800779c:	2a00      	cmp	r2, #0
 800779e:	bfb6      	itet	lt
 80077a0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80077a4:	600a      	strge	r2, [r1, #0]
 80077a6:	600b      	strlt	r3, [r1, #0]
 80077a8:	6808      	ldr	r0, [r1, #0]
 80077aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80077ae:	3001      	adds	r0, #1
 80077b0:	f000 b84e 	b.w	8007850 <_Znwj>
 80077b4:	08008442 	.word	0x08008442

080077b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80077b8:	2a01      	cmp	r2, #1
 80077ba:	b510      	push	{r4, lr}
 80077bc:	d102      	bne.n	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80077be:	780a      	ldrb	r2, [r1, #0]
 80077c0:	7002      	strb	r2, [r0, #0]
 80077c2:	bd10      	pop	{r4, pc}
 80077c4:	f7ff ffd9 	bl	800777a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80077c8:	e7fb      	b.n	80077c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080077ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80077ca:	b508      	push	{r3, lr}
 80077cc:	1a52      	subs	r2, r2, r1
 80077ce:	f7ff fff3 	bl	80077b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80077d2:	bd08      	pop	{r3, pc}

080077d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80077d4:	6840      	ldr	r0, [r0, #4]
 80077d6:	4770      	bx	lr

080077d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80077d8:	6800      	ldr	r0, [r0, #0]
 80077da:	4770      	bx	lr

080077dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80077dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	4616      	mov	r6, r2
 80077e2:	460d      	mov	r5, r1
 80077e4:	b919      	cbnz	r1, 80077ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80077e6:	b112      	cbz	r2, 80077ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80077e8:	480d      	ldr	r0, [pc, #52]	; (8007820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80077ea:	f000 f84b 	bl	8007884 <_ZSt19__throw_logic_errorPKc>
 80077ee:	1b73      	subs	r3, r6, r5
 80077f0:	2b0f      	cmp	r3, #15
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	d907      	bls.n	8007806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80077f6:	2200      	movs	r2, #0
 80077f8:	a901      	add	r1, sp, #4
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7ff ffc2 	bl	8007784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	6020      	str	r0, [r4, #0]
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	4632      	mov	r2, r6
 8007808:	4629      	mov	r1, r5
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	f7ff ffdd 	bl	80077ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007810:	9b01      	ldr	r3, [sp, #4]
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	6063      	str	r3, [r4, #4]
 8007816:	2100      	movs	r1, #0
 8007818:	54d1      	strb	r1, [r2, r3]
 800781a:	b002      	add	sp, #8
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	bf00      	nop
 8007820:	08008418 	.word	0x08008418

08007824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	f100 0308 	add.w	r3, r0, #8
 800782a:	4604      	mov	r4, r0
 800782c:	6003      	str	r3, [r0, #0]
 800782e:	460d      	mov	r5, r1
 8007830:	b159      	cbz	r1, 800784a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007832:	4608      	mov	r0, r1
 8007834:	f7f8 fd24 	bl	8000280 <strlen>
 8007838:	182a      	adds	r2, r5, r0
 800783a:	4620      	mov	r0, r4
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	4629      	mov	r1, r5
 8007842:	f7ff ffcb 	bl	80077dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007846:	4620      	mov	r0, r4
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800784e:	e7f4      	b.n	800783a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007850 <_Znwj>:
 8007850:	b510      	push	{r4, lr}
 8007852:	2800      	cmp	r0, #0
 8007854:	bf14      	ite	ne
 8007856:	4604      	movne	r4, r0
 8007858:	2401      	moveq	r4, #1
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f84a 	bl	80078f4 <malloc>
 8007860:	b930      	cbnz	r0, 8007870 <_Znwj+0x20>
 8007862:	f000 f807 	bl	8007874 <_ZSt15get_new_handlerv>
 8007866:	b908      	cbnz	r0, 800786c <_Znwj+0x1c>
 8007868:	f000 f812 	bl	8007890 <abort>
 800786c:	4780      	blx	r0
 800786e:	e7f4      	b.n	800785a <_Znwj+0xa>
 8007870:	bd10      	pop	{r4, pc}
	...

08007874 <_ZSt15get_new_handlerv>:
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <_ZSt15get_new_handlerv+0xc>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	f3bf 8f5b 	dmb	ish
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	200040a8 	.word	0x200040a8

08007884 <_ZSt19__throw_logic_errorPKc>:
 8007884:	b508      	push	{r3, lr}
 8007886:	f000 f803 	bl	8007890 <abort>

0800788a <_ZSt20__throw_length_errorPKc>:
 800788a:	b508      	push	{r3, lr}
 800788c:	f000 f800 	bl	8007890 <abort>

08007890 <abort>:
 8007890:	b508      	push	{r3, lr}
 8007892:	2006      	movs	r0, #6
 8007894:	f000 f94a 	bl	8007b2c <raise>
 8007898:	2001      	movs	r0, #1
 800789a:	f7ff fef3 	bl	8007684 <_exit>
	...

080078a0 <__errno>:
 80078a0:	4b01      	ldr	r3, [pc, #4]	; (80078a8 <__errno+0x8>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000034 	.word	0x20000034

080078ac <__libc_init_array>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4e0d      	ldr	r6, [pc, #52]	; (80078e4 <__libc_init_array+0x38>)
 80078b0:	4c0d      	ldr	r4, [pc, #52]	; (80078e8 <__libc_init_array+0x3c>)
 80078b2:	1ba4      	subs	r4, r4, r6
 80078b4:	10a4      	asrs	r4, r4, #2
 80078b6:	2500      	movs	r5, #0
 80078b8:	42a5      	cmp	r5, r4
 80078ba:	d109      	bne.n	80078d0 <__libc_init_array+0x24>
 80078bc:	4e0b      	ldr	r6, [pc, #44]	; (80078ec <__libc_init_array+0x40>)
 80078be:	4c0c      	ldr	r4, [pc, #48]	; (80078f0 <__libc_init_array+0x44>)
 80078c0:	f000 fc94 	bl	80081ec <_init>
 80078c4:	1ba4      	subs	r4, r4, r6
 80078c6:	10a4      	asrs	r4, r4, #2
 80078c8:	2500      	movs	r5, #0
 80078ca:	42a5      	cmp	r5, r4
 80078cc:	d105      	bne.n	80078da <__libc_init_array+0x2e>
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d4:	4798      	blx	r3
 80078d6:	3501      	adds	r5, #1
 80078d8:	e7ee      	b.n	80078b8 <__libc_init_array+0xc>
 80078da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078de:	4798      	blx	r3
 80078e0:	3501      	adds	r5, #1
 80078e2:	e7f2      	b.n	80078ca <__libc_init_array+0x1e>
 80078e4:	08008498 	.word	0x08008498
 80078e8:	08008498 	.word	0x08008498
 80078ec:	08008498 	.word	0x08008498
 80078f0:	080084a0 	.word	0x080084a0

080078f4 <malloc>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <malloc+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 b885 	b.w	8007a08 <_malloc_r>
 80078fe:	bf00      	nop
 8007900:	20000034 	.word	0x20000034

08007904 <free>:
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <free+0xc>)
 8007906:	4601      	mov	r1, r0
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	f000 b82f 	b.w	800796c <_free_r>
 800790e:	bf00      	nop
 8007910:	20000034 	.word	0x20000034

08007914 <memcpy>:
 8007914:	b510      	push	{r4, lr}
 8007916:	1e43      	subs	r3, r0, #1
 8007918:	440a      	add	r2, r1
 800791a:	4291      	cmp	r1, r2
 800791c:	d100      	bne.n	8007920 <memcpy+0xc>
 800791e:	bd10      	pop	{r4, pc}
 8007920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007928:	e7f7      	b.n	800791a <memcpy+0x6>

0800792a <memmove>:
 800792a:	4288      	cmp	r0, r1
 800792c:	b510      	push	{r4, lr}
 800792e:	eb01 0302 	add.w	r3, r1, r2
 8007932:	d807      	bhi.n	8007944 <memmove+0x1a>
 8007934:	1e42      	subs	r2, r0, #1
 8007936:	4299      	cmp	r1, r3
 8007938:	d00a      	beq.n	8007950 <memmove+0x26>
 800793a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007942:	e7f8      	b.n	8007936 <memmove+0xc>
 8007944:	4283      	cmp	r3, r0
 8007946:	d9f5      	bls.n	8007934 <memmove+0xa>
 8007948:	1881      	adds	r1, r0, r2
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	42d3      	cmn	r3, r2
 800794e:	d100      	bne.n	8007952 <memmove+0x28>
 8007950:	bd10      	pop	{r4, pc}
 8007952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007956:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800795a:	e7f7      	b.n	800794c <memmove+0x22>

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <_free_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4605      	mov	r5, r0
 8007970:	2900      	cmp	r1, #0
 8007972:	d045      	beq.n	8007a00 <_free_r+0x94>
 8007974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007978:	1f0c      	subs	r4, r1, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	bfb8      	it	lt
 800797e:	18e4      	addlt	r4, r4, r3
 8007980:	f000 f92a 	bl	8007bd8 <__malloc_lock>
 8007984:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <_free_r+0x98>)
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	4610      	mov	r0, r2
 800798a:	b933      	cbnz	r3, 800799a <_free_r+0x2e>
 800798c:	6063      	str	r3, [r4, #4]
 800798e:	6014      	str	r4, [r2, #0]
 8007990:	4628      	mov	r0, r5
 8007992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007996:	f000 b920 	b.w	8007bda <__malloc_unlock>
 800799a:	42a3      	cmp	r3, r4
 800799c:	d90c      	bls.n	80079b8 <_free_r+0x4c>
 800799e:	6821      	ldr	r1, [r4, #0]
 80079a0:	1862      	adds	r2, r4, r1
 80079a2:	4293      	cmp	r3, r2
 80079a4:	bf04      	itt	eq
 80079a6:	681a      	ldreq	r2, [r3, #0]
 80079a8:	685b      	ldreq	r3, [r3, #4]
 80079aa:	6063      	str	r3, [r4, #4]
 80079ac:	bf04      	itt	eq
 80079ae:	1852      	addeq	r2, r2, r1
 80079b0:	6022      	streq	r2, [r4, #0]
 80079b2:	6004      	str	r4, [r0, #0]
 80079b4:	e7ec      	b.n	8007990 <_free_r+0x24>
 80079b6:	4613      	mov	r3, r2
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	b10a      	cbz	r2, 80079c0 <_free_r+0x54>
 80079bc:	42a2      	cmp	r2, r4
 80079be:	d9fa      	bls.n	80079b6 <_free_r+0x4a>
 80079c0:	6819      	ldr	r1, [r3, #0]
 80079c2:	1858      	adds	r0, r3, r1
 80079c4:	42a0      	cmp	r0, r4
 80079c6:	d10b      	bne.n	80079e0 <_free_r+0x74>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	4401      	add	r1, r0
 80079cc:	1858      	adds	r0, r3, r1
 80079ce:	4282      	cmp	r2, r0
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	d1dd      	bne.n	8007990 <_free_r+0x24>
 80079d4:	6810      	ldr	r0, [r2, #0]
 80079d6:	6852      	ldr	r2, [r2, #4]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	4401      	add	r1, r0
 80079dc:	6019      	str	r1, [r3, #0]
 80079de:	e7d7      	b.n	8007990 <_free_r+0x24>
 80079e0:	d902      	bls.n	80079e8 <_free_r+0x7c>
 80079e2:	230c      	movs	r3, #12
 80079e4:	602b      	str	r3, [r5, #0]
 80079e6:	e7d3      	b.n	8007990 <_free_r+0x24>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	1821      	adds	r1, r4, r0
 80079ec:	428a      	cmp	r2, r1
 80079ee:	bf04      	itt	eq
 80079f0:	6811      	ldreq	r1, [r2, #0]
 80079f2:	6852      	ldreq	r2, [r2, #4]
 80079f4:	6062      	str	r2, [r4, #4]
 80079f6:	bf04      	itt	eq
 80079f8:	1809      	addeq	r1, r1, r0
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	605c      	str	r4, [r3, #4]
 80079fe:	e7c7      	b.n	8007990 <_free_r+0x24>
 8007a00:	bd38      	pop	{r3, r4, r5, pc}
 8007a02:	bf00      	nop
 8007a04:	200040ac 	.word	0x200040ac

08007a08 <_malloc_r>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	1ccd      	adds	r5, r1, #3
 8007a0c:	f025 0503 	bic.w	r5, r5, #3
 8007a10:	3508      	adds	r5, #8
 8007a12:	2d0c      	cmp	r5, #12
 8007a14:	bf38      	it	cc
 8007a16:	250c      	movcc	r5, #12
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	db01      	blt.n	8007a22 <_malloc_r+0x1a>
 8007a1e:	42a9      	cmp	r1, r5
 8007a20:	d903      	bls.n	8007a2a <_malloc_r+0x22>
 8007a22:	230c      	movs	r3, #12
 8007a24:	6033      	str	r3, [r6, #0]
 8007a26:	2000      	movs	r0, #0
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	f000 f8d5 	bl	8007bd8 <__malloc_lock>
 8007a2e:	4a21      	ldr	r2, [pc, #132]	; (8007ab4 <_malloc_r+0xac>)
 8007a30:	6814      	ldr	r4, [r2, #0]
 8007a32:	4621      	mov	r1, r4
 8007a34:	b991      	cbnz	r1, 8007a5c <_malloc_r+0x54>
 8007a36:	4c20      	ldr	r4, [pc, #128]	; (8007ab8 <_malloc_r+0xb0>)
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	b91b      	cbnz	r3, 8007a44 <_malloc_r+0x3c>
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f000 f83d 	bl	8007abc <_sbrk_r>
 8007a42:	6020      	str	r0, [r4, #0]
 8007a44:	4629      	mov	r1, r5
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 f838 	bl	8007abc <_sbrk_r>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d124      	bne.n	8007a9a <_malloc_r+0x92>
 8007a50:	230c      	movs	r3, #12
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	4630      	mov	r0, r6
 8007a56:	f000 f8c0 	bl	8007bda <__malloc_unlock>
 8007a5a:	e7e4      	b.n	8007a26 <_malloc_r+0x1e>
 8007a5c:	680b      	ldr	r3, [r1, #0]
 8007a5e:	1b5b      	subs	r3, r3, r5
 8007a60:	d418      	bmi.n	8007a94 <_malloc_r+0x8c>
 8007a62:	2b0b      	cmp	r3, #11
 8007a64:	d90f      	bls.n	8007a86 <_malloc_r+0x7e>
 8007a66:	600b      	str	r3, [r1, #0]
 8007a68:	50cd      	str	r5, [r1, r3]
 8007a6a:	18cc      	adds	r4, r1, r3
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 f8b4 	bl	8007bda <__malloc_unlock>
 8007a72:	f104 000b 	add.w	r0, r4, #11
 8007a76:	1d23      	adds	r3, r4, #4
 8007a78:	f020 0007 	bic.w	r0, r0, #7
 8007a7c:	1ac3      	subs	r3, r0, r3
 8007a7e:	d0d3      	beq.n	8007a28 <_malloc_r+0x20>
 8007a80:	425a      	negs	r2, r3
 8007a82:	50e2      	str	r2, [r4, r3]
 8007a84:	e7d0      	b.n	8007a28 <_malloc_r+0x20>
 8007a86:	428c      	cmp	r4, r1
 8007a88:	684b      	ldr	r3, [r1, #4]
 8007a8a:	bf16      	itet	ne
 8007a8c:	6063      	strne	r3, [r4, #4]
 8007a8e:	6013      	streq	r3, [r2, #0]
 8007a90:	460c      	movne	r4, r1
 8007a92:	e7eb      	b.n	8007a6c <_malloc_r+0x64>
 8007a94:	460c      	mov	r4, r1
 8007a96:	6849      	ldr	r1, [r1, #4]
 8007a98:	e7cc      	b.n	8007a34 <_malloc_r+0x2c>
 8007a9a:	1cc4      	adds	r4, r0, #3
 8007a9c:	f024 0403 	bic.w	r4, r4, #3
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d005      	beq.n	8007ab0 <_malloc_r+0xa8>
 8007aa4:	1a21      	subs	r1, r4, r0
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f000 f808 	bl	8007abc <_sbrk_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d0cf      	beq.n	8007a50 <_malloc_r+0x48>
 8007ab0:	6025      	str	r5, [r4, #0]
 8007ab2:	e7db      	b.n	8007a6c <_malloc_r+0x64>
 8007ab4:	200040ac 	.word	0x200040ac
 8007ab8:	200040b0 	.word	0x200040b0

08007abc <_sbrk_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4c06      	ldr	r4, [pc, #24]	; (8007ad8 <_sbrk_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	f7ff fde6 	bl	8007698 <_sbrk>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_sbrk_r+0x1a>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_sbrk_r+0x1a>
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20004254 	.word	0x20004254

08007adc <_raise_r>:
 8007adc:	291f      	cmp	r1, #31
 8007ade:	b538      	push	{r3, r4, r5, lr}
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	d904      	bls.n	8007af0 <_raise_r+0x14>
 8007ae6:	2316      	movs	r3, #22
 8007ae8:	6003      	str	r3, [r0, #0]
 8007aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007af2:	b112      	cbz	r2, 8007afa <_raise_r+0x1e>
 8007af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007af8:	b94b      	cbnz	r3, 8007b0e <_raise_r+0x32>
 8007afa:	4620      	mov	r0, r4
 8007afc:	f000 f830 	bl	8007b60 <_getpid_r>
 8007b00:	462a      	mov	r2, r5
 8007b02:	4601      	mov	r1, r0
 8007b04:	4620      	mov	r0, r4
 8007b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b0a:	f000 b817 	b.w	8007b3c <_kill_r>
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d00a      	beq.n	8007b28 <_raise_r+0x4c>
 8007b12:	1c59      	adds	r1, r3, #1
 8007b14:	d103      	bne.n	8007b1e <_raise_r+0x42>
 8007b16:	2316      	movs	r3, #22
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	2001      	movs	r0, #1
 8007b1c:	e7e7      	b.n	8007aee <_raise_r+0x12>
 8007b1e:	2400      	movs	r4, #0
 8007b20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b24:	4628      	mov	r0, r5
 8007b26:	4798      	blx	r3
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e7e0      	b.n	8007aee <_raise_r+0x12>

08007b2c <raise>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <raise+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f7ff bfd3 	b.w	8007adc <_raise_r>
 8007b36:	bf00      	nop
 8007b38:	20000034 	.word	0x20000034

08007b3c <_kill_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4c07      	ldr	r4, [pc, #28]	; (8007b5c <_kill_r+0x20>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4605      	mov	r5, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	f7ff fd8b 	bl	8007664 <_kill>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	d102      	bne.n	8007b58 <_kill_r+0x1c>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	b103      	cbz	r3, 8007b58 <_kill_r+0x1c>
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20004254 	.word	0x20004254

08007b60 <_getpid_r>:
 8007b60:	f7ff bd78 	b.w	8007654 <_getpid>

08007b64 <_vsniprintf_r>:
 8007b64:	b530      	push	{r4, r5, lr}
 8007b66:	1e14      	subs	r4, r2, #0
 8007b68:	4605      	mov	r5, r0
 8007b6a:	b09b      	sub	sp, #108	; 0x6c
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	da05      	bge.n	8007b7c <_vsniprintf_r+0x18>
 8007b70:	238b      	movs	r3, #139	; 0x8b
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b78:	b01b      	add	sp, #108	; 0x6c
 8007b7a:	bd30      	pop	{r4, r5, pc}
 8007b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b80:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b84:	bf14      	ite	ne
 8007b86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007b8a:	4623      	moveq	r3, r4
 8007b8c:	9302      	str	r3, [sp, #8]
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b94:	9100      	str	r1, [sp, #0]
 8007b96:	9104      	str	r1, [sp, #16]
 8007b98:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ba0:	4669      	mov	r1, sp
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f874 	bl	8007c90 <_svfiprintf_r>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	bfbc      	itt	lt
 8007bac:	238b      	movlt	r3, #139	; 0x8b
 8007bae:	602b      	strlt	r3, [r5, #0]
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	d0e1      	beq.n	8007b78 <_vsniprintf_r+0x14>
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e7dd      	b.n	8007b78 <_vsniprintf_r+0x14>

08007bbc <vsniprintf>:
 8007bbc:	b507      	push	{r0, r1, r2, lr}
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	460a      	mov	r2, r1
 8007bc4:	4601      	mov	r1, r0
 8007bc6:	4803      	ldr	r0, [pc, #12]	; (8007bd4 <vsniprintf+0x18>)
 8007bc8:	6800      	ldr	r0, [r0, #0]
 8007bca:	f7ff ffcb 	bl	8007b64 <_vsniprintf_r>
 8007bce:	b003      	add	sp, #12
 8007bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bd4:	20000034 	.word	0x20000034

08007bd8 <__malloc_lock>:
 8007bd8:	4770      	bx	lr

08007bda <__malloc_unlock>:
 8007bda:	4770      	bx	lr

08007bdc <__ssputs_r>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	688e      	ldr	r6, [r1, #8]
 8007be2:	429e      	cmp	r6, r3
 8007be4:	4682      	mov	sl, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4690      	mov	r8, r2
 8007bea:	4699      	mov	r9, r3
 8007bec:	d837      	bhi.n	8007c5e <__ssputs_r+0x82>
 8007bee:	898a      	ldrh	r2, [r1, #12]
 8007bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bf4:	d031      	beq.n	8007c5a <__ssputs_r+0x7e>
 8007bf6:	6825      	ldr	r5, [r4, #0]
 8007bf8:	6909      	ldr	r1, [r1, #16]
 8007bfa:	1a6f      	subs	r7, r5, r1
 8007bfc:	6965      	ldr	r5, [r4, #20]
 8007bfe:	2302      	movs	r3, #2
 8007c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c04:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c08:	f109 0301 	add.w	r3, r9, #1
 8007c0c:	443b      	add	r3, r7
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	bf38      	it	cc
 8007c12:	461d      	movcc	r5, r3
 8007c14:	0553      	lsls	r3, r2, #21
 8007c16:	d530      	bpl.n	8007c7a <__ssputs_r+0x9e>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7ff fef5 	bl	8007a08 <_malloc_r>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	b950      	cbnz	r0, 8007c38 <__ssputs_r+0x5c>
 8007c22:	230c      	movs	r3, #12
 8007c24:	f8ca 3000 	str.w	r3, [sl]
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c38:	463a      	mov	r2, r7
 8007c3a:	6921      	ldr	r1, [r4, #16]
 8007c3c:	f7ff fe6a 	bl	8007914 <memcpy>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	6126      	str	r6, [r4, #16]
 8007c4e:	6165      	str	r5, [r4, #20]
 8007c50:	443e      	add	r6, r7
 8007c52:	1bed      	subs	r5, r5, r7
 8007c54:	6026      	str	r6, [r4, #0]
 8007c56:	60a5      	str	r5, [r4, #8]
 8007c58:	464e      	mov	r6, r9
 8007c5a:	454e      	cmp	r6, r9
 8007c5c:	d900      	bls.n	8007c60 <__ssputs_r+0x84>
 8007c5e:	464e      	mov	r6, r9
 8007c60:	4632      	mov	r2, r6
 8007c62:	4641      	mov	r1, r8
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	f7ff fe60 	bl	800792a <memmove>
 8007c6a:	68a3      	ldr	r3, [r4, #8]
 8007c6c:	1b9b      	subs	r3, r3, r6
 8007c6e:	60a3      	str	r3, [r4, #8]
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	441e      	add	r6, r3
 8007c74:	6026      	str	r6, [r4, #0]
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7dc      	b.n	8007c34 <__ssputs_r+0x58>
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	f000 fa88 	bl	8008190 <_realloc_r>
 8007c80:	4606      	mov	r6, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d1e2      	bne.n	8007c4c <__ssputs_r+0x70>
 8007c86:	6921      	ldr	r1, [r4, #16]
 8007c88:	4650      	mov	r0, sl
 8007c8a:	f7ff fe6f 	bl	800796c <_free_r>
 8007c8e:	e7c8      	b.n	8007c22 <__ssputs_r+0x46>

08007c90 <_svfiprintf_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	461d      	mov	r5, r3
 8007c96:	898b      	ldrh	r3, [r1, #12]
 8007c98:	061f      	lsls	r7, r3, #24
 8007c9a:	b09d      	sub	sp, #116	; 0x74
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	d50f      	bpl.n	8007cc4 <_svfiprintf_r+0x34>
 8007ca4:	690b      	ldr	r3, [r1, #16]
 8007ca6:	b96b      	cbnz	r3, 8007cc4 <_svfiprintf_r+0x34>
 8007ca8:	2140      	movs	r1, #64	; 0x40
 8007caa:	f7ff fead 	bl	8007a08 <_malloc_r>
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	6120      	str	r0, [r4, #16]
 8007cb2:	b928      	cbnz	r0, 8007cc0 <_svfiprintf_r+0x30>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	f8c8 3000 	str.w	r3, [r8]
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cbe:	e0c8      	b.n	8007e52 <_svfiprintf_r+0x1c2>
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	6163      	str	r3, [r4, #20]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	2320      	movs	r3, #32
 8007cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cce:	2330      	movs	r3, #48	; 0x30
 8007cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cd4:	9503      	str	r5, [sp, #12]
 8007cd6:	f04f 0b01 	mov.w	fp, #1
 8007cda:	4637      	mov	r7, r6
 8007cdc:	463d      	mov	r5, r7
 8007cde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ce2:	b10b      	cbz	r3, 8007ce8 <_svfiprintf_r+0x58>
 8007ce4:	2b25      	cmp	r3, #37	; 0x25
 8007ce6:	d13e      	bne.n	8007d66 <_svfiprintf_r+0xd6>
 8007ce8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007cec:	d00b      	beq.n	8007d06 <_svfiprintf_r+0x76>
 8007cee:	4653      	mov	r3, sl
 8007cf0:	4632      	mov	r2, r6
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	f7ff ff71 	bl	8007bdc <__ssputs_r>
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f000 80a4 	beq.w	8007e48 <_svfiprintf_r+0x1b8>
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	4453      	add	r3, sl
 8007d04:	9309      	str	r3, [sp, #36]	; 0x24
 8007d06:	783b      	ldrb	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 809d 	beq.w	8007e48 <_svfiprintf_r+0x1b8>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	9307      	str	r3, [sp, #28]
 8007d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d20:	931a      	str	r3, [sp, #104]	; 0x68
 8007d22:	462f      	mov	r7, r5
 8007d24:	2205      	movs	r2, #5
 8007d26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d2a:	4850      	ldr	r0, [pc, #320]	; (8007e6c <_svfiprintf_r+0x1dc>)
 8007d2c:	f7f8 fa58 	bl	80001e0 <memchr>
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	b9d0      	cbnz	r0, 8007d6a <_svfiprintf_r+0xda>
 8007d34:	06d9      	lsls	r1, r3, #27
 8007d36:	bf44      	itt	mi
 8007d38:	2220      	movmi	r2, #32
 8007d3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d3e:	071a      	lsls	r2, r3, #28
 8007d40:	bf44      	itt	mi
 8007d42:	222b      	movmi	r2, #43	; 0x2b
 8007d44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d48:	782a      	ldrb	r2, [r5, #0]
 8007d4a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d4c:	d015      	beq.n	8007d7a <_svfiprintf_r+0xea>
 8007d4e:	9a07      	ldr	r2, [sp, #28]
 8007d50:	462f      	mov	r7, r5
 8007d52:	2000      	movs	r0, #0
 8007d54:	250a      	movs	r5, #10
 8007d56:	4639      	mov	r1, r7
 8007d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d5c:	3b30      	subs	r3, #48	; 0x30
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d94d      	bls.n	8007dfe <_svfiprintf_r+0x16e>
 8007d62:	b1b8      	cbz	r0, 8007d94 <_svfiprintf_r+0x104>
 8007d64:	e00f      	b.n	8007d86 <_svfiprintf_r+0xf6>
 8007d66:	462f      	mov	r7, r5
 8007d68:	e7b8      	b.n	8007cdc <_svfiprintf_r+0x4c>
 8007d6a:	4a40      	ldr	r2, [pc, #256]	; (8007e6c <_svfiprintf_r+0x1dc>)
 8007d6c:	1a80      	subs	r0, r0, r2
 8007d6e:	fa0b f000 	lsl.w	r0, fp, r0
 8007d72:	4318      	orrs	r0, r3
 8007d74:	9004      	str	r0, [sp, #16]
 8007d76:	463d      	mov	r5, r7
 8007d78:	e7d3      	b.n	8007d22 <_svfiprintf_r+0x92>
 8007d7a:	9a03      	ldr	r2, [sp, #12]
 8007d7c:	1d11      	adds	r1, r2, #4
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	9103      	str	r1, [sp, #12]
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	db01      	blt.n	8007d8a <_svfiprintf_r+0xfa>
 8007d86:	9207      	str	r2, [sp, #28]
 8007d88:	e004      	b.n	8007d94 <_svfiprintf_r+0x104>
 8007d8a:	4252      	negs	r2, r2
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	9207      	str	r2, [sp, #28]
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	783b      	ldrb	r3, [r7, #0]
 8007d96:	2b2e      	cmp	r3, #46	; 0x2e
 8007d98:	d10c      	bne.n	8007db4 <_svfiprintf_r+0x124>
 8007d9a:	787b      	ldrb	r3, [r7, #1]
 8007d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9e:	d133      	bne.n	8007e08 <_svfiprintf_r+0x178>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	1d1a      	adds	r2, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	9203      	str	r2, [sp, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bfb8      	it	lt
 8007dac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007db0:	3702      	adds	r7, #2
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	4d2e      	ldr	r5, [pc, #184]	; (8007e70 <_svfiprintf_r+0x1e0>)
 8007db6:	7839      	ldrb	r1, [r7, #0]
 8007db8:	2203      	movs	r2, #3
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f7f8 fa10 	bl	80001e0 <memchr>
 8007dc0:	b138      	cbz	r0, 8007dd2 <_svfiprintf_r+0x142>
 8007dc2:	2340      	movs	r3, #64	; 0x40
 8007dc4:	1b40      	subs	r0, r0, r5
 8007dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	4303      	orrs	r3, r0
 8007dce:	3701      	adds	r7, #1
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	7839      	ldrb	r1, [r7, #0]
 8007dd4:	4827      	ldr	r0, [pc, #156]	; (8007e74 <_svfiprintf_r+0x1e4>)
 8007dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dda:	2206      	movs	r2, #6
 8007ddc:	1c7e      	adds	r6, r7, #1
 8007dde:	f7f8 f9ff 	bl	80001e0 <memchr>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d038      	beq.n	8007e58 <_svfiprintf_r+0x1c8>
 8007de6:	4b24      	ldr	r3, [pc, #144]	; (8007e78 <_svfiprintf_r+0x1e8>)
 8007de8:	bb13      	cbnz	r3, 8007e30 <_svfiprintf_r+0x1a0>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	3308      	adds	r3, #8
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	444b      	add	r3, r9
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	e76d      	b.n	8007cda <_svfiprintf_r+0x4a>
 8007dfe:	fb05 3202 	mla	r2, r5, r2, r3
 8007e02:	2001      	movs	r0, #1
 8007e04:	460f      	mov	r7, r1
 8007e06:	e7a6      	b.n	8007d56 <_svfiprintf_r+0xc6>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	3701      	adds	r7, #1
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	250a      	movs	r5, #10
 8007e12:	4638      	mov	r0, r7
 8007e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e18:	3a30      	subs	r2, #48	; 0x30
 8007e1a:	2a09      	cmp	r2, #9
 8007e1c:	d903      	bls.n	8007e26 <_svfiprintf_r+0x196>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0c8      	beq.n	8007db4 <_svfiprintf_r+0x124>
 8007e22:	9105      	str	r1, [sp, #20]
 8007e24:	e7c6      	b.n	8007db4 <_svfiprintf_r+0x124>
 8007e26:	fb05 2101 	mla	r1, r5, r1, r2
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	e7f0      	b.n	8007e12 <_svfiprintf_r+0x182>
 8007e30:	ab03      	add	r3, sp, #12
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4622      	mov	r2, r4
 8007e36:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <_svfiprintf_r+0x1ec>)
 8007e38:	a904      	add	r1, sp, #16
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	f3af 8000 	nop.w
 8007e40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007e44:	4681      	mov	r9, r0
 8007e46:	d1d6      	bne.n	8007df6 <_svfiprintf_r+0x166>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	065b      	lsls	r3, r3, #25
 8007e4c:	f53f af35 	bmi.w	8007cba <_svfiprintf_r+0x2a>
 8007e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e52:	b01d      	add	sp, #116	; 0x74
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <_svfiprintf_r+0x1ec>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	4640      	mov	r0, r8
 8007e64:	f000 f882 	bl	8007f6c <_printf_i>
 8007e68:	e7ea      	b.n	8007e40 <_svfiprintf_r+0x1b0>
 8007e6a:	bf00      	nop
 8007e6c:	0800845a 	.word	0x0800845a
 8007e70:	08008460 	.word	0x08008460
 8007e74:	08008464 	.word	0x08008464
 8007e78:	00000000 	.word	0x00000000
 8007e7c:	08007bdd 	.word	0x08007bdd

08007e80 <_printf_common>:
 8007e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e84:	4691      	mov	r9, r2
 8007e86:	461f      	mov	r7, r3
 8007e88:	688a      	ldr	r2, [r1, #8]
 8007e8a:	690b      	ldr	r3, [r1, #16]
 8007e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	bfb8      	it	lt
 8007e94:	4613      	movlt	r3, r2
 8007e96:	f8c9 3000 	str.w	r3, [r9]
 8007e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	b112      	cbz	r2, 8007eaa <_printf_common+0x2a>
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f8c9 3000 	str.w	r3, [r9]
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	0699      	lsls	r1, r3, #26
 8007eae:	bf42      	ittt	mi
 8007eb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007eb4:	3302      	addmi	r3, #2
 8007eb6:	f8c9 3000 	strmi.w	r3, [r9]
 8007eba:	6825      	ldr	r5, [r4, #0]
 8007ebc:	f015 0506 	ands.w	r5, r5, #6
 8007ec0:	d107      	bne.n	8007ed2 <_printf_common+0x52>
 8007ec2:	f104 0a19 	add.w	sl, r4, #25
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ecc:	1a9b      	subs	r3, r3, r2
 8007ece:	42ab      	cmp	r3, r5
 8007ed0:	dc28      	bgt.n	8007f24 <_printf_common+0xa4>
 8007ed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	3300      	adds	r3, #0
 8007eda:	bf18      	it	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	0692      	lsls	r2, r2, #26
 8007ee0:	d42d      	bmi.n	8007f3e <_printf_common+0xbe>
 8007ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	4630      	mov	r0, r6
 8007eea:	47c0      	blx	r8
 8007eec:	3001      	adds	r0, #1
 8007eee:	d020      	beq.n	8007f32 <_printf_common+0xb2>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	68e5      	ldr	r5, [r4, #12]
 8007ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ef8:	f003 0306 	and.w	r3, r3, #6
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	bf08      	it	eq
 8007f00:	1aad      	subeq	r5, r5, r2
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	bf0c      	ite	eq
 8007f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f0c:	2500      	movne	r5, #0
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	bfc4      	itt	gt
 8007f12:	1a9b      	subgt	r3, r3, r2
 8007f14:	18ed      	addgt	r5, r5, r3
 8007f16:	f04f 0900 	mov.w	r9, #0
 8007f1a:	341a      	adds	r4, #26
 8007f1c:	454d      	cmp	r5, r9
 8007f1e:	d11a      	bne.n	8007f56 <_printf_common+0xd6>
 8007f20:	2000      	movs	r0, #0
 8007f22:	e008      	b.n	8007f36 <_printf_common+0xb6>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4652      	mov	r2, sl
 8007f28:	4639      	mov	r1, r7
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	47c0      	blx	r8
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d103      	bne.n	8007f3a <_printf_common+0xba>
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3a:	3501      	adds	r5, #1
 8007f3c:	e7c3      	b.n	8007ec6 <_printf_common+0x46>
 8007f3e:	18e1      	adds	r1, r4, r3
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	2030      	movs	r0, #48	; 0x30
 8007f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f48:	4422      	add	r2, r4
 8007f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f52:	3302      	adds	r3, #2
 8007f54:	e7c5      	b.n	8007ee2 <_printf_common+0x62>
 8007f56:	2301      	movs	r3, #1
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	47c0      	blx	r8
 8007f60:	3001      	adds	r0, #1
 8007f62:	d0e6      	beq.n	8007f32 <_printf_common+0xb2>
 8007f64:	f109 0901 	add.w	r9, r9, #1
 8007f68:	e7d8      	b.n	8007f1c <_printf_common+0x9c>
	...

08007f6c <_printf_i>:
 8007f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f74:	460c      	mov	r4, r1
 8007f76:	7e09      	ldrb	r1, [r1, #24]
 8007f78:	b085      	sub	sp, #20
 8007f7a:	296e      	cmp	r1, #110	; 0x6e
 8007f7c:	4617      	mov	r7, r2
 8007f7e:	4606      	mov	r6, r0
 8007f80:	4698      	mov	r8, r3
 8007f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f84:	f000 80b3 	beq.w	80080ee <_printf_i+0x182>
 8007f88:	d822      	bhi.n	8007fd0 <_printf_i+0x64>
 8007f8a:	2963      	cmp	r1, #99	; 0x63
 8007f8c:	d036      	beq.n	8007ffc <_printf_i+0x90>
 8007f8e:	d80a      	bhi.n	8007fa6 <_printf_i+0x3a>
 8007f90:	2900      	cmp	r1, #0
 8007f92:	f000 80b9 	beq.w	8008108 <_printf_i+0x19c>
 8007f96:	2958      	cmp	r1, #88	; 0x58
 8007f98:	f000 8083 	beq.w	80080a2 <_printf_i+0x136>
 8007f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007fa4:	e032      	b.n	800800c <_printf_i+0xa0>
 8007fa6:	2964      	cmp	r1, #100	; 0x64
 8007fa8:	d001      	beq.n	8007fae <_printf_i+0x42>
 8007faa:	2969      	cmp	r1, #105	; 0x69
 8007fac:	d1f6      	bne.n	8007f9c <_printf_i+0x30>
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	6813      	ldr	r3, [r2, #0]
 8007fb2:	0605      	lsls	r5, r0, #24
 8007fb4:	f103 0104 	add.w	r1, r3, #4
 8007fb8:	d52a      	bpl.n	8008010 <_printf_i+0xa4>
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	da03      	bge.n	8007fca <_printf_i+0x5e>
 8007fc2:	222d      	movs	r2, #45	; 0x2d
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007fca:	486f      	ldr	r0, [pc, #444]	; (8008188 <_printf_i+0x21c>)
 8007fcc:	220a      	movs	r2, #10
 8007fce:	e039      	b.n	8008044 <_printf_i+0xd8>
 8007fd0:	2973      	cmp	r1, #115	; 0x73
 8007fd2:	f000 809d 	beq.w	8008110 <_printf_i+0x1a4>
 8007fd6:	d808      	bhi.n	8007fea <_printf_i+0x7e>
 8007fd8:	296f      	cmp	r1, #111	; 0x6f
 8007fda:	d020      	beq.n	800801e <_printf_i+0xb2>
 8007fdc:	2970      	cmp	r1, #112	; 0x70
 8007fde:	d1dd      	bne.n	8007f9c <_printf_i+0x30>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	f043 0320 	orr.w	r3, r3, #32
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	e003      	b.n	8007ff2 <_printf_i+0x86>
 8007fea:	2975      	cmp	r1, #117	; 0x75
 8007fec:	d017      	beq.n	800801e <_printf_i+0xb2>
 8007fee:	2978      	cmp	r1, #120	; 0x78
 8007ff0:	d1d4      	bne.n	8007f9c <_printf_i+0x30>
 8007ff2:	2378      	movs	r3, #120	; 0x78
 8007ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ff8:	4864      	ldr	r0, [pc, #400]	; (800818c <_printf_i+0x220>)
 8007ffa:	e055      	b.n	80080a8 <_printf_i+0x13c>
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	1d19      	adds	r1, r3, #4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6011      	str	r1, [r2, #0]
 8008004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800800c:	2301      	movs	r3, #1
 800800e:	e08c      	b.n	800812a <_printf_i+0x1be>
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6011      	str	r1, [r2, #0]
 8008014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008018:	bf18      	it	ne
 800801a:	b21b      	sxthne	r3, r3
 800801c:	e7cf      	b.n	8007fbe <_printf_i+0x52>
 800801e:	6813      	ldr	r3, [r2, #0]
 8008020:	6825      	ldr	r5, [r4, #0]
 8008022:	1d18      	adds	r0, r3, #4
 8008024:	6010      	str	r0, [r2, #0]
 8008026:	0628      	lsls	r0, r5, #24
 8008028:	d501      	bpl.n	800802e <_printf_i+0xc2>
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	e002      	b.n	8008034 <_printf_i+0xc8>
 800802e:	0668      	lsls	r0, r5, #25
 8008030:	d5fb      	bpl.n	800802a <_printf_i+0xbe>
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	4854      	ldr	r0, [pc, #336]	; (8008188 <_printf_i+0x21c>)
 8008036:	296f      	cmp	r1, #111	; 0x6f
 8008038:	bf14      	ite	ne
 800803a:	220a      	movne	r2, #10
 800803c:	2208      	moveq	r2, #8
 800803e:	2100      	movs	r1, #0
 8008040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008044:	6865      	ldr	r5, [r4, #4]
 8008046:	60a5      	str	r5, [r4, #8]
 8008048:	2d00      	cmp	r5, #0
 800804a:	f2c0 8095 	blt.w	8008178 <_printf_i+0x20c>
 800804e:	6821      	ldr	r1, [r4, #0]
 8008050:	f021 0104 	bic.w	r1, r1, #4
 8008054:	6021      	str	r1, [r4, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d13d      	bne.n	80080d6 <_printf_i+0x16a>
 800805a:	2d00      	cmp	r5, #0
 800805c:	f040 808e 	bne.w	800817c <_printf_i+0x210>
 8008060:	4665      	mov	r5, ip
 8008062:	2a08      	cmp	r2, #8
 8008064:	d10b      	bne.n	800807e <_printf_i+0x112>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	07db      	lsls	r3, r3, #31
 800806a:	d508      	bpl.n	800807e <_printf_i+0x112>
 800806c:	6923      	ldr	r3, [r4, #16]
 800806e:	6862      	ldr	r2, [r4, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	bfde      	ittt	le
 8008074:	2330      	movle	r3, #48	; 0x30
 8008076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800807a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800807e:	ebac 0305 	sub.w	r3, ip, r5
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	f8cd 8000 	str.w	r8, [sp]
 8008088:	463b      	mov	r3, r7
 800808a:	aa03      	add	r2, sp, #12
 800808c:	4621      	mov	r1, r4
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff fef6 	bl	8007e80 <_printf_common>
 8008094:	3001      	adds	r0, #1
 8008096:	d14d      	bne.n	8008134 <_printf_i+0x1c8>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800809c:	b005      	add	sp, #20
 800809e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080a2:	4839      	ldr	r0, [pc, #228]	; (8008188 <_printf_i+0x21c>)
 80080a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80080a8:	6813      	ldr	r3, [r2, #0]
 80080aa:	6821      	ldr	r1, [r4, #0]
 80080ac:	1d1d      	adds	r5, r3, #4
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6015      	str	r5, [r2, #0]
 80080b2:	060a      	lsls	r2, r1, #24
 80080b4:	d50b      	bpl.n	80080ce <_printf_i+0x162>
 80080b6:	07ca      	lsls	r2, r1, #31
 80080b8:	bf44      	itt	mi
 80080ba:	f041 0120 	orrmi.w	r1, r1, #32
 80080be:	6021      	strmi	r1, [r4, #0]
 80080c0:	b91b      	cbnz	r3, 80080ca <_printf_i+0x15e>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	f022 0220 	bic.w	r2, r2, #32
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	2210      	movs	r2, #16
 80080cc:	e7b7      	b.n	800803e <_printf_i+0xd2>
 80080ce:	064d      	lsls	r5, r1, #25
 80080d0:	bf48      	it	mi
 80080d2:	b29b      	uxthmi	r3, r3
 80080d4:	e7ef      	b.n	80080b6 <_printf_i+0x14a>
 80080d6:	4665      	mov	r5, ip
 80080d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80080dc:	fb02 3311 	mls	r3, r2, r1, r3
 80080e0:	5cc3      	ldrb	r3, [r0, r3]
 80080e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080e6:	460b      	mov	r3, r1
 80080e8:	2900      	cmp	r1, #0
 80080ea:	d1f5      	bne.n	80080d8 <_printf_i+0x16c>
 80080ec:	e7b9      	b.n	8008062 <_printf_i+0xf6>
 80080ee:	6813      	ldr	r3, [r2, #0]
 80080f0:	6825      	ldr	r5, [r4, #0]
 80080f2:	6961      	ldr	r1, [r4, #20]
 80080f4:	1d18      	adds	r0, r3, #4
 80080f6:	6010      	str	r0, [r2, #0]
 80080f8:	0628      	lsls	r0, r5, #24
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	d501      	bpl.n	8008102 <_printf_i+0x196>
 80080fe:	6019      	str	r1, [r3, #0]
 8008100:	e002      	b.n	8008108 <_printf_i+0x19c>
 8008102:	066a      	lsls	r2, r5, #25
 8008104:	d5fb      	bpl.n	80080fe <_printf_i+0x192>
 8008106:	8019      	strh	r1, [r3, #0]
 8008108:	2300      	movs	r3, #0
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	4665      	mov	r5, ip
 800810e:	e7b9      	b.n	8008084 <_printf_i+0x118>
 8008110:	6813      	ldr	r3, [r2, #0]
 8008112:	1d19      	adds	r1, r3, #4
 8008114:	6011      	str	r1, [r2, #0]
 8008116:	681d      	ldr	r5, [r3, #0]
 8008118:	6862      	ldr	r2, [r4, #4]
 800811a:	2100      	movs	r1, #0
 800811c:	4628      	mov	r0, r5
 800811e:	f7f8 f85f 	bl	80001e0 <memchr>
 8008122:	b108      	cbz	r0, 8008128 <_printf_i+0x1bc>
 8008124:	1b40      	subs	r0, r0, r5
 8008126:	6060      	str	r0, [r4, #4]
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	2300      	movs	r3, #0
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008132:	e7a7      	b.n	8008084 <_printf_i+0x118>
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	462a      	mov	r2, r5
 8008138:	4639      	mov	r1, r7
 800813a:	4630      	mov	r0, r6
 800813c:	47c0      	blx	r8
 800813e:	3001      	adds	r0, #1
 8008140:	d0aa      	beq.n	8008098 <_printf_i+0x12c>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	079b      	lsls	r3, r3, #30
 8008146:	d413      	bmi.n	8008170 <_printf_i+0x204>
 8008148:	68e0      	ldr	r0, [r4, #12]
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	4298      	cmp	r0, r3
 800814e:	bfb8      	it	lt
 8008150:	4618      	movlt	r0, r3
 8008152:	e7a3      	b.n	800809c <_printf_i+0x130>
 8008154:	2301      	movs	r3, #1
 8008156:	464a      	mov	r2, r9
 8008158:	4639      	mov	r1, r7
 800815a:	4630      	mov	r0, r6
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d09a      	beq.n	8008098 <_printf_i+0x12c>
 8008162:	3501      	adds	r5, #1
 8008164:	68e3      	ldr	r3, [r4, #12]
 8008166:	9a03      	ldr	r2, [sp, #12]
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	42ab      	cmp	r3, r5
 800816c:	dcf2      	bgt.n	8008154 <_printf_i+0x1e8>
 800816e:	e7eb      	b.n	8008148 <_printf_i+0x1dc>
 8008170:	2500      	movs	r5, #0
 8008172:	f104 0919 	add.w	r9, r4, #25
 8008176:	e7f5      	b.n	8008164 <_printf_i+0x1f8>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1ac      	bne.n	80080d6 <_printf_i+0x16a>
 800817c:	7803      	ldrb	r3, [r0, #0]
 800817e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008182:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008186:	e76c      	b.n	8008062 <_printf_i+0xf6>
 8008188:	0800846b 	.word	0x0800846b
 800818c:	0800847c 	.word	0x0800847c

08008190 <_realloc_r>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	4607      	mov	r7, r0
 8008194:	4614      	mov	r4, r2
 8008196:	460e      	mov	r6, r1
 8008198:	b921      	cbnz	r1, 80081a4 <_realloc_r+0x14>
 800819a:	4611      	mov	r1, r2
 800819c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081a0:	f7ff bc32 	b.w	8007a08 <_malloc_r>
 80081a4:	b922      	cbnz	r2, 80081b0 <_realloc_r+0x20>
 80081a6:	f7ff fbe1 	bl	800796c <_free_r>
 80081aa:	4625      	mov	r5, r4
 80081ac:	4628      	mov	r0, r5
 80081ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b0:	f000 f814 	bl	80081dc <_malloc_usable_size_r>
 80081b4:	42a0      	cmp	r0, r4
 80081b6:	d20f      	bcs.n	80081d8 <_realloc_r+0x48>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4638      	mov	r0, r7
 80081bc:	f7ff fc24 	bl	8007a08 <_malloc_r>
 80081c0:	4605      	mov	r5, r0
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d0f2      	beq.n	80081ac <_realloc_r+0x1c>
 80081c6:	4631      	mov	r1, r6
 80081c8:	4622      	mov	r2, r4
 80081ca:	f7ff fba3 	bl	8007914 <memcpy>
 80081ce:	4631      	mov	r1, r6
 80081d0:	4638      	mov	r0, r7
 80081d2:	f7ff fbcb 	bl	800796c <_free_r>
 80081d6:	e7e9      	b.n	80081ac <_realloc_r+0x1c>
 80081d8:	4635      	mov	r5, r6
 80081da:	e7e7      	b.n	80081ac <_realloc_r+0x1c>

080081dc <_malloc_usable_size_r>:
 80081dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e0:	1f18      	subs	r0, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	bfbc      	itt	lt
 80081e6:	580b      	ldrlt	r3, [r1, r0]
 80081e8:	18c0      	addlt	r0, r0, r3
 80081ea:	4770      	bx	lr

080081ec <_init>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr

080081f8 <_fini>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr
