
SLMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f8  0800a1f8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f8  0800a1f8  0001a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a200  0800a200  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a208  0800a208  0001a208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f0  20000098  0800a2a8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004388  0800a2a8  00024388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003024b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bb0  00000000  00000000  00050313  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ce0  00000000  00000000  00055ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ae8  00000000  00000000  00057ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ee35  00000000  00000000  00059690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016b0d  00000000  00000000  000784c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a570c  00000000  00000000  0008efd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001346de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000800c  00000000  00000000  0013475c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fac 	.word	0x08009fac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08009fac 	.word	0x08009fac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f008 feba 	bl	8009338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f008 fd06 	bl	8008fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200041e4 	.word	0x200041e4

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200041e4 	.word	0x200041e4

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800063a:	bf00      	nop
 800063c:	f7ff ffde 	bl	80005fc <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff4c 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff61 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff54 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e159      	b.n	8000aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000838:	2201      	movs	r2, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8148 	bne.w	8000ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x4a>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	69b9      	ldr	r1, [r7, #24]
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0203 	and.w	r2, r3, #3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00b      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	2b11      	cmp	r3, #17
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d130      	bne.n	8000964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80a2 	beq.w	8000ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009be:	4a51      	ldr	r2, [pc, #324]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2ec>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d019      	beq.n	8000a1e <HAL_GPIO_Init+0x202>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a47      	ldr	r2, [pc, #284]	; (8000b0c <HAL_GPIO_Init+0x2f0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x1fe>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_GPIO_Init+0x2f4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x1fa>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <HAL_GPIO_Init+0x2f8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x1f6>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <HAL_GPIO_Init+0x2fc>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x1f2>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a30:	4934      	ldr	r1, [pc, #208]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a62:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a8c:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	f67f aea2 	bls.w	8000838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b3c:	e003      	b.n	8000b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f806 	bl	8000b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e22d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d075      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bba:	4ba3      	ldr	r3, [pc, #652]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d00c      	beq.n	8000be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc6:	4ba0      	ldr	r3, [pc, #640]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d112      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bd2:	4b9d      	ldr	r3, [pc, #628]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bde:	d10b      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be0:	4b99      	ldr	r3, [pc, #612]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d05b      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x108>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d157      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e208      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d106      	bne.n	8000c10 <HAL_RCC_OscConfig+0x74>
 8000c02:	4b91      	ldr	r3, [pc, #580]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e01d      	b.n	8000c4c <HAL_RCC_OscConfig+0xb0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x98>
 8000c1a:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a8a      	ldr	r2, [pc, #552]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b88      	ldr	r3, [pc, #544]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a87      	ldr	r2, [pc, #540]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00b      	b.n	8000c4c <HAL_RCC_OscConfig+0xb0>
 8000c34:	4b84      	ldr	r3, [pc, #528]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a83      	ldr	r2, [pc, #524]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a80      	ldr	r2, [pc, #512]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fcd2 	bl	80005fc <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fcce 	bl	80005fc <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e1cd      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	4b76      	ldr	r3, [pc, #472]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0xc0>
 8000c7a:	e014      	b.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fcbe 	bl	80005fc <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fcba 	bl	80005fc <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	; 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1b9      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0xe8>
 8000ca2:	e000      	b.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb2:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cbe:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cca:	4b5f      	ldr	r3, [pc, #380]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d116      	bne.n	8000d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x152>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e18d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4952      	ldr	r1, [pc, #328]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	e03a      	b.n	8000d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	4b4f      	ldr	r3, [pc, #316]	; (8000e4c <HAL_RCC_OscConfig+0x2b0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc73 	bl	80005fc <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc6f 	bl	80005fc <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e16e      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4940      	ldr	r1, [pc, #256]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <HAL_RCC_OscConfig+0x2b0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc52 	bl	80005fc <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc4e 	bl	80005fc <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e14d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d030      	beq.n	8000de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d016      	beq.n	8000dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_RCC_OscConfig+0x2b4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc32 	bl	80005fc <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc2e 	bl	80005fc <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e12d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x200>
 8000dba:	e015      	b.n	8000de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_RCC_OscConfig+0x2b4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc1b 	bl	80005fc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dca:	f7ff fc17 	bl	80005fc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e116      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f0      	bne.n	8000dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a0 	beq.w	8000f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10f      	bne.n	8000e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d121      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbdd 	bl	80005fc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	e011      	b.n	8000e6a <HAL_RCC_OscConfig+0x2ce>
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000
 8000e50:	42470e80 	.word	0x42470e80
 8000e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e58:	f7ff fbd0 	bl	80005fc <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e0cf      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x478>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
 8000e7e:	4b66      	ldr	r3, [pc, #408]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8a:	e01c      	b.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x312>
 8000e94:	4b60      	ldr	r3, [pc, #384]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e98:	4a5f      	ldr	r2, [pc, #380]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea0:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea4:	4a5c      	ldr	r2, [pc, #368]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	4a59      	ldr	r2, [pc, #356]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb95 	bl	80005fc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb91 	bl	80005fc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e08e      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ee      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x33a>
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb7f 	bl	80005fc <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fb7b 	bl	80005fc <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e078      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ee      	bne.n	8000f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d105      	bne.n	8000f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d064      	beq.n	8001008 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d05c      	beq.n	8001004 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d141      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb50 	bl	80005fc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fb4c 	bl	80005fc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e04b      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	3b01      	subs	r3, #1
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	491d      	ldr	r1, [pc, #116]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb25 	bl	80005fc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fb21 	bl	80005fc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e020      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x41a>
 8000fd4:	e018      	b.n	8001008 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb0e 	bl	80005fc <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fb0a 	bl	80005fc <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e009      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x448>
 8001002:	e001      	b.n	8001008 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40007000 	.word	0x40007000
 8001018:	40023800 	.word	0x40023800
 800101c:	42470060 	.word	0x42470060

08001020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0ca      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001034:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d90c      	bls.n	800105c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0b6      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d020      	beq.n	80010aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001074:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800107a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800107e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800108c:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	494c      	ldr	r1, [pc, #304]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d044      	beq.n	8001140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d119      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e07d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e06d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e065      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f023 0203 	bic.w	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4933      	ldr	r1, [pc, #204]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001110:	f7ff fa74 	bl	80005fc <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	e00a      	b.n	800112e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff fa70 	bl	80005fc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f241 3288 	movw	r2, #5000	; 0x1388
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e04d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 020c 	and.w	r2, r3, #12
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	429a      	cmp	r2, r3
 800113e:	d1eb      	bne.n	8001118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d20c      	bcs.n	8001168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e030      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	490d      	ldr	r1, [pc, #52]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f000 f81d 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 80011aa:	4601      	mov	r1, r0
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	fa21 f303 	lsr.w	r3, r1, r3
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f008 f8b8 	bl	8009338 <HAL_InitTick>

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	0800a1ac 	.word	0x0800a1ac
 80011e0:	20000030 	.word	0x20000030

080011e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d007      	beq.n	8001216 <HAL_RCC_GetSysClockFreq+0x32>
 8001206:	2b08      	cmp	r3, #8
 8001208:	d008      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x38>
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 80b4 	bne.w	8001378 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001212:	60bb      	str	r3, [r7, #8]
       break;
 8001214:	e0b3      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001218:	60bb      	str	r3, [r7, #8]
      break;
 800121a:	e0b0      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800121c:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001224:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001226:	4b58      	ldr	r3, [pc, #352]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04a      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001232:	4b55      	ldr	r3, [pc, #340]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	ea03 0501 	and.w	r5, r3, r1
 8001248:	ea04 0602 	and.w	r6, r4, r2
 800124c:	4629      	mov	r1, r5
 800124e:	4632      	mov	r2, r6
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	0154      	lsls	r4, r2, #5
 800125a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800125e:	014b      	lsls	r3, r1, #5
 8001260:	4619      	mov	r1, r3
 8001262:	4622      	mov	r2, r4
 8001264:	1b49      	subs	r1, r1, r5
 8001266:	eb62 0206 	sbc.w	r2, r2, r6
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	f04f 0400 	mov.w	r4, #0
 8001272:	0194      	lsls	r4, r2, #6
 8001274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001278:	018b      	lsls	r3, r1, #6
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	eb64 0402 	sbc.w	r4, r4, r2
 8001280:	f04f 0100 	mov.w	r1, #0
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	00e2      	lsls	r2, r4, #3
 800128a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800128e:	00d9      	lsls	r1, r3, #3
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	195b      	adds	r3, r3, r5
 8001296:	eb44 0406 	adc.w	r4, r4, r6
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	0262      	lsls	r2, r4, #9
 80012a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012a8:	0259      	lsls	r1, r3, #9
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7fe ffe8 	bl	8000290 <__aeabi_uldivmod>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e049      	b.n	800135c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	f04f 0400 	mov.w	r4, #0
 80012d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	ea03 0501 	and.w	r5, r3, r1
 80012de:	ea04 0602 	and.w	r6, r4, r2
 80012e2:	4629      	mov	r1, r5
 80012e4:	4632      	mov	r2, r6
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	f04f 0400 	mov.w	r4, #0
 80012ee:	0154      	lsls	r4, r2, #5
 80012f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f4:	014b      	lsls	r3, r1, #5
 80012f6:	4619      	mov	r1, r3
 80012f8:	4622      	mov	r2, r4
 80012fa:	1b49      	subs	r1, r1, r5
 80012fc:	eb62 0206 	sbc.w	r2, r2, r6
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f04f 0400 	mov.w	r4, #0
 8001308:	0194      	lsls	r4, r2, #6
 800130a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800130e:	018b      	lsls	r3, r1, #6
 8001310:	1a5b      	subs	r3, r3, r1
 8001312:	eb64 0402 	sbc.w	r4, r4, r2
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	00e2      	lsls	r2, r4, #3
 8001320:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001324:	00d9      	lsls	r1, r3, #3
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	195b      	adds	r3, r3, r5
 800132c:	eb44 0406 	adc.w	r4, r4, r6
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	02a2      	lsls	r2, r4, #10
 800133a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800133e:	0299      	lsls	r1, r3, #10
 8001340:	460b      	mov	r3, r1
 8001342:	4614      	mov	r4, r2
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f04f 0400 	mov.w	r4, #0
 800134e:	461a      	mov	r2, r3
 8001350:	4623      	mov	r3, r4
 8001352:	f7fe ff9d 	bl	8000290 <__aeabi_uldivmod>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	0c1b      	lsrs	r3, r3, #16
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	3301      	adds	r3, #1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	60bb      	str	r3, [r7, #8]
      break;
 8001376:	e002      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800137a:	60bb      	str	r3, [r7, #8]
      break;
 800137c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137e:	68bb      	ldr	r3, [r7, #8]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	00f42400 	.word	0x00f42400
 8001390:	007a1200 	.word	0x007a1200

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff0 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b4:	4601      	mov	r1, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0a9b      	lsrs	r3, r3, #10
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	0800a1bc 	.word	0x0800a1bc

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffdc 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013dc:	4601      	mov	r1, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0b5b      	lsrs	r3, r3, #13
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	0800a1bc 	.word	0x0800a1bc

080013fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	220f      	movs	r2, #15
 800140a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_RCC_GetClockConfig+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e056      	b.n	8001520 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f007 fdcd 	bl	800902c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2202      	movs	r2, #2
 8001496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	ea42 0103 	orr.w	r1, r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	f003 0104 	and.w	r1, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_SPI_Transmit+0x22>
 8001546:	2302      	movs	r3, #2
 8001548:	e11e      	b.n	8001788 <HAL_SPI_Transmit+0x260>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001552:	f7ff f853 	bl	80005fc <HAL_GetTick>
 8001556:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d002      	beq.n	800156e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800156c:	e103      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_SPI_Transmit+0x52>
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800157e:	e0fa      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c6:	d107      	bne.n	80015d8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	d007      	beq.n	80015f6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fe:	d14b      	bne.n	8001698 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_SPI_Transmit+0xe6>
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d13e      	bne.n	800168c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	1c9a      	adds	r2, r3, #2
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001632:	e02b      	b.n	800168c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d112      	bne.n	8001668 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	1c9a      	adds	r2, r3, #2
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165c:	b29b      	uxth	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	86da      	strh	r2, [r3, #54]	; 0x36
 8001666:	e011      	b.n	800168c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001668:	f7fe ffc8 	bl	80005fc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d803      	bhi.n	8001680 <HAL_SPI_Transmit+0x158>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167e:	d102      	bne.n	8001686 <HAL_SPI_Transmit+0x15e>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	77fb      	strb	r3, [r7, #31]
          goto error;
 800168a:	e074      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ce      	bne.n	8001634 <HAL_SPI_Transmit+0x10c>
 8001696:	e04c      	b.n	8001732 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_SPI_Transmit+0x17e>
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d140      	bne.n	8001728 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	330c      	adds	r3, #12
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80016cc:	e02c      	b.n	8001728 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d113      	bne.n	8001704 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	330c      	adds	r3, #12
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	86da      	strh	r2, [r3, #54]	; 0x36
 8001702:	e011      	b.n	8001728 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001704:	f7fe ff7a 	bl	80005fc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d803      	bhi.n	800171c <HAL_SPI_Transmit+0x1f4>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171a:	d102      	bne.n	8001722 <HAL_SPI_Transmit+0x1fa>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001726:	e026      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1cd      	bne.n	80016ce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fba4 	bl	8001e84 <SPI_EndRxTxTransaction>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2220      	movs	r2, #32
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e000      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001774:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001786:	7ffb      	ldrb	r3, [r7, #31]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017ac:	d112      	bne.n	80017d4 <HAL_SPI_Receive+0x44>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2204      	movs	r2, #4
 80017ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f8e9 	bl	80019a2 <HAL_SPI_TransmitReceive>
 80017d0:	4603      	mov	r3, r0
 80017d2:	e0e2      	b.n	800199a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_SPI_Receive+0x52>
 80017de:	2302      	movs	r3, #2
 80017e0:	e0db      	b.n	800199a <HAL_SPI_Receive+0x20a>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017ea:	f7fe ff07 	bl	80005fc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d002      	beq.n	8001802 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
 80017fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001800:	e0c2      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_SPI_Receive+0x7e>
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001812:	e0b9      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2204      	movs	r2, #4
 8001818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	88fa      	ldrh	r2, [r7, #6]
 8001832:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185a:	d107      	bne.n	800186c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800186a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	2b40      	cmp	r3, #64	; 0x40
 8001878:	d007      	beq.n	800188a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d162      	bne.n	8001958 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001892:	e02e      	b.n	80018f2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d115      	bne.n	80018ce <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f103 020c 	add.w	r2, r3, #12
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80018cc:	e011      	b.n	80018f2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ce:	f7fe fe95 	bl	80005fc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d803      	bhi.n	80018e6 <HAL_SPI_Receive+0x156>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e4:	d102      	bne.n	80018ec <HAL_SPI_Receive+0x15c>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80018f0:	e04a      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1cb      	bne.n	8001894 <HAL_SPI_Receive+0x104>
 80018fc:	e031      	b.n	8001962 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d113      	bne.n	8001934 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	b292      	uxth	r2, r2
 8001918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	1c9a      	adds	r2, r3, #2
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001932:	e011      	b.n	8001958 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001934:	f7fe fe62 	bl	80005fc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d803      	bhi.n	800194c <HAL_SPI_Receive+0x1bc>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800194a:	d102      	bne.n	8001952 <HAL_SPI_Receive+0x1c2>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001956:	e017      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1cd      	bne.n	80018fe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa27 	bl	8001dba <SPI_EndRxTransaction>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2220      	movs	r2, #32
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e000      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08c      	sub	sp, #48	; 0x30
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_SPI_TransmitReceive+0x26>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e18a      	b.n	8001cde <HAL_SPI_TransmitReceive+0x33c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019d0:	f7fe fe14 	bl	80005fc <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00f      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x70>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f8:	d107      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x68>
 8001a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a10:	e15b      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x82>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x82>
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a2a:	e14e      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d003      	beq.n	8001a40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2205      	movs	r2, #5
 8001a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d007      	beq.n	8001a94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a9c:	d178      	bne.n	8001b90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x10a>
 8001aa6:	8b7b      	ldrh	r3, [r7, #26]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d166      	bne.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	1c9a      	adds	r2, r3, #2
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ad0:	e053      	b.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d11b      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d113      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	1c9a      	adds	r2, r3, #2
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d119      	bne.n	8001b5a <HAL_SPI_TransmitReceive+0x1b8>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d014      	beq.n	8001b5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	1c9a      	adds	r2, r3, #2
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b5a:	f7fe fd4f 	bl	80005fc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d807      	bhi.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b70:	d003      	beq.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b78:	e0a7      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1a6      	bne.n	8001ad2 <HAL_SPI_TransmitReceive+0x130>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1a1      	bne.n	8001ad2 <HAL_SPI_TransmitReceive+0x130>
 8001b8e:	e07c      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x1fc>
 8001b98:	8b7b      	ldrh	r3, [r7, #26]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d16b      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bc4:	e057      	b.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d11c      	bne.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d114      	bne.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	330c      	adds	r3, #12
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <HAL_SPI_TransmitReceive+0x2ae>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d014      	beq.n	8001c50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c50:	f7fe fcd4 	bl	80005fc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d803      	bhi.n	8001c68 <HAL_SPI_TransmitReceive+0x2c6>
 8001c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c66:	d102      	bne.n	8001c6e <HAL_SPI_TransmitReceive+0x2cc>
 8001c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c74:	e029      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1a2      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x224>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d19d      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8f8 	bl	8001e84 <SPI_EndRxTxTransaction>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001ca6:	e010      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	e000      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3730      	adds	r7, #48	; 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cf6:	e04c      	b.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfe:	d048      	beq.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d00:	f7fe fc7c 	bl	80005fc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d902      	bls.n	8001d16 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13d      	bne.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d2e:	d111      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d38:	d004      	beq.n	8001d44 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d107      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5c:	d10f      	bne.n	8001d7e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e00f      	b.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1a3      	bne.n	8001cf8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af02      	add	r7, sp, #8
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dce:	d111      	bne.n	8001df4 <SPI_EndRxTransaction+0x3a>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	d004      	beq.n	8001de4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d107      	bne.n	8001df4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dfc:	d12a      	bne.n	8001e54 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d012      	beq.n	8001e2e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff67 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02d      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e026      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff ff54 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01a      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e013      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff41 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e000      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <SPI_EndRxTxTransaction+0x7c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <SPI_EndRxTxTransaction+0x80>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0d5b      	lsrs	r3, r3, #21
 8001e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eae:	d112      	bne.n	8001ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff ff13 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d0f2      	beq.n	8001ed6 <SPI_EndRxTxTransaction+0x52>
 8001ef0:	e000      	b.n	8001ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8001ef2:	bf00      	nop
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000030 	.word	0x20000030
 8001f04:	165e9f81 	.word	0x165e9f81

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01d      	b.n	8001f56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f007 f93e 	bl	80091b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 fba2 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e01d      	b.n	8001ff4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f815 	bl	8001ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f000 fb53 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e083      	b.n	800212c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f007 f83f 	bl	80090bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f000 fb13 	bl	8002690 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4313      	orrs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020b0:	f023 030c 	bic.w	r3, r3, #12
 80020b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	4313      	orrs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4313      	orrs	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0202 	mvn.w	r2, #2
 8002160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa6b 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa5d 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fa6e 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0204 	mvn.w	r2, #4
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa41 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa33 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa44 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa17 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa09 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa1a 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b10      	cmp	r3, #16
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2208      	movs	r2, #8
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9ed 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f9df 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9f0 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0201 	mvn.w	r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 ffac 	bl	8008210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fccb 	bl	8002c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9b5 	bl	800267a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d10e      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d107      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0220 	mvn.w	r2, #32
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fc95 	bl	8002c66 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e0b4      	b.n	80024c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	f200 809f 	bhi.w	80024b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080024b5 	.word	0x080024b5
 8002384:	080024b5 	.word	0x080024b5
 8002388:	080024b5 	.word	0x080024b5
 800238c:	080023f1 	.word	0x080023f1
 8002390:	080024b5 	.word	0x080024b5
 8002394:	080024b5 	.word	0x080024b5
 8002398:	080024b5 	.word	0x080024b5
 800239c:	08002433 	.word	0x08002433
 80023a0:	080024b5 	.word	0x080024b5
 80023a4:	080024b5 	.word	0x080024b5
 80023a8:	080024b5 	.word	0x080024b5
 80023ac:	08002473 	.word	0x08002473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f9ea 	bl	8002790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0208 	orr.w	r2, r2, #8
 80023ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	619a      	str	r2, [r3, #24]
      break;
 80023ee:	e062      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fa30 	bl	800285c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	021a      	lsls	r2, r3, #8
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]
      break;
 8002430:	e041      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa7b 	bl	8002934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0208 	orr.w	r2, r2, #8
 800244c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69d9      	ldr	r1, [r3, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
      break;
 8002470:	e021      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fac5 	bl	8002a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	61da      	str	r2, [r3, #28]
      break;
 80024b2:	e000      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80024b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_ConfigClockSource+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0a6      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x166>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d067      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0x120>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d80b      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x6c>
 8002524:	2b10      	cmp	r3, #16
 8002526:	d073      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d802      	bhi.n	8002532 <HAL_TIM_ConfigClockSource+0x62>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d06f      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002530:	e078      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002532:	2b20      	cmp	r3, #32
 8002534:	d06c      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d06a      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800253a:	e073      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d00d      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x8c>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d804      	bhi.n	800254e <HAL_TIM_ConfigClockSource+0x7e>
 8002544:	2b50      	cmp	r3, #80	; 0x50
 8002546:	d033      	beq.n	80025b0 <HAL_TIM_ConfigClockSource+0xe0>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d041      	beq.n	80025d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800254c:	e06a      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d066      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x152>
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d017      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800255a:	e063      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f000 fb16 	bl	8002b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800257e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
      break;
 8002588:	e04c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f000 faff 	bl	8002b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e039      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	461a      	mov	r2, r3
 80025be:	f000 fa73 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2150      	movs	r1, #80	; 0x50
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 facc 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80025ce:	e029      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	461a      	mov	r2, r3
 80025de:	f000 fa92 	bl	8002b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2160      	movs	r1, #96	; 0x60
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fabc 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80025ee:	e019      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	461a      	mov	r2, r3
 80025fe:	f000 fa53 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	4618      	mov	r0, r3
 800260a:	f000 faac 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 800260e:	e009      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 faa3 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00f      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d00b      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a31      	ldr	r2, [pc, #196]	; (8002778 <TIM_Base_SetConfig+0xe8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a30      	ldr	r2, [pc, #192]	; (800277c <TIM_Base_SetConfig+0xec>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <TIM_Base_SetConfig+0xf0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01b      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d017      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <TIM_Base_SetConfig+0xe8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <TIM_Base_SetConfig+0xec>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a20      	ldr	r2, [pc, #128]	; (8002780 <TIM_Base_SetConfig+0xf0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <TIM_Base_SetConfig+0xf4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <TIM_Base_SetConfig+0xf8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <TIM_Base_SetConfig+0xfc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800

08002790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <TIM_OC1_SetConfig+0xc8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10c      	bne.n	8002806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0308 	bic.w	r3, r3, #8
 80027f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <TIM_OC1_SetConfig+0xc8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800281c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40010000 	.word	0x40010000

0800285c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0320 	bic.w	r3, r3, #32
 80028a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <TIM_OC2_SetConfig+0xd4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10d      	bne.n	80028d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <TIM_OC2_SetConfig+0xd4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d113      	bne.n	8002908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000

08002934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10d      	bne.n	80029ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40010000 	.word	0x40010000

08002a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	031b      	lsls	r3, r3, #12
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <TIM_OC4_SetConfig+0x9c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d109      	bne.n	8002a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 030a 	bic.w	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	031b      	lsls	r3, r3, #12
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e032      	b.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e03f      	b.n	8002d20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f006 faf7 	bl	80092a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f90c 	bl	8002ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 8083 	bne.w	8002e50 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Transmit+0x2e>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07b      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x40>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e074      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd fc3d 	bl	80005fc <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d90:	e042      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d122      	bne.n	8002df0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f850 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e046      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3302      	adds	r3, #2
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	e017      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	e013      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f82d 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e023      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	60ba      	str	r2, [r7, #8]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1b7      	bne.n	8002d92 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f814 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e00a      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6a:	e02c      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e72:	d028      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	f7fd fbbf 	bl	80005fc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d21d      	bcs.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e00f      	b.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d0c3      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f30:	f023 030c 	bic.w	r3, r3, #12
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	f040 80e4 	bne.w	8003128 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aab      	ldr	r2, [pc, #684]	; (8003214 <UART_SetConfig+0x324>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <UART_SetConfig+0x84>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4aaa      	ldr	r2, [pc, #680]	; (8003218 <UART_SetConfig+0x328>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d16c      	bne.n	800304e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f74:	f7fe fa2e 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4aa3      	ldr	r2, [pc, #652]	; (800321c <UART_SetConfig+0x32c>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	011c      	lsls	r4, r3, #4
 8002f98:	f7fe fa1c 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fb2:	f7fe fa0f 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	4a93      	ldr	r2, [pc, #588]	; (800321c <UART_SetConfig+0x32c>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	; 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1aeb      	subs	r3, r5, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	3332      	adds	r3, #50	; 0x32
 8002fe0:	4a8e      	ldr	r2, [pc, #568]	; (800321c <UART_SetConfig+0x32c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fee:	441c      	add	r4, r3
 8002ff0:	f7fe f9f0 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb2 f5f3 	udiv	r5, r2, r3
 800300a:	f7fe f9e3 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 800300e:	4602      	mov	r2, r0
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009a      	lsls	r2, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	4a7d      	ldr	r2, [pc, #500]	; (800321c <UART_SetConfig+0x32c>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	1aeb      	subs	r3, r5, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	3332      	adds	r3, #50	; 0x32
 8003038:	4a78      	ldr	r2, [pc, #480]	; (800321c <UART_SetConfig+0x32c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	f003 0207 	and.w	r2, r3, #7
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e154      	b.n	80032f8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800304e:	f7fe f9ad 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003052:	4602      	mov	r2, r0
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	4a6c      	ldr	r2, [pc, #432]	; (800321c <UART_SetConfig+0x32c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	011c      	lsls	r4, r3, #4
 8003072:	f7fe f99b 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003076:	4602      	mov	r2, r0
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fbb2 f5f3 	udiv	r5, r2, r3
 800308c:	f7fe f98e 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003090:	4602      	mov	r2, r0
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a5d      	ldr	r2, [pc, #372]	; (800321c <UART_SetConfig+0x32c>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2264      	movs	r2, #100	; 0x64
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	1aeb      	subs	r3, r5, r3
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a58      	ldr	r2, [pc, #352]	; (800321c <UART_SetConfig+0x32c>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c8:	441c      	add	r4, r3
 80030ca:	f7fe f96f 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80030e4:	f7fe f962 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	4a47      	ldr	r2, [pc, #284]	; (800321c <UART_SetConfig+0x32c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2264      	movs	r2, #100	; 0x64
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	1aeb      	subs	r3, r5, r3
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a42      	ldr	r2, [pc, #264]	; (800321c <UART_SetConfig+0x32c>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4422      	add	r2, r4
 8003124:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003126:	e0e7      	b.n	80032f8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a39      	ldr	r2, [pc, #228]	; (8003214 <UART_SetConfig+0x324>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <UART_SetConfig+0x24c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a38      	ldr	r2, [pc, #224]	; (8003218 <UART_SetConfig+0x328>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d171      	bne.n	8003220 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800313c:	f7fe f94a 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8003140:	4602      	mov	r2, r0
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4a31      	ldr	r2, [pc, #196]	; (800321c <UART_SetConfig+0x32c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	011c      	lsls	r4, r3, #4
 8003160:	f7fe f938 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8003164:	4602      	mov	r2, r0
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fbb2 f5f3 	udiv	r5, r2, r3
 800317a:	f7fe f92b 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <UART_SetConfig+0x32c>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2264      	movs	r2, #100	; 0x64
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	1aeb      	subs	r3, r5, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <UART_SetConfig+0x32c>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	441c      	add	r4, r3
 80031b6:	f7fe f90d 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80031d0:	f7fe f900 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4a0c      	ldr	r2, [pc, #48]	; (800321c <UART_SetConfig+0x32c>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2264      	movs	r2, #100	; 0x64
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	1aeb      	subs	r3, r5, r3
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <UART_SetConfig+0x32c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4422      	add	r2, r4
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	e071      	b.n	80032f8 <UART_SetConfig+0x408>
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003220:	f7fe f8c4 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003224:	4602      	mov	r2, r0
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4a31      	ldr	r2, [pc, #196]	; (8003300 <UART_SetConfig+0x410>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	011c      	lsls	r4, r3, #4
 8003244:	f7fe f8b2 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003248:	4602      	mov	r2, r0
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fbb2 f5f3 	udiv	r5, r2, r3
 800325e:	f7fe f8a5 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003262:	4602      	mov	r2, r0
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009a      	lsls	r2, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	4a21      	ldr	r2, [pc, #132]	; (8003300 <UART_SetConfig+0x410>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	; 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1aeb      	subs	r3, r5, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <UART_SetConfig+0x410>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	441c      	add	r4, r3
 800329a:	f7fe f887 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80032b4:	f7fe f87a 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <UART_SetConfig+0x410>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2264      	movs	r2, #100	; 0x64
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	1aeb      	subs	r3, r5, r3
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	3332      	adds	r3, #50	; 0x32
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <UART_SetConfig+0x410>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4422      	add	r2, r4
 80032f4:	609a      	str	r2, [r3, #8]
}
 80032f6:	e7ff      	b.n	80032f8 <UART_SetConfig+0x408>
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <_ZN10ValueField9putInDumpEPh>:
	std::vector<unsigned char> value;
	bool exist;
public:
	ValueField(std::vector<unsigned char> value): value(value) {}
	ValueField() {}
	void putInDump(unsigned char * begin) {std::copy(value.begin(), value.end(), begin);}
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f99b 	bl	800364c <_ZNSt6vectorIhSaIhEE5beginEv>
 8003316:	4604      	mov	r4, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f9a6 	bl	800366c <_ZNSt6vectorIhSaIhEE3endEv>
 8003320:	4603      	mov	r3, r0
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	4620      	mov	r0, r4
 8003328:	f000 f9b1 	bl	800368e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}

08003334 <_ZN10ValueField7getSizeEv>:
//		value.resize(content_len);
//		int size = value.size();
//		std::copy(begin, begin + value.size(), value.begin());
	}
	void setValue(std::vector<unsigned char> value) {this->value = value;}
	unsigned short getSize() {return value.size();}
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f9bd 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003344:	4603      	mov	r3, r0
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_Z12buildRequestP10SLMPPacketPh>:
// Created by data-scientist on 07->02->2020->
//

#include "SLMPRequestBuilder.h"

void buildRequest(SLMPPacket *packet, unsigned char *msg) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	unsigned char *slider = msg;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	60fb      	str	r3, [r7, #12]

	if (packet->is_serial_no.exist) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	789b      	ldrb	r3, [r3, #2]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <_Z12buildRequestP10SLMPPacketPh+0x26>
		packet->is_serial_no.putInDump(slider);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f9b7 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3302      	adds	r3, #2
 8003374:	60fb      	str	r3, [r7, #12]
	}

	if (packet->is_serial_no.getValue() != 0x0050) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f9c8 	bl	800370e <_ZN5FieldItLj2EE8getValueEv>
 800337e:	4603      	mov	r3, r0
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <_Z12buildRequestP10SLMPPacketPh+0x70>
			packet->serial_no.putInDump(slider);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f9a2 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
			packet->serial_no.exist = true;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	719a      	strb	r2, [r3, #6]
			slider += 2;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3302      	adds	r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]

			packet->field_If_serial_no.putInDump(slider);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3348      	adds	r3, #72	; 0x48
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f996 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
			packet->field_If_serial_no.exist = true;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			slider += 2;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3302      	adds	r3, #2
 80033be:	60fb      	str	r3, [r7, #12]
	}

	if (packet->request_dest_net_no.exist) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7a5b      	ldrb	r3, [r3, #9]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <_Z12buildRequestP10SLMPPacketPh+0x8a>
		packet->request_dest_net_no.putInDump(slider);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3308      	adds	r3, #8
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f9ab 	bl	800372a <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_dest_station_no.exist) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7adb      	ldrb	r3, [r3, #11]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <_Z12buildRequestP10SLMPPacketPh+0xa4>
		packet->request_dest_station_no.putInDump(slider);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	330a      	adds	r3, #10
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f99e 	bl	800372a <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3301      	adds	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_processor.exist) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7b9b      	ldrb	r3, [r3, #14]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <_Z12buildRequestP10SLMPPacketPh+0xbe>
		packet->request_processor.putInDump(slider);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	330c      	adds	r3, #12
 8003400:	68f9      	ldr	r1, [r7, #12]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f96b 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3302      	adds	r3, #2
 800340c:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_reserved.exist) {
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7c5b      	ldrb	r3, [r3, #17]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <_Z12buildRequestP10SLMPPacketPh+0xd8>
		packet->request_reserved.putInDump(slider);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3310      	adds	r3, #16
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f984 	bl	800372a <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3301      	adds	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
	}

	packet->data_length = Field<unsigned short, 2>(0xc + ((packet->value.exist) ? packet->value.getSize(): 0));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <_Z12buildRequestP10SLMPPacketPh+0xf4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3334      	adds	r3, #52	; 0x34
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff7c 	bl	8003334 <_ZN10ValueField7getSizeEv>
 800343c:	4603      	mov	r3, r0
 800343e:	330c      	adds	r3, #12
 8003440:	b29b      	uxth	r3, r3
 8003442:	e000      	b.n	8003446 <_Z12buildRequestP10SLMPPacketPh+0xf6>
 8003444:	230c      	movs	r3, #12
 8003446:	f107 0208 	add.w	r2, r7, #8
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 f984 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3344      	adds	r3, #68	; 0x44
 8003456:	f107 0208 	add.w	r2, r7, #8
 800345a:	8811      	ldrh	r1, [r2, #0]
 800345c:	7892      	ldrb	r2, [r2, #2]
 800345e:	8019      	strh	r1, [r3, #0]
 8003460:	709a      	strb	r2, [r3, #2]
	//packet->data_length.setValue(12 + ((packet->value.exist) ? packet->value.getSize(): 0));

	packet->data_length.putInDump(slider);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3344      	adds	r3, #68	; 0x44
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f938 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
	slider += 2;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3302      	adds	r3, #2
 8003472:	60fb      	str	r3, [r7, #12]

	if (packet->monitoring_time.exist) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7d1b      	ldrb	r3, [r3, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <_Z12buildRequestP10SLMPPacketPh+0x13e>
		packet->monitoring_time.putInDump(slider);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3312      	adds	r3, #18
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f92b 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3302      	adds	r3, #2
 800348c:	60fb      	str	r3, [r7, #12]
	}
	if (packet->command.exist) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7e1b      	ldrb	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <_Z12buildRequestP10SLMPPacketPh+0x158>
		packet->command.putInDump(slider);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3316      	adds	r3, #22
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f91e 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3302      	adds	r3, #2
 80034a6:	60fb      	str	r3, [r7, #12]
	}
	if (packet->subcommand.exist) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7f1b      	ldrb	r3, [r3, #28]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <_Z12buildRequestP10SLMPPacketPh+0x172>
		packet->subcommand.putInDump(slider);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	331a      	adds	r3, #26
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f911 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3302      	adds	r3, #2
 80034c0:	60fb      	str	r3, [r7, #12]
	}
	if (packet->head_device_no.exist) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <_Z12buildRequestP10SLMPPacketPh+0x18e>
		packet->head_device_no.putInDump(slider);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3320      	adds	r3, #32
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f954 	bl	8003780 <_ZN5FieldIjLj3EE9putInDumpEPh>
		slider += 3;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3303      	adds	r3, #3
 80034dc:	60fb      	str	r3, [r7, #12]
	}
	if (packet->device_code.exist) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <_Z12buildRequestP10SLMPPacketPh+0x1aa>
		packet->device_code.putInDump(slider);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3328      	adds	r3, #40	; 0x28
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f91b 	bl	800372a <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
	}
	if (packet->no_of_device_points.exist) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <_Z12buildRequestP10SLMPPacketPh+0x1c6>
		packet->no_of_device_points.putInDump(slider);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	332a      	adds	r3, #42	; 0x2a
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f8e7 	bl	80036de <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3302      	adds	r3, #2
 8003514:	60fb      	str	r3, [r7, #12]
	}

	if (packet->value.exist) {
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <_Z12buildRequestP10SLMPPacketPh+0x1e2>
		packet->value.putInDump(slider);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3334      	adds	r3, #52	; 0x34
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff feec 	bl	8003304 <_ZN10ValueField9putInDumpEPh>
		slider += 2;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3302      	adds	r3, #2
 8003530:	60fb      	str	r3, [r7, #12]
	}
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_Z9getMsgLenP10SLMPPacket>:

unsigned short getMsgLen(SLMPPacket* packet) {
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	unsigned short len = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	81fb      	strh	r3, [r7, #14]

	if (packet->is_serial_no.exist) {len += 2;}
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	789b      	ldrb	r3, [r3, #2]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <_Z9getMsgLenP10SLMPPacket+0x1a>
 800354e:	89fb      	ldrh	r3, [r7, #14]
 8003550:	3302      	adds	r3, #2
 8003552:	81fb      	strh	r3, [r7, #14]
	if (packet->serial_no.exist) {len += 2;}
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <_Z9getMsgLenP10SLMPPacket+0x28>
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	3302      	adds	r3, #2
 8003560:	81fb      	strh	r3, [r7, #14]
	if (packet->field_If_serial_no.exist) {len += 2;}
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <_Z9getMsgLenP10SLMPPacket+0x38>
 800356c:	89fb      	ldrh	r3, [r7, #14]
 800356e:	3302      	adds	r3, #2
 8003570:	81fb      	strh	r3, [r7, #14]
	if (packet->request_dest_net_no.exist) {len += 1;}
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7a5b      	ldrb	r3, [r3, #9]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <_Z9getMsgLenP10SLMPPacket+0x46>
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	3301      	adds	r3, #1
 800357e:	81fb      	strh	r3, [r7, #14]
	if (packet->request_dest_station_no.exist) {len += 1;}
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7adb      	ldrb	r3, [r3, #11]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <_Z9getMsgLenP10SLMPPacket+0x54>
 8003588:	89fb      	ldrh	r3, [r7, #14]
 800358a:	3301      	adds	r3, #1
 800358c:	81fb      	strh	r3, [r7, #14]
	if (packet->request_processor.exist) {len += 2;}
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7b9b      	ldrb	r3, [r3, #14]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <_Z9getMsgLenP10SLMPPacket+0x62>
 8003596:	89fb      	ldrh	r3, [r7, #14]
 8003598:	3302      	adds	r3, #2
 800359a:	81fb      	strh	r3, [r7, #14]
	if (packet->request_reserved.exist) {len += 1;}
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7c5b      	ldrb	r3, [r3, #17]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <_Z9getMsgLenP10SLMPPacket+0x70>
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	3301      	adds	r3, #1
 80035a8:	81fb      	strh	r3, [r7, #14]
	if (packet->data_length.exist) {len += 2;}
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <_Z9getMsgLenP10SLMPPacket+0x80>
 80035b4:	89fb      	ldrh	r3, [r7, #14]
 80035b6:	3302      	adds	r3, #2
 80035b8:	81fb      	strh	r3, [r7, #14]
	if (packet->monitoring_time.exist) {len += 2;}
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7d1b      	ldrb	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <_Z9getMsgLenP10SLMPPacket+0x8e>
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	3302      	adds	r3, #2
 80035c6:	81fb      	strh	r3, [r7, #14]
	if (packet->command.exist) {len += 2;}
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e1b      	ldrb	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <_Z9getMsgLenP10SLMPPacket+0x9c>
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	3302      	adds	r3, #2
 80035d4:	81fb      	strh	r3, [r7, #14]
	if (packet->subcommand.exist) {len += 2;}
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <_Z9getMsgLenP10SLMPPacket+0xaa>
 80035de:	89fb      	ldrh	r3, [r7, #14]
 80035e0:	3302      	adds	r3, #2
 80035e2:	81fb      	strh	r3, [r7, #14]
	if (packet->head_device_no.exist) {len += 3;}
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <_Z9getMsgLenP10SLMPPacket+0xba>
 80035ee:	89fb      	ldrh	r3, [r7, #14]
 80035f0:	3303      	adds	r3, #3
 80035f2:	81fb      	strh	r3, [r7, #14]
	if (packet->device_code.exist) {len += 1;}
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <_Z9getMsgLenP10SLMPPacket+0xca>
 80035fe:	89fb      	ldrh	r3, [r7, #14]
 8003600:	3301      	adds	r3, #1
 8003602:	81fb      	strh	r3, [r7, #14]
	if (packet->no_of_device_points.exist) {len += 2;}
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <_Z9getMsgLenP10SLMPPacket+0xda>
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	3302      	adds	r3, #2
 8003612:	81fb      	strh	r3, [r7, #14]
	if (packet->end_code.exist) {len += 2;}
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <_Z9getMsgLenP10SLMPPacket+0xea>
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	3302      	adds	r3, #2
 8003622:	81fb      	strh	r3, [r7, #14]
	if (packet->value.exist) {len += packet->value.getSize();}
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <_Z9getMsgLenP10SLMPPacket+0x108>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3334      	adds	r3, #52	; 0x34
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe7e 	bl	8003334 <_ZN10ValueField7getSizeEv>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	4413      	add	r3, r2
 8003640:	81fb      	strh	r3, [r7, #14]

	return len;
 8003642:	89fb      	ldrh	r3, [r7, #14]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_ZNSt6vectorIhSaIhEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	f107 030c 	add.w	r3, r7, #12
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f8a7 	bl	80037b0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_ZNSt6vectorIhSaIhEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f896 	bl	80037b0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800368e:	b590      	push	{r4, r7, lr}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f898 	bl	80037d0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 80036a0:	4604      	mov	r4, r0
 80036a2:	68b8      	ldr	r0, [r7, #8]
 80036a4:	f000 f894 	bl	80037d0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 80036a8:	4603      	mov	r3, r0
	       __result));
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4619      	mov	r1, r3
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 f899 	bl	80037e6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>
 80036b4:	4603      	mov	r3, r0
    }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}

080036be <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <_ZN5FieldItLj2EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 80036de:	b590      	push	{r4, r7, lr}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f8af 	bl	800384e <_ZNSt5arrayIhLj2EE5beginEv>
 80036f0:	4604      	mov	r4, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f8b6 	bl	8003866 <_ZNSt5arrayIhLj2EE3endEv>
 80036fa:	4603      	mov	r3, r0
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	4620      	mov	r0, r4
 8003702:	f000 f88c 	bl	800381e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bd90      	pop	{r4, r7, pc}

0800370e <_ZN5FieldItLj2EE8getValueEv>:
	ValueType getValue() {
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
		ValueType tmp = this->data.value;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	81fb      	strh	r3, [r7, #14]
		return tmp;
 800371c:	89fb      	ldrh	r3, [r7, #14]
	}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <_ZN5FieldIhLj1EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 800372a:	b590      	push	{r4, r7, lr}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f8a2 	bl	8003880 <_ZNSt5arrayIhLj1EE5beginEv>
 800373c:	4604      	mov	r4, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f8a9 	bl	8003898 <_ZNSt5arrayIhLj1EE3endEv>
 8003746:	4603      	mov	r3, r0
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4619      	mov	r1, r3
 800374c:	4620      	mov	r0, r4
 800374e:	f000 f866 	bl	800381e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}

0800375a <_ZN5FieldItLj2EEC1Et>:
	Field(ValueType value) {
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	807b      	strh	r3, [r7, #2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	709a      	strb	r2, [r3, #2]
		data.value = value;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	801a      	strh	r2, [r3, #0]
	}
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_ZN5FieldIjLj3EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f890 	bl	80038b2 <_ZNSt5arrayIhLj3EE5beginEv>
 8003792:	4604      	mov	r4, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f897 	bl	80038ca <_ZNSt5arrayIhLj3EE3endEv>
 800379c:	4603      	mov	r3, r0
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4620      	mov	r0, r4
 80037a4:	f000 f83b 	bl	800381e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80037e6:	b5b0      	push	{r4, r5, r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f876 	bl	80038e4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80037f8:	4604      	mov	r4, r0
 80037fa:	68b8      	ldr	r0, [r7, #8]
 80037fc:	f000 f872 	bl	80038e4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8003800:	4605      	mov	r5, r0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f87c 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8003808:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800380a:	461a      	mov	r2, r3
 800380c:	4629      	mov	r1, r5
 800380e:	4620      	mov	r0, r4
 8003810:	f000 f881 	bl	8003916 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003814:	4603      	mov	r3, r0
    }
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bdb0      	pop	{r4, r5, r7, pc}

0800381e <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800381e:	b590      	push	{r4, r7, lr}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f890 	bl	8003950 <_ZSt12__miter_baseIPhET_S1_>
 8003830:	4604      	mov	r4, r0
 8003832:	68b8      	ldr	r0, [r7, #8]
 8003834:	f000 f88c 	bl	8003950 <_ZSt12__miter_baseIPhET_S1_>
 8003838:	4603      	mov	r3, r0
	       __result));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4619      	mov	r1, r3
 800383e:	4620      	mov	r0, r4
 8003840:	f000 f891 	bl	8003966 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8003844:	4603      	mov	r3, r0
    }
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bd90      	pop	{r4, r7, pc}

0800384e <_ZNSt5arrayIhLj2EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8a1 	bl	800399e <_ZNSt5arrayIhLj2EE4dataEv>
 800385c:	4603      	mov	r3, r0
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_ZNSt5arrayIhLj2EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f895 	bl	800399e <_ZNSt5arrayIhLj2EE4dataEv>
 8003874:	4603      	mov	r3, r0
 8003876:	3302      	adds	r3, #2
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZNSt5arrayIhLj1EE5beginEv>:
      begin() noexcept
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f895 	bl	80039b8 <_ZNSt5arrayIhLj1EE4dataEv>
 800388e:	4603      	mov	r3, r0
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZNSt5arrayIhLj1EE3endEv>:
      end() noexcept
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f889 	bl	80039b8 <_ZNSt5arrayIhLj1EE4dataEv>
 80038a6:	4603      	mov	r3, r0
 80038a8:	3301      	adds	r3, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_ZNSt5arrayIhLj3EE5beginEv>:
      begin() noexcept
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f889 	bl	80039d2 <_ZNSt5arrayIhLj3EE4dataEv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZNSt5arrayIhLj3EE3endEv>:
      end() noexcept
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f87d 	bl	80039d2 <_ZNSt5arrayIhLj3EE4dataEv>
 80038d8:	4603      	mov	r3, r0
 80038da:	3303      	adds	r3, #3
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f823 	bl	800393a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f85e 	bl	80039ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003930:	4603      	mov	r3, r0
    }
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003966:	b5b0      	push	{r4, r5, r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff ffc4 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8003978:	4604      	mov	r4, r0
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	f7ff ffc0 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8003980:	4605      	mov	r5, r0
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffbc 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8003988:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800398a:	461a      	mov	r2, r3
 800398c:	4629      	mov	r1, r5
 800398e:	4620      	mov	r0, r4
 8003990:	f7ff ffc1 	bl	8003916 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003994:	4603      	mov	r3, r0
    }
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bdb0      	pop	{r4, r5, r7, pc}

0800399e <_ZNSt5arrayIhLj2EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f839 	bl	8003a20 <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZNSt5arrayIhLj1EE4dataEv>:
      data() noexcept
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f837 	bl	8003a36 <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZNSt5arrayIhLj3EE4dataEv>:
      data() noexcept
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f835 	bl	8003a4c <_ZNSt14__array_traitsIhLj3EE6_S_ptrERA3_Kh>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f005 fe08 	bl	8009622 <memmove>
	  return __result + _Num;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
	}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_ZNSt14__array_traitsIhLj3EE6_S_ptrERA3_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <_ZN10ValueField11getFromDumpEPhj>:
	void getFromDump(unsigned char * begin, unsigned content_len) {
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
		while(value.size()) {
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fe18 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <_ZN10ValueField11getFromDumpEPhj+0x2e>
			value.pop_back();
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f8bc 	bl	8003c1e <_ZNSt6vectorIhSaIhEE8pop_backEv>
		while(value.size()) {
 8003aa6:	e7ee      	b.n	8003a86 <_ZN10ValueField11getFromDumpEPhj+0xc>
		for(int i = 0; i < content_len; i++) {
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d90a      	bls.n	8003aca <_ZN10ValueField11getFromDumpEPhj+0x50>
			value.push_back(begin[i]);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	4413      	add	r3, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	f000 f8c2 	bl	8003c46 <_ZNSt6vectorIhSaIhEE9push_backERKh>
		for(int i = 0; i < content_len; i++) {
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e7f0      	b.n	8003aac <_ZN10ValueField11getFromDumpEPhj+0x32>
	}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_Z13parseResponseP10SLMPPacketPh>:
// Created by data-scientist on 07.02.2020.
//

#include "SLMPResponseParser.h"

void parseResponse(SLMPPacket *packet, unsigned char * msg) {
 8003ad2:	b590      	push	{r4, r7, lr}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
	unsigned char *slider = msg;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

	packet->is_serial_no.getFromDump(slider);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f8d3 	bl	8003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->is_serial_no.exist = true;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	709a      	strb	r2, [r3, #2]
	slider += 2;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3302      	adds	r3, #2
 8003af4:	60fb      	str	r3, [r7, #12]

	if (packet->is_serial_no.getValue() == 0x0050) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fe08 	bl	800370e <_ZN5FieldItLj2EE8getValueEv>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b50      	cmp	r3, #80	; 0x50
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <_Z13parseResponseP10SLMPPacketPh+0x60>
		packet->serial_no.getFromDump(slider);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f8bb 	bl	8003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>
		slider += 2;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	60fb      	str	r3, [r7, #12]

		packet->field_If_serial_no.getFromDump(slider);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3348      	adds	r3, #72	; 0x48
 8003b24:	68f9      	ldr	r1, [r7, #12]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f8b2 	bl	8003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>
		slider += 2;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	60fb      	str	r3, [r7, #12]
	}

	packet->request_dest_net_no.getFromDump(slider);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3308      	adds	r3, #8
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f8be 	bl	8003cba <_ZN5FieldIhLj1EE11getFromDumpEPh>
	packet->request_dest_net_no.exist = true;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	725a      	strb	r2, [r3, #9]
	slider += 1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]

	packet->request_dest_station_no.getFromDump(slider);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	330a      	adds	r3, #10
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f8b2 	bl	8003cba <_ZN5FieldIhLj1EE11getFromDumpEPh>
	packet->request_dest_station_no.exist = true;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	72da      	strb	r2, [r3, #11]
	slider += 1;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]

	packet->request_processor.getFromDump(slider);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	330c      	adds	r3, #12
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f891 	bl	8003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->request_processor.exist = true;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	739a      	strb	r2, [r3, #14]
	slider += 2;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3302      	adds	r3, #2
 8003b78:	60fb      	str	r3, [r7, #12]

	packet->request_reserved.getFromDump(slider);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3310      	adds	r3, #16
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f89a 	bl	8003cba <_ZN5FieldIhLj1EE11getFromDumpEPh>
	packet->request_reserved.exist = true;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	745a      	strb	r2, [r3, #17]
	slider += 1;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]

	packet->data_length.getFromDump(slider);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3344      	adds	r3, #68	; 0x44
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f879 	bl	8003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->data_length.exist = true;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	slider += 2;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	60fb      	str	r3, [r7, #12]

	packet->end_code.getFromDump(slider);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	332e      	adds	r3, #46	; 0x2e
 8003bb0:	68f9      	ldr	r1, [r7, #12]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f86c 	bl	8003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->end_code.exist = true;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	slider += 2;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	60fb      	str	r3, [r7, #12]


	if ((packet->data_length.getValue() > 2) && !packet->end_code.getValue()) {
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3344      	adds	r3, #68	; 0x44
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fd9f 	bl	800370e <_ZN5FieldItLj2EE8getValueEv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d909      	bls.n	8003bea <_Z13parseResponseP10SLMPPacketPh+0x118>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	332e      	adds	r3, #46	; 0x2e
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fd97 	bl	800370e <_ZN5FieldItLj2EE8getValueEv>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <_Z13parseResponseP10SLMPPacketPh+0x118>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <_Z13parseResponseP10SLMPPacketPh+0x11a>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <_Z13parseResponseP10SLMPPacketPh+0x144>
		packet->value.exist = true;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		packet->value.getFromDump(slider, packet->data_length.getValue() - 2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3344      	adds	r3, #68	; 0x44
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fd83 	bl	800370e <_ZN5FieldItLj2EE8getValueEv>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	3b02      	subs	r3, #2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7ff ff32 	bl	8003a7a <_ZN10ValueField11getFromDumpEPhj>
	}
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}

08003c1e <_ZNSt6vectorIhSaIhEE8pop_backEv>:
       *  Note that no data is returned, and if the last element's
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f000 f877 	bl	8003d2c <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
      }
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d00c      	beq.n	8003c76 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	f000 f879 	bl	8003d5c <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	605a      	str	r2, [r3, #4]
      }
 8003c74:	e008      	b.n	8003c88 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff fcf8 	bl	800366c <_ZNSt6vectorIhSaIhEE3endEv>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f87e 	bl	8003d84 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_ZN5FieldItLj2EE11getFromDumpEPh>:
	void getFromDump(unsigned char * begin) {std::copy(begin, begin + DumpSize, data.raw.begin());}
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	1c9c      	adds	r4, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fdd4 	bl	800384e <_ZNSt5arrayIhLj2EE5beginEv>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4621      	mov	r1, r4
 8003cac:	6838      	ldr	r0, [r7, #0]
 8003cae:	f7ff fdb6 	bl	800381e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}

08003cba <_ZN5FieldIhLj1EE11getFromDumpEPh>:
 8003cba:	b590      	push	{r4, r7, lr}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	1c5c      	adds	r4, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fdd8 	bl	8003880 <_ZNSt5arrayIhLj1EE5beginEv>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	6838      	ldr	r0, [r7, #0]
 8003cd8:	f7ff fda1 	bl	800381e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}

08003ce4 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f8cb 	bl	8003eba <_ZSt8_DestroyIPhEvT_S1_>
    }
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8cb 	bl	8003ed4 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ffec 	bl	8003d46 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8b8 	bl	8003eea <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003d84:	b5b0      	push	{r4, r5, r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003d90:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x10c>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f8c1 	bl	8003f1c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff fc55 	bl	800364c <_ZNSt6vectorIhSaIhEE5beginEv>
 8003da2:	4603      	mov	r3, r0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	f107 0214 	add.w	r2, r7, #20
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f8fb 	bl	8003fac <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8003db6:	4603      	mov	r3, r0
 8003db8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f909 	bl	8003fd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003dc4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003dca:	68fc      	ldr	r4, [r7, #12]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	18d5      	adds	r5, r2, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffb7 	bl	8003d46 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7ff ffbc 	bl	8003d5c <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681c      	ldr	r4, [r3, #0]
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fda2 	bl	800393a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8003df6:	4603      	mov	r3, r0
 8003df8:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff7c 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003e02:	4603      	mov	r3, r0
	  __new_finish
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	4629      	mov	r1, r5
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 f8f8 	bl	8003ffe <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8003e0e:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fd8d 	bl	800393a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8003e20:	4603      	mov	r3, r0
 8003e22:	681c      	ldr	r4, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff65 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003e30:	4603      	mov	r3, r0
	  __new_finish
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4629      	mov	r1, r5
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 f8e1 	bl	8003ffe <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8003e3c:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681c      	ldr	r4, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff56 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003e4e:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e50:	461a      	mov	r2, r3
 8003e52:	4629      	mov	r1, r5
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff ff5b 	bl	8003d10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8003e64:	461a      	mov	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	1ad3      	subs	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f000 f811 	bl	8003e94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	441a      	add	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
    }
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e90:	08009fc4 	.word	0x08009fc4

08003e94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f8bf 	bl	8004030 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8c1 	bl	800404e <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003eea:	b590      	push	{r4, r7, lr}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ff25 	bl	8003d46 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003efc:	4603      	mov	r3, r0
 8003efe:	781c      	ldrb	r4, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4619      	mov	r1, r3
 8003f04:	2001      	movs	r0, #1
 8003f06:	f7ff fdac 	bl	8003a62 <_ZnwjPv>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_+0x2a>
 8003f10:	4622      	mov	r2, r4
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd90      	pop	{r4, r7, pc}

08003f1c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f89b 	bl	8004064 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003f2e:	4604      	mov	r4, r0
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff fbc4 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	1ae2      	subs	r2, r4, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	bf34      	ite	cc
 8003f40:	2301      	movcc	r3, #1
 8003f42:	2300      	movcs	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f005 fb23 	bl	8009598 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff fbb3 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fbaf 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003f60:	4603      	mov	r3, r0
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	f107 0208 	add.w	r2, r7, #8
 8003f68:	f107 0310 	add.w	r3, r7, #16
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f889 	bl	8004086 <_ZSt3maxIjERKT_S2_S2_>
 8003f74:	4603      	mov	r3, r0
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4423      	add	r3, r4
 8003f7a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fb9e 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d306      	bcc.n	8003f98 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7c>
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f86a 	bl	8004064 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003f90:	4602      	mov	r2, r0
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d904      	bls.n	8003fa2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f863 	bl	8004064 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	e000      	b.n	8003fa4 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x88>
 8003fa2:	697b      	ldr	r3, [r7, #20]
      }
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd90      	pop	{r4, r7, pc}

08003fac <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fcbf 	bl	800393a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461c      	mov	r4, r3
 8003fc2:	6838      	ldr	r0, [r7, #0]
 8003fc4:	f7ff fcb9 	bl	800393a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1ae3      	subs	r3, r4, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd90      	pop	{r4, r7, pc}

08003fd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f85f 	bl	80040ae <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	e000      	b.n	8003ff6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8003ff4:	2300      	movs	r3, #0
      }
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003ffe:	b590      	push	{r4, r7, lr}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f85d 	bl	80040cc <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8004012:	4604      	mov	r4, r0
 8004014:	68b8      	ldr	r0, [r7, #8]
 8004016:	f000 f859 	bl	80040cc <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800401a:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4620      	mov	r0, r4
 8004022:	f000 f862 	bl	80040ea <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8004026:	4603      	mov	r3, r0
    }
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}

08004030 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f863 	bl	800410c <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fe38 	bl	8003ce4 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004074:	4603      	mov	r3, r0
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f855 	bl	8004126 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 800407c:	4603      	mov	r3, r0
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d201      	bcs.n	80040a0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	e000      	b.n	80040a2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80040a0:	687b      	ldr	r3, [r7, #4]
    }
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80040b8:	2200      	movs	r2, #0
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f83e 	bl	800413e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f84b 	bl	8004176 <_ZNSt13move_iteratorIPhEC1ES0_>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f849 	bl	8004194 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	f004 fb89 	bl	8008830 <_ZdlPv>
      }
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f842 	bl	80041b8 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8004134:	4603      	mov	r3, r0
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f834 	bl	80041b8 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4293      	cmp	r3, r2
 8004156:	bf8c      	ite	hi
 8004158:	2301      	movhi	r3, #1
 800415a:	2300      	movls	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004162:	f005 fa16 	bl	8009592 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004166:	68b8      	ldr	r0, [r7, #8]
 8004168:	f004 fb56 	bl	8008818 <_Znwj>
 800416c:	4603      	mov	r3, r0
      }
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f811 	bl	80041d0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 80041ae:	4603      	mov	r3, r0
    }
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f805 	bl	80041f0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f80f 	bl	8004220 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004202:	4604      	mov	r4, r0
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	f000 f80b 	bl	8004220 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800420a:	4603      	mov	r3, r0
	       __result));
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4619      	mov	r1, r3
 8004210:	4620      	mov	r0, r4
 8004212:	f000 f816 	bl	8004242 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8004216:	4603      	mov	r3, r0
    }
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f825 	bl	800427a <_ZNKSt13move_iteratorIPhE4baseEv>
 8004230:	4603      	mov	r3, r0
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fb8c 	bl	8003950 <_ZSt12__miter_baseIPhET_S1_>
 8004238:	4603      	mov	r3, r0
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004242:	b5b0      	push	{r4, r5, r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff fb56 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8004254:	4604      	mov	r4, r0
 8004256:	68b8      	ldr	r0, [r7, #8]
 8004258:	f7ff fb52 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 800425c:	4605      	mov	r5, r0
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fb4e 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8004264:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004266:	461a      	mov	r2, r3
 8004268:	4629      	mov	r1, r5
 800426a:	4620      	mov	r0, r4
 800426c:	f000 f811 	bl	8004292 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8004270:	4603      	mov	r3, r0
    }
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bdb0      	pop	{r4, r5, r7, pc}

0800427a <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f805 	bl	80042b6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80042ac:	4603      	mov	r3, r0
    }
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f005 f9a3 	bl	8009622 <memmove>
	  return __result + _Num;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
	}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <WIZCHIP_READ+0x94>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <WIZCHIP_READ+0x94>)
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <WIZCHIP_READ+0x94>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <WIZCHIP_READ+0x24>
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <WIZCHIP_READ+0x94>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d114      	bne.n	800433a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <WIZCHIP_READ+0x94>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	0c12      	lsrs	r2, r2, #16
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	4610      	mov	r0, r2
 800431c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <WIZCHIP_READ+0x94>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	0a12      	lsrs	r2, r2, #8
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <WIZCHIP_READ+0x94>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	4610      	mov	r0, r2
 8004336:	4798      	blx	r3
 8004338:	e011      	b.n	800435e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	b2db      	uxtb	r3, r3
 8004340:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	b2db      	uxtb	r3, r3
 8004348:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <WIZCHIP_READ+0x94>)
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f107 020c 	add.w	r2, r7, #12
 8004358:	2103      	movs	r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <WIZCHIP_READ+0x94>)
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	4798      	blx	r3
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <WIZCHIP_READ+0x94>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <WIZCHIP_READ+0x94>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4798      	blx	r3
   return ret;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000004 	.word	0x20000004

08004384 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <WIZCHIP_WRITE+0x98>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <WIZCHIP_WRITE+0x98>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <WIZCHIP_WRITE+0x98>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d119      	bne.n	80043e0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <WIZCHIP_WRITE+0x98>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	0c12      	lsrs	r2, r2, #16
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	4610      	mov	r0, r2
 80043b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <WIZCHIP_WRITE+0x98>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	0a12      	lsrs	r2, r2, #8
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	4610      	mov	r0, r2
 80043c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <WIZCHIP_WRITE+0x98>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <WIZCHIP_WRITE+0x98>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	4610      	mov	r0, r2
 80043dc:	4798      	blx	r3
 80043de:	e013      	b.n	8004408 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <WIZCHIP_WRITE+0x98>)
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f107 020c 	add.w	r2, r7, #12
 8004402:	2104      	movs	r1, #4
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <WIZCHIP_WRITE+0x98>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800440e:	4b03      	ldr	r3, [pc, #12]	; (800441c <WIZCHIP_WRITE+0x98>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4798      	blx	r3
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000004 	.word	0x20000004

08004420 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800443a:	4b28      	ldr	r3, [pc, #160]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <WIZCHIP_READ_BUF+0x2a>
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d126      	bne.n	8004498 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	0c12      	lsrs	r2, r2, #16
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	4610      	mov	r0, r2
 8004456:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	0a12      	lsrs	r2, r2, #8
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	4610      	mov	r0, r2
 8004464:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	4610      	mov	r0, r2
 8004470:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	82fb      	strh	r3, [r7, #22]
 8004476:	e00a      	b.n	800448e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	8afa      	ldrh	r2, [r7, #22]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	188c      	adds	r4, r1, r2
 8004482:	4798      	blx	r3
 8004484:	4603      	mov	r3, r0
 8004486:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004488:	8afb      	ldrh	r3, [r7, #22]
 800448a:	3301      	adds	r3, #1
 800448c:	82fb      	strh	r3, [r7, #22]
 800448e:	8afa      	ldrh	r2, [r7, #22]
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3f0      	bcc.n	8004478 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004496:	e017      	b.n	80044c8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	b2db      	uxtb	r3, r3
 800449e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f107 0210 	add.w	r2, r7, #16
 80044b6:	2103      	movs	r1, #3
 80044b8:	4610      	mov	r0, r2
 80044ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	4611      	mov	r1, r2
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80044ce:	4b03      	ldr	r3, [pc, #12]	; (80044dc <WIZCHIP_READ_BUF+0xbc>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	4798      	blx	r3
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}
 80044dc:	20000004 	.word	0x20000004

080044e0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f043 0304 	orr.w	r3, r3, #4
 8004500:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d126      	bne.n	8004558 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	0c12      	lsrs	r2, r2, #16
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	4610      	mov	r0, r2
 8004516:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	0a12      	lsrs	r2, r2, #8
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	4610      	mov	r0, r2
 8004524:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004532:	2300      	movs	r3, #0
 8004534:	82fb      	strh	r3, [r7, #22]
 8004536:	e00a      	b.n	800454e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004538:	4b18      	ldr	r3, [pc, #96]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	8afa      	ldrh	r2, [r7, #22]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	440a      	add	r2, r1
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	4610      	mov	r0, r2
 8004546:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004548:	8afb      	ldrh	r3, [r7, #22]
 800454a:	3301      	adds	r3, #1
 800454c:	82fb      	strh	r3, [r7, #22]
 800454e:	8afa      	ldrh	r2, [r7, #22]
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3f0      	bcc.n	8004538 <WIZCHIP_WRITE_BUF+0x58>
 8004556:	e017      	b.n	8004588 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	b2db      	uxtb	r3, r3
 800455e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	b2db      	uxtb	r3, r3
 8004566:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f107 0210 	add.w	r2, r7, #16
 8004576:	2103      	movs	r1, #3
 8004578:	4610      	mov	r0, r2
 800457a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	4611      	mov	r1, r2
 8004584:	68b8      	ldr	r0, [r7, #8]
 8004586:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800458e:	4b03      	ldr	r3, [pc, #12]	; (800459c <WIZCHIP_WRITE_BUF+0xbc>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4798      	blx	r3
}
 8004594:	bf00      	nop
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000004 	.word	0x20000004

080045a0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	81fb      	strh	r3, [r7, #14]
 80045ae:	2300      	movs	r3, #0
 80045b0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	3301      	adds	r3, #1
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fe94 	bl	80042ec <WIZCHIP_READ>
 80045c4:	4603      	mov	r3, r0
 80045c6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	b29c      	uxth	r4, r3
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	3301      	adds	r3, #1
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fe86 	bl	80042ec <WIZCHIP_READ>
 80045e0:	4603      	mov	r3, r0
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4423      	add	r3, r4
 80045e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80045e8:	89bb      	ldrh	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01a      	beq.n	8004624 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3301      	adds	r3, #1
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fe76 	bl	80042ec <WIZCHIP_READ>
 8004600:	4603      	mov	r3, r0
 8004602:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	b29c      	uxth	r4, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	3301      	adds	r3, #1
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fe68 	bl	80042ec <WIZCHIP_READ>
 800461c:	4603      	mov	r3, r0
 800461e:	b29b      	uxth	r3, r3
 8004620:	4423      	add	r3, r4
 8004622:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004624:	89fa      	ldrh	r2, [r7, #14]
 8004626:	89bb      	ldrh	r3, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d1c2      	bne.n	80045b2 <getSn_TX_FSR+0x12>
   return val;
 800462c:	89fb      	ldrh	r3, [r7, #14]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}

08004636 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004636:	b590      	push	{r4, r7, lr}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004640:	2300      	movs	r3, #0
 8004642:	81fb      	strh	r3, [r7, #14]
 8004644:	2300      	movs	r3, #0
 8004646:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3301      	adds	r3, #1
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fe49 	bl	80042ec <WIZCHIP_READ>
 800465a:	4603      	mov	r3, r0
 800465c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800465e:	89bb      	ldrh	r3, [r7, #12]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	b29c      	uxth	r4, r3
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	3301      	adds	r3, #1
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fe3b 	bl	80042ec <WIZCHIP_READ>
 8004676:	4603      	mov	r3, r0
 8004678:	b29b      	uxth	r3, r3
 800467a:	4423      	add	r3, r4
 800467c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800467e:	89bb      	ldrh	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01a      	beq.n	80046ba <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	3301      	adds	r3, #1
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fe2b 	bl	80042ec <WIZCHIP_READ>
 8004696:	4603      	mov	r3, r0
 8004698:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800469a:	89fb      	ldrh	r3, [r7, #14]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	b29c      	uxth	r4, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	3301      	adds	r3, #1
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fe1d 	bl	80042ec <WIZCHIP_READ>
 80046b2:	4603      	mov	r3, r0
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4423      	add	r3, r4
 80046b8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80046ba:	89fa      	ldrh	r2, [r7, #14]
 80046bc:	89bb      	ldrh	r3, [r7, #12]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d1c2      	bne.n	8004648 <getSn_RX_RSR+0x12>
   return val;
 80046c2:	89fb      	ldrh	r3, [r7, #14]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd90      	pop	{r4, r7, pc}

080046cc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	71fb      	strb	r3, [r7, #7]
 80046d8:	4613      	mov	r3, r2
 80046da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80046e4:	88bb      	ldrh	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d048      	beq.n	800477c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	3301      	adds	r3, #1
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fdf8 	bl	80042ec <WIZCHIP_READ>
 80046fc:	4603      	mov	r3, r0
 80046fe:	b29b      	uxth	r3, r3
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	b29c      	uxth	r4, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	3301      	adds	r3, #1
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fdeb 	bl	80042ec <WIZCHIP_READ>
 8004716:	4603      	mov	r3, r0
 8004718:	b29b      	uxth	r3, r3
 800471a:	4423      	add	r3, r4
 800471c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800471e:	89fb      	ldrh	r3, [r7, #14]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	79fa      	ldrb	r2, [r7, #7]
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	3202      	adds	r2, #2
 8004728:	00d2      	lsls	r2, r2, #3
 800472a:	4413      	add	r3, r2
 800472c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800472e:	88bb      	ldrh	r3, [r7, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	68b8      	ldr	r0, [r7, #8]
 8004736:	f7ff fed3 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800473a:	89fa      	ldrh	r2, [r7, #14]
 800473c:	88bb      	ldrh	r3, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	3301      	adds	r3, #1
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800474e:	461a      	mov	r2, r3
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	b29b      	uxth	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7ff fe12 	bl	8004384 <WIZCHIP_WRITE>
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	3301      	adds	r3, #1
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800476c:	461a      	mov	r2, r3
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f7ff fe05 	bl	8004384 <WIZCHIP_WRITE>
 800477a:	e000      	b.n	800477e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800477c:	bf00      	nop
}
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
 8004790:	4613      	mov	r3, r2
 8004792:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800479c:	88bb      	ldrh	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d048      	beq.n	8004834 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	3301      	adds	r3, #1
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fd9c 	bl	80042ec <WIZCHIP_READ>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	b29c      	uxth	r4, r3
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	3301      	adds	r3, #1
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fd8f 	bl	80042ec <WIZCHIP_READ>
 80047ce:	4603      	mov	r3, r0
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4423      	add	r3, r4
 80047d4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	79fa      	ldrb	r2, [r7, #7]
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	3203      	adds	r2, #3
 80047e0:	00d2      	lsls	r2, r2, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80047e6:	88bb      	ldrh	r3, [r7, #4]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff fe17 	bl	8004420 <WIZCHIP_READ_BUF>
   ptr += len;
 80047f2:	89fa      	ldrh	r2, [r7, #14]
 80047f4:	88bb      	ldrh	r3, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	3301      	adds	r3, #1
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004806:	461a      	mov	r2, r3
 8004808:	89fb      	ldrh	r3, [r7, #14]
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	b29b      	uxth	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7ff fdb6 	bl	8004384 <WIZCHIP_WRITE>
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	3301      	adds	r3, #1
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004824:	461a      	mov	r2, r3
 8004826:	89fb      	ldrh	r3, [r7, #14]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7ff fda9 	bl	8004384 <WIZCHIP_WRITE>
 8004832:	e000      	b.n	8004836 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004834:	bf00      	nop
}
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}

0800483c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	460a      	mov	r2, r1
 8004846:	71fb      	strb	r3, [r7, #7]
 8004848:	4613      	mov	r3, r2
 800484a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	3301      	adds	r3, #1
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fd45 	bl	80042ec <WIZCHIP_READ>
 8004862:	4603      	mov	r3, r0
 8004864:	b29b      	uxth	r3, r3
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	b29c      	uxth	r4, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3301      	adds	r3, #1
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fd38 	bl	80042ec <WIZCHIP_READ>
 800487c:	4603      	mov	r3, r0
 800487e:	b29b      	uxth	r3, r3
 8004880:	4423      	add	r3, r4
 8004882:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004884:	89fa      	ldrh	r2, [r7, #14]
 8004886:	88bb      	ldrh	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	3301      	adds	r3, #1
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004898:	461a      	mov	r2, r3
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	b29b      	uxth	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f7ff fd6d 	bl	8004384 <WIZCHIP_WRITE>
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	3301      	adds	r3, #1
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80048b6:	461a      	mov	r2, r3
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7ff fd60 	bl	8004384 <WIZCHIP_WRITE>
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}

080048cc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	71fb      	strb	r3, [r7, #7]
 80048de:	4603      	mov	r3, r0
 80048e0:	71bb      	strb	r3, [r7, #6]
 80048e2:	460b      	mov	r3, r1
 80048e4:	80bb      	strh	r3, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d902      	bls.n	80048f6 <socket+0x2a>
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f4:	e0f1      	b.n	8004ada <socket+0x20e>
	switch(protocol)
 80048f6:	79bb      	ldrb	r3, [r7, #6]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d004      	beq.n	8004906 <socket+0x3a>
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	db10      	blt.n	8004922 <socket+0x56>
 8004900:	2b04      	cmp	r3, #4
 8004902:	dc0e      	bgt.n	8004922 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004904:	e010      	b.n	8004928 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8004906:	f107 030c 	add.w	r3, r7, #12
 800490a:	2204      	movs	r2, #4
 800490c:	4619      	mov	r1, r3
 800490e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004912:	f7ff fd85 	bl	8004420 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <socket+0x5c>
 800491c:	f06f 0302 	mvn.w	r3, #2
 8004920:	e0db      	b.n	8004ada <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004922:	f06f 0304 	mvn.w	r3, #4
 8004926:	e0d8      	b.n	8004ada <socket+0x20e>
         break;
 8004928:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <socket+0x6e>
 8004934:	f06f 0305 	mvn.w	r3, #5
 8004938:	e0cf      	b.n	8004ada <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d025      	beq.n	800498c <socket+0xc0>
	{
   	switch(protocol)
 8004940:	79bb      	ldrb	r3, [r7, #6]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d002      	beq.n	800494c <socket+0x80>
 8004946:	2b02      	cmp	r3, #2
 8004948:	d008      	beq.n	800495c <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800494a:	e024      	b.n	8004996 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004952:	2b00      	cmp	r3, #0
 8004954:	d11c      	bne.n	8004990 <socket+0xc4>
 8004956:	f06f 0305 	mvn.w	r3, #5
 800495a:	e0be      	b.n	8004ada <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800496a:	2b00      	cmp	r3, #0
 800496c:	db02      	blt.n	8004974 <socket+0xa8>
 800496e:	f06f 0305 	mvn.w	r3, #5
 8004972:	e0b2      	b.n	8004ada <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800497e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004982:	2b00      	cmp	r3, #0
 8004984:	db06      	blt.n	8004994 <socket+0xc8>
 8004986:	f06f 0305 	mvn.w	r3, #5
 800498a:	e0a6      	b.n	8004ada <socket+0x20e>
   	}
   }
 800498c:	bf00      	nop
 800498e:	e002      	b.n	8004996 <socket+0xca>
   	      break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <socket+0xca>
   	      break;
 8004994:	bf00      	nop
	close(sn);
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f8ad 	bl	8004af8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	3301      	adds	r3, #1
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ac:	f023 030f 	bic.w	r3, r3, #15
 80049b0:	b25a      	sxtb	r2, r3
 80049b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b25b      	sxtb	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	f7ff fce1 	bl	8004384 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80049c2:	88bb      	ldrh	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d110      	bne.n	80049ea <socket+0x11e>
	{
	   port = sock_any_port++;
 80049c8:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <socket+0x218>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	b291      	uxth	r1, r2
 80049d0:	4a44      	ldr	r2, [pc, #272]	; (8004ae4 <socket+0x218>)
 80049d2:	8011      	strh	r1, [r2, #0]
 80049d4:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <socket+0x218>)
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80049de:	4293      	cmp	r3, r2
 80049e0:	d103      	bne.n	80049ea <socket+0x11e>
 80049e2:	4b40      	ldr	r3, [pc, #256]	; (8004ae4 <socket+0x218>)
 80049e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80049e8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3301      	adds	r3, #1
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f6:	461a      	mov	r2, r3
 80049f8:	88bb      	ldrh	r3, [r7, #4]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7ff fcbe 	bl	8004384 <WIZCHIP_WRITE>
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	461a      	mov	r2, r3
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7ff fcb1 	bl	8004384 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	3301      	adds	r3, #1
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fca7 	bl	8004384 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004a36:	bf00      	nop
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fc51 	bl	80042ec <WIZCHIP_READ>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f3      	bne.n	8004a38 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	2201      	movs	r2, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	b21a      	sxth	r2, r3
 8004a5e:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <socket+0x21c>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b21b      	sxth	r3, r3
 8004a64:	4013      	ands	r3, r2
 8004a66:	b21b      	sxth	r3, r3
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <socket+0x21c>)
 8004a6c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f003 0201 	and.w	r2, r3, #1
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	b21a      	sxth	r2, r3
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <socket+0x21c>)
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	4313      	orrs	r3, r2
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <socket+0x21c>)
 8004a8a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	b21a      	sxth	r2, r3
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <socket+0x220>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b21b      	sxth	r3, r3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b21b      	sxth	r3, r3
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <socket+0x220>)
 8004aa8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4a10      	ldr	r2, [pc, #64]	; (8004af0 <socket+0x224>)
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <socket+0x228>)
 8004ab8:	2100      	movs	r1, #0
 8004aba:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004abc:	bf00      	nop
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fc0e 	bl	80042ec <WIZCHIP_READ>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f3      	beq.n	8004abe <socket+0x1f2>
   return (int8_t)sn;
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000002 	.word	0x20000002
 8004ae8:	200000b4 	.word	0x200000b4
 8004aec:	200000b6 	.word	0x200000b6
 8004af0:	200000b8 	.word	0x200000b8
 8004af4:	200000c8 	.word	0x200000c8

08004af8 <close>:

int8_t close(uint8_t sn)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d902      	bls.n	8004b0e <close+0x16>
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0c:	e055      	b.n	8004bba <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	3301      	adds	r3, #1
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fc31 	bl	8004384 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004b22:	bf00      	nop
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	3301      	adds	r3, #1
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fbdb 	bl	80042ec <WIZCHIP_READ>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f3      	bne.n	8004b24 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	3301      	adds	r3, #1
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b48:	211f      	movs	r1, #31
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fc1a 	bl	8004384 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	b21b      	sxth	r3, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <close+0xcc>)
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b21b      	sxth	r3, r3
 8004b64:	4013      	ands	r3, r2
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <close+0xcc>)
 8004b6c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2201      	movs	r2, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	b21b      	sxth	r3, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	b21a      	sxth	r2, r3
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <close+0xd0>)
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b21b      	sxth	r3, r3
 8004b82:	4013      	ands	r3, r2
 8004b84:	b21b      	sxth	r3, r3
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <close+0xd0>)
 8004b8a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <close+0xd4>)
 8004b90:	2100      	movs	r1, #0
 8004b92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <close+0xd8>)
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004b9e:	bf00      	nop
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fb9d 	bl	80042ec <WIZCHIP_READ>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f3      	bne.n	8004ba0 <close+0xa8>
	return SOCK_OK;
 8004bb8:	2301      	movs	r3, #1
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200000b4 	.word	0x200000b4
 8004bc8:	200000b6 	.word	0x200000b6
 8004bcc:	200000b8 	.word	0x200000b8
 8004bd0:	200000c8 	.word	0x200000c8

08004bd4 <listen>:

int8_t listen(uint8_t sn)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d902      	bls.n	8004bea <listen+0x16>
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be8:	e049      	b.n	8004c7e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3301      	adds	r3, #1
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fb7a 	bl	80042ec <WIZCHIP_READ>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d002      	beq.n	8004c08 <listen+0x34>
 8004c02:	f06f 0304 	mvn.w	r3, #4
 8004c06:	e03a      	b.n	8004c7e <listen+0xaa>
	CHECK_SOCKINIT();
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fb69 	bl	80042ec <WIZCHIP_READ>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b13      	cmp	r3, #19
 8004c1e:	d002      	beq.n	8004c26 <listen+0x52>
 8004c20:	f06f 0302 	mvn.w	r3, #2
 8004c24:	e02b      	b.n	8004c7e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fba5 	bl	8004384 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8004c3a:	bf00      	nop
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	3301      	adds	r3, #1
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fb4f 	bl	80042ec <WIZCHIP_READ>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f3      	bne.n	8004c3c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004c54:	e006      	b.n	8004c64 <listen+0x90>
   {
         close(sn);
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff4d 	bl	8004af8 <close>
         return SOCKERR_SOCKCLOSED;
 8004c5e:	f06f 0303 	mvn.w	r3, #3
 8004c62:	e00c      	b.n	8004c7e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3301      	adds	r3, #1
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fb3b 	bl	80042ec <WIZCHIP_READ>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b14      	cmp	r3, #20
 8004c7a:	d1ec      	bne.n	8004c56 <listen+0x82>
   }
   return SOCK_OK;
 8004c7c:	2301      	movs	r3, #1
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
 8004c96:	4613      	mov	r3, r2
 8004c98:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d902      	bls.n	8004cae <sendto+0x26>
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cac:	e11b      	b.n	8004ee6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fb18 	bl	80042ec <WIZCHIP_READ>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	3b02      	subs	r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004cc8:	f06f 0304 	mvn.w	r3, #4
 8004ccc:	e10b      	b.n	8004ee6 <sendto+0x25e>
         break;
 8004cce:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004cd0:	89bb      	ldrh	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <sendto+0x54>
 8004cd6:	f06f 030d 	mvn.w	r3, #13
 8004cda:	e104      	b.n	8004ee6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	3201      	adds	r2, #1
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4413      	add	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	3202      	adds	r2, #2
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	3203      	adds	r2, #3
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	4413      	add	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <sendto+0xa8>
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	3301      	adds	r3, #1
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fae6 	bl	80042ec <WIZCHIP_READ>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d002      	beq.n	8004d30 <sendto+0xa8>
 8004d2a:	f06f 030b 	mvn.w	r3, #11
 8004d2e:	e0da      	b.n	8004ee6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004d30:	8c3b      	ldrh	r3, [r7, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <sendto+0xcc>
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fad4 	bl	80042ec <WIZCHIP_READ>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d002      	beq.n	8004d54 <sendto+0xcc>
 8004d4e:	f06f 030a 	mvn.w	r3, #10
 8004d52:	e0c8      	b.n	8004ee6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	3301      	adds	r3, #1
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fac3 	bl	80042ec <WIZCHIP_READ>
 8004d66:	4603      	mov	r3, r0
 8004d68:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b42      	cmp	r3, #66	; 0x42
 8004d6e:	d008      	beq.n	8004d82 <sendto+0xfa>
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	2b22      	cmp	r3, #34	; 0x22
 8004d74:	d005      	beq.n	8004d82 <sendto+0xfa>
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b32      	cmp	r3, #50	; 0x32
 8004d7a:	d002      	beq.n	8004d82 <sendto+0xfa>
 8004d7c:	f06f 0306 	mvn.w	r3, #6
 8004d80:	e0b1      	b.n	8004ee6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	3301      	adds	r3, #1
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004d8e:	2204      	movs	r2, #4
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fba4 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	461a      	mov	r2, r3
 8004da6:	8c3b      	ldrh	r3, [r7, #32]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7ff fae7 	bl	8004384 <WIZCHIP_WRITE>
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3301      	adds	r3, #1
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	8c3b      	ldrh	r3, [r7, #32]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f7ff fada 	bl	8004384 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fa85 	bl	80042ec <WIZCHIP_READ>
 8004de2:	4603      	mov	r3, r0
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	029b      	lsls	r3, r3, #10
 8004de8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004dea:	89ba      	ldrh	r2, [r7, #12]
 8004dec:	8abb      	ldrh	r3, [r7, #20]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d901      	bls.n	8004df6 <sendto+0x16e>
 8004df2:	8abb      	ldrh	r3, [r7, #20]
 8004df4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fbd1 	bl	80045a0 <getSn_TX_FSR>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	3301      	adds	r3, #1
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fa6c 	bl	80042ec <WIZCHIP_READ>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <sendto+0x198>
 8004e1a:	f06f 0303 	mvn.w	r3, #3
 8004e1e:	e062      	b.n	8004ee6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004e20:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <sendto+0x268>)
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	fa42 f303 	asr.w	r3, r2, r3
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <sendto+0x1b8>
 8004e34:	89ba      	ldrh	r2, [r7, #12]
 8004e36:	8abb      	ldrh	r3, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d901      	bls.n	8004e40 <sendto+0x1b8>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e052      	b.n	8004ee6 <sendto+0x25e>
      if(len <= freesize) break;
 8004e40:	89ba      	ldrh	r2, [r7, #12]
 8004e42:	8abb      	ldrh	r3, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d900      	bls.n	8004e4a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8004e48:	e7d5      	b.n	8004df6 <sendto+0x16e>
      if(len <= freesize) break;
 8004e4a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004e4c:	89ba      	ldrh	r2, [r7, #12]
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fc3a 	bl	80046cc <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e64:	2120      	movs	r1, #32
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fa8c 	bl	8004384 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004e6c:	bf00      	nop
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	3301      	adds	r3, #1
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fa36 	bl	80042ec <WIZCHIP_READ>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f3      	bne.n	8004e6e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fa2a 	bl	80042ec <WIZCHIP_READ>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	3301      	adds	r3, #1
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004eb6:	2110      	movs	r1, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fa63 	bl	8004384 <WIZCHIP_WRITE>
         break;
 8004ebe:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004ec0:	89bb      	ldrh	r3, [r7, #12]
 8004ec2:	e010      	b.n	8004ee6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0db      	beq.n	8004e86 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004eda:	2108      	movs	r1, #8
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fa51 	bl	8004384 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004ee2:	f06f 030c 	mvn.w	r3, #12
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200000b4 	.word	0x200000b4

08004ef4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
 8004f02:	4613      	mov	r3, r2
 8004f04:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d902      	bls.n	8004f16 <recvfrom+0x22>
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f14:	e1d1      	b.n	80052ba <recvfrom+0x3c6>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff f9e4 	bl	80042ec <WIZCHIP_READ>
 8004f24:	4603      	mov	r3, r0
 8004f26:	777b      	strb	r3, [r7, #29]
 8004f28:	7f7b      	ldrb	r3, [r7, #29]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b02      	subs	r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d902      	bls.n	8004f3a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004f34:	f06f 0304 	mvn.w	r3, #4
 8004f38:	e1bf      	b.n	80052ba <recvfrom+0x3c6>
         break;
 8004f3a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004f3c:	89bb      	ldrh	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <recvfrom+0x54>
 8004f42:	f06f 030d 	mvn.w	r3, #13
 8004f46:	e1b8      	b.n	80052ba <recvfrom+0x3c6>
   if(sock_remained_size[sn] == 0)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	4ab1      	ldr	r2, [pc, #708]	; (8005210 <recvfrom+0x31c>)
 8004f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d128      	bne.n	8004fa6 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fb6d 	bl	8004636 <getSn_RX_RSR>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	3301      	adds	r3, #1
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f9bd 	bl	80042ec <WIZCHIP_READ>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <recvfrom+0x8a>
 8004f78:	f06f 0303 	mvn.w	r3, #3
 8004f7c:	e19d      	b.n	80052ba <recvfrom+0x3c6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8004f7e:	4ba5      	ldr	r3, [pc, #660]	; (8005214 <recvfrom+0x320>)
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	fa42 f303 	asr.w	r3, r2, r3
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <recvfrom+0xa8>
 8004f92:	8bfb      	ldrh	r3, [r7, #30]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <recvfrom+0xa8>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e18e      	b.n	80052ba <recvfrom+0x3c6>
         if(pack_len != 0) break;
 8004f9c:	8bfb      	ldrh	r3, [r7, #30]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d100      	bne.n	8004fa4 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8004fa2:	e7d7      	b.n	8004f54 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004fa4:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004fa6:	7f7b      	ldrb	r3, [r7, #29]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	f000 80d9 	beq.w	8005164 <recvfrom+0x270>
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d073      	beq.n	800509e <recvfrom+0x1aa>
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	f040 813c 	bne.w	8005234 <recvfrom+0x340>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	4a94      	ldr	r2, [pc, #592]	; (8005210 <recvfrom+0x31c>)
 8004fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d152      	bne.n	800506e <recvfrom+0x17a>
	      {
   			wiz_recv_data(sn, head, 8);
 8004fc8:	f107 0114 	add.w	r1, r7, #20
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fbd7 	bl	8004784 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	3301      	adds	r3, #1
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff f9cd 	bl	8004384 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004fea:	bf00      	nop
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff f977 	bl	80042ec <WIZCHIP_READ>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f3      	bne.n	8004fec <recvfrom+0xf8>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8005004:	7d3a      	ldrb	r2, [r7, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3301      	adds	r3, #1
 800500e:	7d7a      	ldrb	r2, [r7, #21]
 8005010:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3302      	adds	r3, #2
 8005016:	7dba      	ldrb	r2, [r7, #22]
 8005018:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3303      	adds	r3, #3
 800501e:	7dfa      	ldrb	r2, [r7, #23]
 8005020:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8005022:	7e3b      	ldrb	r3, [r7, #24]
 8005024:	b29a      	uxth	r2, r3
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	b29a      	uxth	r2, r3
 8005032:	7e7b      	ldrb	r3, [r7, #25]
 8005034:	b29b      	uxth	r3, r3
 8005036:	4413      	add	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800503e:	7eba      	ldrb	r2, [r7, #26]
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	b291      	uxth	r1, r2
 8005044:	4a72      	ldr	r2, [pc, #456]	; (8005210 <recvfrom+0x31c>)
 8005046:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	4a70      	ldr	r2, [pc, #448]	; (8005210 <recvfrom+0x31c>)
 800504e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	b299      	uxth	r1, r3
 8005056:	7efb      	ldrb	r3, [r7, #27]
 8005058:	b29a      	uxth	r2, r3
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	440a      	add	r2, r1
 800505e:	b291      	uxth	r1, r2
 8005060:	4a6b      	ldr	r2, [pc, #428]	; (8005210 <recvfrom+0x31c>)
 8005062:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	4a6b      	ldr	r2, [pc, #428]	; (8005218 <recvfrom+0x324>)
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	4a67      	ldr	r2, [pc, #412]	; (8005210 <recvfrom+0x31c>)
 8005072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005076:	89ba      	ldrh	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d202      	bcs.n	8005082 <recvfrom+0x18e>
 800507c:	89bb      	ldrh	r3, [r7, #12]
 800507e:	83fb      	strh	r3, [r7, #30]
 8005080:	e004      	b.n	800508c <recvfrom+0x198>
			else pack_len = sock_remained_size[sn];
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	4a62      	ldr	r2, [pc, #392]	; (8005210 <recvfrom+0x31c>)
 8005086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800508a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800508c:	8bfb      	ldrh	r3, [r7, #30]
 800508e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005090:	8bfa      	ldrh	r2, [r7, #30]
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fb74 	bl	8004784 <wiz_recv_data>
			break;
 800509c:	e0d6      	b.n	800524c <recvfrom+0x358>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	4a5b      	ldr	r2, [pc, #364]	; (8005210 <recvfrom+0x31c>)
 80050a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d146      	bne.n	8005138 <recvfrom+0x244>
	      {
   			wiz_recv_data(sn, head, 2);
 80050aa:	f107 0114 	add.w	r1, r7, #20
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2202      	movs	r2, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fb66 	bl	8004784 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	3301      	adds	r3, #1
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff f95c 	bl	8004384 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80050cc:	bf00      	nop
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3301      	adds	r3, #1
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff f906 	bl	80042ec <WIZCHIP_READ>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f3      	bne.n	80050ce <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80050e6:	7d3a      	ldrb	r2, [r7, #20]
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	b291      	uxth	r1, r2
 80050ec:	4a48      	ldr	r2, [pc, #288]	; (8005210 <recvfrom+0x31c>)
 80050ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	4a46      	ldr	r2, [pc, #280]	; (8005210 <recvfrom+0x31c>)
 80050f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	7d7b      	ldrb	r3, [r7, #21]
 8005100:	b29b      	uxth	r3, r3
 8005102:	4413      	add	r3, r2
 8005104:	b29a      	uxth	r2, r3
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	3a02      	subs	r2, #2
 800510a:	b291      	uxth	r1, r2
 800510c:	4a40      	ldr	r2, [pc, #256]	; (8005210 <recvfrom+0x31c>)
 800510e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	4a3e      	ldr	r2, [pc, #248]	; (8005210 <recvfrom+0x31c>)
 8005116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800511a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800511e:	4293      	cmp	r3, r2
 8005120:	d906      	bls.n	8005130 <recvfrom+0x23c>
   			{
   			   close(sn);
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fce7 	bl	8004af8 <close>
   			   return SOCKFATAL_PACKLEN;
 800512a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800512e:	e0c4      	b.n	80052ba <recvfrom+0x3c6>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4a39      	ldr	r2, [pc, #228]	; (8005218 <recvfrom+0x324>)
 8005134:	2180      	movs	r1, #128	; 0x80
 8005136:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	4a35      	ldr	r2, [pc, #212]	; (8005210 <recvfrom+0x31c>)
 800513c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005140:	89ba      	ldrh	r2, [r7, #12]
 8005142:	429a      	cmp	r2, r3
 8005144:	d202      	bcs.n	800514c <recvfrom+0x258>
 8005146:	89bb      	ldrh	r3, [r7, #12]
 8005148:	83fb      	strh	r3, [r7, #30]
 800514a:	e004      	b.n	8005156 <recvfrom+0x262>
			else pack_len = sock_remained_size[sn];
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	4a30      	ldr	r2, [pc, #192]	; (8005210 <recvfrom+0x31c>)
 8005150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005154:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8005156:	8bfa      	ldrh	r2, [r7, #30]
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fb11 	bl	8004784 <wiz_recv_data>
		   break;
 8005162:	e073      	b.n	800524c <recvfrom+0x358>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <recvfrom+0x31c>)
 8005168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d144      	bne.n	80051fa <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 8005170:	f107 0114 	add.w	r1, r7, #20
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2206      	movs	r2, #6
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fb03 	bl	8004784 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	3301      	adds	r3, #1
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800518a:	2140      	movs	r1, #64	; 0x40
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff f8f9 	bl	8004384 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005192:	bf00      	nop
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	3301      	adds	r3, #1
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff f8a3 	bl	80042ec <WIZCHIP_READ>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f3      	bne.n	8005194 <recvfrom+0x2a0>
   			addr[0] = head[0];
 80051ac:	7d3a      	ldrb	r2, [r7, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3301      	adds	r3, #1
 80051b6:	7d7a      	ldrb	r2, [r7, #21]
 80051b8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3302      	adds	r3, #2
 80051be:	7dba      	ldrb	r2, [r7, #22]
 80051c0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3303      	adds	r3, #3
 80051c6:	7dfa      	ldrb	r2, [r7, #23]
 80051c8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80051ca:	7e3a      	ldrb	r2, [r7, #24]
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	b291      	uxth	r1, r2
 80051d0:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <recvfrom+0x31c>)
 80051d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <recvfrom+0x31c>)
 80051da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	b299      	uxth	r1, r3
 80051e2:	7e7b      	ldrb	r3, [r7, #25]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	440a      	add	r2, r1
 80051ea:	b291      	uxth	r1, r2
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <recvfrom+0x31c>)
 80051ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	4a08      	ldr	r2, [pc, #32]	; (8005218 <recvfrom+0x324>)
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <recvfrom+0x31c>)
 80051fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005202:	89ba      	ldrh	r2, [r7, #12]
 8005204:	429a      	cmp	r2, r3
 8005206:	d209      	bcs.n	800521c <recvfrom+0x328>
 8005208:	89bb      	ldrh	r3, [r7, #12]
 800520a:	83fb      	strh	r3, [r7, #30]
 800520c:	e00b      	b.n	8005226 <recvfrom+0x332>
 800520e:	bf00      	nop
 8005210:	200000b8 	.word	0x200000b8
 8005214:	200000b4 	.word	0x200000b4
 8005218:	200000c8 	.word	0x200000c8
			else pack_len = sock_remained_size[sn];
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	4a29      	ldr	r2, [pc, #164]	; (80052c4 <recvfrom+0x3d0>)
 8005220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005224:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005226:	8bfa      	ldrh	r2, [r7, #30]
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff faa9 	bl	8004784 <wiz_recv_data>
			break;
 8005232:	e00b      	b.n	800524c <recvfrom+0x358>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005234:	8bfa      	ldrh	r2, [r7, #30]
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fafe 	bl	800483c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	4920      	ldr	r1, [pc, #128]	; (80052c4 <recvfrom+0x3d0>)
 8005244:	8bfa      	ldrh	r2, [r7, #30]
 8005246:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800524a:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	3301      	adds	r3, #1
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff f892 	bl	8004384 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8005260:	bf00      	nop
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	3301      	adds	r3, #1
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff f83c 	bl	80042ec <WIZCHIP_READ>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f3      	bne.n	8005262 <recvfrom+0x36e>
	sock_remained_size[sn] -= pack_len;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <recvfrom+0x3d0>)
 800527e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	8bfa      	ldrh	r2, [r7, #30]
 8005286:	1a8a      	subs	r2, r1, r2
 8005288:	b291      	uxth	r1, r2
 800528a:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <recvfrom+0x3d0>)
 800528c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <recvfrom+0x3d0>)
 8005294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <recvfrom+0x3bc>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <recvfrom+0x3d4>)
 80052a0:	5cd2      	ldrb	r2, [r2, r3]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	b2d1      	uxtb	r1, r2
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <recvfrom+0x3d4>)
 80052ac:	54d1      	strb	r1, [r2, r3]
 80052ae:	e003      	b.n	80052b8 <recvfrom+0x3c4>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	4a05      	ldr	r2, [pc, #20]	; (80052c8 <recvfrom+0x3d4>)
 80052b4:	2100      	movs	r1, #0
 80052b6:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80052b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200000b8 	.word	0x200000b8
 80052c8:	200000c8 	.word	0x200000c8

080052cc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
 8005340:	2300      	movs	r3, #0
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	460b      	mov	r3, r1
 800536c:	807b      	strh	r3, [r7, #2]
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	807b      	strh	r3, [r7, #2]
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <reg_wizchip_cs_cbfunc+0x16>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80053ac:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <reg_wizchip_cs_cbfunc+0x40>)
 80053ae:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <reg_wizchip_cs_cbfunc+0x44>)
 80053b4:	615a      	str	r2, [r3, #20]
 80053b6:	e005      	b.n	80053c4 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80053b8:	4a05      	ldr	r2, [pc, #20]	; (80053d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6153      	str	r3, [r2, #20]
   }
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000004 	.word	0x20000004
 80053d4:	080052e9 	.word	0x080052e9
 80053d8:	080052f7 	.word	0x080052f7

080053dc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80053e6:	bf00      	nop
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <reg_wizchip_spi_cbfunc+0x4c>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f9      	beq.n	80053e8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <reg_wizchip_spi_cbfunc+0x24>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <reg_wizchip_spi_cbfunc+0x4c>)
 8005402:	4a0a      	ldr	r2, [pc, #40]	; (800542c <reg_wizchip_spi_cbfunc+0x50>)
 8005404:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <reg_wizchip_spi_cbfunc+0x4c>)
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <reg_wizchip_spi_cbfunc+0x54>)
 800540a:	61da      	str	r2, [r3, #28]
 800540c:	e005      	b.n	800541a <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800540e:	4a06      	ldr	r2, [pc, #24]	; (8005428 <reg_wizchip_spi_cbfunc+0x4c>)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <reg_wizchip_spi_cbfunc+0x4c>)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	61d3      	str	r3, [r2, #28]
   }
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000004 	.word	0x20000004
 800542c:	0800533d 	.word	0x0800533d
 8005430:	0800534d 	.word	0x0800534d

08005434 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800543e:	bf00      	nop
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f9      	beq.n	8005440 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <reg_wizchip_spiburst_cbfunc+0x24>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <reg_wizchip_spiburst_cbfunc+0x50>)
 800545c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005460:	4a09      	ldr	r2, [pc, #36]	; (8005488 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005462:	625a      	str	r2, [r3, #36]	; 0x24
 8005464:	e005      	b.n	8005472 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005466:	4a06      	ldr	r2, [pc, #24]	; (8005480 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000004 	.word	0x20000004
 8005484:	08005363 	.word	0x08005363
 8005488:	0800537b 	.word	0x0800537b

0800548c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	2206      	movs	r2, #6
 8005496:	4619      	mov	r1, r3
 8005498:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800549c:	f7fe ffc0 	bl	8004420 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	2204      	movs	r2, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80054ac:	f7fe ffb8 	bl	8004420 <WIZCHIP_READ_BUF>
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	2204      	movs	r2, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80054bc:	f7fe ffb0 	bl	8004420 <WIZCHIP_READ_BUF>
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	2204      	movs	r2, #4
 80054c6:	4619      	mov	r1, r3
 80054c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80054cc:	f7fe ffa8 	bl	8004420 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	2000      	movs	r0, #0
 80054d4:	f7fe ff56 	bl	8004384 <WIZCHIP_WRITE>
   getMR(); // for delay
 80054d8:	2000      	movs	r0, #0
 80054da:	f7fe ff07 	bl	80042ec <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	2206      	movs	r2, #6
 80054e2:	4619      	mov	r1, r3
 80054e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80054e8:	f7fe fffa 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80054ec:	f107 0314 	add.w	r3, r7, #20
 80054f0:	2204      	movs	r2, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80054f8:	f7fe fff2 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80054fc:	f107 0310 	add.w	r3, r7, #16
 8005500:	2204      	movs	r2, #4
 8005502:	4619      	mov	r1, r3
 8005504:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005508:	f7fe ffea 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800550c:	f107 030c 	add.w	r3, r7, #12
 8005510:	2204      	movs	r2, #4
 8005512:	4619      	mov	r1, r3
 8005514:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005518:	f7fe ffe2 	bl	80044e0 <WIZCHIP_WRITE_BUF>
}
 800551c:	bf00      	nop
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005532:	f7ff ffab 	bl	800548c <wizchip_sw_reset>
   if(txsize)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d03b      	beq.n	80055b4 <wizchip_init+0x90>
   {
      tmp = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	e015      	b.n	8005572 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8005546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	4413      	add	r3, r2
 8005554:	b2db      	uxtb	r3, r3
 8005556:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8005558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800555c:	2b10      	cmp	r3, #16
 800555e:	dd02      	ble.n	8005566 <wizchip_init+0x42>
 8005560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005564:	e066      	b.n	8005634 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	3301      	adds	r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005576:	2b07      	cmp	r3, #7
 8005578:	dde5      	ble.n	8005546 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
 800557e:	e015      	b.n	80055ac <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8005580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	3301      	adds	r3, #1
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800558e:	4618      	mov	r0, r3
 8005590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	f7fe fef2 	bl	8004384 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80055a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	3301      	adds	r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	73fb      	strb	r3, [r7, #15]
 80055ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b0:	2b07      	cmp	r3, #7
 80055b2:	dde5      	ble.n	8005580 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03b      	beq.n	8005632 <wizchip_init+0x10e>
   {
      tmp = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e015      	b.n	80055f0 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 80055c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	4413      	add	r3, r2
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	4413      	add	r3, r2
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80055d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055da:	2b10      	cmp	r3, #16
 80055dc:	dd02      	ble.n	80055e4 <wizchip_init+0xc0>
 80055de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e2:	e027      	b.n	8005634 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80055e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f4:	2b07      	cmp	r3, #7
 80055f6:	dde5      	ble.n	80055c4 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	e015      	b.n	800562a <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80055fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	3301      	adds	r3, #1
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800560c:	4618      	mov	r0, r3
 800560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4413      	add	r3, r2
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	f7fe feb3 	bl	8004384 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800561e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	3301      	adds	r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	2b07      	cmp	r3, #7
 8005630:	dde5      	ble.n	80055fe <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2206      	movs	r2, #6
 8005648:	4619      	mov	r1, r3
 800564a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800564e:	f7fe ff47 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	330e      	adds	r3, #14
 8005656:	2204      	movs	r2, #4
 8005658:	4619      	mov	r1, r3
 800565a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800565e:	f7fe ff3f 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	330a      	adds	r3, #10
 8005666:	2204      	movs	r2, #4
 8005668:	4619      	mov	r1, r3
 800566a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800566e:	f7fe ff37 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3306      	adds	r3, #6
 8005676:	2204      	movs	r2, #4
 8005678:	4619      	mov	r1, r3
 800567a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800567e:	f7fe ff2f 	bl	80044e0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	7c9a      	ldrb	r2, [r3, #18]
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <wizchip_setnetinfo+0x78>)
 8005688:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	7cda      	ldrb	r2, [r3, #19]
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <wizchip_setnetinfo+0x78>)
 8005690:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7d1a      	ldrb	r2, [r3, #20]
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <wizchip_setnetinfo+0x78>)
 8005698:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	7d5a      	ldrb	r2, [r3, #21]
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <wizchip_setnetinfo+0x78>)
 80056a0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7d9a      	ldrb	r2, [r3, #22]
 80056a6:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <wizchip_setnetinfo+0x7c>)
 80056a8:	701a      	strb	r2, [r3, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200000d0 	.word	0x200000d0
 80056b8:	200000d4 	.word	0x200000d4

080056bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2206      	movs	r2, #6
 80056c8:	4619      	mov	r1, r3
 80056ca:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80056ce:	f7fe fea7 	bl	8004420 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	330e      	adds	r3, #14
 80056d6:	2204      	movs	r2, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056de:	f7fe fe9f 	bl	8004420 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	330a      	adds	r3, #10
 80056e6:	2204      	movs	r2, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80056ee:	f7fe fe97 	bl	8004420 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3306      	adds	r3, #6
 80056f6:	2204      	movs	r2, #4
 80056f8:	4619      	mov	r1, r3
 80056fa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80056fe:	f7fe fe8f 	bl	8004420 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <wizchip_getnetinfo+0x78>)
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <wizchip_getnetinfo+0x78>)
 800570c:	785a      	ldrb	r2, [r3, #1]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005712:	4b08      	ldr	r3, [pc, #32]	; (8005734 <wizchip_getnetinfo+0x78>)
 8005714:	789a      	ldrb	r2, [r3, #2]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <wizchip_getnetinfo+0x78>)
 800571c:	78da      	ldrb	r2, [r3, #3]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <wizchip_getnetinfo+0x7c>)
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	759a      	strb	r2, [r3, #22]
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200000d0 	.word	0x200000d0
 8005738:	200000d4 	.word	0x200000d4

0800573c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800574a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574e:	2b84      	cmp	r3, #132	; 0x84
 8005750:	d005      	beq.n	800575e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	3303      	adds	r3, #3
 800575c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005770:	f000 fe7c 	bl	800646c <vTaskStartScheduler>
  
  return osOK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	bd80      	pop	{r7, pc}

0800577a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800577a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577c:	b089      	sub	sp, #36	; 0x24
 800577e:	af04      	add	r7, sp, #16
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d020      	beq.n	80057ce <osThreadCreate+0x54>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01c      	beq.n	80057ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685c      	ldr	r4, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681d      	ldr	r5, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691e      	ldr	r6, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ffc8 	bl	800573c <makeFreeRtosPriority>
 80057ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057b6:	9202      	str	r2, [sp, #8]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	9100      	str	r1, [sp, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4632      	mov	r2, r6
 80057c0:	4629      	mov	r1, r5
 80057c2:	4620      	mov	r0, r4
 80057c4:	f000 fc98 	bl	80060f8 <xTaskCreateStatic>
 80057c8:	4603      	mov	r3, r0
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e01c      	b.n	8005808 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685c      	ldr	r4, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057da:	b29e      	uxth	r6, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff ffaa 	bl	800573c <makeFreeRtosPriority>
 80057e8:	4602      	mov	r2, r0
 80057ea:	f107 030c 	add.w	r3, r7, #12
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	4632      	mov	r2, r6
 80057f6:	4629      	mov	r1, r5
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 fcd6 	bl	80061aa <xTaskCreate>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	e000      	b.n	800580a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005812 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <osDelay+0x16>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	e000      	b.n	800582a <osDelay+0x18>
 8005828:	2301      	movs	r3, #1
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fdea 	bl	8006404 <vTaskDelay>
  
  return osOK;
 8005830:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f103 0208 	add.w	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005852:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f103 0208 	add.w	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 0208 	add.w	r2, r3, #8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f2:	d103      	bne.n	80058fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e00c      	b.n	8005916 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3308      	adds	r3, #8
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e002      	b.n	800590a <vListInsert+0x2e>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d2f6      	bcs.n	8005904 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6892      	ldr	r2, [r2, #8]
 8005964:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6852      	ldr	r2, [r2, #4]
 800596e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d103      	bne.n	8005982 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	1e5a      	subs	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	e7fe      	b.n	80059ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80059cc:	f001 fb7e 	bl	80070cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fc:	3b01      	subs	r3, #1
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	22ff      	movs	r2, #255	; 0xff
 8005a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d114      	bne.n	8005a4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01a      	beq.n	8005a60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ff5e 	bl	80068f0 <xTaskRemoveFromEventList>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d012      	beq.n	8005a60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <xQueueGenericReset+0xcc>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	e009      	b.n	8005a60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3310      	adds	r3, #16
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fef2 	bl	800583a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3324      	adds	r3, #36	; 0x24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff feed 	bl	800583a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a60:	f001 fb62 	bl	8007128 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a64:	2301      	movs	r3, #1
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <xQueueGenericCreate+0x28>
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e7fe      	b.n	8005a9a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e004      	b.n	8005ab2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3348      	adds	r3, #72	; 0x48
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 fbe4 	bl	8007284 <pvPortMalloc>
 8005abc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00f      	beq.n	8005ae4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	3348      	adds	r3, #72	; 0x48
 8005ac8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ad2:	79fa      	ldrb	r2, [r7, #7]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f805 	bl	8005aee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	e002      	b.n	8005b10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	69b8      	ldr	r0, [r7, #24]
 8005b20:	f7ff ff40 	bl	80059a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08e      	sub	sp, #56	; 0x38
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <xQueueGenericSend+0x30>
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	e7fe      	b.n	8005b5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <xQueueGenericSend+0x3e>
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <xQueueGenericSend+0x42>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <xQueueGenericSend+0x44>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <xQueueGenericSend+0x5c>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
 8005b86:	e7fe      	b.n	8005b86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d103      	bne.n	8005b96 <xQueueGenericSend+0x6a>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <xQueueGenericSend+0x6e>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueGenericSend+0x70>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <xQueueGenericSend+0x88>
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb4:	f001 f858 	bl	8006c68 <xTaskGetSchedulerState>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <xQueueGenericSend+0x98>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <xQueueGenericSend+0x9c>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <xQueueGenericSend+0x9e>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <xQueueGenericSend+0xb6>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be2:	f001 fa73 	bl	80070cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xQueueGenericSend+0xcc>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d129      	bne.n	8005c4c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfe:	f000 f96b 	bl	8005ed8 <prvCopyDataToQueue>
 8005c02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d010      	beq.n	8005c2e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	3324      	adds	r3, #36	; 0x24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fe6d 	bl	80068f0 <xTaskRemoveFromEventList>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c1c:	4b3f      	ldr	r3, [pc, #252]	; (8005d1c <xQueueGenericSend+0x1f0>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	e00a      	b.n	8005c44 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c34:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <xQueueGenericSend+0x1f0>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c44:	f001 fa70 	bl	8007128 <vPortExitCritical>
				return pdPASS;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e063      	b.n	8005d14 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c52:	f001 fa69 	bl	8007128 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e05c      	b.n	8005d14 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c60:	f107 0314 	add.w	r3, r7, #20
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fea5 	bl	80069b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c6e:	f001 fa5b 	bl	8007128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c72:	f000 fc59 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c76:	f001 fa29 	bl	80070cc <vPortEnterCritical>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c86:	d103      	bne.n	8005c90 <xQueueGenericSend+0x164>
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c96:	b25b      	sxtb	r3, r3
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c9c:	d103      	bne.n	8005ca6 <xQueueGenericSend+0x17a>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca6:	f001 fa3f 	bl	8007128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005caa:	1d3a      	adds	r2, r7, #4
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fe94 	bl	80069e0 <xTaskCheckForTimeOut>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d124      	bne.n	8005d08 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cc0:	f000 fa02 	bl	80060c8 <prvIsQueueFull>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	3310      	adds	r3, #16
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fde8 	bl	80068a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cda:	f000 f98d 	bl	8005ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cde:	f000 fc31 	bl	8006544 <xTaskResumeAll>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f47f af7c 	bne.w	8005be2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <xQueueGenericSend+0x1f0>)
 8005cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	e772      	b.n	8005be2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfe:	f000 f97b 	bl	8005ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d02:	f000 fc1f 	bl	8006544 <xTaskResumeAll>
 8005d06:	e76c      	b.n	8005be2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d0a:	f000 f975 	bl	8005ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d0e:	f000 fc19 	bl	8006544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d12:	2300      	movs	r3, #0
		}
	}
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3738      	adds	r7, #56	; 0x38
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	; 0x30
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <xQueueReceive+0x2e>
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	623b      	str	r3, [r7, #32]
 8005d4c:	e7fe      	b.n	8005d4c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <xQueueReceive+0x3c>
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueReceive+0x40>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueReceive+0x42>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <xQueueReceive+0x5a>
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e7fe      	b.n	8005d78 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d7a:	f000 ff75 	bl	8006c68 <xTaskGetSchedulerState>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <xQueueReceive+0x6a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <xQueueReceive+0x6e>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueReceive+0x70>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <xQueueReceive+0x88>
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	e7fe      	b.n	8005da6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005da8:	f001 f990 	bl	80070cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01f      	beq.n	8005df8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbc:	f000 f8f6 	bl	8005fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	1e5a      	subs	r2, r3, #1
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fd8b 	bl	80068f0 <xTaskRemoveFromEventList>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005de0:	4b3c      	ldr	r3, [pc, #240]	; (8005ed4 <xQueueReceive+0x1b4>)
 8005de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005df0:	f001 f99a 	bl	8007128 <vPortExitCritical>
				return pdPASS;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e069      	b.n	8005ecc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dfe:	f001 f993 	bl	8007128 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e062      	b.n	8005ecc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e0c:	f107 0310 	add.w	r3, r7, #16
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fdcf 	bl	80069b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e1a:	f001 f985 	bl	8007128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e1e:	f000 fb83 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e22:	f001 f953 	bl	80070cc <vPortEnterCritical>
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e2c:	b25b      	sxtb	r3, r3
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e32:	d103      	bne.n	8005e3c <xQueueReceive+0x11c>
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e48:	d103      	bne.n	8005e52 <xQueueReceive+0x132>
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e52:	f001 f969 	bl	8007128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e56:	1d3a      	adds	r2, r7, #4
 8005e58:	f107 0310 	add.w	r3, r7, #16
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fdbe 	bl	80069e0 <xTaskCheckForTimeOut>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d123      	bne.n	8005eb2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6c:	f000 f916 	bl	800609c <prvIsQueueEmpty>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fd12 	bl	80068a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e86:	f000 f8b7 	bl	8005ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e8a:	f000 fb5b 	bl	8006544 <xTaskResumeAll>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d189      	bne.n	8005da8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <xQueueReceive+0x1b4>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	e780      	b.n	8005da8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea8:	f000 f8a6 	bl	8005ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eac:	f000 fb4a 	bl	8006544 <xTaskResumeAll>
 8005eb0:	e77a      	b.n	8005da8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb4:	f000 f8a0 	bl	8005ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eb8:	f000 fb44 	bl	8006544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ebe:	f000 f8ed 	bl	800609c <prvIsQueueEmpty>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f43f af6f 	beq.w	8005da8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005eca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3730      	adds	r7, #48	; 0x30
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10d      	bne.n	8005f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d14d      	bne.n	8005f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fece 	bl	8006ca4 <xTaskPriorityDisinherit>
 8005f08:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	e043      	b.n	8005f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d119      	bne.n	8005f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6898      	ldr	r0, [r3, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	461a      	mov	r2, r3
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	f003 fb72 	bl	800960c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	441a      	add	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d32b      	bcc.n	8005f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	609a      	str	r2, [r3, #8]
 8005f4a:	e026      	b.n	8005f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68d8      	ldr	r0, [r3, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	461a      	mov	r2, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	f003 fb58 	bl	800960c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	425b      	negs	r3, r3
 8005f66:	441a      	add	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d207      	bcs.n	8005f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	425b      	negs	r3, r3
 8005f82:	441a      	add	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d105      	bne.n	8005f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fa2:	697b      	ldr	r3, [r7, #20]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d018      	beq.n	8005ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	441a      	add	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d303      	bcc.n	8005fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68d9      	ldr	r1, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6838      	ldr	r0, [r7, #0]
 8005fec:	f003 fb0e 	bl	800960c <memcpy>
	}
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006000:	f001 f864 	bl	80070cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800600a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800600c:	e011      	b.n	8006032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	2b00      	cmp	r3, #0
 8006014:	d012      	beq.n	800603c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3324      	adds	r3, #36	; 0x24
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fc68 	bl	80068f0 <xTaskRemoveFromEventList>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006026:	f000 fd3b 	bl	8006aa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	3b01      	subs	r3, #1
 800602e:	b2db      	uxtb	r3, r3
 8006030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dce9      	bgt.n	800600e <prvUnlockQueue+0x16>
 800603a:	e000      	b.n	800603e <prvUnlockQueue+0x46>
					break;
 800603c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006046:	f001 f86f 	bl	8007128 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800604a:	f001 f83f 	bl	80070cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006056:	e011      	b.n	800607c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3310      	adds	r3, #16
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fc43 	bl	80068f0 <xTaskRemoveFromEventList>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006070:	f000 fd16 	bl	8006aa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	3b01      	subs	r3, #1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800607c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006080:	2b00      	cmp	r3, #0
 8006082:	dce9      	bgt.n	8006058 <prvUnlockQueue+0x60>
 8006084:	e000      	b.n	8006088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006090:	f001 f84a 	bl	8007128 <vPortExitCritical>
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060a4:	f001 f812 	bl	80070cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060b0:	2301      	movs	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e001      	b.n	80060ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ba:	f001 f835 	bl	8007128 <vPortExitCritical>

	return xReturn;
 80060be:	68fb      	ldr	r3, [r7, #12]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d0:	f000 fffc 	bl	80070cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060dc:	429a      	cmp	r2, r3
 80060de:	d102      	bne.n	80060e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060e0:	2301      	movs	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e001      	b.n	80060ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ea:	f001 f81d 	bl	8007128 <vPortExitCritical>

	return xReturn;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	; 0x38
 80060fc:	af04      	add	r7, sp, #16
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <xTaskCreateStatic+0x28>
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	e7fe      	b.n	800611e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <xTaskCreateStatic+0x42>
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e7fe      	b.n	8006138 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800613a:	2354      	movs	r3, #84	; 0x54
 800613c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b54      	cmp	r3, #84	; 0x54
 8006142:	d009      	beq.n	8006158 <xTaskCreateStatic+0x60>
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	e7fe      	b.n	8006156 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01e      	beq.n	800619c <xTaskCreateStatic+0xa4>
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	2202      	movs	r2, #2
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006176:	2300      	movs	r3, #0
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	9302      	str	r3, [sp, #8]
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f850 	bl	8006234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006196:	f000 f8cb 	bl	8006330 <prvAddNewTaskToReadyList>
 800619a:	e001      	b.n	80061a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061a0:	697b      	ldr	r3, [r7, #20]
	}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3728      	adds	r7, #40	; 0x28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08c      	sub	sp, #48	; 0x30
 80061ae:	af04      	add	r7, sp, #16
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f860 	bl	8007284 <pvPortMalloc>
 80061c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061cc:	2054      	movs	r0, #84	; 0x54
 80061ce:	f001 f859 	bl	8007284 <pvPortMalloc>
 80061d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
 80061e0:	e005      	b.n	80061ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	f001 f910 	bl	8007408 <vPortFree>
 80061e8:	e001      	b.n	80061ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d017      	beq.n	8006224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	2300      	movs	r3, #0
 8006200:	9303      	str	r3, [sp, #12]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	9302      	str	r3, [sp, #8]
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f80e 	bl	8006234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006218:	69f8      	ldr	r0, [r7, #28]
 800621a:	f000 f889 	bl	8006330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800621e:	2301      	movs	r3, #1
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e002      	b.n	800622a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800622a:	69bb      	ldr	r3, [r7, #24]
	}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800624c:	3b01      	subs	r3, #1
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f023 0307 	bic.w	r3, r3, #7
 800625a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <prvInitialiseNewTask+0x46>
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e7fe      	b.n	8006278 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	e012      	b.n	80062a6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	7819      	ldrb	r1, [r3, #0]
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	3334      	adds	r3, #52	; 0x34
 8006290:	460a      	mov	r2, r1
 8006292:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d006      	beq.n	80062ae <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2b0f      	cmp	r3, #15
 80062aa:	d9e9      	bls.n	8006280 <prvInitialiseNewTask+0x4c>
 80062ac:	e000      	b.n	80062b0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80062ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	2b06      	cmp	r3, #6
 80062bc:	d901      	bls.n	80062c2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062be:	2306      	movs	r3, #6
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	2200      	movs	r2, #0
 80062d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	3304      	adds	r3, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff face 	bl	800587a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	3318      	adds	r3, #24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fac9 	bl	800587a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	f1c3 0207 	rsb	r2, r3, #7
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	69b8      	ldr	r0, [r7, #24]
 8006312:	f000 fdb1 	bl	8006e78 <pxPortInitialiseStack>
 8006316:	4602      	mov	r2, r0
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006326:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006328:	bf00      	nop
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006338:	f000 fec8 	bl	80070cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <prvAddNewTaskToReadyList+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a29      	ldr	r2, [pc, #164]	; (80063e8 <prvAddNewTaskToReadyList+0xb8>)
 8006344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006346:	4b29      	ldr	r3, [pc, #164]	; (80063ec <prvAddNewTaskToReadyList+0xbc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800634e:	4a27      	ldr	r2, [pc, #156]	; (80063ec <prvAddNewTaskToReadyList+0xbc>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006354:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <prvAddNewTaskToReadyList+0xb8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d110      	bne.n	800637e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800635c:	f000 fbc4 	bl	8006ae8 <prvInitialiseTaskLists>
 8006360:	e00d      	b.n	800637e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <prvAddNewTaskToReadyList+0xc0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800636a:	4b20      	ldr	r3, [pc, #128]	; (80063ec <prvAddNewTaskToReadyList+0xbc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	429a      	cmp	r2, r3
 8006376:	d802      	bhi.n	800637e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <prvAddNewTaskToReadyList+0xbc>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800637e:	4b1d      	ldr	r3, [pc, #116]	; (80063f4 <prvAddNewTaskToReadyList+0xc4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <prvAddNewTaskToReadyList+0xc4>)
 8006386:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	2201      	movs	r2, #1
 800638e:	409a      	lsls	r2, r3
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4313      	orrs	r3, r2
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4a15      	ldr	r2, [pc, #84]	; (80063fc <prvAddNewTaskToReadyList+0xcc>)
 80063a8:	441a      	add	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7ff fa6f 	bl	8005894 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063b6:	f000 feb7 	bl	8007128 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <prvAddNewTaskToReadyList+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <prvAddNewTaskToReadyList+0xbc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d207      	bcs.n	80063e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <prvAddNewTaskToReadyList+0xd0>)
 80063d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	200001d8 	.word	0x200001d8
 80063ec:	200000d8 	.word	0x200000d8
 80063f0:	200001e4 	.word	0x200001e4
 80063f4:	200001f4 	.word	0x200001f4
 80063f8:	200001e0 	.word	0x200001e0
 80063fc:	200000dc 	.word	0x200000dc
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006416:	4b13      	ldr	r3, [pc, #76]	; (8006464 <vTaskDelay+0x60>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <vTaskDelay+0x2e>
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	e7fe      	b.n	8006430 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006432:	f000 f879 	bl	8006528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006436:	2100      	movs	r1, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fcb7 	bl	8006dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800643e:	f000 f881 	bl	8006544 <xTaskResumeAll>
 8006442:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d107      	bne.n	800645a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <vTaskDelay+0x64>)
 800644c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000200 	.word	0x20000200
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800647a:	463a      	mov	r2, r7
 800647c:	1d39      	adds	r1, r7, #4
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4618      	mov	r0, r3
 8006484:	f001 fba2 	bl	8007bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	9202      	str	r2, [sp, #8]
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	2300      	movs	r3, #0
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	2300      	movs	r3, #0
 8006498:	460a      	mov	r2, r1
 800649a:	491d      	ldr	r1, [pc, #116]	; (8006510 <vTaskStartScheduler+0xa4>)
 800649c:	481d      	ldr	r0, [pc, #116]	; (8006514 <vTaskStartScheduler+0xa8>)
 800649e:	f7ff fe2b 	bl	80060f8 <xTaskCreateStatic>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <vTaskStartScheduler+0xac>)
 80064a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064a8:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <vTaskStartScheduler+0xac>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064b0:	2301      	movs	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e001      	b.n	80064ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d115      	bne.n	80064ec <vTaskStartScheduler+0x80>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <vTaskStartScheduler+0xb0>)
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <vTaskStartScheduler+0xb4>)
 80064dc:	2201      	movs	r2, #1
 80064de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <vTaskStartScheduler+0xb8>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064e6:	f000 fd53 	bl	8006f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064ea:	e00d      	b.n	8006508 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f2:	d109      	bne.n	8006508 <vTaskStartScheduler+0x9c>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e7fe      	b.n	8006506 <vTaskStartScheduler+0x9a>
}
 8006508:	bf00      	nop
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	08009fe0 	.word	0x08009fe0
 8006514:	08006ab9 	.word	0x08006ab9
 8006518:	200001fc 	.word	0x200001fc
 800651c:	200001f8 	.word	0x200001f8
 8006520:	200001e4 	.word	0x200001e4
 8006524:	200001dc 	.word	0x200001dc

08006528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <vTaskSuspendAll+0x18>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a03      	ldr	r2, [pc, #12]	; (8006540 <vTaskSuspendAll+0x18>)
 8006534:	6013      	str	r3, [r2, #0]
}
 8006536:	bf00      	nop
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20000200 	.word	0x20000200

08006544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <xTaskResumeAll+0x114>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <xTaskResumeAll+0x2a>
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	e7fe      	b.n	800656c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800656e:	f000 fdad 	bl	80070cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006572:	4b39      	ldr	r3, [pc, #228]	; (8006658 <xTaskResumeAll+0x114>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3b01      	subs	r3, #1
 8006578:	4a37      	ldr	r2, [pc, #220]	; (8006658 <xTaskResumeAll+0x114>)
 800657a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657c:	4b36      	ldr	r3, [pc, #216]	; (8006658 <xTaskResumeAll+0x114>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d161      	bne.n	8006648 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006584:	4b35      	ldr	r3, [pc, #212]	; (800665c <xTaskResumeAll+0x118>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d05d      	beq.n	8006648 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800658c:	e02e      	b.n	80065ec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800658e:	4b34      	ldr	r3, [pc, #208]	; (8006660 <xTaskResumeAll+0x11c>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3318      	adds	r3, #24
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff f9d7 	bl	800594e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff f9d2 	bl	800594e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	2201      	movs	r2, #1
 80065b0:	409a      	lsls	r2, r3
 80065b2:	4b2c      	ldr	r3, [pc, #176]	; (8006664 <xTaskResumeAll+0x120>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <xTaskResumeAll+0x120>)
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4a27      	ldr	r2, [pc, #156]	; (8006668 <xTaskResumeAll+0x124>)
 80065ca:	441a      	add	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7ff f95e 	bl	8005894 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4b23      	ldr	r3, [pc, #140]	; (800666c <xTaskResumeAll+0x128>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80065e6:	4b22      	ldr	r3, [pc, #136]	; (8006670 <xTaskResumeAll+0x12c>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ec:	4b1c      	ldr	r3, [pc, #112]	; (8006660 <xTaskResumeAll+0x11c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1cc      	bne.n	800658e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065fa:	f000 fb0f 	bl	8006c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <xTaskResumeAll+0x130>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d010      	beq.n	800662c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800660a:	f000 f837 	bl	800667c <xTaskIncrementTick>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006614:	4b16      	ldr	r3, [pc, #88]	; (8006670 <xTaskResumeAll+0x12c>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3b01      	subs	r3, #1
 800661e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f1      	bne.n	800660a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006626:	4b13      	ldr	r3, [pc, #76]	; (8006674 <xTaskResumeAll+0x130>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <xTaskResumeAll+0x12c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <xTaskResumeAll+0x134>)
 800663a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006648:	f000 fd6e 	bl	8007128 <vPortExitCritical>

	return xAlreadyYielded;
 800664c:	68bb      	ldr	r3, [r7, #8]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000200 	.word	0x20000200
 800665c:	200001d8 	.word	0x200001d8
 8006660:	20000198 	.word	0x20000198
 8006664:	200001e0 	.word	0x200001e0
 8006668:	200000dc 	.word	0x200000dc
 800666c:	200000d8 	.word	0x200000d8
 8006670:	200001ec 	.word	0x200001ec
 8006674:	200001e8 	.word	0x200001e8
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006686:	4b50      	ldr	r3, [pc, #320]	; (80067c8 <xTaskIncrementTick+0x14c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 808c 	bne.w	80067a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006690:	4b4e      	ldr	r3, [pc, #312]	; (80067cc <xTaskIncrementTick+0x150>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006698:	4a4c      	ldr	r2, [pc, #304]	; (80067cc <xTaskIncrementTick+0x150>)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11f      	bne.n	80066e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80066a4:	4b4a      	ldr	r3, [pc, #296]	; (80067d0 <xTaskIncrementTick+0x154>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <xTaskIncrementTick+0x46>
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	e7fe      	b.n	80066c0 <xTaskIncrementTick+0x44>
 80066c2:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <xTaskIncrementTick+0x154>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <xTaskIncrementTick+0x158>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a40      	ldr	r2, [pc, #256]	; (80067d0 <xTaskIncrementTick+0x154>)
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4a40      	ldr	r2, [pc, #256]	; (80067d4 <xTaskIncrementTick+0x158>)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <xTaskIncrementTick+0x15c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <xTaskIncrementTick+0x15c>)
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	f000 fa9c 	bl	8006c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066e4:	4b3d      	ldr	r3, [pc, #244]	; (80067dc <xTaskIncrementTick+0x160>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d34d      	bcc.n	800678a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ee:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <xTaskIncrementTick+0x154>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <xTaskIncrementTick+0x80>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <xTaskIncrementTick+0x82>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006702:	4b36      	ldr	r3, [pc, #216]	; (80067dc <xTaskIncrementTick+0x160>)
 8006704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006708:	601a      	str	r2, [r3, #0]
					break;
 800670a:	e03e      	b.n	800678a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800670c:	4b30      	ldr	r3, [pc, #192]	; (80067d0 <xTaskIncrementTick+0x154>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d203      	bcs.n	800672c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006724:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <xTaskIncrementTick+0x160>)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6013      	str	r3, [r2, #0]
						break;
 800672a:	e02e      	b.n	800678a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	3304      	adds	r3, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff f90c 	bl	800594e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3318      	adds	r3, #24
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff f903 	bl	800594e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	2201      	movs	r2, #1
 800674e:	409a      	lsls	r2, r3
 8006750:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <xTaskIncrementTick+0x164>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4313      	orrs	r3, r2
 8006756:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <xTaskIncrementTick+0x164>)
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <xTaskIncrementTick+0x168>)
 8006768:	441a      	add	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	3304      	adds	r3, #4
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7ff f88f 	bl	8005894 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <xTaskIncrementTick+0x16c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	429a      	cmp	r2, r3
 8006782:	d3b4      	bcc.n	80066ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006784:	2301      	movs	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006788:	e7b1      	b.n	80066ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <xTaskIncrementTick+0x16c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4914      	ldr	r1, [pc, #80]	; (80067e4 <xTaskIncrementTick+0x168>)
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d907      	bls.n	80067b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e004      	b.n	80067b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067a8:	4b10      	ldr	r3, [pc, #64]	; (80067ec <xTaskIncrementTick+0x170>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	4a0f      	ldr	r2, [pc, #60]	; (80067ec <xTaskIncrementTick+0x170>)
 80067b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067b2:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <xTaskIncrementTick+0x174>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067be:	697b      	ldr	r3, [r7, #20]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20000200 	.word	0x20000200
 80067cc:	200001dc 	.word	0x200001dc
 80067d0:	20000190 	.word	0x20000190
 80067d4:	20000194 	.word	0x20000194
 80067d8:	200001f0 	.word	0x200001f0
 80067dc:	200001f8 	.word	0x200001f8
 80067e0:	200001e0 	.word	0x200001e0
 80067e4:	200000dc 	.word	0x200000dc
 80067e8:	200000d8 	.word	0x200000d8
 80067ec:	200001e8 	.word	0x200001e8
 80067f0:	200001ec 	.word	0x200001ec

080067f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067fa:	4b26      	ldr	r3, [pc, #152]	; (8006894 <vTaskSwitchContext+0xa0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006802:	4b25      	ldr	r3, [pc, #148]	; (8006898 <vTaskSwitchContext+0xa4>)
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006808:	e03e      	b.n	8006888 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <vTaskSwitchContext+0xa4>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006810:	4b22      	ldr	r3, [pc, #136]	; (800689c <vTaskSwitchContext+0xa8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	fab3 f383 	clz	r3, r3
 800681c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	f1c3 031f 	rsb	r3, r3, #31
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	491e      	ldr	r1, [pc, #120]	; (80068a0 <vTaskSwitchContext+0xac>)
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <vTaskSwitchContext+0x5a>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	e7fe      	b.n	800684c <vTaskSwitchContext+0x58>
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4a11      	ldr	r2, [pc, #68]	; (80068a0 <vTaskSwitchContext+0xac>)
 800685a:	4413      	add	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	3308      	adds	r3, #8
 8006870:	429a      	cmp	r2, r3
 8006872:	d104      	bne.n	800687e <vTaskSwitchContext+0x8a>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <vTaskSwitchContext+0xb0>)
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000200 	.word	0x20000200
 8006898:	200001ec 	.word	0x200001ec
 800689c:	200001e0 	.word	0x200001e0
 80068a0:	200000dc 	.word	0x200000dc
 80068a4:	200000d8 	.word	0x200000d8

080068a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <vTaskPlaceOnEventList+0x24>
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e7fe      	b.n	80068ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <vTaskPlaceOnEventList+0x44>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3318      	adds	r3, #24
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff f801 	bl	80058dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068da:	2101      	movs	r1, #1
 80068dc:	6838      	ldr	r0, [r7, #0]
 80068de:	f000 fa65 	bl	8006dac <prvAddCurrentTaskToDelayedList>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200000d8 	.word	0x200000d8

080068f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <xTaskRemoveFromEventList+0x2a>
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e7fe      	b.n	8006918 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3318      	adds	r3, #24
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff f815 	bl	800594e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <xTaskRemoveFromEventList+0xac>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11c      	bne.n	8006966 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff f80c 	bl	800594e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	2201      	movs	r2, #1
 800693c:	409a      	lsls	r2, r3
 800693e:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <xTaskRemoveFromEventList+0xb0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4313      	orrs	r3, r2
 8006944:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <xTaskRemoveFromEventList+0xb0>)
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <xTaskRemoveFromEventList+0xb4>)
 8006956:	441a      	add	r2, r3
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f7fe ff98 	bl	8005894 <vListInsertEnd>
 8006964:	e005      	b.n	8006972 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3318      	adds	r3, #24
 800696a:	4619      	mov	r1, r3
 800696c:	480e      	ldr	r0, [pc, #56]	; (80069a8 <xTaskRemoveFromEventList+0xb8>)
 800696e:	f7fe ff91 	bl	8005894 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <xTaskRemoveFromEventList+0xbc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	429a      	cmp	r2, r3
 800697e:	d905      	bls.n	800698c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006984:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <xTaskRemoveFromEventList+0xc0>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e001      	b.n	8006990 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006990:	697b      	ldr	r3, [r7, #20]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000200 	.word	0x20000200
 80069a0:	200001e0 	.word	0x200001e0
 80069a4:	200000dc 	.word	0x200000dc
 80069a8:	20000198 	.word	0x20000198
 80069ac:	200000d8 	.word	0x200000d8
 80069b0:	200001ec 	.word	0x200001ec

080069b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <vTaskInternalSetTimeOutState+0x24>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <vTaskInternalSetTimeOutState+0x28>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	605a      	str	r2, [r3, #4]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	200001f0 	.word	0x200001f0
 80069dc:	200001dc 	.word	0x200001dc

080069e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <xTaskCheckForTimeOut+0x24>
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	e7fe      	b.n	8006a02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <xTaskCheckForTimeOut+0x3e>
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e7fe      	b.n	8006a1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006a1e:	f000 fb55 	bl	80070cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a22:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <xTaskCheckForTimeOut+0xb8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a3a:	d102      	bne.n	8006a42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e023      	b.n	8006a8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <xTaskCheckForTimeOut+0xbc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d007      	beq.n	8006a5e <xTaskCheckForTimeOut+0x7e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d302      	bcc.n	8006a5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	e015      	b.n	8006a8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d20b      	bcs.n	8006a80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff9d 	bl	80069b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e004      	b.n	8006a8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a8a:	f000 fb4d 	bl	8007128 <vPortExitCritical>

	return xReturn;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200001dc 	.word	0x200001dc
 8006a9c:	200001f0 	.word	0x200001f0

08006aa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006aa4:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <vTaskMissedYield+0x14>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	200001ec 	.word	0x200001ec

08006ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ac0:	f000 f852 	bl	8006b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <prvIdleTask+0x28>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d9f9      	bls.n	8006ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006acc:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <prvIdleTask+0x2c>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006adc:	e7f0      	b.n	8006ac0 <prvIdleTask+0x8>
 8006ade:	bf00      	nop
 8006ae0:	200000dc 	.word	0x200000dc
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aee:	2300      	movs	r3, #0
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	e00c      	b.n	8006b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4a12      	ldr	r2, [pc, #72]	; (8006b48 <prvInitialiseTaskLists+0x60>)
 8006b00:	4413      	add	r3, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fe99 	bl	800583a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	607b      	str	r3, [r7, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d9ef      	bls.n	8006af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b14:	480d      	ldr	r0, [pc, #52]	; (8006b4c <prvInitialiseTaskLists+0x64>)
 8006b16:	f7fe fe90 	bl	800583a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b1a:	480d      	ldr	r0, [pc, #52]	; (8006b50 <prvInitialiseTaskLists+0x68>)
 8006b1c:	f7fe fe8d 	bl	800583a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b20:	480c      	ldr	r0, [pc, #48]	; (8006b54 <prvInitialiseTaskLists+0x6c>)
 8006b22:	f7fe fe8a 	bl	800583a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b26:	480c      	ldr	r0, [pc, #48]	; (8006b58 <prvInitialiseTaskLists+0x70>)
 8006b28:	f7fe fe87 	bl	800583a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b2c:	480b      	ldr	r0, [pc, #44]	; (8006b5c <prvInitialiseTaskLists+0x74>)
 8006b2e:	f7fe fe84 	bl	800583a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <prvInitialiseTaskLists+0x78>)
 8006b34:	4a05      	ldr	r2, [pc, #20]	; (8006b4c <prvInitialiseTaskLists+0x64>)
 8006b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvInitialiseTaskLists+0x7c>)
 8006b3a:	4a05      	ldr	r2, [pc, #20]	; (8006b50 <prvInitialiseTaskLists+0x68>)
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	200000dc 	.word	0x200000dc
 8006b4c:	20000168 	.word	0x20000168
 8006b50:	2000017c 	.word	0x2000017c
 8006b54:	20000198 	.word	0x20000198
 8006b58:	200001ac 	.word	0x200001ac
 8006b5c:	200001c4 	.word	0x200001c4
 8006b60:	20000190 	.word	0x20000190
 8006b64:	20000194 	.word	0x20000194

08006b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b6e:	e019      	b.n	8006ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b70:	f000 faac 	bl	80070cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b74:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <prvCheckTasksWaitingTermination+0x4c>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fee4 	bl	800594e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <prvCheckTasksWaitingTermination+0x50>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <prvCheckTasksWaitingTermination+0x50>)
 8006b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <prvCheckTasksWaitingTermination+0x54>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <prvCheckTasksWaitingTermination+0x54>)
 8006b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b9a:	f000 fac5 	bl	8007128 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f80e 	bl	8006bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <prvCheckTasksWaitingTermination+0x54>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e1      	bne.n	8006b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	200001ac 	.word	0x200001ac
 8006bb8:	200001d8 	.word	0x200001d8
 8006bbc:	200001c0 	.word	0x200001c0

08006bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d108      	bne.n	8006be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fc16 	bl	8007408 <vPortFree>
				vPortFree( pxTCB );
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc13 	bl	8007408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006be2:	e017      	b.n	8006c14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d103      	bne.n	8006bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fc0a 	bl	8007408 <vPortFree>
	}
 8006bf4:	e00e      	b.n	8006c14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d009      	beq.n	8006c14 <prvDeleteTCB+0x54>
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e7fe      	b.n	8006c12 <prvDeleteTCB+0x52>
	}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <prvResetNextTaskUnblockTime+0x44>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <prvResetNextTaskUnblockTime+0x14>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <prvResetNextTaskUnblockTime+0x16>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <prvResetNextTaskUnblockTime+0x48>)
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c3e:	e008      	b.n	8006c52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <prvResetNextTaskUnblockTime+0x44>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <prvResetNextTaskUnblockTime+0x48>)
 8006c50:	6013      	str	r3, [r2, #0]
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000190 	.word	0x20000190
 8006c64:	200001f8 	.word	0x200001f8

08006c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <xTaskGetSchedulerState+0x34>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c76:	2301      	movs	r3, #1
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	e008      	b.n	8006c8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <xTaskGetSchedulerState+0x38>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c84:	2302      	movs	r3, #2
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	e001      	b.n	8006c8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c8e:	687b      	ldr	r3, [r7, #4]
	}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	200001e4 	.word	0x200001e4
 8006ca0:	20000200 	.word	0x20000200

08006ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d06c      	beq.n	8006d94 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cba:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <xTaskPriorityDisinherit+0xfc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d009      	beq.n	8006cd8 <xTaskPriorityDisinherit+0x34>
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e7fe      	b.n	8006cd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <xTaskPriorityDisinherit+0x50>
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	e7fe      	b.n	8006cf2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf8:	1e5a      	subs	r2, r3, #1
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d044      	beq.n	8006d94 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d140      	bne.n	8006d94 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fe19 	bl	800594e <uxListRemove>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d115      	bne.n	8006d4e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	491f      	ldr	r1, [pc, #124]	; (8006da4 <xTaskPriorityDisinherit+0x100>)
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xTaskPriorityDisinherit+0xaa>
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	43da      	mvns	r2, r3
 8006d44:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <xTaskPriorityDisinherit+0x104>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <xTaskPriorityDisinherit+0x104>)
 8006d4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	f1c3 0207 	rsb	r2, r3, #7
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	2201      	movs	r2, #1
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <xTaskPriorityDisinherit+0x104>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	4a0d      	ldr	r2, [pc, #52]	; (8006da8 <xTaskPriorityDisinherit+0x104>)
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4a08      	ldr	r2, [pc, #32]	; (8006da4 <xTaskPriorityDisinherit+0x100>)
 8006d82:	441a      	add	r2, r3
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	f7fe fd82 	bl	8005894 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d94:	697b      	ldr	r3, [r7, #20]
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200000d8 	.word	0x200000d8
 8006da4:	200000dc 	.word	0x200000dc
 8006da8:	200001e0 	.word	0x200001e0

08006dac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fdc3 	bl	800594e <uxListRemove>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10b      	bne.n	8006de6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006dce:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43da      	mvns	r2, r3
 8006ddc:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4013      	ands	r3, r2
 8006de2:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006de4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d10a      	bne.n	8006e04 <prvAddCurrentTaskToDelayedList+0x58>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006df4:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	481a      	ldr	r0, [pc, #104]	; (8006e68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006dfe:	f7fe fd49 	bl	8005894 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e02:	e026      	b.n	8006e52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4413      	add	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e0c:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d209      	bcs.n	8006e30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e1c:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7fe fd57 	bl	80058dc <vListInsert>
}
 8006e2e:	e010      	b.n	8006e52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f7fe fd4d 	bl	80058dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d202      	bcs.n	8006e52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e4c:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6013      	str	r3, [r2, #0]
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200001dc 	.word	0x200001dc
 8006e60:	200000d8 	.word	0x200000d8
 8006e64:	200001e0 	.word	0x200001e0
 8006e68:	200001c4 	.word	0x200001c4
 8006e6c:	20000194 	.word	0x20000194
 8006e70:	20000190 	.word	0x20000190
 8006e74:	200001f8 	.word	0x200001f8

08006e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3b04      	subs	r3, #4
 8006e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3b04      	subs	r3, #4
 8006e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ea8:	4a0c      	ldr	r2, [pc, #48]	; (8006edc <pxPortInitialiseStack+0x64>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b14      	subs	r3, #20
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f06f 0202 	mvn.w	r2, #2
 8006ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3b20      	subs	r3, #32
 8006ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	08006ee1 	.word	0x08006ee1

08006ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <prvTaskExitError+0x50>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef2:	d009      	beq.n	8006f08 <prvTaskExitError+0x28>
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e7fe      	b.n	8006f06 <prvTaskExitError+0x26>
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f1a:	bf00      	nop
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0fc      	beq.n	8006f1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	2000002c 	.word	0x2000002c
	...

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	200000d8 	.word	0x200000d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed08 	.word	0xe000ed08

08006f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f96:	4b44      	ldr	r3, [pc, #272]	; (80070a8 <xPortStartScheduler+0x118>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a44      	ldr	r2, [pc, #272]	; (80070ac <xPortStartScheduler+0x11c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d109      	bne.n	8006fb4 <xPortStartScheduler+0x24>
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	e7fe      	b.n	8006fb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fb4:	4b3c      	ldr	r3, [pc, #240]	; (80070a8 <xPortStartScheduler+0x118>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a3d      	ldr	r2, [pc, #244]	; (80070b0 <xPortStartScheduler+0x120>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d109      	bne.n	8006fd2 <xPortStartScheduler+0x42>
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e7fe      	b.n	8006fd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fd2:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <xPortStartScheduler+0x124>)
 8006fd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	22ff      	movs	r2, #255	; 0xff
 8006fe2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <xPortStartScheduler+0x128>)
 8006ff8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ffa:	4b30      	ldr	r3, [pc, #192]	; (80070bc <xPortStartScheduler+0x12c>)
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007000:	e009      	b.n	8007016 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <xPortStartScheduler+0x12c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3b01      	subs	r3, #1
 8007008:	4a2c      	ldr	r2, [pc, #176]	; (80070bc <xPortStartScheduler+0x12c>)
 800700a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d0ef      	beq.n	8007002 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <xPortStartScheduler+0x12c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1c3 0307 	rsb	r3, r3, #7
 800702a:	2b04      	cmp	r3, #4
 800702c:	d009      	beq.n	8007042 <xPortStartScheduler+0xb2>
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	e7fe      	b.n	8007040 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <xPortStartScheduler+0x12c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <xPortStartScheduler+0x12c>)
 800704a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <xPortStartScheduler+0x12c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007054:	4a19      	ldr	r2, [pc, #100]	; (80070bc <xPortStartScheduler+0x12c>)
 8007056:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007060:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <xPortStartScheduler+0x130>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <xPortStartScheduler+0x130>)
 8007066:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800706a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800706c:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <xPortStartScheduler+0x130>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <xPortStartScheduler+0x130>)
 8007072:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007076:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007078:	f000 f8d6 	bl	8007228 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <xPortStartScheduler+0x134>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007082:	f000 f8f5 	bl	8007270 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <xPortStartScheduler+0x138>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <xPortStartScheduler+0x138>)
 800708c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007090:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007092:	f7ff ff69 	bl	8006f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007096:	f7ff fbad 	bl	80067f4 <vTaskSwitchContext>
	prvTaskExitError();
 800709a:	f7ff ff21 	bl	8006ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	e000ed00 	.word	0xe000ed00
 80070ac:	410fc271 	.word	0x410fc271
 80070b0:	410fc270 	.word	0x410fc270
 80070b4:	e000e400 	.word	0xe000e400
 80070b8:	20000204 	.word	0x20000204
 80070bc:	20000208 	.word	0x20000208
 80070c0:	e000ed20 	.word	0xe000ed20
 80070c4:	2000002c 	.word	0x2000002c
 80070c8:	e000ef34 	.word	0xe000ef34

080070cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <vPortEnterCritical+0x54>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a0d      	ldr	r2, [pc, #52]	; (8007120 <vPortEnterCritical+0x54>)
 80070ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <vPortEnterCritical+0x54>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d10e      	bne.n	8007114 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortEnterCritical+0x58>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <vPortEnterCritical+0x48>
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	e7fe      	b.n	8007112 <vPortEnterCritical+0x46>
	}
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	2000002c 	.word	0x2000002c
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <vPortExitCritical+0x4c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <vPortExitCritical+0x22>
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	e7fe      	b.n	8007148 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <vPortExitCritical+0x4c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3b01      	subs	r3, #1
 8007150:	4a08      	ldr	r2, [pc, #32]	; (8007174 <vPortExitCritical+0x4c>)
 8007152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <vPortExitCritical+0x4c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <vPortExitCritical+0x3e>
 800715c:	2300      	movs	r3, #0
 800715e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000002c 	.word	0x2000002c
	...

08007180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f01e 0f10 	tst.w	lr, #16
 8007190:	bf08      	it	eq
 8007192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071a4:	f380 8811 	msr	BASEPRI, r0
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f7ff fb20 	bl	80067f4 <vTaskSwitchContext>
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f380 8811 	msr	BASEPRI, r0
 80071bc:	bc09      	pop	{r0, r3}
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c6:	f01e 0f10 	tst.w	lr, #16
 80071ca:	bf08      	it	eq
 80071cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071d0:	f380 8809 	msr	PSP, r0
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst>:
 80071e0:	200000d8 	.word	0x200000d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007200:	f7ff fa3c 	bl	800667c <xTaskIncrementTick>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <SysTick_Handler+0x3c>)
 800720c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800722c:	4b0b      	ldr	r3, [pc, #44]	; (800725c <vPortSetupTimerInterrupt+0x34>)
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <vPortSetupTimerInterrupt+0x38>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <vPortSetupTimerInterrupt+0x3c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <vPortSetupTimerInterrupt+0x40>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	099b      	lsrs	r3, r3, #6
 8007244:	4a09      	ldr	r2, [pc, #36]	; (800726c <vPortSetupTimerInterrupt+0x44>)
 8007246:	3b01      	subs	r3, #1
 8007248:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <vPortSetupTimerInterrupt+0x34>)
 800724c:	2207      	movs	r2, #7
 800724e:	601a      	str	r2, [r3, #0]
}
 8007250:	bf00      	nop
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000e010 	.word	0xe000e010
 8007260:	e000e018 	.word	0xe000e018
 8007264:	20000030 	.word	0x20000030
 8007268:	10624dd3 	.word	0x10624dd3
 800726c:	e000e014 	.word	0xe000e014

08007270 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007270:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007280 <vPortEnableVFP+0x10>
 8007274:	6801      	ldr	r1, [r0, #0]
 8007276:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800727a:	6001      	str	r1, [r0, #0]
 800727c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800727e:	bf00      	nop
 8007280:	e000ed88 	.word	0xe000ed88

08007284 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007290:	f7ff f94a 	bl	8006528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007294:	4b57      	ldr	r3, [pc, #348]	; (80073f4 <pvPortMalloc+0x170>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800729c:	f000 f90c 	bl	80074b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072a0:	4b55      	ldr	r3, [pc, #340]	; (80073f8 <pvPortMalloc+0x174>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 808c 	bne.w	80073c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80072b4:	2208      	movs	r2, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4413      	add	r3, r2
 80072ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d013      	beq.n	80072ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f023 0307 	bic.w	r3, r3, #7
 80072cc:	3308      	adds	r3, #8
 80072ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <pvPortMalloc+0x6a>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e7fe      	b.n	80072ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d068      	beq.n	80073c6 <pvPortMalloc+0x142>
 80072f4:	4b41      	ldr	r3, [pc, #260]	; (80073fc <pvPortMalloc+0x178>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d863      	bhi.n	80073c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072fe:	4b40      	ldr	r3, [pc, #256]	; (8007400 <pvPortMalloc+0x17c>)
 8007300:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007302:	4b3f      	ldr	r3, [pc, #252]	; (8007400 <pvPortMalloc+0x17c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007308:	e004      	b.n	8007314 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d903      	bls.n	8007326 <pvPortMalloc+0xa2>
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1f1      	bne.n	800730a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007326:	4b33      	ldr	r3, [pc, #204]	; (80073f4 <pvPortMalloc+0x170>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732c:	429a      	cmp	r2, r3
 800732e:	d04a      	beq.n	80073c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2208      	movs	r2, #8
 8007336:	4413      	add	r3, r2
 8007338:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	2308      	movs	r3, #8
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	429a      	cmp	r2, r3
 8007350:	d91e      	bls.n	8007390 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4413      	add	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <pvPortMalloc+0xf4>
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	e7fe      	b.n	8007376 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800738a:	69b8      	ldr	r0, [r7, #24]
 800738c:	f000 f8f6 	bl	800757c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007390:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <pvPortMalloc+0x178>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <pvPortMalloc+0x178>)
 800739c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800739e:	4b17      	ldr	r3, [pc, #92]	; (80073fc <pvPortMalloc+0x178>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b18      	ldr	r3, [pc, #96]	; (8007404 <pvPortMalloc+0x180>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d203      	bcs.n	80073b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073aa:	4b14      	ldr	r3, [pc, #80]	; (80073fc <pvPortMalloc+0x178>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a15      	ldr	r2, [pc, #84]	; (8007404 <pvPortMalloc+0x180>)
 80073b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <pvPortMalloc+0x174>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073c6:	f7ff f8bd 	bl	8006544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d009      	beq.n	80073e8 <pvPortMalloc+0x164>
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e7fe      	b.n	80073e6 <pvPortMalloc+0x162>
	return pvReturn;
 80073e8:	69fb      	ldr	r3, [r7, #28]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3728      	adds	r7, #40	; 0x28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20003e14 	.word	0x20003e14
 80073f8:	20003e20 	.word	0x20003e20
 80073fc:	20003e18 	.word	0x20003e18
 8007400:	20003e0c 	.word	0x20003e0c
 8007404:	20003e1c 	.word	0x20003e1c

08007408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d046      	beq.n	80074a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800741a:	2308      	movs	r3, #8
 800741c:	425b      	negs	r3, r3
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <vPortFree+0xa8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <vPortFree+0x42>
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e7fe      	b.n	8007448 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <vPortFree+0x5e>
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60bb      	str	r3, [r7, #8]
 8007464:	e7fe      	b.n	8007464 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <vPortFree+0xa8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d019      	beq.n	80074a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d115      	bne.n	80074a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <vPortFree+0xa8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	43db      	mvns	r3, r3
 8007486:	401a      	ands	r2, r3
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800748c:	f7ff f84c 	bl	8006528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <vPortFree+0xac>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4413      	add	r3, r2
 800749a:	4a06      	ldr	r2, [pc, #24]	; (80074b4 <vPortFree+0xac>)
 800749c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800749e:	6938      	ldr	r0, [r7, #16]
 80074a0:	f000 f86c 	bl	800757c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074a4:	f7ff f84e 	bl	8006544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074a8:	bf00      	nop
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20003e20 	.word	0x20003e20
 80074b4:	20003e18 	.word	0x20003e18

080074b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80074c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074c4:	4b27      	ldr	r3, [pc, #156]	; (8007564 <prvHeapInit+0xac>)
 80074c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3307      	adds	r3, #7
 80074d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0307 	bic.w	r3, r3, #7
 80074de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <prvHeapInit+0xac>)
 80074e8:	4413      	add	r3, r2
 80074ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074f0:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <prvHeapInit+0xb0>)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074f6:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <prvHeapInit+0xb0>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007504:	2208      	movs	r2, #8
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0307 	bic.w	r3, r3, #7
 8007512:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a15      	ldr	r2, [pc, #84]	; (800756c <prvHeapInit+0xb4>)
 8007518:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800751a:	4b14      	ldr	r3, [pc, #80]	; (800756c <prvHeapInit+0xb4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <prvHeapInit+0xb4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <prvHeapInit+0xb4>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4a0a      	ldr	r2, [pc, #40]	; (8007570 <prvHeapInit+0xb8>)
 8007546:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a09      	ldr	r2, [pc, #36]	; (8007574 <prvHeapInit+0xbc>)
 800754e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007550:	4b09      	ldr	r3, [pc, #36]	; (8007578 <prvHeapInit+0xc0>)
 8007552:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007556:	601a      	str	r2, [r3, #0]
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	2000020c 	.word	0x2000020c
 8007568:	20003e0c 	.word	0x20003e0c
 800756c:	20003e14 	.word	0x20003e14
 8007570:	20003e1c 	.word	0x20003e1c
 8007574:	20003e18 	.word	0x20003e18
 8007578:	20003e20 	.word	0x20003e20

0800757c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007584:	4b28      	ldr	r3, [pc, #160]	; (8007628 <prvInsertBlockIntoFreeList+0xac>)
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	e002      	b.n	8007590 <prvInsertBlockIntoFreeList+0x14>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d8f7      	bhi.n	800758a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4413      	add	r3, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d108      	bne.n	80075be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	441a      	add	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	441a      	add	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d118      	bne.n	8007604 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4b15      	ldr	r3, [pc, #84]	; (800762c <prvInsertBlockIntoFreeList+0xb0>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d00d      	beq.n	80075fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	441a      	add	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	e008      	b.n	800760c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <prvInsertBlockIntoFreeList+0xb0>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e003      	b.n	800760c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d002      	beq.n	800761a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20003e0c 	.word	0x20003e0c
 800762c:	20003e14 	.word	0x20003e14

08007630 <_ZN12SocketClientC1Ev>:
#include "SocketClient.h"

SPI_HandleTypeDef *W5500Chip::hspi;

SocketClient::SocketClient() {}
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <_ZN12SocketClientC1Ev+0x30>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a08      	ldr	r2, [pc, #32]	; (8007664 <_ZN12SocketClientC1Ev+0x34>)
 8007642:	330d      	adds	r3, #13
 8007644:	6810      	ldr	r0, [r2, #0]
 8007646:	6018      	str	r0, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f241 328c 	movw	r2, #5004	; 0x138c
 800764e:	825a      	strh	r2, [r3, #18]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	0800a194 	.word	0x0800a194
 8007664:	08009fe8 	.word	0x08009fe8

08007668 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>:

void SocketClient::init(SPI_HandleTypeDef *main_hspi1, UartHelper *main_uart_helper) {
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
	uart_helper = main_uart_helper;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	609a      	str	r2, [r3, #8]
	W5500Chip::hspi = main_hspi1;
 800767a:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x68>)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6013      	str	r3, [r2, #0]
	chip = new CHIP();
 8007680:	2001      	movs	r0, #1
 8007682:	f001 f8c9 	bl	8008818 <_Znwj>
 8007686:	4603      	mov	r3, r0
 8007688:	461c      	mov	r4, r3
 800768a:	4620      	mov	r0, r4
 800768c:	f000 f9b9 	bl	8007a02 <_ZN9W5500ChipC1Ev>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	615c      	str	r4, [r3, #20]

	 HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8007694:	2200      	movs	r2, #0
 8007696:	2140      	movs	r1, #64	; 0x40
 8007698:	480e      	ldr	r0, [pc, #56]	; (80076d4 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x6c>)
 800769a:	f7f9 fa41 	bl	8000b20 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 800769e:	2064      	movs	r0, #100	; 0x64
 80076a0:	f7f8 ffb8 	bl	8000614 <HAL_Delay>
	 HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 80076a4:	2201      	movs	r2, #1
 80076a6:	2140      	movs	r1, #64	; 0x40
 80076a8:	480a      	ldr	r0, [pc, #40]	; (80076d4 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x6c>)
 80076aa:	f7f9 fa39 	bl	8000b20 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 80076ae:	2064      	movs	r0, #100	; 0x64
 80076b0:	f7f8 ffb0 	bl	8000614 <HAL_Delay>

	SocketClient::socket_init();
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f8ef 	bl	8007898 <_ZN12SocketClient11socket_initEv>
	(*uart_helper).printf("socket inited\r\n");
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	4906      	ldr	r1, [pc, #24]	; (80076d8 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x70>)
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f95d 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
}
 80076c6:	bf00      	nop
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd90      	pop	{r4, r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20003e24 	.word	0x20003e24
 80076d4:	40020400 	.word	0x40020400
 80076d8:	08009fec 	.word	0x08009fec

080076dc <_ZN12SocketClientD1Ev>:

SocketClient::~SocketClient() {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <_ZN12SocketClientD1Ev+0x2c>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	601a      	str	r2, [r3, #0]
	(*uart_helper).printf("\r\ndestructor\r\n");
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	4907      	ldr	r1, [pc, #28]	; (800770c <_ZN12SocketClientD1Ev+0x30>)
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f945 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
	SocketClient::socket_close();
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f8b8 	bl	800786c <_ZN12SocketClient12socket_closeEv>
}
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	0800a194 	.word	0x0800a194
 800770c:	08009ffc 	.word	0x08009ffc

08007710 <_ZN12SocketClientD0Ev>:
SocketClient::~SocketClient() {
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
}
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff ffdf 	bl	80076dc <_ZN12SocketClientD1Ev>
 800771e:	2118      	movs	r1, #24
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 ff34 	bl	800958e <_ZdlPvj>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <_ZN12SocketClient14socket_connectEv>:
void SocketClient::socket_connect(){
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	//uint8_t code = connect(http_socket, addr, port);
	uint8_t code = listen(http_socket);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	791b      	ldrb	r3, [r3, #4]
 800773c:	4618      	mov	r0, r3
 800773e:	f7fd fa49 	bl	8004bd4 <listen>
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]
	if(code < 0) {
    	(*uart_helper).printf("connect() failed, code = %d\r\n", code);
        close(http_socket);
        return;
    }
    (*uart_helper).printf("socket connected\r\n");
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	4903      	ldr	r1, [pc, #12]	; (8007758 <_ZN12SocketClient14socket_connectEv+0x28>)
 800774c:	4618      	mov	r0, r3
 800774e:	f000 f917 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
}
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	0800a00c 	.word	0x0800a00c

0800775c <_ZN12SocketClient11socket_sendEPht>:

void SocketClient::socket_send(uint8_t *pData, uint16_t len){
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]

    while(len > 0) {
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d02a      	beq.n	80077c6 <_ZN12SocketClient11socket_sendEPht+0x6a>
        //int32_t nbytes = send(http_socket, pData, len);
    	int32_t nbytes = sendto(http_socket, pData, len, addr, port);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	7918      	ldrb	r0, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f103 010d 	add.w	r1, r3, #13
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8a5b      	ldrh	r3, [r3, #18]
 800777e:	88fa      	ldrh	r2, [r7, #6]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	460b      	mov	r3, r1
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	f7fd fa7f 	bl	8004c88 <sendto>
 800778a:	6178      	str	r0, [r7, #20]

    	if(nbytes <= 0) {
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	dc0c      	bgt.n	80077ac <_ZN12SocketClient11socket_sendEPht+0x50>
        	(*uart_helper).printf("send() failed, %d returned\r\n", nbytes);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	490c      	ldr	r1, [pc, #48]	; (80077cc <_ZN12SocketClient11socket_sendEPht+0x70>)
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f8f0 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
            close(http_socket);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	791b      	ldrb	r3, [r3, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fd f9a7 	bl	8004af8 <close>
            return;
 80077aa:	e00c      	b.n	80077c6 <_ZN12SocketClient11socket_sendEPht+0x6a>
        	HAL_Delay(50);
        } else{
			(*uart_helper).printf("%d bytes sent!\r\n", nbytes);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4907      	ldr	r1, [pc, #28]	; (80077d0 <_ZN12SocketClient11socket_sendEPht+0x74>)
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 f8e3 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
			len -= nbytes;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	88fa      	ldrh	r2, [r7, #6]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	80fb      	strh	r3, [r7, #6]
    while(len > 0) {
 80077c4:	e7d1      	b.n	800776a <_ZN12SocketClient11socket_sendEPht+0xe>
        }
    }
}
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	0800a020 	.word	0x0800a020
 80077d0:	0800a040 	.word	0x0800a040

080077d4 <_ZN12SocketClient14socket_receiveEPhtPm>:
			len -= nbytes;
        }
    }
}

void SocketClient::socket_receive(uint8_t *pData, uint16_t Size, uint32_t* rdmaInd){
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	80fb      	strh	r3, [r7, #6]
		int32_t nbytes = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
		uint16_t recvsize = getSn_RX_RSR(http_socket);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	791b      	ldrb	r3, [r3, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fc ff22 	bl	8004636 <getSn_RX_RSR>
 80077f2:	4603      	mov	r3, r0
 80077f4:	827b      	strh	r3, [r7, #18]
		if (recvsize > 0){
 80077f6:	8a7b      	ldrh	r3, [r7, #18]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <_ZN12SocketClient14socket_receiveEPhtPm+0x44>
			//nbytes = recv(http_socket, pData, Size);
			nbytes = recvfrom(http_socket, pData, Size, addr, &port);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	7918      	ldrb	r0, [r3, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f103 010d 	add.w	r1, r3, #13
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3312      	adds	r3, #18
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	460b      	mov	r3, r1
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	f7fd fb6f 	bl	8004ef4 <recvfrom>
 8007816:	6178      	str	r0, [r7, #20]
		}
		*rdmaInd = nbytes;
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	601a      	str	r2, [r3, #0]


		if(nbytes < 0) {
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da07      	bge.n	8007834 <_ZN12SocketClient14socket_receiveEPhtPm+0x60>
			(*uart_helper).printf("\r\nrecv() failed, %d returned\r\n", nbytes);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	490d      	ldr	r1, [pc, #52]	; (8007860 <_ZN12SocketClient14socket_receiveEPhtPm+0x8c>)
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f8a7 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
			return;
 8007832:	e011      	b.n	8007858 <_ZN12SocketClient14socket_receiveEPhtPm+0x84>
		}
		if (nbytes > 0){
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	dd07      	ble.n	800784a <_ZN12SocketClient14socket_receiveEPhtPm+0x76>
			(*uart_helper).printf("\r\nrecv() %d returned\r\n", nbytes);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4908      	ldr	r1, [pc, #32]	; (8007864 <_ZN12SocketClient14socket_receiveEPhtPm+0x90>)
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f89c 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
			return;
 8007848:	e006      	b.n	8007858 <_ZN12SocketClient14socket_receiveEPhtPm+0x84>
		} else {
			(*uart_helper).printf("\r\nrecv() socket busy\r\n");
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	4906      	ldr	r1, [pc, #24]	; (8007868 <_ZN12SocketClient14socket_receiveEPhtPm+0x94>)
 8007850:	4618      	mov	r0, r3
 8007852:	f000 f895 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
			return;
 8007856:	bf00      	nop
		}
}
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	0800a054 	.word	0x0800a054
 8007864:	0800a074 	.word	0x0800a074
 8007868:	0800a08c 	.word	0x0800a08c

0800786c <_ZN12SocketClient12socket_closeEv>:


void SocketClient::socket_close(){
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	  close(http_socket);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	791b      	ldrb	r3, [r3, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	f7fd f93d 	bl	8004af8 <close>
	  (*uart_helper).printf("Closing socket.\r\n");
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	4904      	ldr	r1, [pc, #16]	; (8007894 <_ZN12SocketClient12socket_closeEv+0x28>)
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f87b 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	0800a0a4 	.word	0x0800a0a4

08007898 <_ZN12SocketClient11socket_initEv>:

void SocketClient::socket_init(){
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	chip->initChip();
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 f8b7 	bl	8007a18 <_ZN9W5500Chip8initChipEv>

    SocketClient::http_socket = HTTP_SOCKET;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	711a      	strb	r2, [r3, #4]
    //uint8_t code = socket(SocketClient::http_socket, Sn_MR_TCP, 10888, SF_IO_NONBLOCK );
    uint8_t code = socket(SocketClient::http_socket, Sn_MR_UDP, 10888, SF_IO_NONBLOCK );
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7918      	ldrb	r0, [r3, #4]
 80078b4:	2301      	movs	r3, #1
 80078b6:	f642 2288 	movw	r2, #10888	; 0x2a88
 80078ba:	2102      	movs	r1, #2
 80078bc:	f7fd f806 	bl	80048cc <socket>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

    if(code != SocketClient::http_socket) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	7bfa      	ldrb	r2, [r7, #15]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d007      	beq.n	80078de <_ZN12SocketClient11socket_initEv+0x46>
    	(*uart_helper).printf("socket() failed, code = %d\r\n", code);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	7bfa      	ldrb	r2, [r7, #15]
 80078d4:	4906      	ldr	r1, [pc, #24]	; (80078f0 <_ZN12SocketClient11socket_initEv+0x58>)
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f852 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
        return;
 80078dc:	e005      	b.n	80078ea <_ZN12SocketClient11socket_initEv+0x52>
    }

    (*uart_helper).printf("Socket created, connecting...\r\n");
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	4904      	ldr	r1, [pc, #16]	; (80078f4 <_ZN12SocketClient11socket_initEv+0x5c>)
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f84b 	bl	8007980 <_ZN10UartHelper6printfEPKcz>
}
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	0800a0b8 	.word	0x0800a0b8
 80078f4:	0800a0d8 	.word	0x0800a0d8

080078f8 <_ZN10UartHelperC1Ev>:
 */

#include <stdlib.h>
#include "UartHelper.h"

UartHelper::UartHelper() {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	4a07      	ldr	r2, [pc, #28]	; (8007920 <_ZN10UartHelperC1Ev+0x28>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	char buff[20];
	uart_queue = xQueueCreate( 8, sizeof( buff ) );
 8007906:	2200      	movs	r2, #0
 8007908:	2114      	movs	r1, #20
 800790a:	2008      	movs	r0, #8
 800790c:	f7fe f8b2 	bl	8005a74 <xQueueGenericCreate>
 8007910:	4602      	mov	r2, r0
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	605a      	str	r2, [r3, #4]
}
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	0800a1a4 	.word	0x0800a1a4

08007924 <_ZN10UartHelperD1Ev>:

UartHelper::~UartHelper() {
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	4a04      	ldr	r2, [pc, #16]	; (8007940 <_ZN10UartHelperD1Ev+0x1c>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	0800a1a4 	.word	0x0800a1a4

08007944 <_ZN10UartHelperD0Ev>:
UartHelper::~UartHelper() {
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
}
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ffe9 	bl	8007924 <_ZN10UartHelperD1Ev>
 8007952:	210c      	movs	r1, #12
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fe1a 	bl	800958e <_ZdlPvj>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>:

void UartHelper::init(UART_HandleTypeDef *main_huart){
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	huart = main_huart;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	609a      	str	r2, [r3, #8]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <_ZN10UartHelper6printfEPKcz>:

void UartHelper::printf(const char* fmt, ...) {
 8007980:	b40e      	push	{r1, r2, r3}
 8007982:	b580      	push	{r7, lr}
 8007984:	b089      	sub	sp, #36	; 0x24
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
	char buff[20];
    //int len = strlen(fmt);
    //void* buff = calloc(len+1, sizeof(char));
    va_list args;
    va_start(args, fmt);
 800798a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800798e:	60bb      	str	r3, [r7, #8]
    vsnprintf((char*)buff, sizeof(buff), fmt, args);
 8007990:	f107 000c 	add.w	r0, r7, #12
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007998:	2114      	movs	r1, #20
 800799a:	f001 fed3 	bl	8009744 <vsniprintf>
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6858      	ldr	r0, [r3, #4]
 80079a2:	f107 010c 	add.w	r1, r7, #12
 80079a6:	2300      	movs	r3, #0
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ac:	f7fe f8be 	bl	8005b2c <xQueueGenericSend>
    va_end(args);
}
 80079b0:	bf00      	nop
 80079b2:	3724      	adds	r7, #36	; 0x24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ba:	b003      	add	sp, #12
 80079bc:	4770      	bx	lr

080079be <_ZN10UartHelper8UARTTaskEv>:
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
//    va_end(args);
}

void UartHelper::UARTTask()
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b088      	sub	sp, #32
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  char buff[20];
	  xQueueReceive( uart_queue, &( buff ), portMAX_DELAY );
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f107 0108 	add.w	r1, r7, #8
 80079ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe f9a4 	bl	8005d20 <xQueueReceive>
	  int len = strlen(buff);
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	4618      	mov	r0, r3
 80079de:	f7f8 fbff 	bl	80001e0 <strlen>
 80079e2:	4603      	mov	r3, r0
 80079e4:	61fb      	str	r3, [r7, #28]
	  HAL_UART_Transmit(huart, (uint8_t*)buff, len, HAL_MAX_DELAY);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6898      	ldr	r0, [r3, #8]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f107 0108 	add.w	r1, r7, #8
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f6:	f7fb f997 	bl	8002d28 <HAL_UART_Transmit>
	  osDelay(50);
 80079fa:	2032      	movs	r0, #50	; 0x32
 80079fc:	f7fd ff09 	bl	8005812 <osDelay>
  }
 8007a00:	e7e1      	b.n	80079c6 <_ZN10UartHelper8UARTTaskEv+0x8>

08007a02 <_ZN9W5500ChipC1Ev>:
#include "W5500_chip.h"

W5500Chip::W5500Chip() {}
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <_ZN9W5500Chip8initChipEv>:

void W5500Chip::initChip(void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	; 0x28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8007a20:	4927      	ldr	r1, [pc, #156]	; (8007ac0 <_ZN9W5500Chip8initChipEv+0xa8>)
 8007a22:	4828      	ldr	r0, [pc, #160]	; (8007ac4 <_ZN9W5500Chip8initChipEv+0xac>)
 8007a24:	f7fd fcb6 	bl	8005394 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8007a28:	4927      	ldr	r1, [pc, #156]	; (8007ac8 <_ZN9W5500Chip8initChipEv+0xb0>)
 8007a2a:	4828      	ldr	r0, [pc, #160]	; (8007acc <_ZN9W5500Chip8initChipEv+0xb4>)
 8007a2c:	f7fd fcd6 	bl	80053dc <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8007a30:	4927      	ldr	r1, [pc, #156]	; (8007ad0 <_ZN9W5500Chip8initChipEv+0xb8>)
 8007a32:	4828      	ldr	r0, [pc, #160]	; (8007ad4 <_ZN9W5500Chip8initChipEv+0xbc>)
 8007a34:	f7fd fcfe 	bl	8005434 <reg_wizchip_spiburst_cbfunc>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2};
 8007a38:	4b27      	ldr	r3, [pc, #156]	; (8007ad8 <_ZN9W5500Chip8initChipEv+0xc0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8007a3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fd fd6b 	bl	8005524 <wizchip_init>
    wiz_NetInfo net_info = {
 8007a4e:	f107 030c 	add.w	r3, r7, #12
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	609a      	str	r2, [r3, #8]
 8007a5a:	60da      	str	r2, [r3, #12]
 8007a5c:	611a      	str	r2, [r3, #16]
 8007a5e:	f8c3 2013 	str.w	r2, [r3, #19]
 8007a62:	2308      	movs	r3, #8
 8007a64:	737b      	strb	r3, [r7, #13]
 8007a66:	23dc      	movs	r3, #220	; 0xdc
 8007a68:	73bb      	strb	r3, [r7, #14]
 8007a6a:	23ab      	movs	r3, #171	; 0xab
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	231d      	movs	r3, #29
 8007a70:	743b      	strb	r3, [r7, #16]
 8007a72:	23e8      	movs	r3, #232	; 0xe8
 8007a74:	747b      	strb	r3, [r7, #17]
 8007a76:	23c0      	movs	r3, #192	; 0xc0
 8007a78:	74bb      	strb	r3, [r7, #18]
 8007a7a:	23a8      	movs	r3, #168	; 0xa8
 8007a7c:	74fb      	strb	r3, [r7, #19]
 8007a7e:	2337      	movs	r3, #55	; 0x37
 8007a80:	753b      	strb	r3, [r7, #20]
 8007a82:	2372      	movs	r3, #114	; 0x72
 8007a84:	757b      	strb	r3, [r7, #21]
 8007a86:	23ff      	movs	r3, #255	; 0xff
 8007a88:	75bb      	strb	r3, [r7, #22]
 8007a8a:	23ff      	movs	r3, #255	; 0xff
 8007a8c:	75fb      	strb	r3, [r7, #23]
 8007a8e:	23ff      	movs	r3, #255	; 0xff
 8007a90:	763b      	strb	r3, [r7, #24]
 8007a92:	23c0      	movs	r3, #192	; 0xc0
 8007a94:	76bb      	strb	r3, [r7, #26]
 8007a96:	23a8      	movs	r3, #168	; 0xa8
 8007a98:	76fb      	strb	r3, [r7, #27]
 8007a9a:	2337      	movs	r3, #55	; 0x37
 8007a9c:	773b      	strb	r3, [r7, #28]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	777b      	strb	r3, [r7, #29]
    	.mac = {0x00, 0x08, 0xdc, 0xab, 0x1d, 0xe8},
        .ip = {192, 168, 55, 114},
        .sn = {255, 255, 255, 0},
        .gw = {192, 168,55, 1}};
    wizchip_setnetinfo(&net_info);
 8007aa2:	f107 030c 	add.w	r3, r7, #12
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fd fdc8 	bl	800563c <wizchip_setnetinfo>
    wizchip_getnetinfo(&net_info);
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fd fe03 	bl	80056bc <wizchip_getnetinfo>
}
 8007ab6:	bf00      	nop
 8007ab8:	3728      	adds	r7, #40	; 0x28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	08007af5 	.word	0x08007af5
 8007ac4:	08007add 	.word	0x08007add
 8007ac8:	08007baf 	.word	0x08007baf
 8007acc:	08007b95 	.word	0x08007b95
 8007ad0:	08007b51 	.word	0x08007b51
 8007ad4:	08007b0d 	.word	0x08007b0d
 8007ad8:	0800a0f8 	.word	0x0800a0f8

08007adc <_ZN9W5500Chip12W5500_SelectEv>:

void W5500Chip::W5500_Select(void) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4802      	ldr	r0, [pc, #8]	; (8007af0 <_ZN9W5500Chip12W5500_SelectEv+0x14>)
 8007ae6:	f7f9 f81b 	bl	8000b20 <HAL_GPIO_WritePin>
}
 8007aea:	bf00      	nop
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	40020400 	.word	0x40020400

08007af4 <_ZN9W5500Chip14W5500_UnselectEv>:

void W5500Chip::W5500_Unselect(void) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8007af8:	2201      	movs	r2, #1
 8007afa:	2104      	movs	r1, #4
 8007afc:	4802      	ldr	r0, [pc, #8]	; (8007b08 <_ZN9W5500Chip14W5500_UnselectEv+0x14>)
 8007afe:	f7f9 f80f 	bl	8000b20 <HAL_GPIO_WritePin>
}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	40020400 	.word	0x40020400

08007b0c <_ZN9W5500Chip14W5500_ReadBuffEPht>:

void W5500Chip::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	807b      	strh	r3, [r7, #2]
	uint32_t begin = HAL_GetTick();
 8007b18:	f7f8 fd70 	bl	80005fc <HAL_GetTick>
 8007b1c:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Receive(hspi, buff, len, 100);
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <_ZN9W5500Chip14W5500_ReadBuffEPht+0x40>)
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	887a      	ldrh	r2, [r7, #2]
 8007b24:	2364      	movs	r3, #100	; 0x64
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	f7f9 fe32 	bl	8001790 <HAL_SPI_Receive>
	uint32_t end = HAL_GetTick();
 8007b2c:	f7f8 fd66 	bl	80005fc <HAL_GetTick>
 8007b30:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b6e      	cmp	r3, #110	; 0x6e
 8007b3a:	d902      	bls.n	8007b42 <_ZN9W5500Chip14W5500_ReadBuffEPht+0x36>
		HAL_Delay(50);
 8007b3c:	2032      	movs	r0, #50	; 0x32
 8007b3e:	f7f8 fd69 	bl	8000614 <HAL_Delay>
	}
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20003e24 	.word	0x20003e24

08007b50 <_ZN9W5500Chip15W5500_WriteBuffEPht>:

void W5500Chip::W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
	uint32_t begin = HAL_GetTick();
 8007b5c:	f7f8 fd4e 	bl	80005fc <HAL_GetTick>
 8007b60:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Transmit(hspi, buff, len, 100);
 8007b62:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <_ZN9W5500Chip15W5500_WriteBuffEPht+0x40>)
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	887a      	ldrh	r2, [r7, #2]
 8007b68:	2364      	movs	r3, #100	; 0x64
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	f7f9 fcdc 	bl	8001528 <HAL_SPI_Transmit>
	uint32_t end = HAL_GetTick();
 8007b70:	f7f8 fd44 	bl	80005fc <HAL_GetTick>
 8007b74:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b6e      	cmp	r3, #110	; 0x6e
 8007b7e:	d902      	bls.n	8007b86 <_ZN9W5500Chip15W5500_WriteBuffEPht+0x36>
		HAL_Delay(50);
 8007b80:	2032      	movs	r0, #50	; 0x32
 8007b82:	f7f8 fd47 	bl	8000614 <HAL_Delay>
	}
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20003e24 	.word	0x20003e24

08007b94 <_ZN9W5500Chip14W5500_ReadByteEv>:

uint8_t W5500Chip::W5500_ReadByte(void) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8007b9a:	1dfb      	adds	r3, r7, #7
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff ffb4 	bl	8007b0c <_ZN9W5500Chip14W5500_ReadBuffEPht>
    return byte;
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <_ZN9W5500Chip15W5500_WriteByteEh>:

void W5500Chip::W5500_WriteByte(uint8_t byte) {
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8007bb8:	1dfb      	adds	r3, r7, #7
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff ffc7 	bl	8007b50 <_ZN9W5500Chip15W5500_WriteBuffEPht>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	4a06      	ldr	r2, [pc, #24]	; (8007bfc <vApplicationGetIdleTaskMemory+0x30>)
 8007be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2280      	movs	r2, #128	; 0x80
 8007be8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20003e28 	.word	0x20003e28
 8007bfc:	20003e7c 	.word	0x20003e7c

08007c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c00:	b5b0      	push	{r4, r5, r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c06:	f7f8 fcc3 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c0a:	f000 f839 	bl	8007c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c0e:	f000 fa45 	bl	800809c <MX_GPIO_Init>
  MX_SPI1_Init();
 8007c12:	f000 f89f 	bl	8007d54 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8007c16:	f000 fa17 	bl	8008048 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8007c1a:	f000 f929 	bl	8007e70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c1e:	f000 f97b 	bl	8007f18 <MX_TIM3_Init>
  MX_TIM1_Init();
 8007c22:	f000 f8cd 	bl	8007dc0 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <main+0x64>)
 8007c28:	1d3c      	adds	r4, r7, #4
 8007c2a:	461d      	mov	r5, r3
 8007c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007c38:	1d3b      	adds	r3, r7, #4
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fd fd9c 	bl	800577a <osThreadCreate>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <main+0x68>)
 8007c46:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  setup(&huart2, &hspi1, &htim3, &htim3, &htim2, &htim1);
 8007c48:	4b08      	ldr	r3, [pc, #32]	; (8007c6c <main+0x6c>)
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <main+0x70>)
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <main+0x74>)
 8007c52:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <main+0x74>)
 8007c54:	4908      	ldr	r1, [pc, #32]	; (8007c78 <main+0x78>)
 8007c56:	4809      	ldr	r0, [pc, #36]	; (8007c7c <main+0x7c>)
 8007c58:	f000 fd8a 	bl	8008770 <setup>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007c5c:	f7fd fd86 	bl	800576c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007c60:	e7fe      	b.n	8007c60 <main+0x60>
 8007c62:	bf00      	nop
 8007c64:	0800a108 	.word	0x0800a108
 8007c68:	200041e8 	.word	0x200041e8
 8007c6c:	2000422c 	.word	0x2000422c
 8007c70:	200042c4 	.word	0x200042c4
 8007c74:	200041ec 	.word	0x200041ec
 8007c78:	2000426c 	.word	0x2000426c
 8007c7c:	20004304 	.word	0x20004304

08007c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b094      	sub	sp, #80	; 0x50
 8007c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c86:	f107 0320 	add.w	r3, r7, #32
 8007c8a:	2230      	movs	r2, #48	; 0x30
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fce0 	bl	8009654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	609a      	str	r2, [r3, #8]
 8007ca0:	60da      	str	r2, [r3, #12]
 8007ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	4b28      	ldr	r3, [pc, #160]	; (8007d4c <SystemClock_Config+0xcc>)
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	4a27      	ldr	r2, [pc, #156]	; (8007d4c <SystemClock_Config+0xcc>)
 8007cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <SystemClock_Config+0xcc>)
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cbc:	60bb      	str	r3, [r7, #8]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	607b      	str	r3, [r7, #4]
 8007cc4:	4b22      	ldr	r3, [pc, #136]	; (8007d50 <SystemClock_Config+0xd0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007ccc:	4a20      	ldr	r2, [pc, #128]	; (8007d50 <SystemClock_Config+0xd0>)
 8007cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	4b1e      	ldr	r3, [pc, #120]	; (8007d50 <SystemClock_Config+0xd0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cdc:	607b      	str	r3, [r7, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007ce4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cea:	2302      	movs	r3, #2
 8007cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007cf8:	2348      	movs	r3, #72	; 0x48
 8007cfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007d00:	2307      	movs	r3, #7
 8007d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d04:	f107 0320 	add.w	r3, r7, #32
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7f8 ff47 	bl	8000b9c <HAL_RCC_OscConfig>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007d14:	f000 fa8e 	bl	8008234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d18:	230f      	movs	r3, #15
 8007d1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007d2e:	f107 030c 	add.w	r3, r7, #12
 8007d32:	2102      	movs	r1, #2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7f9 f973 	bl	8001020 <HAL_RCC_ClockConfig>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007d40:	f000 fa78 	bl	8008234 <Error_Handler>
  }
}
 8007d44:	bf00      	nop
 8007d46:	3750      	adds	r7, #80	; 0x50
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	40007000 	.word	0x40007000

08007d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007d58:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d5a:	4a18      	ldr	r2, [pc, #96]	; (8007dbc <MX_SPI1_Init+0x68>)
 8007d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007d5e:	4b16      	ldr	r3, [pc, #88]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d6c:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d72:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007da0:	220a      	movs	r2, #10
 8007da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007da4:	4804      	ldr	r0, [pc, #16]	; (8007db8 <MX_SPI1_Init+0x64>)
 8007da6:	f7f9 fb5b 	bl	8001460 <HAL_SPI_Init>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007db0:	f000 fa40 	bl	8008234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007db4:	bf00      	nop
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	2000426c 	.word	0x2000426c
 8007dbc:	40013000 	.word	0x40013000

08007dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08c      	sub	sp, #48	; 0x30
 8007dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007dc6:	f107 030c 	add.w	r3, r7, #12
 8007dca:	2224      	movs	r2, #36	; 0x24
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 fc40 	bl	8009654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dd4:	1d3b      	adds	r3, r7, #4
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007ddc:	4b22      	ldr	r3, [pc, #136]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007dde:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <MX_TIM1_Init+0xac>)
 8007de0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007de2:	4b21      	ldr	r3, [pc, #132]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007de8:	4b1f      	ldr	r3, [pc, #124]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007dee:	4b1e      	ldr	r3, [pc, #120]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007df6:	4b1c      	ldr	r3, [pc, #112]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e02:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007e10:	2301      	movs	r3, #1
 8007e12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007e20:	2301      	movs	r3, #1
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007e24:	2300      	movs	r3, #0
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	4619      	mov	r1, r3
 8007e32:	480d      	ldr	r0, [pc, #52]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007e34:	f7fa f8ec 	bl	8002010 <HAL_TIM_Encoder_Init>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8007e3e:	f000 f9f9 	bl	8008234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e4a:	1d3b      	adds	r3, r7, #4
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4806      	ldr	r0, [pc, #24]	; (8007e68 <MX_TIM1_Init+0xa8>)
 8007e50:	f7fa fec4 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8007e5a:	f000 f9eb 	bl	8008234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007e5e:	bf00      	nop
 8007e60:	3730      	adds	r7, #48	; 0x30
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000422c 	.word	0x2000422c
 8007e6c:	40010000 	.word	0x40010000

08007e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08c      	sub	sp, #48	; 0x30
 8007e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	2224      	movs	r2, #36	; 0x24
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 fbe8 	bl	8009654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e84:	1d3b      	adds	r3, r7, #4
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007e8c:	4b21      	ldr	r3, [pc, #132]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007e94:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e9a:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007ea0:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eae:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8007ed8:	f107 030c 	add.w	r3, r7, #12
 8007edc:	4619      	mov	r1, r3
 8007ede:	480d      	ldr	r0, [pc, #52]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007ee0:	f7fa f896 	bl	8002010 <HAL_TIM_Encoder_Init>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8007eea:	f000 f9a3 	bl	8008234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007ef6:	1d3b      	adds	r3, r7, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4806      	ldr	r0, [pc, #24]	; (8007f14 <MX_TIM2_Init+0xa4>)
 8007efc:	f7fa fe6e 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8007f06:	f000 f995 	bl	8008234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007f0a:	bf00      	nop
 8007f0c:	3730      	adds	r7, #48	; 0x30
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200042c4 	.word	0x200042c4

08007f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08e      	sub	sp, #56	; 0x38
 8007f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	605a      	str	r2, [r3, #4]
 8007f28:	609a      	str	r2, [r3, #8]
 8007f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f2c:	f107 0320 	add.w	r3, r7, #32
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	609a      	str	r2, [r3, #8]
 8007f40:	60da      	str	r2, [r3, #12]
 8007f42:	611a      	str	r2, [r3, #16]
 8007f44:	615a      	str	r2, [r3, #20]
 8007f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007f48:	4b3d      	ldr	r3, [pc, #244]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f4a:	4a3e      	ldr	r2, [pc, #248]	; (8008044 <MX_TIM3_Init+0x12c>)
 8007f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 8007f4e:	4b3c      	ldr	r3, [pc, #240]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f50:	2228      	movs	r2, #40	; 0x28
 8007f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f54:	4b3a      	ldr	r3, [pc, #232]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256;
 8007f5a:	4b39      	ldr	r3, [pc, #228]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f68:	4b35      	ldr	r3, [pc, #212]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007f6e:	4834      	ldr	r0, [pc, #208]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f70:	f7f9 ffca 	bl	8001f08 <HAL_TIM_Base_Init>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8007f7a:	f000 f95b 	bl	8008234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f88:	4619      	mov	r1, r3
 8007f8a:	482d      	ldr	r0, [pc, #180]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f8c:	f7fa faa0 	bl	80024d0 <HAL_TIM_ConfigClockSource>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8007f96:	f000 f94d 	bl	8008234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007f9a:	4829      	ldr	r0, [pc, #164]	; (8008040 <MX_TIM3_Init+0x128>)
 8007f9c:	f7fa f803 	bl	8001fa6 <HAL_TIM_PWM_Init>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8007fa6:	f000 f945 	bl	8008234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007faa:	2300      	movs	r3, #0
 8007fac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007fb2:	f107 0320 	add.w	r3, r7, #32
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4821      	ldr	r0, [pc, #132]	; (8008040 <MX_TIM3_Init+0x128>)
 8007fba:	f7fa fe0f 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007fc4:	f000 f936 	bl	8008234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007fc8:	2360      	movs	r3, #96	; 0x60
 8007fca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007fd8:	1d3b      	adds	r3, r7, #4
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4818      	ldr	r0, [pc, #96]	; (8008040 <MX_TIM3_Init+0x128>)
 8007fe0:	f7fa f9b0 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8007fea:	f000 f923 	bl	8008234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007fee:	1d3b      	adds	r3, r7, #4
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4812      	ldr	r0, [pc, #72]	; (8008040 <MX_TIM3_Init+0x128>)
 8007ff6:	f7fa f9a5 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8008000:	f000 f918 	bl	8008234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	2208      	movs	r2, #8
 8008008:	4619      	mov	r1, r3
 800800a:	480d      	ldr	r0, [pc, #52]	; (8008040 <MX_TIM3_Init+0x128>)
 800800c:	f7fa f99a 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8008016:	f000 f90d 	bl	8008234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	220c      	movs	r2, #12
 800801e:	4619      	mov	r1, r3
 8008020:	4807      	ldr	r0, [pc, #28]	; (8008040 <MX_TIM3_Init+0x128>)
 8008022:	f7fa f98f 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800802c:	f000 f902 	bl	8008234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008030:	4803      	ldr	r0, [pc, #12]	; (8008040 <MX_TIM3_Init+0x128>)
 8008032:	f001 f8df 	bl	80091f4 <HAL_TIM_MspPostInit>

}
 8008036:	bf00      	nop
 8008038:	3738      	adds	r7, #56	; 0x38
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	200041ec 	.word	0x200041ec
 8008044:	40000400 	.word	0x40000400

08008048 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800804c:	4b11      	ldr	r3, [pc, #68]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 800804e:	4a12      	ldr	r2, [pc, #72]	; (8008098 <MX_USART2_UART_Init+0x50>)
 8008050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8008052:	4b10      	ldr	r3, [pc, #64]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 8008054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800805a:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 800805c:	2200      	movs	r2, #0
 800805e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008060:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 8008062:	2200      	movs	r2, #0
 8008064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008066:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 8008068:	2200      	movs	r2, #0
 800806a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 800806e:	220c      	movs	r2, #12
 8008070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008072:	4b08      	ldr	r3, [pc, #32]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 8008074:	2200      	movs	r2, #0
 8008076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 800807a:	2200      	movs	r2, #0
 800807c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800807e:	4805      	ldr	r0, [pc, #20]	; (8008094 <MX_USART2_UART_Init+0x4c>)
 8008080:	f7fa fe05 	bl	8002c8e <HAL_UART_Init>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800808a:	f000 f8d3 	bl	8008234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20004304 	.word	0x20004304
 8008098:	40004400 	.word	0x40004400

0800809c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a2:	f107 0314 	add.w	r3, r7, #20
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	605a      	str	r2, [r3, #4]
 80080ac:	609a      	str	r2, [r3, #8]
 80080ae:	60da      	str	r2, [r3, #12]
 80080b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	4b4d      	ldr	r3, [pc, #308]	; (80081ec <MX_GPIO_Init+0x150>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	4a4c      	ldr	r2, [pc, #304]	; (80081ec <MX_GPIO_Init+0x150>)
 80080bc:	f043 0304 	orr.w	r3, r3, #4
 80080c0:	6313      	str	r3, [r2, #48]	; 0x30
 80080c2:	4b4a      	ldr	r3, [pc, #296]	; (80081ec <MX_GPIO_Init+0x150>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	613b      	str	r3, [r7, #16]
 80080cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	4b46      	ldr	r3, [pc, #280]	; (80081ec <MX_GPIO_Init+0x150>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	4a45      	ldr	r2, [pc, #276]	; (80081ec <MX_GPIO_Init+0x150>)
 80080d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080dc:	6313      	str	r3, [r2, #48]	; 0x30
 80080de:	4b43      	ldr	r3, [pc, #268]	; (80081ec <MX_GPIO_Init+0x150>)
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]
 80080ee:	4b3f      	ldr	r3, [pc, #252]	; (80081ec <MX_GPIO_Init+0x150>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	4a3e      	ldr	r2, [pc, #248]	; (80081ec <MX_GPIO_Init+0x150>)
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	6313      	str	r3, [r2, #48]	; 0x30
 80080fa:	4b3c      	ldr	r3, [pc, #240]	; (80081ec <MX_GPIO_Init+0x150>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
 8008104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	4b38      	ldr	r3, [pc, #224]	; (80081ec <MX_GPIO_Init+0x150>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	4a37      	ldr	r2, [pc, #220]	; (80081ec <MX_GPIO_Init+0x150>)
 8008110:	f043 0302 	orr.w	r3, r3, #2
 8008114:	6313      	str	r3, [r2, #48]	; 0x30
 8008116:	4b35      	ldr	r3, [pc, #212]	; (80081ec <MX_GPIO_Init+0x150>)
 8008118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	607b      	str	r3, [r7, #4]
 8008120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8008122:	2200      	movs	r2, #0
 8008124:	2110      	movs	r1, #16
 8008126:	4832      	ldr	r0, [pc, #200]	; (80081f0 <MX_GPIO_Init+0x154>)
 8008128:	f7f8 fcfa 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 800812c:	2200      	movs	r2, #0
 800812e:	f247 4145 	movw	r1, #29765	; 0x7445
 8008132:	4830      	ldr	r0, [pc, #192]	; (80081f4 <MX_GPIO_Init+0x158>)
 8008134:	f7f8 fcf4 	bl	8000b20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8008138:	2200      	movs	r2, #0
 800813a:	21c0      	movs	r1, #192	; 0xc0
 800813c:	482e      	ldr	r0, [pc, #184]	; (80081f8 <MX_GPIO_Init+0x15c>)
 800813e:	f7f8 fcef 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_12;
 8008142:	f241 430c 	movw	r3, #5132	; 0x140c
 8008146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008148:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <MX_GPIO_Init+0x160>)
 800814a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800814c:	2300      	movs	r3, #0
 800814e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	4619      	mov	r1, r3
 8008156:	4828      	ldr	r0, [pc, #160]	; (80081f8 <MX_GPIO_Init+0x15c>)
 8008158:	f7f8 fb60 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800815c:	2310      	movs	r3, #16
 800815e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008160:	2301      	movs	r3, #1
 8008162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008164:	2300      	movs	r3, #0
 8008166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008168:	2300      	movs	r3, #0
 800816a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	4619      	mov	r1, r3
 8008172:	481f      	ldr	r0, [pc, #124]	; (80081f0 <MX_GPIO_Init+0x154>)
 8008174:	f7f8 fb52 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12 
                           PB13 PB14 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8008178:	f247 4345 	movw	r3, #29765	; 0x7445
 800817c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800817e:	2301      	movs	r3, #1
 8008180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008182:	2300      	movs	r3, #0
 8008184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008186:	2300      	movs	r3, #0
 8008188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800818a:	f107 0314 	add.w	r3, r7, #20
 800818e:	4619      	mov	r1, r3
 8008190:	4818      	ldr	r0, [pc, #96]	; (80081f4 <MX_GPIO_Init+0x158>)
 8008192:	f7f8 fb43 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008196:	23c0      	movs	r3, #192	; 0xc0
 8008198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800819a:	2301      	movs	r3, #1
 800819c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081a2:	2300      	movs	r3, #0
 80081a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	4619      	mov	r1, r3
 80081ac:	4812      	ldr	r0, [pc, #72]	; (80081f8 <MX_GPIO_Init+0x15c>)
 80081ae:	f7f8 fb35 	bl	800081c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80081b2:	2200      	movs	r2, #0
 80081b4:	2105      	movs	r1, #5
 80081b6:	2008      	movs	r0, #8
 80081b8:	f7f8 fb06 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80081bc:	2008      	movs	r0, #8
 80081be:	f7f8 fb1f 	bl	8000800 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80081c2:	2200      	movs	r2, #0
 80081c4:	2105      	movs	r1, #5
 80081c6:	2009      	movs	r0, #9
 80081c8:	f7f8 fafe 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80081cc:	2009      	movs	r0, #9
 80081ce:	f7f8 fb17 	bl	8000800 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80081d2:	2200      	movs	r2, #0
 80081d4:	2105      	movs	r1, #5
 80081d6:	2028      	movs	r0, #40	; 0x28
 80081d8:	f7f8 faf6 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80081dc:	2028      	movs	r0, #40	; 0x28
 80081de:	f7f8 fb0f 	bl	8000800 <HAL_NVIC_EnableIRQ>

}
 80081e2:	bf00      	nop
 80081e4:	3728      	adds	r7, #40	; 0x28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	40023800 	.word	0x40023800
 80081f0:	40020000 	.word	0x40020000
 80081f4:	40020400 	.word	0x40020400
 80081f8:	40020800 	.word	0x40020800
 80081fc:	10310000 	.word	0x10310000

08008200 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
//		__HAL_TIM_SetCompare(htim, CHANNEL_REV1, speed * (-1));
//	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008208:	2001      	movs	r0, #1
 800820a:	f7fd fb02 	bl	8005812 <osDelay>
 800820e:	e7fb      	b.n	8008208 <StartDefaultTask+0x8>

08008210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a04      	ldr	r2, [pc, #16]	; (8008230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d101      	bne.n	8008226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008222:	f7f8 f9d7 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40000800 	.word	0x40000800

08008234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008238:	bf00      	nop
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <_ZN10ValueFieldC1Ev>:
struct ValueField {
	std::vector<unsigned char> value;
	bool exist;
public:
	ValueField(std::vector<unsigned char> value): value(value) {}
	ValueField() {}
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fb52 	bl	80088f6 <_ZNSt6vectorIhSaIhEEC1Ev>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <_ZN10ValueField8getValueEv>:
//		int size = value.size();
//		std::copy(begin, begin + value.size(), value.begin());
	}
	void setValue(std::vector<unsigned char> value) {this->value = value;}
	unsigned short getSize() {return value.size();}
	std::vector<unsigned char> getValue() {return value;}
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 faeb 	bl	8008846 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <_ZN10ValueFieldD1Ev>:
struct ValueField {
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fb1c 	bl	80088c0 <_ZNSt6vectorIhSaIhEED1Ev>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <_ZN10SLMPPacketC1Ev>:
	Field<unsigned short, 2> no_of_device_points;
	Field<unsigned short, 2> end_code;
	ValueField value;
	//ValueField<100> value;

	SLMPPacket() {data_length.exist = true;}
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fb37 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fb32 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3308      	adds	r3, #8
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fb3b 	bl	800892c <_ZN5FieldIhLj1EEC1Ev>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	330a      	adds	r3, #10
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fb36 	bl	800892c <_ZN5FieldIhLj1EEC1Ev>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	330c      	adds	r3, #12
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fb23 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3310      	adds	r3, #16
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fb2c 	bl	800892c <_ZN5FieldIhLj1EEC1Ev>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3312      	adds	r3, #18
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fb19 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3316      	adds	r3, #22
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fb14 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	331a      	adds	r3, #26
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fb0f 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3320      	adds	r3, #32
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fb26 	bl	8008948 <_ZN5FieldIjLj3EEC1Ev>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3328      	adds	r3, #40	; 0x28
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fb13 	bl	800892c <_ZN5FieldIhLj1EEC1Ev>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	332a      	adds	r3, #42	; 0x2a
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fb00 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	332e      	adds	r3, #46	; 0x2e
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fafb 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3334      	adds	r3, #52	; 0x34
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff ff8f 	bl	8008242 <_ZN10ValueFieldC1Ev>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3344      	adds	r3, #68	; 0x44
 8008328:	4618      	mov	r0, r3
 800832a:	f000 faf1 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3348      	adds	r3, #72	; 0x48
 8008332:	4618      	mov	r0, r3
 8008334:	f000 faec 	bl	8008910 <_ZN5FieldItLj2EEC1Ev>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <_Z13StartUARTTaskPKv>:
  }
}


void StartUARTTask(void const * argument)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	uart_helper.UARTTask();
 8008354:	4803      	ldr	r0, [pc, #12]	; (8008364 <_Z13StartUARTTaskPKv+0x18>)
 8008356:	f7ff fb32 	bl	80079be <_ZN10UartHelper8UARTTaskEv>
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20004084 	.word	0x20004084

08008368 <_ZN10SLMPPacketD1Ev>:
struct SLMPPacket {
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3334      	adds	r3, #52	; 0x34
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff ff7f 	bl	8008278 <_ZN10ValueFieldD1Ev>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <__tcf_0>:
			const static uint16_t rbuflen = 30;

			uint8_t rbuf[rbuflen];
			uint16_t Size = 30;
			uint32_t* rdmaInd;
			static SLMPPacket packet1;
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__tcf_0+0xc>)
 800838a:	f7ff ffed 	bl	8008368 <_ZN10SLMPPacketD1Ev>
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200040f8 	.word	0x200040f8

08008394 <_Z19StartSocketSendTaskPKv>:
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b093      	sub	sp, #76	; 0x4c
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
		unsigned char msg[msg_len];
 800839c:	4b3c      	ldr	r3, [pc, #240]	; (8008490 <_Z19StartSocketSendTaskPKv+0xfc>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	1e58      	subs	r0, r3, #1
 80083a2:	6478      	str	r0, [r7, #68]	; 0x44
 80083a4:	4603      	mov	r3, r0
 80083a6:	3301      	adds	r3, #1
 80083a8:	4619      	mov	r1, r3
 80083aa:	f04f 0200 	mov.w	r2, #0
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	f04f 0400 	mov.w	r4, #0
 80083b6:	00d4      	lsls	r4, r2, #3
 80083b8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80083bc:	00cb      	lsls	r3, r1, #3
 80083be:	4603      	mov	r3, r0
 80083c0:	3301      	adds	r3, #1
 80083c2:	4619      	mov	r1, r3
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	f04f 0400 	mov.w	r4, #0
 80083d0:	00d4      	lsls	r4, r2, #3
 80083d2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80083d6:	00cb      	lsls	r3, r1, #3
 80083d8:	4603      	mov	r3, r0
 80083da:	3301      	adds	r3, #1
 80083dc:	3307      	adds	r3, #7
 80083de:	08db      	lsrs	r3, r3, #3
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	ebad 0d03 	sub.w	sp, sp, r3
 80083e6:	466b      	mov	r3, sp
 80083e8:	3300      	adds	r3, #0
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
		buildRequest(&packet, msg);
 80083ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ee:	4619      	mov	r1, r3
 80083f0:	4828      	ldr	r0, [pc, #160]	; (8008494 <_Z19StartSocketSendTaskPKv+0x100>)
 80083f2:	f7fa ffad 	bl	8003350 <_Z12buildRequestP10SLMPPacketPh>
			uint16_t Size = 30;
 80083f6:	231e      	movs	r3, #30
 80083f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
			static SLMPPacket packet1;
 80083fa:	4b27      	ldr	r3, [pc, #156]	; (8008498 <_Z19StartSocketSendTaskPKv+0x104>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d108      	bne.n	8008418 <_Z19StartSocketSendTaskPKv+0x84>
 8008406:	4825      	ldr	r0, [pc, #148]	; (800849c <_Z19StartSocketSendTaskPKv+0x108>)
 8008408:	f7ff ff43 	bl	8008292 <_ZN10SLMPPacketC1Ev>
 800840c:	4b22      	ldr	r3, [pc, #136]	; (8008498 <_Z19StartSocketSendTaskPKv+0x104>)
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	4823      	ldr	r0, [pc, #140]	; (80084a0 <_Z19StartSocketSendTaskPKv+0x10c>)
 8008414:	f001 f8ca 	bl	80095ac <atexit>
			  for(;;)
			  {
				  socket_client.socket_send(msg, msg_len);
 8008418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800841a:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <_Z19StartSocketSendTaskPKv+0xfc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	4820      	ldr	r0, [pc, #128]	; (80084a4 <_Z19StartSocketSendTaskPKv+0x110>)
 8008424:	f7ff f99a 	bl	800775c <_ZN12SocketClient11socket_sendEPht>
				  osDelay(1000);
 8008428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800842c:	f7fd f9f1 	bl	8005812 <osDelay>
				  socket_client.socket_receive(rbuf, Size, rdmaInd);
 8008430:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008432:	f107 0118 	add.w	r1, r7, #24
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	481a      	ldr	r0, [pc, #104]	; (80084a4 <_Z19StartSocketSendTaskPKv+0x110>)
 800843a:	f7ff f9cb 	bl	80077d4 <_ZN12SocketClient14socket_receiveEPhtPm>
				  parseResponse(&packet1, rbuf);
 800843e:	f107 0318 	add.w	r3, r7, #24
 8008442:	4619      	mov	r1, r3
 8008444:	4815      	ldr	r0, [pc, #84]	; (800849c <_Z19StartSocketSendTaskPKv+0x108>)
 8008446:	f7fb fb44 	bl	8003ad2 <_Z13parseResponseP10SLMPPacketPh>
				  std::vector<unsigned char> v = packet1.value.getValue();
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4916      	ldr	r1, [pc, #88]	; (80084a8 <_Z19StartSocketSendTaskPKv+0x114>)
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff03 	bl	800825c <_ZN10ValueField8getValueEv>
				  char a = v[0];
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fa8c 	bl	800897a <_ZNSt6vectorIhSaIhEEixEj>
 8008462:	4603      	mov	r3, r0
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				  char b = v[1];
 800846a:	f107 030c 	add.w	r3, r7, #12
 800846e:	2101      	movs	r1, #1
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fa82 	bl	800897a <_ZNSt6vectorIhSaIhEEixEj>
 8008476:	4603      	mov	r3, r0
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				  //uart_helper.printf(rbuf);
				  osDelay(100);
 800847e:	2064      	movs	r0, #100	; 0x64
 8008480:	f7fd f9c7 	bl	8005812 <osDelay>
				  std::vector<unsigned char> v = packet1.value.getValue();
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fa19 	bl	80088c0 <_ZNSt6vectorIhSaIhEED1Ev>
			  }
 800848e:	e7c3      	b.n	8008418 <_Z19StartSocketSendTaskPKv+0x84>
 8008490:	200040f4 	.word	0x200040f4
 8008494:	200040a8 	.word	0x200040a8
 8008498:	20004144 	.word	0x20004144
 800849c:	200040f8 	.word	0x200040f8
 80084a0:	08008385 	.word	0x08008385
 80084a4:	20004090 	.word	0x20004090
 80084a8:	2000412c 	.word	0x2000412c

080084ac <_ZN10ValueFieldaSEOS_>:
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fa6b 	bl	8008998 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	7b1a      	ldrb	r2, [r3, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	731a      	strb	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <_ZN10SLMPPacketaSEOS_>:
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	8811      	ldrh	r1, [r2, #0]
 80084e4:	7892      	ldrb	r2, [r2, #2]
 80084e6:	8019      	strh	r1, [r3, #0]
 80084e8:	709a      	strb	r2, [r3, #2]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	3304      	adds	r3, #4
 80084f0:	3204      	adds	r2, #4
 80084f2:	8811      	ldrh	r1, [r2, #0]
 80084f4:	7892      	ldrb	r2, [r2, #2]
 80084f6:	8019      	strh	r1, [r3, #0]
 80084f8:	709a      	strb	r2, [r3, #2]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	8912      	ldrh	r2, [r2, #8]
 8008500:	811a      	strh	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	8952      	ldrh	r2, [r2, #10]
 8008508:	815a      	strh	r2, [r3, #10]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	320c      	adds	r2, #12
 8008512:	8811      	ldrh	r1, [r2, #0]
 8008514:	7892      	ldrb	r2, [r2, #2]
 8008516:	8019      	strh	r1, [r3, #0]
 8008518:	709a      	strb	r2, [r3, #2]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	8a12      	ldrh	r2, [r2, #16]
 8008520:	821a      	strh	r2, [r3, #16]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	3312      	adds	r3, #18
 8008528:	3212      	adds	r2, #18
 800852a:	8811      	ldrh	r1, [r2, #0]
 800852c:	7892      	ldrb	r2, [r2, #2]
 800852e:	8019      	strh	r1, [r3, #0]
 8008530:	709a      	strb	r2, [r3, #2]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	3316      	adds	r3, #22
 8008538:	3216      	adds	r2, #22
 800853a:	8811      	ldrh	r1, [r2, #0]
 800853c:	7892      	ldrb	r2, [r2, #2]
 800853e:	8019      	strh	r1, [r3, #0]
 8008540:	709a      	strb	r2, [r3, #2]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	331a      	adds	r3, #26
 8008548:	321a      	adds	r2, #26
 800854a:	8811      	ldrh	r1, [r2, #0]
 800854c:	7892      	ldrb	r2, [r2, #2]
 800854e:	8019      	strh	r1, [r3, #0]
 8008550:	709a      	strb	r2, [r3, #2]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	3320      	adds	r3, #32
 8008558:	3220      	adds	r2, #32
 800855a:	6811      	ldr	r1, [r2, #0]
 800855c:	6019      	str	r1, [r3, #0]
 800855e:	7912      	ldrb	r2, [r2, #4]
 8008560:	711a      	strb	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008568:	851a      	strh	r2, [r3, #40]	; 0x28
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	332a      	adds	r3, #42	; 0x2a
 8008570:	322a      	adds	r2, #42	; 0x2a
 8008572:	8811      	ldrh	r1, [r2, #0]
 8008574:	7892      	ldrb	r2, [r2, #2]
 8008576:	8019      	strh	r1, [r3, #0]
 8008578:	709a      	strb	r2, [r3, #2]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	332e      	adds	r3, #46	; 0x2e
 8008580:	322e      	adds	r2, #46	; 0x2e
 8008582:	8811      	ldrh	r1, [r2, #0]
 8008584:	7892      	ldrb	r2, [r2, #2]
 8008586:	8019      	strh	r1, [r3, #0]
 8008588:	709a      	strb	r2, [r3, #2]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	3334      	adds	r3, #52	; 0x34
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f7ff ff88 	bl	80084ac <_ZN10ValueFieldaSEOS_>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	3344      	adds	r3, #68	; 0x44
 80085a2:	3244      	adds	r2, #68	; 0x44
 80085a4:	8811      	ldrh	r1, [r2, #0]
 80085a6:	7892      	ldrb	r2, [r2, #2]
 80085a8:	8019      	strh	r1, [r3, #0]
 80085aa:	709a      	strb	r2, [r3, #2]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	3348      	adds	r3, #72	; 0x48
 80085b2:	3248      	adds	r2, #72	; 0x48
 80085b4:	8811      	ldrh	r1, [r2, #0]
 80085b6:	7892      	ldrb	r2, [r2, #2]
 80085b8:	8019      	strh	r1, [r3, #0]
 80085ba:	709a      	strb	r2, [r3, #2]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <prepareSLMPRequest>:

//	vTaskDelete( NULL );
}

void prepareSLMPRequest(void) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b0a0      	sub	sp, #128	; 0x80
 80085cc:	af00      	add	r7, sp, #0
	packet = SLMPPacket();
 80085ce:	1d3b      	adds	r3, r7, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff fe5e 	bl	8008292 <_ZN10SLMPPacketC1Ev>
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	4619      	mov	r1, r3
 80085da:	4863      	ldr	r0, [pc, #396]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80085dc:	f7ff ff7a 	bl	80084d4 <_ZN10SLMPPacketaSEOS_>
 80085e0:	1d3b      	adds	r3, r7, #4
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff fec0 	bl	8008368 <_ZN10SLMPPacketD1Ev>

		  packet.is_serial_no = Field<unsigned short, 2>(0x0050);
 80085e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80085ec:	2150      	movs	r1, #80	; 0x50
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fb f8b3 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 80085f4:	4b5c      	ldr	r3, [pc, #368]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80085f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	4611      	mov	r1, r2
 80085fe:	8019      	strh	r1, [r3, #0]
 8008600:	3302      	adds	r3, #2
 8008602:	0c12      	lsrs	r2, r2, #16
 8008604:	701a      	strb	r2, [r3, #0]
		  packet.is_serial_no.exist = true;
 8008606:	4b58      	ldr	r3, [pc, #352]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008608:	2201      	movs	r2, #1
 800860a:	709a      	strb	r2, [r3, #2]

		  packet.request_dest_net_no = Field<unsigned char, 1>(0x0);
 800860c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f9d5 	bl	80089c2 <_ZN5FieldIhLj1EEC1Eh>
 8008618:	4a53      	ldr	r2, [pc, #332]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800861a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800861e:	8113      	strh	r3, [r2, #8]
		  packet.request_dest_net_no.exist = true;
 8008620:	4b51      	ldr	r3, [pc, #324]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008622:	2201      	movs	r2, #1
 8008624:	725a      	strb	r2, [r3, #9]

		  packet.request_dest_station_no = Field<unsigned char, 1>(0xff);
 8008626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800862a:	21ff      	movs	r1, #255	; 0xff
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f9c8 	bl	80089c2 <_ZN5FieldIhLj1EEC1Eh>
 8008632:	4a4d      	ldr	r2, [pc, #308]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008634:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008638:	8153      	strh	r3, [r2, #10]
		  packet.request_dest_station_no.exist = true;
 800863a:	4b4b      	ldr	r3, [pc, #300]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800863c:	2201      	movs	r2, #1
 800863e:	72da      	strb	r2, [r3, #11]

		  packet.request_processor = Field<unsigned short, 2>(0x3ff);
 8008640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008644:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008648:	4618      	mov	r0, r3
 800864a:	f7fb f886 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 800864e:	4b46      	ldr	r3, [pc, #280]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008650:	330c      	adds	r3, #12
 8008652:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	4611      	mov	r1, r2
 800865a:	8019      	strh	r1, [r3, #0]
 800865c:	3302      	adds	r3, #2
 800865e:	0c12      	lsrs	r2, r2, #16
 8008660:	701a      	strb	r2, [r3, #0]
		  packet.request_processor.exist = true;
 8008662:	4b41      	ldr	r3, [pc, #260]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008664:	2201      	movs	r2, #1
 8008666:	739a      	strb	r2, [r3, #14]

		  packet.request_reserved = Field<unsigned char, 1>(0x0);
 8008668:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f9a7 	bl	80089c2 <_ZN5FieldIhLj1EEC1Eh>
 8008674:	4a3c      	ldr	r2, [pc, #240]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008676:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800867a:	8213      	strh	r3, [r2, #16]
		  packet.request_reserved.exist = true;
 800867c:	4b3a      	ldr	r3, [pc, #232]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800867e:	2201      	movs	r2, #1
 8008680:	745a      	strb	r2, [r3, #17]

		  packet.monitoring_time = Field<unsigned short, 2>(0x1);
 8008682:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008686:	2101      	movs	r1, #1
 8008688:	4618      	mov	r0, r3
 800868a:	f7fb f866 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 800868e:	4b36      	ldr	r3, [pc, #216]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008690:	3312      	adds	r3, #18
 8008692:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008696:	8811      	ldrh	r1, [r2, #0]
 8008698:	7892      	ldrb	r2, [r2, #2]
 800869a:	8019      	strh	r1, [r3, #0]
 800869c:	709a      	strb	r2, [r3, #2]
		  packet.monitoring_time.exist = true;
 800869e:	4b32      	ldr	r3, [pc, #200]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	751a      	strb	r2, [r3, #20]

		  packet.command = Field<unsigned short, 2>(0x0401);
 80086a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80086a8:	f240 4101 	movw	r1, #1025	; 0x401
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fb f854 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 80086b2:	4b2d      	ldr	r3, [pc, #180]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80086b4:	3316      	adds	r3, #22
 80086b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80086ba:	8811      	ldrh	r1, [r2, #0]
 80086bc:	7892      	ldrb	r2, [r2, #2]
 80086be:	8019      	strh	r1, [r3, #0]
 80086c0:	709a      	strb	r2, [r3, #2]
		  //packet.command = Field<unsigned short, 2>(0x1401);
		  packet.command.exist = true;
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	761a      	strb	r2, [r3, #24]

		  packet.subcommand = Field<unsigned short, 2>(0x0);
 80086c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fb f843 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 80086d4:	4b24      	ldr	r3, [pc, #144]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80086d6:	331a      	adds	r3, #26
 80086d8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80086dc:	8811      	ldrh	r1, [r2, #0]
 80086de:	7892      	ldrb	r2, [r2, #2]
 80086e0:	8019      	strh	r1, [r3, #0]
 80086e2:	709a      	strb	r2, [r3, #2]
		  packet.subcommand.exist = true;
 80086e4:	4b20      	ldr	r3, [pc, #128]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	771a      	strb	r2, [r3, #28]

		  packet.head_device_no = Field<unsigned int, 3>(100);
 80086ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80086ee:	2164      	movs	r1, #100	; 0x64
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f979 	bl	80089e8 <_ZN5FieldIjLj3EEC1Ej>
 80086f6:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <prepareSLMPRequest+0x1a0>)
 80086f8:	3320      	adds	r3, #32
 80086fa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80086fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008702:	6018      	str	r0, [r3, #0]
 8008704:	3304      	adds	r3, #4
 8008706:	7019      	strb	r1, [r3, #0]
		  packet.head_device_no.exist = true;
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  packet.device_code = Field<unsigned char, 1>(0xa8);
 8008710:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008714:	21a8      	movs	r1, #168	; 0xa8
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f953 	bl	80089c2 <_ZN5FieldIhLj1EEC1Eh>
 800871c:	4a12      	ldr	r2, [pc, #72]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800871e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008722:	8513      	strh	r3, [r2, #40]	; 0x28
		  packet.device_code.exist = true;
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

		  packet.no_of_device_points = Field<unsigned short, 2>(0x2);
 800872c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008730:	2102      	movs	r1, #2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fb f811 	bl	800375a <_ZN5FieldItLj2EEC1Et>
 8008738:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800873a:	332a      	adds	r3, #42	; 0x2a
 800873c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008740:	8811      	ldrh	r1, [r2, #0]
 8008742:	7892      	ldrb	r2, [r2, #2]
 8008744:	8019      	strh	r1, [r3, #0]
 8008746:	709a      	strb	r2, [r3, #2]
		  packet.no_of_device_points.exist = true;
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <prepareSLMPRequest+0x1a0>)
 800874a:	2201      	movs	r2, #1
 800874c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//		  packet.value = ValueField({12, '\x00', 14, '\x00'});
//		  packet.value.exist = true;

		  msg_len = getMsgLen(&packet);
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <prepareSLMPRequest+0x1a0>)
 8008752:	f7fa fef2 	bl	800353a <_Z9getMsgLenP10SLMPPacket>
 8008756:	4603      	mov	r3, r0
 8008758:	461a      	mov	r2, r3
 800875a:	4b04      	ldr	r3, [pc, #16]	; (800876c <prepareSLMPRequest+0x1a4>)
 800875c:	601a      	str	r2, [r3, #0]
}
 800875e:	bf00      	nop
 8008760:	3780      	adds	r7, #128	; 0x80
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200040a8 	.word	0x200040a8
 800876c:	200040f4 	.word	0x200040f4

08008770 <setup>:

void setup(UART_HandleTypeDef *main_huart, SPI_HandleTypeDef *main_hspi1,
		TIM_HandleTypeDef *main_htim, TIM_HandleTypeDef *main_htim2,
		TIM_HandleTypeDef *main_encoder_htim1, TIM_HandleTypeDef *main_encoder_htim2)
{
 8008770:	b5b0      	push	{r4, r5, r7, lr}
 8008772:	b092      	sub	sp, #72	; 0x48
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]

	  huart = main_huart;
 800877e:	4a20      	ldr	r2, [pc, #128]	; (8008800 <setup+0x90>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6013      	str	r3, [r2, #0]
	  hspi = main_hspi1;
 8008784:	4a1f      	ldr	r2, [pc, #124]	; (8008804 <setup+0x94>)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	6013      	str	r3, [r2, #0]
	  uart_helper.init(huart);
 800878a:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <setup+0x90>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	481d      	ldr	r0, [pc, #116]	; (8008808 <setup+0x98>)
 8008792:	f7ff f8e7 	bl	8007964 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>

	  socket_client.init(hspi, &uart_helper);
 8008796:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <setup+0x94>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1b      	ldr	r2, [pc, #108]	; (8008808 <setup+0x98>)
 800879c:	4619      	mov	r1, r3
 800879e:	481b      	ldr	r0, [pc, #108]	; (800880c <setup+0x9c>)
 80087a0:	f7fe ff62 	bl	8007668 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>
	  HAL_Delay(1000 * 2);
 80087a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80087a8:	f7f7 ff34 	bl	8000614 <HAL_Delay>
	  socket_client.socket_connect();
 80087ac:	4817      	ldr	r0, [pc, #92]	; (800880c <setup+0x9c>)
 80087ae:	f7fe ffbf 	bl	8007730 <_ZN12SocketClient14socket_connectEv>

	  prepareSLMPRequest();
 80087b2:	f7ff ff09 	bl	80085c8 <prepareSLMPRequest>
	  //****** UART **********
	  osThreadDef(UartTask, StartUARTTask, osPriorityNormal, 1, 256);
 80087b6:	4b16      	ldr	r3, [pc, #88]	; (8008810 <setup+0xa0>)
 80087b8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80087bc:	461d      	mov	r5, r3
 80087be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(UartTask), NULL);
 80087ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fc ffd2 	bl	800577a <osThreadCreate>
	  //****** UART Test ***************
//	  osThreadDef(SecondTask, StartSecondTask, osPriorityNormal, 1, 256);
//	  osThreadCreate(osThread(SecondTask), NULL);

	  //******* Socket Test *************
	  osThreadDef(SocketSendTask, StartSocketSendTask, osPriorityNormal, 1, 2000);
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <setup+0xa4>)
 80087d8:	f107 0410 	add.w	r4, r7, #16
 80087dc:	461d      	mov	r5, r3
 80087de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(SocketSendTask), NULL);
 80087ea:	f107 0310 	add.w	r3, r7, #16
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fc ffc2 	bl	800577a <osThreadCreate>
}
 80087f6:	bf00      	nop
 80087f8:	3748      	adds	r7, #72	; 0x48
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bdb0      	pop	{r4, r5, r7, pc}
 80087fe:	bf00      	nop
 8008800:	2000407c 	.word	0x2000407c
 8008804:	20004080 	.word	0x20004080
 8008808:	20004084 	.word	0x20004084
 800880c:	20004090 	.word	0x20004090
 8008810:	0800a144 	.word	0x0800a144
 8008814:	0800a170 	.word	0x0800a170

08008818 <_Znwj>:

void * operator new( size_t size )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe fd2f 	bl	8007284 <pvPortMalloc>
 8008826:	4603      	mov	r3, r0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe fde5 	bl	8007408 <vPortFree>
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8008846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008848:	b085      	sub	sp, #20
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8008850:	687c      	ldr	r4, [r7, #4]
 8008852:	6838      	ldr	r0, [r7, #0]
 8008854:	f7fa ff33 	bl	80036be <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8008858:	4605      	mov	r5, r0
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f7fb fa41 	bl	8003ce4 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008862:	4602      	mov	r2, r0
 8008864:	f107 030c 	add.w	r3, r7, #12
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f8ce 	bl	8008a0c <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>
 8008870:	f107 030c 	add.w	r3, r7, #12
 8008874:	461a      	mov	r2, r3
 8008876:	4629      	mov	r1, r5
 8008878:	4620      	mov	r0, r4
 800887a:	f000 f8ed 	bl	8008a58 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
 800887e:	f107 030c 	add.w	r3, r7, #12
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f8d0 	bl	8008a28 <_ZNSaIhED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8008888:	6838      	ldr	r0, [r7, #0]
 800888a:	f000 f912 	bl	8008ab2 <_ZNKSt6vectorIhSaIhEE5beginEv>
 800888e:	4605      	mov	r5, r0
 8008890:	6838      	ldr	r0, [r7, #0]
 8008892:	f000 f922 	bl	8008ada <_ZNKSt6vectorIhSaIhEE3endEv>
 8008896:	4606      	mov	r6, r0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fb fa2b 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80088a4:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80088a6:	4622      	mov	r2, r4
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 f929 	bl	8008b02 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 80088b0:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	605a      	str	r2, [r3, #4]
      }
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088c0 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80088c0:	b5b0      	push	{r4, r5, r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681c      	ldr	r4, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fb fa11 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80088d8:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80088da:	461a      	mov	r2, r3
 80088dc:	4629      	mov	r1, r5
 80088de:	4620      	mov	r0, r4
 80088e0:	f7fb fa16 	bl	8003d10 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f8ca 	bl	8008a80 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bdb0      	pop	{r4, r5, r7, pc}

080088f6 <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 f90f 	bl	8008b24 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <_ZN5FieldItLj2EEC1Ev>:
	Field() {}
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	709a      	strb	r2, [r3, #2]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <_ZN5FieldIhLj1EEC1Ev>:
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	705a      	strb	r2, [r3, #1]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <_ZN5FieldIjLj3EEC1Ev>:
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	711a      	strb	r2, [r3, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	4413      	add	r3, r2
      }
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80089a2:	2301      	movs	r3, #1
 80089a4:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	f7ff ffdc 	bl	8008964 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 80089ac:	4603      	mov	r3, r0
 80089ae:	4622      	mov	r2, r4
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8c3 	bl	8008b3e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80089b8:	687b      	ldr	r3, [r7, #4]
      }
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd90      	pop	{r4, r7, pc}

080089c2 <_ZN5FieldIhLj1EEC1Eh>:
	Field(ValueType value) {
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	705a      	strb	r2, [r3, #1]
		data.value = value;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	701a      	strb	r2, [r3, #0]
	}
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <_ZN5FieldIjLj3EEC1Ej>:
	Field(ValueType value) {
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	711a      	strb	r2, [r3, #4]
		data.value = value;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	601a      	str	r2, [r3, #0]
	}
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f8cd 	bl	8008bba <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f8dd 	bl	8008bf0 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ffed 	bl	8008a28 <_ZNSaIhED1Ev>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f8cc 	bl	8008c06 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f8df 	bl	8008c34 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6819      	ldr	r1, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7fb f9fa 	bl	8003e94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff ffcc 	bl	8008a40 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	f107 020c 	add.w	r2, r7, #12
 8008ac4:	f107 0308 	add.w	r3, r7, #8
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f8cc 	bl	8008c68 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	f107 020c 	add.w	r2, r7, #12
 8008aec:	f107 0308 	add.w	r3, r7, #8
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f8b8 	bl	8008c68 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f8b7 	bl	8008c88 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f8bc 	bl	8008cac <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 8008b3e:	b590      	push	{r4, r7, lr}
 8008b40:	b089      	sub	sp, #36	; 0x24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	f107 031c 	add.w	r3, r7, #28
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f8f5 	bl	8008d42 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8008b58:	f107 021c 	add.w	r2, r7, #28
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f8fe 	bl	8008d64 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8008b68:	f107 031c 	add.w	r3, r7, #28
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff ff5b 	bl	8008a28 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f107 0210 	add.w	r2, r7, #16
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f8c1 	bl	8008d02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	this->_M_impl._M_swap_data(__x._M_impl);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f8bb 	bl	8008d02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fb f8b3 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008b94:	4604      	mov	r4, r0
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fb f8ae 	bl	8003cfa <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 f8ed 	bl	8008d82 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fe87 	bl	80088c0 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 8008bb2:	bf00      	nop
 8008bb4:	3724      	adds	r7, #36	; 0x24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd90      	pop	{r4, r7, pc}

08008bba <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f804 	bl	8008bd4 <_ZNSaIhEC1ERKS_>
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f8dc 	bl	8008d9e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ffde 	bl	8008bd4 <_ZNSaIhEC1ERKS_>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	605a      	str	r2, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	609a      	str	r2, [r3, #8]
	{ }
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7fb f9c8 	bl	8003fd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8008c46:	4602      	mov	r2, r0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	441a      	add	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
      }
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008c94:	2301      	movs	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f88a 	bl	8008db6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8008ca2:	4603      	mov	r3, r0
    }
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f88e 	bl	8008dd6 <_ZNSaIhEC1Ev>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	605a      	str	r2, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	609a      	str	r2, [r3, #8]
	{ }
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f896 	bl	8008e44 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_finish, __x._M_finish);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f000 f88e 	bl	8008e44 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f103 0208 	add.w	r2, r3, #8
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f000 f885 	bl	8008e44 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	}
 8008d3a:	bf00      	nop
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8008d4c:	6838      	ldr	r0, [r7, #0]
 8008d4e:	f7fa ffc9 	bl	8003ce4 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008d52:	4603      	mov	r3, r0
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ff3c 	bl	8008bd4 <_ZNSaIhEC1ERKS_>
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f885 	bl	8008e82 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f885 	bl	8008ea0 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f877 	bl	8008eba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f883 	bl	8008eea <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f881 	bl	8008f00 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8008e16:	2301      	movs	r3, #1
 8008e18:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7fa fde4 	bl	80039ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8008e24:	4603      	mov	r3, r0
    }
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff ffed 	bl	8008e2e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8008e54:	4603      	mov	r3, r0
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8008e5a:	6838      	ldr	r0, [r7, #0]
 8008e5c:	f7ff ffe7 	bl	8008e2e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8008e60:	4603      	mov	r3, r0
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8008e68:	f107 030c 	add.w	r3, r7, #12
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff ffde 	bl	8008e2e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8008e72:	4603      	mov	r3, r0
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	601a      	str	r2, [r3, #0]
    }
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff feb8 	bl	8008c06 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8008eac:	68b8      	ldr	r0, [r7, #8]
 8008eae:	f7ff ff1d 	bl	8008cec <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8008eba:	b590      	push	{r4, r7, lr}
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff ff05 	bl	8008cd6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	68b8      	ldr	r0, [r7, #8]
 8008ed0:	f7ff ff01 	bl	8008cd6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8008ed4:	4603      	mov	r3, r0
	       __result));
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 f81b 	bl	8008f16 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8008ee0:	4603      	mov	r3, r0
    }
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd90      	pop	{r4, r7, pc}

08008eea <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008f16:	b5b0      	push	{r4, r5, r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff ff63 	bl	8008dee <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	68b8      	ldr	r0, [r7, #8]
 8008f2c:	f7ff ff5f 	bl	8008dee <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8008f30:	4605      	mov	r5, r0
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fa fce4 	bl	8003900 <_ZSt12__niter_baseIPhET_S1_>
 8008f38:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7ff ff63 	bl	8008e0a <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8008f44:	4603      	mov	r3, r0
    }
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f50 <_Z41__static_initialization_and_destruction_0ii>:

void operator delete[]( void * ptr )
{
    vPortFree ( ptr );
}
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d10d      	bne.n	8008f7c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d108      	bne.n	8008f7c <_Z41__static_initialization_and_destruction_0ii+0x2c>
UartHelper uart_helper;
 8008f6a:	480f      	ldr	r0, [pc, #60]	; (8008fa8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8008f6c:	f7fe fcc4 	bl	80078f8 <_ZN10UartHelperC1Ev>
SocketClient socket_client;
 8008f70:	480e      	ldr	r0, [pc, #56]	; (8008fac <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008f72:	f7fe fb5d 	bl	8007630 <_ZN12SocketClientC1Ev>
SLMPPacket packet;
 8008f76:	480e      	ldr	r0, [pc, #56]	; (8008fb0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008f78:	f7ff f98b 	bl	8008292 <_ZN10SLMPPacketC1Ev>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10d      	bne.n	8008f9e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d108      	bne.n	8008f9e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8008f8c:	4808      	ldr	r0, [pc, #32]	; (8008fb0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008f8e:	f7ff f9eb 	bl	8008368 <_ZN10SLMPPacketD1Ev>
SocketClient socket_client;
 8008f92:	4806      	ldr	r0, [pc, #24]	; (8008fac <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008f94:	f7fe fba2 	bl	80076dc <_ZN12SocketClientD1Ev>
UartHelper uart_helper;
 8008f98:	4803      	ldr	r0, [pc, #12]	; (8008fa8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8008f9a:	f7fe fcc3 	bl	8007924 <_ZN10UartHelperD1Ev>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20004084 	.word	0x20004084
 8008fac:	20004090 	.word	0x20004090
 8008fb0:	200040a8 	.word	0x200040a8

08008fb4 <_GLOBAL__sub_I_huart>:
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	f7ff ffc7 	bl	8008f50 <_Z41__static_initialization_and_destruction_0ii>
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <_GLOBAL__sub_D_huart>:
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f7ff ffbf 	bl	8008f50 <_Z41__static_initialization_and_destruction_0ii>
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
 8008fde:	4b12      	ldr	r3, [pc, #72]	; (8009028 <HAL_MspInit+0x54>)
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	4a11      	ldr	r2, [pc, #68]	; (8009028 <HAL_MspInit+0x54>)
 8008fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <HAL_MspInit+0x54>)
 8008fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <HAL_MspInit+0x54>)
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	4a0a      	ldr	r2, [pc, #40]	; (8009028 <HAL_MspInit+0x54>)
 8009000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009004:	6413      	str	r3, [r2, #64]	; 0x40
 8009006:	4b08      	ldr	r3, [pc, #32]	; (8009028 <HAL_MspInit+0x54>)
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009012:	2200      	movs	r2, #0
 8009014:	210f      	movs	r1, #15
 8009016:	f06f 0001 	mvn.w	r0, #1
 800901a:	f7f7 fbd5 	bl	80007c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40023800 	.word	0x40023800

0800902c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	605a      	str	r2, [r3, #4]
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	60da      	str	r2, [r3, #12]
 8009042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a19      	ldr	r2, [pc, #100]	; (80090b0 <HAL_SPI_MspInit+0x84>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d12b      	bne.n	80090a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800904e:	2300      	movs	r3, #0
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <HAL_SPI_MspInit+0x88>)
 8009054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009056:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <HAL_SPI_MspInit+0x88>)
 8009058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800905c:	6453      	str	r3, [r2, #68]	; 0x44
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <HAL_SPI_MspInit+0x88>)
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <HAL_SPI_MspInit+0x88>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	4a10      	ldr	r2, [pc, #64]	; (80090b4 <HAL_SPI_MspInit+0x88>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	6313      	str	r3, [r2, #48]	; 0x30
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <HAL_SPI_MspInit+0x88>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009086:	23e0      	movs	r3, #224	; 0xe0
 8009088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800908a:	2302      	movs	r3, #2
 800908c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009092:	2303      	movs	r3, #3
 8009094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009096:	2305      	movs	r3, #5
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800909a:	f107 0314 	add.w	r3, r7, #20
 800909e:	4619      	mov	r1, r3
 80090a0:	4805      	ldr	r0, [pc, #20]	; (80090b8 <HAL_SPI_MspInit+0x8c>)
 80090a2:	f7f7 fbbb 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80090a6:	bf00      	nop
 80090a8:	3728      	adds	r7, #40	; 0x28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40013000 	.word	0x40013000
 80090b4:	40023800 	.word	0x40023800
 80090b8:	40020000 	.word	0x40020000

080090bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08c      	sub	sp, #48	; 0x30
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c4:	f107 031c 	add.w	r3, r7, #28
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	60da      	str	r2, [r3, #12]
 80090d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a32      	ldr	r2, [pc, #200]	; (80091a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d12d      	bne.n	800913a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80090de:	2300      	movs	r3, #0
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	4b31      	ldr	r3, [pc, #196]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	4a30      	ldr	r2, [pc, #192]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	6453      	str	r3, [r2, #68]	; 0x44
 80090ee:	4b2e      	ldr	r3, [pc, #184]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	4b2a      	ldr	r3, [pc, #168]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	4a29      	ldr	r2, [pc, #164]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	6313      	str	r3, [r2, #48]	; 0x30
 800910a:	4b27      	ldr	r3, [pc, #156]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800910c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800911a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800911c:	2302      	movs	r3, #2
 800911e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009120:	2300      	movs	r3, #0
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009124:	2300      	movs	r3, #0
 8009126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009128:	2301      	movs	r3, #1
 800912a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800912c:	f107 031c 	add.w	r3, r7, #28
 8009130:	4619      	mov	r1, r3
 8009132:	481e      	ldr	r0, [pc, #120]	; (80091ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8009134:	f7f7 fb72 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8009138:	e030      	b.n	800919c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009142:	d12b      	bne.n	800919c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009144:	2300      	movs	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	4a16      	ldr	r2, [pc, #88]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800914e:	f043 0301 	orr.w	r3, r3, #1
 8009152:	6413      	str	r3, [r2, #64]	; 0x40
 8009154:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	6313      	str	r3, [r2, #48]	; 0x30
 8009170:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800917c:	2303      	movs	r3, #3
 800917e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009180:	2302      	movs	r3, #2
 8009182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	2300      	movs	r3, #0
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009188:	2300      	movs	r3, #0
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800918c:	2301      	movs	r3, #1
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009190:	f107 031c 	add.w	r3, r7, #28
 8009194:	4619      	mov	r1, r3
 8009196:	4805      	ldr	r0, [pc, #20]	; (80091ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8009198:	f7f7 fb40 	bl	800081c <HAL_GPIO_Init>
}
 800919c:	bf00      	nop
 800919e:	3730      	adds	r7, #48	; 0x30
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	40010000 	.word	0x40010000
 80091a8:	40023800 	.word	0x40023800
 80091ac:	40020000 	.word	0x40020000

080091b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a0b      	ldr	r2, [pc, #44]	; (80091ec <HAL_TIM_Base_MspInit+0x3c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d10d      	bne.n	80091de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <HAL_TIM_Base_MspInit+0x40>)
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <HAL_TIM_Base_MspInit+0x40>)
 80091cc:	f043 0302 	orr.w	r3, r3, #2
 80091d0:	6413      	str	r3, [r2, #64]	; 0x40
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <HAL_TIM_Base_MspInit+0x40>)
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40023800 	.word	0x40023800

080091f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	; 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091fc:	f107 0314 	add.w	r3, r7, #20
 8009200:	2200      	movs	r2, #0
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	605a      	str	r2, [r3, #4]
 8009206:	609a      	str	r2, [r3, #8]
 8009208:	60da      	str	r2, [r3, #12]
 800920a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a21      	ldr	r2, [pc, #132]	; (8009298 <HAL_TIM_MspPostInit+0xa4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d13c      	bne.n	8009290 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009216:	2300      	movs	r3, #0
 8009218:	613b      	str	r3, [r7, #16]
 800921a:	4b20      	ldr	r3, [pc, #128]	; (800929c <HAL_TIM_MspPostInit+0xa8>)
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	4a1f      	ldr	r2, [pc, #124]	; (800929c <HAL_TIM_MspPostInit+0xa8>)
 8009220:	f043 0302 	orr.w	r3, r3, #2
 8009224:	6313      	str	r3, [r2, #48]	; 0x30
 8009226:	4b1d      	ldr	r3, [pc, #116]	; (800929c <HAL_TIM_MspPostInit+0xa8>)
 8009228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	613b      	str	r3, [r7, #16]
 8009230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	4b19      	ldr	r3, [pc, #100]	; (800929c <HAL_TIM_MspPostInit+0xa8>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	4a18      	ldr	r2, [pc, #96]	; (800929c <HAL_TIM_MspPostInit+0xa8>)
 800923c:	f043 0304 	orr.w	r3, r3, #4
 8009240:	6313      	str	r3, [r2, #48]	; 0x30
 8009242:	4b16      	ldr	r3, [pc, #88]	; (800929c <HAL_TIM_MspPostInit+0xa8>)
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800924e:	2332      	movs	r3, #50	; 0x32
 8009250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009252:	2302      	movs	r3, #2
 8009254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009256:	2300      	movs	r3, #0
 8009258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800925a:	2300      	movs	r3, #0
 800925c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800925e:	2302      	movs	r3, #2
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009262:	f107 0314 	add.w	r3, r7, #20
 8009266:	4619      	mov	r1, r3
 8009268:	480d      	ldr	r0, [pc, #52]	; (80092a0 <HAL_TIM_MspPostInit+0xac>)
 800926a:	f7f7 fad7 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800926e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009274:	2302      	movs	r3, #2
 8009276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800927c:	2300      	movs	r3, #0
 800927e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009280:	2302      	movs	r3, #2
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	4619      	mov	r1, r3
 800928a:	4806      	ldr	r0, [pc, #24]	; (80092a4 <HAL_TIM_MspPostInit+0xb0>)
 800928c:	f7f7 fac6 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009290:	bf00      	nop
 8009292:	3728      	adds	r7, #40	; 0x28
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40000400 	.word	0x40000400
 800929c:	40023800 	.word	0x40023800
 80092a0:	40020400 	.word	0x40020400
 80092a4:	40020800 	.word	0x40020800

080092a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	; 0x28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092b0:	f107 0314 	add.w	r3, r7, #20
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	609a      	str	r2, [r3, #8]
 80092bc:	60da      	str	r2, [r3, #12]
 80092be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a19      	ldr	r2, [pc, #100]	; (800932c <HAL_UART_MspInit+0x84>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d12b      	bne.n	8009322 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	4b18      	ldr	r3, [pc, #96]	; (8009330 <HAL_UART_MspInit+0x88>)
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	4a17      	ldr	r2, [pc, #92]	; (8009330 <HAL_UART_MspInit+0x88>)
 80092d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d8:	6413      	str	r3, [r2, #64]	; 0x40
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <HAL_UART_MspInit+0x88>)
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	4b11      	ldr	r3, [pc, #68]	; (8009330 <HAL_UART_MspInit+0x88>)
 80092ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ee:	4a10      	ldr	r2, [pc, #64]	; (8009330 <HAL_UART_MspInit+0x88>)
 80092f0:	f043 0301 	orr.w	r3, r3, #1
 80092f4:	6313      	str	r3, [r2, #48]	; 0x30
 80092f6:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <HAL_UART_MspInit+0x88>)
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009302:	230c      	movs	r3, #12
 8009304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009306:	2302      	movs	r3, #2
 8009308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800930a:	2301      	movs	r3, #1
 800930c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800930e:	2303      	movs	r3, #3
 8009310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009312:	2307      	movs	r3, #7
 8009314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009316:	f107 0314 	add.w	r3, r7, #20
 800931a:	4619      	mov	r1, r3
 800931c:	4805      	ldr	r0, [pc, #20]	; (8009334 <HAL_UART_MspInit+0x8c>)
 800931e:	f7f7 fa7d 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009322:	bf00      	nop
 8009324:	3728      	adds	r7, #40	; 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	40004400 	.word	0x40004400
 8009330:	40023800 	.word	0x40023800
 8009334:	40020000 	.word	0x40020000

08009338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08c      	sub	sp, #48	; 0x30
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8009348:	2200      	movs	r2, #0
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	201e      	movs	r0, #30
 800934e:	f7f7 fa3b 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8009352:	201e      	movs	r0, #30
 8009354:	f7f7 fa54 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	4b1f      	ldr	r3, [pc, #124]	; (80093dc <HAL_InitTick+0xa4>)
 800935e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009360:	4a1e      	ldr	r2, [pc, #120]	; (80093dc <HAL_InitTick+0xa4>)
 8009362:	f043 0304 	orr.w	r3, r3, #4
 8009366:	6413      	str	r3, [r2, #64]	; 0x40
 8009368:	4b1c      	ldr	r3, [pc, #112]	; (80093dc <HAL_InitTick+0xa4>)
 800936a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009374:	f107 0210 	add.w	r2, r7, #16
 8009378:	f107 0314 	add.w	r3, r7, #20
 800937c:	4611      	mov	r1, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f7f8 f83c 	bl	80013fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009384:	f7f8 f812 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8009388:	4603      	mov	r3, r0
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	4a13      	ldr	r2, [pc, #76]	; (80093e0 <HAL_InitTick+0xa8>)
 8009392:	fba2 2303 	umull	r2, r3, r2, r3
 8009396:	0c9b      	lsrs	r3, r3, #18
 8009398:	3b01      	subs	r3, #1
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800939c:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <HAL_InitTick+0xac>)
 800939e:	4a12      	ldr	r2, [pc, #72]	; (80093e8 <HAL_InitTick+0xb0>)
 80093a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <HAL_InitTick+0xac>)
 80093a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80093a8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80093aa:	4a0e      	ldr	r2, [pc, #56]	; (80093e4 <HAL_InitTick+0xac>)
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80093b0:	4b0c      	ldr	r3, [pc, #48]	; (80093e4 <HAL_InitTick+0xac>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093b6:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <HAL_InitTick+0xac>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80093bc:	4809      	ldr	r0, [pc, #36]	; (80093e4 <HAL_InitTick+0xac>)
 80093be:	f7f8 fda3 	bl	8001f08 <HAL_TIM_Base_Init>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80093c8:	4806      	ldr	r0, [pc, #24]	; (80093e4 <HAL_InitTick+0xac>)
 80093ca:	f7f8 fdc8 	bl	8001f5e <HAL_TIM_Base_Start_IT>
 80093ce:	4603      	mov	r3, r0
 80093d0:	e000      	b.n	80093d4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3730      	adds	r7, #48	; 0x30
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	40023800 	.word	0x40023800
 80093e0:	431bde83 	.word	0x431bde83
 80093e4:	20004344 	.word	0x20004344
 80093e8:	40000800 	.word	0x40000800

080093ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80093f0:	bf00      	nop
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093fa:	b480      	push	{r7}
 80093fc:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 80093fe:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8009400:	bf00      	nop
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800940a:	b480      	push	{r7}
 800940c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800940e:	e7fe      	b.n	800940e <MemManage_Handler+0x4>

08009410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009414:	e7fe      	b.n	8009414 <BusFault_Handler+0x4>

08009416 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009416:	b480      	push	{r7}
 8009418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800941a:	e7fe      	b.n	800941a <UsageFault_Handler+0x4>

0800941c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009420:	bf00      	nop
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800942e:	2004      	movs	r0, #4
 8009430:	f7f7 fb90 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009434:	bf00      	nop
 8009436:	bd80      	pop	{r7, pc}

08009438 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800943c:	2008      	movs	r0, #8
 800943e:	f7f7 fb89 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8009442:	bf00      	nop
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800944c:	4802      	ldr	r0, [pc, #8]	; (8009458 <TIM4_IRQHandler+0x10>)
 800944e:	f7f8 fe71 	bl	8002134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009452:	bf00      	nop
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20004344 	.word	0x20004344

0800945c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8009460:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009464:	f7f7 fb76 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8009468:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800946c:	f7f7 fb72 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009470:	bf00      	nop
 8009472:	bd80      	pop	{r7, pc}

08009474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
	return 1;
 8009478:	2301      	movs	r3, #1
}
 800947a:	4618      	mov	r0, r3
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <_kill>:

int _kill(int pid, int sig)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800948e:	f000 f893 	bl	80095b8 <__errno>
 8009492:	4602      	mov	r2, r0
 8009494:	2316      	movs	r3, #22
 8009496:	6013      	str	r3, [r2, #0]
	return -1;
 8009498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <_exit>:

void _exit (int status)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80094ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff ffe7 	bl	8009484 <_kill>
	while (1) {}		/* Make sure we hang here */
 80094b6:	e7fe      	b.n	80094b6 <_exit+0x12>

080094b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094c0:	4b11      	ldr	r3, [pc, #68]	; (8009508 <_sbrk+0x50>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <_sbrk+0x16>
		heap_end = &end;
 80094c8:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <_sbrk+0x50>)
 80094ca:	4a10      	ldr	r2, [pc, #64]	; (800950c <_sbrk+0x54>)
 80094cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80094ce:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <_sbrk+0x50>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <_sbrk+0x50>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	466a      	mov	r2, sp
 80094de:	4293      	cmp	r3, r2
 80094e0:	d907      	bls.n	80094f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80094e2:	f000 f869 	bl	80095b8 <__errno>
 80094e6:	4602      	mov	r2, r0
 80094e8:	230c      	movs	r3, #12
 80094ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f0:	e006      	b.n	8009500 <_sbrk+0x48>
	}

	heap_end += incr;
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <_sbrk+0x50>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	4a03      	ldr	r2, [pc, #12]	; (8009508 <_sbrk+0x50>)
 80094fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80094fe:	68fb      	ldr	r3, [r7, #12]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20004148 	.word	0x20004148
 800950c:	20004388 	.word	0x20004388

08009510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009514:	4b08      	ldr	r3, [pc, #32]	; (8009538 <SystemInit+0x28>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <SystemInit+0x28>)
 800951c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009524:	4b04      	ldr	r3, [pc, #16]	; (8009538 <SystemInit+0x28>)
 8009526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800952a:	609a      	str	r2, [r3, #8]
#endif
}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	e000ed00 	.word	0xe000ed00

0800953c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800953c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009574 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009542:	e003      	b.n	800954c <LoopCopyDataInit>

08009544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800954a:	3104      	adds	r1, #4

0800954c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800954c:	480b      	ldr	r0, [pc, #44]	; (800957c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009554:	d3f6      	bcc.n	8009544 <CopyDataInit>
  ldr  r2, =_sbss
 8009556:	4a0b      	ldr	r2, [pc, #44]	; (8009584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009558:	e002      	b.n	8009560 <LoopFillZerobss>

0800955a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800955a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800955c:	f842 3b04 	str.w	r3, [r2], #4

08009560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009560:	4b09      	ldr	r3, [pc, #36]	; (8009588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009564:	d3f9      	bcc.n	800955a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009566:	f7ff ffd3 	bl	8009510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800956a:	f000 f82b 	bl	80095c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800956e:	f7fe fb47 	bl	8007c00 <main>
  bx  lr    
 8009572:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009574:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8009578:	0800a210 	.word	0x0800a210
  ldr  r0, =_sdata
 800957c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009580:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8009584:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8009588:	20004388 	.word	0x20004388

0800958c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800958c:	e7fe      	b.n	800958c <ADC_IRQHandler>

0800958e <_ZdlPvj>:
 800958e:	f7ff b94f 	b.w	8008830 <_ZdlPv>

08009592 <_ZSt17__throw_bad_allocv>:
 8009592:	b508      	push	{r3, lr}
 8009594:	f000 f803 	bl	800959e <abort>

08009598 <_ZSt20__throw_length_errorPKc>:
 8009598:	b508      	push	{r3, lr}
 800959a:	f000 f800 	bl	800959e <abort>

0800959e <abort>:
 800959e:	b508      	push	{r3, lr}
 80095a0:	2006      	movs	r0, #6
 80095a2:	f000 f887 	bl	80096b4 <raise>
 80095a6:	2001      	movs	r0, #1
 80095a8:	f7ff ff7c 	bl	80094a4 <_exit>

080095ac <atexit>:
 80095ac:	2300      	movs	r3, #0
 80095ae:	4601      	mov	r1, r0
 80095b0:	461a      	mov	r2, r3
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 b8d4 	b.w	8009760 <__register_exitproc>

080095b8 <__errno>:
 80095b8:	4b01      	ldr	r3, [pc, #4]	; (80095c0 <__errno+0x8>)
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	20000034 	.word	0x20000034

080095c4 <__libc_init_array>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4e0d      	ldr	r6, [pc, #52]	; (80095fc <__libc_init_array+0x38>)
 80095c8:	4c0d      	ldr	r4, [pc, #52]	; (8009600 <__libc_init_array+0x3c>)
 80095ca:	1ba4      	subs	r4, r4, r6
 80095cc:	10a4      	asrs	r4, r4, #2
 80095ce:	2500      	movs	r5, #0
 80095d0:	42a5      	cmp	r5, r4
 80095d2:	d109      	bne.n	80095e8 <__libc_init_array+0x24>
 80095d4:	4e0b      	ldr	r6, [pc, #44]	; (8009604 <__libc_init_array+0x40>)
 80095d6:	4c0c      	ldr	r4, [pc, #48]	; (8009608 <__libc_init_array+0x44>)
 80095d8:	f000 fce8 	bl	8009fac <_init>
 80095dc:	1ba4      	subs	r4, r4, r6
 80095de:	10a4      	asrs	r4, r4, #2
 80095e0:	2500      	movs	r5, #0
 80095e2:	42a5      	cmp	r5, r4
 80095e4:	d105      	bne.n	80095f2 <__libc_init_array+0x2e>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095ec:	4798      	blx	r3
 80095ee:	3501      	adds	r5, #1
 80095f0:	e7ee      	b.n	80095d0 <__libc_init_array+0xc>
 80095f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095f6:	4798      	blx	r3
 80095f8:	3501      	adds	r5, #1
 80095fa:	e7f2      	b.n	80095e2 <__libc_init_array+0x1e>
 80095fc:	0800a200 	.word	0x0800a200
 8009600:	0800a200 	.word	0x0800a200
 8009604:	0800a200 	.word	0x0800a200
 8009608:	0800a208 	.word	0x0800a208

0800960c <memcpy>:
 800960c:	b510      	push	{r4, lr}
 800960e:	1e43      	subs	r3, r0, #1
 8009610:	440a      	add	r2, r1
 8009612:	4291      	cmp	r1, r2
 8009614:	d100      	bne.n	8009618 <memcpy+0xc>
 8009616:	bd10      	pop	{r4, pc}
 8009618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800961c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009620:	e7f7      	b.n	8009612 <memcpy+0x6>

08009622 <memmove>:
 8009622:	4288      	cmp	r0, r1
 8009624:	b510      	push	{r4, lr}
 8009626:	eb01 0302 	add.w	r3, r1, r2
 800962a:	d807      	bhi.n	800963c <memmove+0x1a>
 800962c:	1e42      	subs	r2, r0, #1
 800962e:	4299      	cmp	r1, r3
 8009630:	d00a      	beq.n	8009648 <memmove+0x26>
 8009632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009636:	f802 4f01 	strb.w	r4, [r2, #1]!
 800963a:	e7f8      	b.n	800962e <memmove+0xc>
 800963c:	4283      	cmp	r3, r0
 800963e:	d9f5      	bls.n	800962c <memmove+0xa>
 8009640:	1881      	adds	r1, r0, r2
 8009642:	1ad2      	subs	r2, r2, r3
 8009644:	42d3      	cmn	r3, r2
 8009646:	d100      	bne.n	800964a <memmove+0x28>
 8009648:	bd10      	pop	{r4, pc}
 800964a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800964e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009652:	e7f7      	b.n	8009644 <memmove+0x22>

08009654 <memset>:
 8009654:	4402      	add	r2, r0
 8009656:	4603      	mov	r3, r0
 8009658:	4293      	cmp	r3, r2
 800965a:	d100      	bne.n	800965e <memset+0xa>
 800965c:	4770      	bx	lr
 800965e:	f803 1b01 	strb.w	r1, [r3], #1
 8009662:	e7f9      	b.n	8009658 <memset+0x4>

08009664 <_raise_r>:
 8009664:	291f      	cmp	r1, #31
 8009666:	b538      	push	{r3, r4, r5, lr}
 8009668:	4604      	mov	r4, r0
 800966a:	460d      	mov	r5, r1
 800966c:	d904      	bls.n	8009678 <_raise_r+0x14>
 800966e:	2316      	movs	r3, #22
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800967a:	b112      	cbz	r2, 8009682 <_raise_r+0x1e>
 800967c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009680:	b94b      	cbnz	r3, 8009696 <_raise_r+0x32>
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f830 	bl	80096e8 <_getpid_r>
 8009688:	462a      	mov	r2, r5
 800968a:	4601      	mov	r1, r0
 800968c:	4620      	mov	r0, r4
 800968e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009692:	f000 b817 	b.w	80096c4 <_kill_r>
 8009696:	2b01      	cmp	r3, #1
 8009698:	d00a      	beq.n	80096b0 <_raise_r+0x4c>
 800969a:	1c59      	adds	r1, r3, #1
 800969c:	d103      	bne.n	80096a6 <_raise_r+0x42>
 800969e:	2316      	movs	r3, #22
 80096a0:	6003      	str	r3, [r0, #0]
 80096a2:	2001      	movs	r0, #1
 80096a4:	e7e7      	b.n	8009676 <_raise_r+0x12>
 80096a6:	2400      	movs	r4, #0
 80096a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096ac:	4628      	mov	r0, r5
 80096ae:	4798      	blx	r3
 80096b0:	2000      	movs	r0, #0
 80096b2:	e7e0      	b.n	8009676 <_raise_r+0x12>

080096b4 <raise>:
 80096b4:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <raise+0xc>)
 80096b6:	4601      	mov	r1, r0
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	f7ff bfd3 	b.w	8009664 <_raise_r>
 80096be:	bf00      	nop
 80096c0:	20000034 	.word	0x20000034

080096c4 <_kill_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4c07      	ldr	r4, [pc, #28]	; (80096e4 <_kill_r+0x20>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4605      	mov	r5, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	f7ff fed7 	bl	8009484 <_kill>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	d102      	bne.n	80096e0 <_kill_r+0x1c>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	b103      	cbz	r3, 80096e0 <_kill_r+0x1c>
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	bd38      	pop	{r3, r4, r5, pc}
 80096e2:	bf00      	nop
 80096e4:	20004384 	.word	0x20004384

080096e8 <_getpid_r>:
 80096e8:	f7ff bec4 	b.w	8009474 <_getpid>

080096ec <_vsniprintf_r>:
 80096ec:	b530      	push	{r4, r5, lr}
 80096ee:	1e14      	subs	r4, r2, #0
 80096f0:	4605      	mov	r5, r0
 80096f2:	b09b      	sub	sp, #108	; 0x6c
 80096f4:	4618      	mov	r0, r3
 80096f6:	da05      	bge.n	8009704 <_vsniprintf_r+0x18>
 80096f8:	238b      	movs	r3, #139	; 0x8b
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009700:	b01b      	add	sp, #108	; 0x6c
 8009702:	bd30      	pop	{r4, r5, pc}
 8009704:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009708:	f8ad 300c 	strh.w	r3, [sp, #12]
 800970c:	bf14      	ite	ne
 800970e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009712:	4623      	moveq	r3, r4
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800971c:	9100      	str	r1, [sp, #0]
 800971e:	9104      	str	r1, [sp, #16]
 8009720:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009724:	4602      	mov	r2, r0
 8009726:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009728:	4669      	mov	r1, sp
 800972a:	4628      	mov	r0, r5
 800972c:	f000 f930 	bl	8009990 <_svfiprintf_r>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	bfbc      	itt	lt
 8009734:	238b      	movlt	r3, #139	; 0x8b
 8009736:	602b      	strlt	r3, [r5, #0]
 8009738:	2c00      	cmp	r4, #0
 800973a:	d0e1      	beq.n	8009700 <_vsniprintf_r+0x14>
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	e7dd      	b.n	8009700 <_vsniprintf_r+0x14>

08009744 <vsniprintf>:
 8009744:	b507      	push	{r0, r1, r2, lr}
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	460a      	mov	r2, r1
 800974c:	4601      	mov	r1, r0
 800974e:	4803      	ldr	r0, [pc, #12]	; (800975c <vsniprintf+0x18>)
 8009750:	6800      	ldr	r0, [r0, #0]
 8009752:	f7ff ffcb 	bl	80096ec <_vsniprintf_r>
 8009756:	b003      	add	sp, #12
 8009758:	f85d fb04 	ldr.w	pc, [sp], #4
 800975c:	20000034 	.word	0x20000034

08009760 <__register_exitproc>:
 8009760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009764:	4d2c      	ldr	r5, [pc, #176]	; (8009818 <__register_exitproc+0xb8>)
 8009766:	682c      	ldr	r4, [r5, #0]
 8009768:	4607      	mov	r7, r0
 800976a:	460e      	mov	r6, r1
 800976c:	4691      	mov	r9, r2
 800976e:	4698      	mov	r8, r3
 8009770:	b934      	cbnz	r4, 8009780 <__register_exitproc+0x20>
 8009772:	4b2a      	ldr	r3, [pc, #168]	; (800981c <__register_exitproc+0xbc>)
 8009774:	4c2a      	ldr	r4, [pc, #168]	; (8009820 <__register_exitproc+0xc0>)
 8009776:	602c      	str	r4, [r5, #0]
 8009778:	b113      	cbz	r3, 8009780 <__register_exitproc+0x20>
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8009780:	6863      	ldr	r3, [r4, #4]
 8009782:	2b1f      	cmp	r3, #31
 8009784:	dd3d      	ble.n	8009802 <__register_exitproc+0xa2>
 8009786:	4b27      	ldr	r3, [pc, #156]	; (8009824 <__register_exitproc+0xc4>)
 8009788:	b91b      	cbnz	r3, 8009792 <__register_exitproc+0x32>
 800978a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	208c      	movs	r0, #140	; 0x8c
 8009794:	f3af 8000 	nop.w
 8009798:	4604      	mov	r4, r0
 800979a:	2800      	cmp	r0, #0
 800979c:	d0f5      	beq.n	800978a <__register_exitproc+0x2a>
 800979e:	2300      	movs	r3, #0
 80097a0:	682a      	ldr	r2, [r5, #0]
 80097a2:	6002      	str	r2, [r0, #0]
 80097a4:	6043      	str	r3, [r0, #4]
 80097a6:	6028      	str	r0, [r5, #0]
 80097a8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80097ac:	b30f      	cbz	r7, 80097f2 <__register_exitproc+0x92>
 80097ae:	f44f 7084 	mov.w	r0, #264	; 0x108
 80097b2:	f3af 8000 	nop.w
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d0e7      	beq.n	800978a <__register_exitproc+0x2a>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80097c0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80097c4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80097c8:	6862      	ldr	r2, [r4, #4]
 80097ca:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80097ce:	2301      	movs	r3, #1
 80097d0:	4093      	lsls	r3, r2
 80097d2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80097d6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80097da:	431a      	orrs	r2, r3
 80097dc:	2f02      	cmp	r7, #2
 80097de:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80097e2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80097e6:	bf02      	ittt	eq
 80097e8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80097ec:	4313      	orreq	r3, r2
 80097ee:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80097f2:	6863      	ldr	r3, [r4, #4]
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	3302      	adds	r3, #2
 80097f8:	6062      	str	r2, [r4, #4]
 80097fa:	2000      	movs	r0, #0
 80097fc:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8009800:	e7c5      	b.n	800978e <__register_exitproc+0x2e>
 8009802:	2f00      	cmp	r7, #0
 8009804:	d0f5      	beq.n	80097f2 <__register_exitproc+0x92>
 8009806:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800980a:	2800      	cmp	r0, #0
 800980c:	d1dc      	bne.n	80097c8 <__register_exitproc+0x68>
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <__register_exitproc+0xc4>)
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0ba      	beq.n	800978a <__register_exitproc+0x2a>
 8009814:	e7cb      	b.n	80097ae <__register_exitproc+0x4e>
 8009816:	bf00      	nop
 8009818:	200041d8 	.word	0x200041d8
 800981c:	00000000 	.word	0x00000000
 8009820:	2000414c 	.word	0x2000414c
 8009824:	00000000 	.word	0x00000000

08009828 <_malloc_r>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	1ccd      	adds	r5, r1, #3
 800982c:	f025 0503 	bic.w	r5, r5, #3
 8009830:	3508      	adds	r5, #8
 8009832:	2d0c      	cmp	r5, #12
 8009834:	bf38      	it	cc
 8009836:	250c      	movcc	r5, #12
 8009838:	2d00      	cmp	r5, #0
 800983a:	4606      	mov	r6, r0
 800983c:	db01      	blt.n	8009842 <_malloc_r+0x1a>
 800983e:	42a9      	cmp	r1, r5
 8009840:	d903      	bls.n	800984a <_malloc_r+0x22>
 8009842:	230c      	movs	r3, #12
 8009844:	6033      	str	r3, [r6, #0]
 8009846:	2000      	movs	r0, #0
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	f000 fb31 	bl	8009eb0 <__malloc_lock>
 800984e:	4a21      	ldr	r2, [pc, #132]	; (80098d4 <_malloc_r+0xac>)
 8009850:	6814      	ldr	r4, [r2, #0]
 8009852:	4621      	mov	r1, r4
 8009854:	b991      	cbnz	r1, 800987c <_malloc_r+0x54>
 8009856:	4c20      	ldr	r4, [pc, #128]	; (80098d8 <_malloc_r+0xb0>)
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	b91b      	cbnz	r3, 8009864 <_malloc_r+0x3c>
 800985c:	4630      	mov	r0, r6
 800985e:	f000 fb17 	bl	8009e90 <_sbrk_r>
 8009862:	6020      	str	r0, [r4, #0]
 8009864:	4629      	mov	r1, r5
 8009866:	4630      	mov	r0, r6
 8009868:	f000 fb12 	bl	8009e90 <_sbrk_r>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d124      	bne.n	80098ba <_malloc_r+0x92>
 8009870:	230c      	movs	r3, #12
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	4630      	mov	r0, r6
 8009876:	f000 fb1c 	bl	8009eb2 <__malloc_unlock>
 800987a:	e7e4      	b.n	8009846 <_malloc_r+0x1e>
 800987c:	680b      	ldr	r3, [r1, #0]
 800987e:	1b5b      	subs	r3, r3, r5
 8009880:	d418      	bmi.n	80098b4 <_malloc_r+0x8c>
 8009882:	2b0b      	cmp	r3, #11
 8009884:	d90f      	bls.n	80098a6 <_malloc_r+0x7e>
 8009886:	600b      	str	r3, [r1, #0]
 8009888:	50cd      	str	r5, [r1, r3]
 800988a:	18cc      	adds	r4, r1, r3
 800988c:	4630      	mov	r0, r6
 800988e:	f000 fb10 	bl	8009eb2 <__malloc_unlock>
 8009892:	f104 000b 	add.w	r0, r4, #11
 8009896:	1d23      	adds	r3, r4, #4
 8009898:	f020 0007 	bic.w	r0, r0, #7
 800989c:	1ac3      	subs	r3, r0, r3
 800989e:	d0d3      	beq.n	8009848 <_malloc_r+0x20>
 80098a0:	425a      	negs	r2, r3
 80098a2:	50e2      	str	r2, [r4, r3]
 80098a4:	e7d0      	b.n	8009848 <_malloc_r+0x20>
 80098a6:	428c      	cmp	r4, r1
 80098a8:	684b      	ldr	r3, [r1, #4]
 80098aa:	bf16      	itet	ne
 80098ac:	6063      	strne	r3, [r4, #4]
 80098ae:	6013      	streq	r3, [r2, #0]
 80098b0:	460c      	movne	r4, r1
 80098b2:	e7eb      	b.n	800988c <_malloc_r+0x64>
 80098b4:	460c      	mov	r4, r1
 80098b6:	6849      	ldr	r1, [r1, #4]
 80098b8:	e7cc      	b.n	8009854 <_malloc_r+0x2c>
 80098ba:	1cc4      	adds	r4, r0, #3
 80098bc:	f024 0403 	bic.w	r4, r4, #3
 80098c0:	42a0      	cmp	r0, r4
 80098c2:	d005      	beq.n	80098d0 <_malloc_r+0xa8>
 80098c4:	1a21      	subs	r1, r4, r0
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 fae2 	bl	8009e90 <_sbrk_r>
 80098cc:	3001      	adds	r0, #1
 80098ce:	d0cf      	beq.n	8009870 <_malloc_r+0x48>
 80098d0:	6025      	str	r5, [r4, #0]
 80098d2:	e7db      	b.n	800988c <_malloc_r+0x64>
 80098d4:	200041dc 	.word	0x200041dc
 80098d8:	200041e0 	.word	0x200041e0

080098dc <__ssputs_r>:
 80098dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	688e      	ldr	r6, [r1, #8]
 80098e2:	429e      	cmp	r6, r3
 80098e4:	4682      	mov	sl, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4690      	mov	r8, r2
 80098ea:	4699      	mov	r9, r3
 80098ec:	d837      	bhi.n	800995e <__ssputs_r+0x82>
 80098ee:	898a      	ldrh	r2, [r1, #12]
 80098f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098f4:	d031      	beq.n	800995a <__ssputs_r+0x7e>
 80098f6:	6825      	ldr	r5, [r4, #0]
 80098f8:	6909      	ldr	r1, [r1, #16]
 80098fa:	1a6f      	subs	r7, r5, r1
 80098fc:	6965      	ldr	r5, [r4, #20]
 80098fe:	2302      	movs	r3, #2
 8009900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009904:	fb95 f5f3 	sdiv	r5, r5, r3
 8009908:	f109 0301 	add.w	r3, r9, #1
 800990c:	443b      	add	r3, r7
 800990e:	429d      	cmp	r5, r3
 8009910:	bf38      	it	cc
 8009912:	461d      	movcc	r5, r3
 8009914:	0553      	lsls	r3, r2, #21
 8009916:	d530      	bpl.n	800997a <__ssputs_r+0x9e>
 8009918:	4629      	mov	r1, r5
 800991a:	f7ff ff85 	bl	8009828 <_malloc_r>
 800991e:	4606      	mov	r6, r0
 8009920:	b950      	cbnz	r0, 8009938 <__ssputs_r+0x5c>
 8009922:	230c      	movs	r3, #12
 8009924:	f8ca 3000 	str.w	r3, [sl]
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009938:	463a      	mov	r2, r7
 800993a:	6921      	ldr	r1, [r4, #16]
 800993c:	f7ff fe66 	bl	800960c <memcpy>
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994a:	81a3      	strh	r3, [r4, #12]
 800994c:	6126      	str	r6, [r4, #16]
 800994e:	6165      	str	r5, [r4, #20]
 8009950:	443e      	add	r6, r7
 8009952:	1bed      	subs	r5, r5, r7
 8009954:	6026      	str	r6, [r4, #0]
 8009956:	60a5      	str	r5, [r4, #8]
 8009958:	464e      	mov	r6, r9
 800995a:	454e      	cmp	r6, r9
 800995c:	d900      	bls.n	8009960 <__ssputs_r+0x84>
 800995e:	464e      	mov	r6, r9
 8009960:	4632      	mov	r2, r6
 8009962:	4641      	mov	r1, r8
 8009964:	6820      	ldr	r0, [r4, #0]
 8009966:	f7ff fe5c 	bl	8009622 <memmove>
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	1b9b      	subs	r3, r3, r6
 800996e:	60a3      	str	r3, [r4, #8]
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	441e      	add	r6, r3
 8009974:	6026      	str	r6, [r4, #0]
 8009976:	2000      	movs	r0, #0
 8009978:	e7dc      	b.n	8009934 <__ssputs_r+0x58>
 800997a:	462a      	mov	r2, r5
 800997c:	f000 fae8 	bl	8009f50 <_realloc_r>
 8009980:	4606      	mov	r6, r0
 8009982:	2800      	cmp	r0, #0
 8009984:	d1e2      	bne.n	800994c <__ssputs_r+0x70>
 8009986:	6921      	ldr	r1, [r4, #16]
 8009988:	4650      	mov	r0, sl
 800998a:	f000 fa93 	bl	8009eb4 <_free_r>
 800998e:	e7c8      	b.n	8009922 <__ssputs_r+0x46>

08009990 <_svfiprintf_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	461d      	mov	r5, r3
 8009996:	898b      	ldrh	r3, [r1, #12]
 8009998:	061f      	lsls	r7, r3, #24
 800999a:	b09d      	sub	sp, #116	; 0x74
 800999c:	4680      	mov	r8, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	d50f      	bpl.n	80099c4 <_svfiprintf_r+0x34>
 80099a4:	690b      	ldr	r3, [r1, #16]
 80099a6:	b96b      	cbnz	r3, 80099c4 <_svfiprintf_r+0x34>
 80099a8:	2140      	movs	r1, #64	; 0x40
 80099aa:	f7ff ff3d 	bl	8009828 <_malloc_r>
 80099ae:	6020      	str	r0, [r4, #0]
 80099b0:	6120      	str	r0, [r4, #16]
 80099b2:	b928      	cbnz	r0, 80099c0 <_svfiprintf_r+0x30>
 80099b4:	230c      	movs	r3, #12
 80099b6:	f8c8 3000 	str.w	r3, [r8]
 80099ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099be:	e0c8      	b.n	8009b52 <_svfiprintf_r+0x1c2>
 80099c0:	2340      	movs	r3, #64	; 0x40
 80099c2:	6163      	str	r3, [r4, #20]
 80099c4:	2300      	movs	r3, #0
 80099c6:	9309      	str	r3, [sp, #36]	; 0x24
 80099c8:	2320      	movs	r3, #32
 80099ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099ce:	2330      	movs	r3, #48	; 0x30
 80099d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099d4:	9503      	str	r5, [sp, #12]
 80099d6:	f04f 0b01 	mov.w	fp, #1
 80099da:	4637      	mov	r7, r6
 80099dc:	463d      	mov	r5, r7
 80099de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80099e2:	b10b      	cbz	r3, 80099e8 <_svfiprintf_r+0x58>
 80099e4:	2b25      	cmp	r3, #37	; 0x25
 80099e6:	d13e      	bne.n	8009a66 <_svfiprintf_r+0xd6>
 80099e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80099ec:	d00b      	beq.n	8009a06 <_svfiprintf_r+0x76>
 80099ee:	4653      	mov	r3, sl
 80099f0:	4632      	mov	r2, r6
 80099f2:	4621      	mov	r1, r4
 80099f4:	4640      	mov	r0, r8
 80099f6:	f7ff ff71 	bl	80098dc <__ssputs_r>
 80099fa:	3001      	adds	r0, #1
 80099fc:	f000 80a4 	beq.w	8009b48 <_svfiprintf_r+0x1b8>
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a02:	4453      	add	r3, sl
 8009a04:	9309      	str	r3, [sp, #36]	; 0x24
 8009a06:	783b      	ldrb	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 809d 	beq.w	8009b48 <_svfiprintf_r+0x1b8>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	9307      	str	r3, [sp, #28]
 8009a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a20:	931a      	str	r3, [sp, #104]	; 0x68
 8009a22:	462f      	mov	r7, r5
 8009a24:	2205      	movs	r2, #5
 8009a26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009a2a:	4850      	ldr	r0, [pc, #320]	; (8009b6c <_svfiprintf_r+0x1dc>)
 8009a2c:	f7f6 fbe0 	bl	80001f0 <memchr>
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	b9d0      	cbnz	r0, 8009a6a <_svfiprintf_r+0xda>
 8009a34:	06d9      	lsls	r1, r3, #27
 8009a36:	bf44      	itt	mi
 8009a38:	2220      	movmi	r2, #32
 8009a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a3e:	071a      	lsls	r2, r3, #28
 8009a40:	bf44      	itt	mi
 8009a42:	222b      	movmi	r2, #43	; 0x2b
 8009a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a48:	782a      	ldrb	r2, [r5, #0]
 8009a4a:	2a2a      	cmp	r2, #42	; 0x2a
 8009a4c:	d015      	beq.n	8009a7a <_svfiprintf_r+0xea>
 8009a4e:	9a07      	ldr	r2, [sp, #28]
 8009a50:	462f      	mov	r7, r5
 8009a52:	2000      	movs	r0, #0
 8009a54:	250a      	movs	r5, #10
 8009a56:	4639      	mov	r1, r7
 8009a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5c:	3b30      	subs	r3, #48	; 0x30
 8009a5e:	2b09      	cmp	r3, #9
 8009a60:	d94d      	bls.n	8009afe <_svfiprintf_r+0x16e>
 8009a62:	b1b8      	cbz	r0, 8009a94 <_svfiprintf_r+0x104>
 8009a64:	e00f      	b.n	8009a86 <_svfiprintf_r+0xf6>
 8009a66:	462f      	mov	r7, r5
 8009a68:	e7b8      	b.n	80099dc <_svfiprintf_r+0x4c>
 8009a6a:	4a40      	ldr	r2, [pc, #256]	; (8009b6c <_svfiprintf_r+0x1dc>)
 8009a6c:	1a80      	subs	r0, r0, r2
 8009a6e:	fa0b f000 	lsl.w	r0, fp, r0
 8009a72:	4318      	orrs	r0, r3
 8009a74:	9004      	str	r0, [sp, #16]
 8009a76:	463d      	mov	r5, r7
 8009a78:	e7d3      	b.n	8009a22 <_svfiprintf_r+0x92>
 8009a7a:	9a03      	ldr	r2, [sp, #12]
 8009a7c:	1d11      	adds	r1, r2, #4
 8009a7e:	6812      	ldr	r2, [r2, #0]
 8009a80:	9103      	str	r1, [sp, #12]
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	db01      	blt.n	8009a8a <_svfiprintf_r+0xfa>
 8009a86:	9207      	str	r2, [sp, #28]
 8009a88:	e004      	b.n	8009a94 <_svfiprintf_r+0x104>
 8009a8a:	4252      	negs	r2, r2
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	9207      	str	r2, [sp, #28]
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	783b      	ldrb	r3, [r7, #0]
 8009a96:	2b2e      	cmp	r3, #46	; 0x2e
 8009a98:	d10c      	bne.n	8009ab4 <_svfiprintf_r+0x124>
 8009a9a:	787b      	ldrb	r3, [r7, #1]
 8009a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9e:	d133      	bne.n	8009b08 <_svfiprintf_r+0x178>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	9203      	str	r2, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfb8      	it	lt
 8009aac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ab0:	3702      	adds	r7, #2
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	4d2e      	ldr	r5, [pc, #184]	; (8009b70 <_svfiprintf_r+0x1e0>)
 8009ab6:	7839      	ldrb	r1, [r7, #0]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	4628      	mov	r0, r5
 8009abc:	f7f6 fb98 	bl	80001f0 <memchr>
 8009ac0:	b138      	cbz	r0, 8009ad2 <_svfiprintf_r+0x142>
 8009ac2:	2340      	movs	r3, #64	; 0x40
 8009ac4:	1b40      	subs	r0, r0, r5
 8009ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	4303      	orrs	r3, r0
 8009ace:	3701      	adds	r7, #1
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	7839      	ldrb	r1, [r7, #0]
 8009ad4:	4827      	ldr	r0, [pc, #156]	; (8009b74 <_svfiprintf_r+0x1e4>)
 8009ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ada:	2206      	movs	r2, #6
 8009adc:	1c7e      	adds	r6, r7, #1
 8009ade:	f7f6 fb87 	bl	80001f0 <memchr>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d038      	beq.n	8009b58 <_svfiprintf_r+0x1c8>
 8009ae6:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <_svfiprintf_r+0x1e8>)
 8009ae8:	bb13      	cbnz	r3, 8009b30 <_svfiprintf_r+0x1a0>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	3307      	adds	r3, #7
 8009aee:	f023 0307 	bic.w	r3, r3, #7
 8009af2:	3308      	adds	r3, #8
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af8:	444b      	add	r3, r9
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	e76d      	b.n	80099da <_svfiprintf_r+0x4a>
 8009afe:	fb05 3202 	mla	r2, r5, r2, r3
 8009b02:	2001      	movs	r0, #1
 8009b04:	460f      	mov	r7, r1
 8009b06:	e7a6      	b.n	8009a56 <_svfiprintf_r+0xc6>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	3701      	adds	r7, #1
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	250a      	movs	r5, #10
 8009b12:	4638      	mov	r0, r7
 8009b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b18:	3a30      	subs	r2, #48	; 0x30
 8009b1a:	2a09      	cmp	r2, #9
 8009b1c:	d903      	bls.n	8009b26 <_svfiprintf_r+0x196>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0c8      	beq.n	8009ab4 <_svfiprintf_r+0x124>
 8009b22:	9105      	str	r1, [sp, #20]
 8009b24:	e7c6      	b.n	8009ab4 <_svfiprintf_r+0x124>
 8009b26:	fb05 2101 	mla	r1, r5, r1, r2
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	e7f0      	b.n	8009b12 <_svfiprintf_r+0x182>
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	4622      	mov	r2, r4
 8009b36:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <_svfiprintf_r+0x1ec>)
 8009b38:	a904      	add	r1, sp, #16
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	f3af 8000 	nop.w
 8009b40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009b44:	4681      	mov	r9, r0
 8009b46:	d1d6      	bne.n	8009af6 <_svfiprintf_r+0x166>
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	065b      	lsls	r3, r3, #25
 8009b4c:	f53f af35 	bmi.w	80099ba <_svfiprintf_r+0x2a>
 8009b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b52:	b01d      	add	sp, #116	; 0x74
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	ab03      	add	r3, sp, #12
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <_svfiprintf_r+0x1ec>)
 8009b60:	a904      	add	r1, sp, #16
 8009b62:	4640      	mov	r0, r8
 8009b64:	f000 f882 	bl	8009c6c <_printf_i>
 8009b68:	e7ea      	b.n	8009b40 <_svfiprintf_r+0x1b0>
 8009b6a:	bf00      	nop
 8009b6c:	0800a1c4 	.word	0x0800a1c4
 8009b70:	0800a1ca 	.word	0x0800a1ca
 8009b74:	0800a1ce 	.word	0x0800a1ce
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	080098dd 	.word	0x080098dd

08009b80 <_printf_common>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	4691      	mov	r9, r2
 8009b86:	461f      	mov	r7, r3
 8009b88:	688a      	ldr	r2, [r1, #8]
 8009b8a:	690b      	ldr	r3, [r1, #16]
 8009b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b90:	4293      	cmp	r3, r2
 8009b92:	bfb8      	it	lt
 8009b94:	4613      	movlt	r3, r2
 8009b96:	f8c9 3000 	str.w	r3, [r9]
 8009b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	b112      	cbz	r2, 8009baa <_printf_common+0x2a>
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	f8c9 3000 	str.w	r3, [r9]
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	0699      	lsls	r1, r3, #26
 8009bae:	bf42      	ittt	mi
 8009bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009bb4:	3302      	addmi	r3, #2
 8009bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8009bba:	6825      	ldr	r5, [r4, #0]
 8009bbc:	f015 0506 	ands.w	r5, r5, #6
 8009bc0:	d107      	bne.n	8009bd2 <_printf_common+0x52>
 8009bc2:	f104 0a19 	add.w	sl, r4, #25
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bcc:	1a9b      	subs	r3, r3, r2
 8009bce:	42ab      	cmp	r3, r5
 8009bd0:	dc28      	bgt.n	8009c24 <_printf_common+0xa4>
 8009bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	3300      	adds	r3, #0
 8009bda:	bf18      	it	ne
 8009bdc:	2301      	movne	r3, #1
 8009bde:	0692      	lsls	r2, r2, #26
 8009be0:	d42d      	bmi.n	8009c3e <_printf_common+0xbe>
 8009be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009be6:	4639      	mov	r1, r7
 8009be8:	4630      	mov	r0, r6
 8009bea:	47c0      	blx	r8
 8009bec:	3001      	adds	r0, #1
 8009bee:	d020      	beq.n	8009c32 <_printf_common+0xb2>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	68e5      	ldr	r5, [r4, #12]
 8009bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8009bf8:	f003 0306 	and.w	r3, r3, #6
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	bf08      	it	eq
 8009c00:	1aad      	subeq	r5, r5, r2
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	6922      	ldr	r2, [r4, #16]
 8009c06:	bf0c      	ite	eq
 8009c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c0c:	2500      	movne	r5, #0
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	bfc4      	itt	gt
 8009c12:	1a9b      	subgt	r3, r3, r2
 8009c14:	18ed      	addgt	r5, r5, r3
 8009c16:	f04f 0900 	mov.w	r9, #0
 8009c1a:	341a      	adds	r4, #26
 8009c1c:	454d      	cmp	r5, r9
 8009c1e:	d11a      	bne.n	8009c56 <_printf_common+0xd6>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e008      	b.n	8009c36 <_printf_common+0xb6>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4652      	mov	r2, sl
 8009c28:	4639      	mov	r1, r7
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	47c0      	blx	r8
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d103      	bne.n	8009c3a <_printf_common+0xba>
 8009c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	3501      	adds	r5, #1
 8009c3c:	e7c3      	b.n	8009bc6 <_printf_common+0x46>
 8009c3e:	18e1      	adds	r1, r4, r3
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	2030      	movs	r0, #48	; 0x30
 8009c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c48:	4422      	add	r2, r4
 8009c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c52:	3302      	adds	r3, #2
 8009c54:	e7c5      	b.n	8009be2 <_printf_common+0x62>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4622      	mov	r2, r4
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	47c0      	blx	r8
 8009c60:	3001      	adds	r0, #1
 8009c62:	d0e6      	beq.n	8009c32 <_printf_common+0xb2>
 8009c64:	f109 0901 	add.w	r9, r9, #1
 8009c68:	e7d8      	b.n	8009c1c <_printf_common+0x9c>
	...

08009c6c <_printf_i>:
 8009c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c74:	460c      	mov	r4, r1
 8009c76:	7e09      	ldrb	r1, [r1, #24]
 8009c78:	b085      	sub	sp, #20
 8009c7a:	296e      	cmp	r1, #110	; 0x6e
 8009c7c:	4617      	mov	r7, r2
 8009c7e:	4606      	mov	r6, r0
 8009c80:	4698      	mov	r8, r3
 8009c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c84:	f000 80b3 	beq.w	8009dee <_printf_i+0x182>
 8009c88:	d822      	bhi.n	8009cd0 <_printf_i+0x64>
 8009c8a:	2963      	cmp	r1, #99	; 0x63
 8009c8c:	d036      	beq.n	8009cfc <_printf_i+0x90>
 8009c8e:	d80a      	bhi.n	8009ca6 <_printf_i+0x3a>
 8009c90:	2900      	cmp	r1, #0
 8009c92:	f000 80b9 	beq.w	8009e08 <_printf_i+0x19c>
 8009c96:	2958      	cmp	r1, #88	; 0x58
 8009c98:	f000 8083 	beq.w	8009da2 <_printf_i+0x136>
 8009c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ca0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ca4:	e032      	b.n	8009d0c <_printf_i+0xa0>
 8009ca6:	2964      	cmp	r1, #100	; 0x64
 8009ca8:	d001      	beq.n	8009cae <_printf_i+0x42>
 8009caa:	2969      	cmp	r1, #105	; 0x69
 8009cac:	d1f6      	bne.n	8009c9c <_printf_i+0x30>
 8009cae:	6820      	ldr	r0, [r4, #0]
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	0605      	lsls	r5, r0, #24
 8009cb4:	f103 0104 	add.w	r1, r3, #4
 8009cb8:	d52a      	bpl.n	8009d10 <_printf_i+0xa4>
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6011      	str	r1, [r2, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da03      	bge.n	8009cca <_printf_i+0x5e>
 8009cc2:	222d      	movs	r2, #45	; 0x2d
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009cca:	486f      	ldr	r0, [pc, #444]	; (8009e88 <_printf_i+0x21c>)
 8009ccc:	220a      	movs	r2, #10
 8009cce:	e039      	b.n	8009d44 <_printf_i+0xd8>
 8009cd0:	2973      	cmp	r1, #115	; 0x73
 8009cd2:	f000 809d 	beq.w	8009e10 <_printf_i+0x1a4>
 8009cd6:	d808      	bhi.n	8009cea <_printf_i+0x7e>
 8009cd8:	296f      	cmp	r1, #111	; 0x6f
 8009cda:	d020      	beq.n	8009d1e <_printf_i+0xb2>
 8009cdc:	2970      	cmp	r1, #112	; 0x70
 8009cde:	d1dd      	bne.n	8009c9c <_printf_i+0x30>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	f043 0320 	orr.w	r3, r3, #32
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	e003      	b.n	8009cf2 <_printf_i+0x86>
 8009cea:	2975      	cmp	r1, #117	; 0x75
 8009cec:	d017      	beq.n	8009d1e <_printf_i+0xb2>
 8009cee:	2978      	cmp	r1, #120	; 0x78
 8009cf0:	d1d4      	bne.n	8009c9c <_printf_i+0x30>
 8009cf2:	2378      	movs	r3, #120	; 0x78
 8009cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cf8:	4864      	ldr	r0, [pc, #400]	; (8009e8c <_printf_i+0x220>)
 8009cfa:	e055      	b.n	8009da8 <_printf_i+0x13c>
 8009cfc:	6813      	ldr	r3, [r2, #0]
 8009cfe:	1d19      	adds	r1, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6011      	str	r1, [r2, #0]
 8009d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e08c      	b.n	8009e2a <_printf_i+0x1be>
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6011      	str	r1, [r2, #0]
 8009d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d18:	bf18      	it	ne
 8009d1a:	b21b      	sxthne	r3, r3
 8009d1c:	e7cf      	b.n	8009cbe <_printf_i+0x52>
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	6825      	ldr	r5, [r4, #0]
 8009d22:	1d18      	adds	r0, r3, #4
 8009d24:	6010      	str	r0, [r2, #0]
 8009d26:	0628      	lsls	r0, r5, #24
 8009d28:	d501      	bpl.n	8009d2e <_printf_i+0xc2>
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	e002      	b.n	8009d34 <_printf_i+0xc8>
 8009d2e:	0668      	lsls	r0, r5, #25
 8009d30:	d5fb      	bpl.n	8009d2a <_printf_i+0xbe>
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	4854      	ldr	r0, [pc, #336]	; (8009e88 <_printf_i+0x21c>)
 8009d36:	296f      	cmp	r1, #111	; 0x6f
 8009d38:	bf14      	ite	ne
 8009d3a:	220a      	movne	r2, #10
 8009d3c:	2208      	moveq	r2, #8
 8009d3e:	2100      	movs	r1, #0
 8009d40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d44:	6865      	ldr	r5, [r4, #4]
 8009d46:	60a5      	str	r5, [r4, #8]
 8009d48:	2d00      	cmp	r5, #0
 8009d4a:	f2c0 8095 	blt.w	8009e78 <_printf_i+0x20c>
 8009d4e:	6821      	ldr	r1, [r4, #0]
 8009d50:	f021 0104 	bic.w	r1, r1, #4
 8009d54:	6021      	str	r1, [r4, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d13d      	bne.n	8009dd6 <_printf_i+0x16a>
 8009d5a:	2d00      	cmp	r5, #0
 8009d5c:	f040 808e 	bne.w	8009e7c <_printf_i+0x210>
 8009d60:	4665      	mov	r5, ip
 8009d62:	2a08      	cmp	r2, #8
 8009d64:	d10b      	bne.n	8009d7e <_printf_i+0x112>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	07db      	lsls	r3, r3, #31
 8009d6a:	d508      	bpl.n	8009d7e <_printf_i+0x112>
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	6862      	ldr	r2, [r4, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	bfde      	ittt	le
 8009d74:	2330      	movle	r3, #48	; 0x30
 8009d76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d7e:	ebac 0305 	sub.w	r3, ip, r5
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	f8cd 8000 	str.w	r8, [sp]
 8009d88:	463b      	mov	r3, r7
 8009d8a:	aa03      	add	r2, sp, #12
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7ff fef6 	bl	8009b80 <_printf_common>
 8009d94:	3001      	adds	r0, #1
 8009d96:	d14d      	bne.n	8009e34 <_printf_i+0x1c8>
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d9c:	b005      	add	sp, #20
 8009d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009da2:	4839      	ldr	r0, [pc, #228]	; (8009e88 <_printf_i+0x21c>)
 8009da4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009da8:	6813      	ldr	r3, [r2, #0]
 8009daa:	6821      	ldr	r1, [r4, #0]
 8009dac:	1d1d      	adds	r5, r3, #4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6015      	str	r5, [r2, #0]
 8009db2:	060a      	lsls	r2, r1, #24
 8009db4:	d50b      	bpl.n	8009dce <_printf_i+0x162>
 8009db6:	07ca      	lsls	r2, r1, #31
 8009db8:	bf44      	itt	mi
 8009dba:	f041 0120 	orrmi.w	r1, r1, #32
 8009dbe:	6021      	strmi	r1, [r4, #0]
 8009dc0:	b91b      	cbnz	r3, 8009dca <_printf_i+0x15e>
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	f022 0220 	bic.w	r2, r2, #32
 8009dc8:	6022      	str	r2, [r4, #0]
 8009dca:	2210      	movs	r2, #16
 8009dcc:	e7b7      	b.n	8009d3e <_printf_i+0xd2>
 8009dce:	064d      	lsls	r5, r1, #25
 8009dd0:	bf48      	it	mi
 8009dd2:	b29b      	uxthmi	r3, r3
 8009dd4:	e7ef      	b.n	8009db6 <_printf_i+0x14a>
 8009dd6:	4665      	mov	r5, ip
 8009dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ddc:	fb02 3311 	mls	r3, r2, r1, r3
 8009de0:	5cc3      	ldrb	r3, [r0, r3]
 8009de2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009de6:	460b      	mov	r3, r1
 8009de8:	2900      	cmp	r1, #0
 8009dea:	d1f5      	bne.n	8009dd8 <_printf_i+0x16c>
 8009dec:	e7b9      	b.n	8009d62 <_printf_i+0xf6>
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	6825      	ldr	r5, [r4, #0]
 8009df2:	6961      	ldr	r1, [r4, #20]
 8009df4:	1d18      	adds	r0, r3, #4
 8009df6:	6010      	str	r0, [r2, #0]
 8009df8:	0628      	lsls	r0, r5, #24
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	d501      	bpl.n	8009e02 <_printf_i+0x196>
 8009dfe:	6019      	str	r1, [r3, #0]
 8009e00:	e002      	b.n	8009e08 <_printf_i+0x19c>
 8009e02:	066a      	lsls	r2, r5, #25
 8009e04:	d5fb      	bpl.n	8009dfe <_printf_i+0x192>
 8009e06:	8019      	strh	r1, [r3, #0]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	4665      	mov	r5, ip
 8009e0e:	e7b9      	b.n	8009d84 <_printf_i+0x118>
 8009e10:	6813      	ldr	r3, [r2, #0]
 8009e12:	1d19      	adds	r1, r3, #4
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	681d      	ldr	r5, [r3, #0]
 8009e18:	6862      	ldr	r2, [r4, #4]
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f7f6 f9e7 	bl	80001f0 <memchr>
 8009e22:	b108      	cbz	r0, 8009e28 <_printf_i+0x1bc>
 8009e24:	1b40      	subs	r0, r0, r5
 8009e26:	6060      	str	r0, [r4, #4]
 8009e28:	6863      	ldr	r3, [r4, #4]
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e32:	e7a7      	b.n	8009d84 <_printf_i+0x118>
 8009e34:	6923      	ldr	r3, [r4, #16]
 8009e36:	462a      	mov	r2, r5
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	47c0      	blx	r8
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d0aa      	beq.n	8009d98 <_printf_i+0x12c>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	079b      	lsls	r3, r3, #30
 8009e46:	d413      	bmi.n	8009e70 <_printf_i+0x204>
 8009e48:	68e0      	ldr	r0, [r4, #12]
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	4298      	cmp	r0, r3
 8009e4e:	bfb8      	it	lt
 8009e50:	4618      	movlt	r0, r3
 8009e52:	e7a3      	b.n	8009d9c <_printf_i+0x130>
 8009e54:	2301      	movs	r3, #1
 8009e56:	464a      	mov	r2, r9
 8009e58:	4639      	mov	r1, r7
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	47c0      	blx	r8
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d09a      	beq.n	8009d98 <_printf_i+0x12c>
 8009e62:	3501      	adds	r5, #1
 8009e64:	68e3      	ldr	r3, [r4, #12]
 8009e66:	9a03      	ldr	r2, [sp, #12]
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	42ab      	cmp	r3, r5
 8009e6c:	dcf2      	bgt.n	8009e54 <_printf_i+0x1e8>
 8009e6e:	e7eb      	b.n	8009e48 <_printf_i+0x1dc>
 8009e70:	2500      	movs	r5, #0
 8009e72:	f104 0919 	add.w	r9, r4, #25
 8009e76:	e7f5      	b.n	8009e64 <_printf_i+0x1f8>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1ac      	bne.n	8009dd6 <_printf_i+0x16a>
 8009e7c:	7803      	ldrb	r3, [r0, #0]
 8009e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e86:	e76c      	b.n	8009d62 <_printf_i+0xf6>
 8009e88:	0800a1d5 	.word	0x0800a1d5
 8009e8c:	0800a1e6 	.word	0x0800a1e6

08009e90 <_sbrk_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4c06      	ldr	r4, [pc, #24]	; (8009eac <_sbrk_r+0x1c>)
 8009e94:	2300      	movs	r3, #0
 8009e96:	4605      	mov	r5, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	f7ff fb0c 	bl	80094b8 <_sbrk>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_sbrk_r+0x1a>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_sbrk_r+0x1a>
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20004384 	.word	0x20004384

08009eb0 <__malloc_lock>:
 8009eb0:	4770      	bx	lr

08009eb2 <__malloc_unlock>:
 8009eb2:	4770      	bx	lr

08009eb4 <_free_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d045      	beq.n	8009f48 <_free_r+0x94>
 8009ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec0:	1f0c      	subs	r4, r1, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bfb8      	it	lt
 8009ec6:	18e4      	addlt	r4, r4, r3
 8009ec8:	f7ff fff2 	bl	8009eb0 <__malloc_lock>
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <_free_r+0x98>)
 8009ece:	6813      	ldr	r3, [r2, #0]
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	b933      	cbnz	r3, 8009ee2 <_free_r+0x2e>
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	6014      	str	r4, [r2, #0]
 8009ed8:	4628      	mov	r0, r5
 8009eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ede:	f7ff bfe8 	b.w	8009eb2 <__malloc_unlock>
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	d90c      	bls.n	8009f00 <_free_r+0x4c>
 8009ee6:	6821      	ldr	r1, [r4, #0]
 8009ee8:	1862      	adds	r2, r4, r1
 8009eea:	4293      	cmp	r3, r2
 8009eec:	bf04      	itt	eq
 8009eee:	681a      	ldreq	r2, [r3, #0]
 8009ef0:	685b      	ldreq	r3, [r3, #4]
 8009ef2:	6063      	str	r3, [r4, #4]
 8009ef4:	bf04      	itt	eq
 8009ef6:	1852      	addeq	r2, r2, r1
 8009ef8:	6022      	streq	r2, [r4, #0]
 8009efa:	6004      	str	r4, [r0, #0]
 8009efc:	e7ec      	b.n	8009ed8 <_free_r+0x24>
 8009efe:	4613      	mov	r3, r2
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	b10a      	cbz	r2, 8009f08 <_free_r+0x54>
 8009f04:	42a2      	cmp	r2, r4
 8009f06:	d9fa      	bls.n	8009efe <_free_r+0x4a>
 8009f08:	6819      	ldr	r1, [r3, #0]
 8009f0a:	1858      	adds	r0, r3, r1
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d10b      	bne.n	8009f28 <_free_r+0x74>
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	4401      	add	r1, r0
 8009f14:	1858      	adds	r0, r3, r1
 8009f16:	4282      	cmp	r2, r0
 8009f18:	6019      	str	r1, [r3, #0]
 8009f1a:	d1dd      	bne.n	8009ed8 <_free_r+0x24>
 8009f1c:	6810      	ldr	r0, [r2, #0]
 8009f1e:	6852      	ldr	r2, [r2, #4]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	4401      	add	r1, r0
 8009f24:	6019      	str	r1, [r3, #0]
 8009f26:	e7d7      	b.n	8009ed8 <_free_r+0x24>
 8009f28:	d902      	bls.n	8009f30 <_free_r+0x7c>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	e7d3      	b.n	8009ed8 <_free_r+0x24>
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	1821      	adds	r1, r4, r0
 8009f34:	428a      	cmp	r2, r1
 8009f36:	bf04      	itt	eq
 8009f38:	6811      	ldreq	r1, [r2, #0]
 8009f3a:	6852      	ldreq	r2, [r2, #4]
 8009f3c:	6062      	str	r2, [r4, #4]
 8009f3e:	bf04      	itt	eq
 8009f40:	1809      	addeq	r1, r1, r0
 8009f42:	6021      	streq	r1, [r4, #0]
 8009f44:	605c      	str	r4, [r3, #4]
 8009f46:	e7c7      	b.n	8009ed8 <_free_r+0x24>
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
 8009f4a:	bf00      	nop
 8009f4c:	200041dc 	.word	0x200041dc

08009f50 <_realloc_r>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	4607      	mov	r7, r0
 8009f54:	4614      	mov	r4, r2
 8009f56:	460e      	mov	r6, r1
 8009f58:	b921      	cbnz	r1, 8009f64 <_realloc_r+0x14>
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f60:	f7ff bc62 	b.w	8009828 <_malloc_r>
 8009f64:	b922      	cbnz	r2, 8009f70 <_realloc_r+0x20>
 8009f66:	f7ff ffa5 	bl	8009eb4 <_free_r>
 8009f6a:	4625      	mov	r5, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f70:	f000 f814 	bl	8009f9c <_malloc_usable_size_r>
 8009f74:	42a0      	cmp	r0, r4
 8009f76:	d20f      	bcs.n	8009f98 <_realloc_r+0x48>
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f7ff fc54 	bl	8009828 <_malloc_r>
 8009f80:	4605      	mov	r5, r0
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d0f2      	beq.n	8009f6c <_realloc_r+0x1c>
 8009f86:	4631      	mov	r1, r6
 8009f88:	4622      	mov	r2, r4
 8009f8a:	f7ff fb3f 	bl	800960c <memcpy>
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4638      	mov	r0, r7
 8009f92:	f7ff ff8f 	bl	8009eb4 <_free_r>
 8009f96:	e7e9      	b.n	8009f6c <_realloc_r+0x1c>
 8009f98:	4635      	mov	r5, r6
 8009f9a:	e7e7      	b.n	8009f6c <_realloc_r+0x1c>

08009f9c <_malloc_usable_size_r>:
 8009f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa0:	1f18      	subs	r0, r3, #4
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfbc      	itt	lt
 8009fa6:	580b      	ldrlt	r3, [r1, r0]
 8009fa8:	18c0      	addlt	r0, r0, r3
 8009faa:	4770      	bx	lr

08009fac <_init>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	bf00      	nop
 8009fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	469e      	mov	lr, r3
 8009fb6:	4770      	bx	lr

08009fb8 <_fini>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	bf00      	nop
 8009fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fbe:	bc08      	pop	{r3}
 8009fc0:	469e      	mov	lr, r3
 8009fc2:	4770      	bx	lr
