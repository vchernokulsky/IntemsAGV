
SLMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800d350  0800d350  0001d350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8d8  0800d8d8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8d8  0800d8d8  0001d8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8e0  0800d8e0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d8e0  0800d8e0  0001d8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d8e8  0800d8e8  0001d8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004324  20000204  0800daf4  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004528  0800daf4  00024528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039c8b  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000066ba  00000000  00000000  00059ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed0  00000000  00000000  00060580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb8  00000000  00000000  00062450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020253  00000000  00000000  00064108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018aaa  00000000  00000000  0008435b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab012  00000000  00000000  0009ce05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147e17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0f4  00000000  00000000  00147e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d334 	.word	0x0800d334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800d334 	.word	0x0800d334

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8fa 	bl	80010da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f009 fd28 	bl	800a93c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f009 fb74 	bl	800a5d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20004384 	.word	0x20004384

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20004384 	.word	0x20004384

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_Delay+0x40>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff4c 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001102:	f7ff ff61 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f7ff ffb1 	bl	8001074 <NVIC_EncodePriority>
 8001112:	4602      	mov	r2, r0
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff80 	bl	8001020 <__NVIC_SetPriority>
}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff54 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e159      	b.n	8001414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8148 	bne.w	800140e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x4a>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b12      	cmp	r3, #18
 800118c:	d123      	bne.n	80011d6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	69b9      	ldr	r1, [r7, #24]
 80011d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0203 	and.w	r2, r3, #3
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d00b      	beq.n	800122a <HAL_GPIO_Init+0xe6>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121e:	2b11      	cmp	r3, #17
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a2 	beq.w	800140e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <HAL_GPIO_Init+0x2e4>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a55      	ldr	r2, [pc, #340]	; (8001428 <HAL_GPIO_Init+0x2e4>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_GPIO_Init+0x2e4>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a51      	ldr	r2, [pc, #324]	; (800142c <HAL_GPIO_Init+0x2e8>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2ec>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x202>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a47      	ldr	r2, [pc, #284]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x1fe>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_GPIO_Init+0x2f4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x1fa>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_GPIO_Init+0x2f8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x1f6>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a44      	ldr	r2, [pc, #272]	; (8001440 <HAL_GPIO_Init+0x2fc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x1f2>
 8001332:	2304      	movs	r3, #4
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001336:	2307      	movs	r3, #7
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x204>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x204>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4934      	ldr	r1, [pc, #208]	; (800142c <HAL_GPIO_Init+0x2e8>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <HAL_GPIO_Init+0x300>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138a:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <HAL_GPIO_Init+0x300>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_GPIO_Init+0x300>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_GPIO_Init+0x300>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_GPIO_Init+0x300>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x300>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_GPIO_Init+0x300>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_GPIO_Init+0x300>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f aea2 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f806 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e22d      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d075      	beq.n	80015ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	4ba3      	ldr	r3, [pc, #652]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00c      	beq.n	8001508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4ba0      	ldr	r3, [pc, #640]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d112      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b9d      	ldr	r3, [pc, #628]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001506:	d10b      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	4b99      	ldr	r3, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d05b      	beq.n	80015cc <HAL_RCC_OscConfig+0x108>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d157      	bne.n	80015cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e208      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x74>
 800152a:	4b91      	ldr	r3, [pc, #580]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x98>
 8001542:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a8a      	ldr	r2, [pc, #552]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 800155c:	4b84      	ldr	r3, [pc, #528]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a83      	ldr	r2, [pc, #524]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b81      	ldr	r3, [pc, #516]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a80      	ldr	r2, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fcd2 	bl	8000f24 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fcce 	bl	8000f24 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1cd      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xc0>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcbe 	bl	8000f24 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcba 	bl	8000f24 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1b9      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0xe8>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e18d      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4952      	ldr	r1, [pc, #328]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x2b0>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc73 	bl	8000f24 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fc6f 	bl	8000f24 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e16e      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4940      	ldr	r1, [pc, #256]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_RCC_OscConfig+0x2b0>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fc52 	bl	8000f24 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fc4e 	bl	8000f24 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e14d      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d030      	beq.n	8001710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x2b4>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fc32 	bl	8000f24 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc2e 	bl	8000f24 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e12d      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x200>
 80016e2:	e015      	b.n	8001710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x2b4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fc1b 	bl	8000f24 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fc17 	bl	8000f24 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e116      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a0 	beq.w	800185e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d121      	bne.n	800179e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fbdd 	bl	8000f24 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e011      	b.n	8001792 <HAL_RCC_OscConfig+0x2ce>
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	42470000 	.word	0x42470000
 8001778:	42470e80 	.word	0x42470e80
 800177c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7ff fbd0 	bl	8000f24 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0cf      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b6a      	ldr	r3, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x478>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	e01c      	b.n	80017ee <HAL_RCC_OscConfig+0x32a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x312>
 80017bc:	4b60      	ldr	r3, [pc, #384]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a5f      	ldr	r2, [pc, #380]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a5c      	ldr	r2, [pc, #368]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0x32a>
 80017d6:	4b5a      	ldr	r3, [pc, #360]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
 80017e2:	4b57      	ldr	r3, [pc, #348]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e6:	4a56      	ldr	r2, [pc, #344]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d015      	beq.n	8001822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb95 	bl	8000f24 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fb91 	bl	8000f24 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e08e      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ee      	beq.n	80017fe <HAL_RCC_OscConfig+0x33a>
 8001820:	e014      	b.n	800184c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb7f 	bl	8000f24 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fb7b 	bl	8000f24 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e078      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ee      	bne.n	800182a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d064      	beq.n	8001930 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d05c      	beq.n	800192c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d141      	bne.n	80018fe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_RCC_OscConfig+0x480>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fb50 	bl	8000f24 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fb4c 	bl	8000f24 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04b      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	491d      	ldr	r1, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_RCC_OscConfig+0x480>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb25 	bl	8000f24 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fb21 	bl	8000f24 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e020      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x41a>
 80018fc:	e018      	b.n	8001930 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_OscConfig+0x480>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fb0e 	bl	8000f24 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fb0a 	bl	8000f24 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_RCC_OscConfig+0x47c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x448>
 800192a:	e001      	b.n	8001930 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40007000 	.word	0x40007000
 8001940:	40023800 	.word	0x40023800
 8001944:	42470060 	.word	0x42470060

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0ca      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_ClockConfig+0x1b4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d90c      	bls.n	8001984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_ClockConfig+0x1b4>)
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <HAL_RCC_ClockConfig+0x1b4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b6      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 80019a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	494c      	ldr	r1, [pc, #304]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d044      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07d      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06d      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e065      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4933      	ldr	r1, [pc, #204]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7ff fa74 	bl	8000f24 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff fa70 	bl	8000f24 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e04d      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_ClockConfig+0x1b4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d20c      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_ClockConfig+0x1b4>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_RCC_ClockConfig+0x1b4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e030      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4915      	ldr	r1, [pc, #84]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490d      	ldr	r1, [pc, #52]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ace:	f000 f81d 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f008 ff26 	bl	800a93c <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	0800d55c 	.word	0x0800d55c
 8001b08:	20000030 	.word	0x20000030

08001b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b22:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d007      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x32>
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d008      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x38>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80b4 	bne.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b3a:	60bb      	str	r3, [r7, #8]
       break;
 8001b3c:	e0b3      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3e:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b40:	60bb      	str	r3, [r7, #8]
      break;
 8001b42:	e0b0      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b44:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4e:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d04a      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b55      	ldr	r3, [pc, #340]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	f04f 0400 	mov.w	r4, #0
 8001b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	ea03 0501 	and.w	r5, r3, r1
 8001b70:	ea04 0602 	and.w	r6, r4, r2
 8001b74:	4629      	mov	r1, r5
 8001b76:	4632      	mov	r2, r6
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	f04f 0400 	mov.w	r4, #0
 8001b80:	0154      	lsls	r4, r2, #5
 8001b82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b86:	014b      	lsls	r3, r1, #5
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	1b49      	subs	r1, r1, r5
 8001b8e:	eb62 0206 	sbc.w	r2, r2, r6
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f04f 0400 	mov.w	r4, #0
 8001b9a:	0194      	lsls	r4, r2, #6
 8001b9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ba0:	018b      	lsls	r3, r1, #6
 8001ba2:	1a5b      	subs	r3, r3, r1
 8001ba4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	00e2      	lsls	r2, r4, #3
 8001bb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bb6:	00d9      	lsls	r1, r3, #3
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4614      	mov	r4, r2
 8001bbc:	195b      	adds	r3, r3, r5
 8001bbe:	eb44 0406 	adc.w	r4, r4, r6
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	0262      	lsls	r2, r4, #9
 8001bcc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001bd0:	0259      	lsls	r1, r3, #9
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4621      	mov	r1, r4
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4623      	mov	r3, r4
 8001be4:	f7fe ffe8 	bl	8000bb8 <__aeabi_uldivmod>
 8001be8:	4603      	mov	r3, r0
 8001bea:	460c      	mov	r4, r1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e049      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	f04f 0400 	mov.w	r4, #0
 8001bfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	ea03 0501 	and.w	r5, r3, r1
 8001c06:	ea04 0602 	and.w	r6, r4, r2
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	4632      	mov	r2, r6
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f04f 0400 	mov.w	r4, #0
 8001c16:	0154      	lsls	r4, r2, #5
 8001c18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c1c:	014b      	lsls	r3, r1, #5
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4622      	mov	r2, r4
 8001c22:	1b49      	subs	r1, r1, r5
 8001c24:	eb62 0206 	sbc.w	r2, r2, r6
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f04f 0400 	mov.w	r4, #0
 8001c30:	0194      	lsls	r4, r2, #6
 8001c32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c36:	018b      	lsls	r3, r1, #6
 8001c38:	1a5b      	subs	r3, r3, r1
 8001c3a:	eb64 0402 	sbc.w	r4, r4, r2
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	00e2      	lsls	r2, r4, #3
 8001c48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c4c:	00d9      	lsls	r1, r3, #3
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	195b      	adds	r3, r3, r5
 8001c54:	eb44 0406 	adc.w	r4, r4, r6
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	02a2      	lsls	r2, r4, #10
 8001c62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c66:	0299      	lsls	r1, r3, #10
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4621      	mov	r1, r4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f04f 0400 	mov.w	r4, #0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4623      	mov	r3, r4
 8001c7a:	f7fe ff9d 	bl	8000bb8 <__aeabi_uldivmod>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460c      	mov	r4, r1
 8001c82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	60bb      	str	r3, [r7, #8]
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ca2:	60bb      	str	r3, [r7, #8]
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000030 	.word	0x20000030

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	0800d56c 	.word	0x0800d56c

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	0800d56c 	.word	0x0800d56c

08001d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	220f      	movs	r2, #15
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCC_GetClockConfig+0x60>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 020f 	and.w	r2, r3, #15
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e056      	b.n	8001e48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d106      	bne.n	8001dba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f008 fc3b 	bl	800a630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	ea42 0103 	orr.w	r1, r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	f003 0104 	and.w	r1, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_SPI_Transmit+0x22>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e11e      	b.n	80020b0 <HAL_SPI_Transmit+0x260>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e7a:	f7ff f853 	bl	8000f24 <HAL_GetTick>
 8001e7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d002      	beq.n	8001e96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
 8001e92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e94:	e103      	b.n	800209e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_SPI_Transmit+0x52>
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ea6:	e0fa      	b.n	800209e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eee:	d107      	bne.n	8001f00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d007      	beq.n	8001f1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f26:	d14b      	bne.n	8001fc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_SPI_Transmit+0xe6>
 8001f30:	8afb      	ldrh	r3, [r7, #22]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d13e      	bne.n	8001fb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	1c9a      	adds	r2, r3, #2
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f5a:	e02b      	b.n	8001fb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d112      	bne.n	8001f90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	881a      	ldrh	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	1c9a      	adds	r2, r3, #2
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f8e:	e011      	b.n	8001fb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f90:	f7fe ffc8 	bl	8000f24 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d803      	bhi.n	8001fa8 <HAL_SPI_Transmit+0x158>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa6:	d102      	bne.n	8001fae <HAL_SPI_Transmit+0x15e>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fb2:	e074      	b.n	800209e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ce      	bne.n	8001f5c <HAL_SPI_Transmit+0x10c>
 8001fbe:	e04c      	b.n	800205a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <HAL_SPI_Transmit+0x17e>
 8001fc8:	8afb      	ldrh	r3, [r7, #22]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d140      	bne.n	8002050 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ff4:	e02c      	b.n	8002050 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d113      	bne.n	800202c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	330c      	adds	r3, #12
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	86da      	strh	r2, [r3, #54]	; 0x36
 800202a:	e011      	b.n	8002050 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800202c:	f7fe ff7a 	bl	8000f24 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d803      	bhi.n	8002044 <HAL_SPI_Transmit+0x1f4>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002042:	d102      	bne.n	800204a <HAL_SPI_Transmit+0x1fa>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800204e:	e026      	b.n	800209e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1cd      	bne.n	8001ff6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fba4 	bl	80027ac <SPI_EndRxTxTransaction>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	e000      	b.n	800209e <HAL_SPI_Transmit+0x24e>
  }

error:
 800209c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d4:	d112      	bne.n	80020fc <HAL_SPI_Receive+0x44>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10e      	bne.n	80020fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2204      	movs	r2, #4
 80020e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f8e9 	bl	80022ca <HAL_SPI_TransmitReceive>
 80020f8:	4603      	mov	r3, r0
 80020fa:	e0e2      	b.n	80022c2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_SPI_Receive+0x52>
 8002106:	2302      	movs	r3, #2
 8002108:	e0db      	b.n	80022c2 <HAL_SPI_Receive+0x20a>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002112:	f7fe ff07 	bl	8000f24 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d002      	beq.n	800212a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002128:	e0c2      	b.n	80022b0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_SPI_Receive+0x7e>
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    goto error;
 800213a:	e0b9      	b.n	80022b0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2204      	movs	r2, #4
 8002140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002182:	d107      	bne.n	8002194 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d007      	beq.n	80021b2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d162      	bne.n	8002280 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021ba:	e02e      	b.n	800221a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d115      	bne.n	80021f6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f103 020c 	add.w	r2, r3, #12
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	7812      	ldrb	r2, [r2, #0]
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021f4:	e011      	b.n	800221a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f6:	f7fe fe95 	bl	8000f24 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d803      	bhi.n	800220e <HAL_SPI_Receive+0x156>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800220c:	d102      	bne.n	8002214 <HAL_SPI_Receive+0x15c>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002218:	e04a      	b.n	80022b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1cb      	bne.n	80021bc <HAL_SPI_Receive+0x104>
 8002224:	e031      	b.n	800228a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d113      	bne.n	800225c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	b292      	uxth	r2, r2
 8002240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	1c9a      	adds	r2, r3, #2
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800225a:	e011      	b.n	8002280 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225c:	f7fe fe62 	bl	8000f24 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d803      	bhi.n	8002274 <HAL_SPI_Receive+0x1bc>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002272:	d102      	bne.n	800227a <HAL_SPI_Receive+0x1c2>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800227e:	e017      	b.n	80022b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1cd      	bne.n	8002226 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa27 	bl	80026e2 <SPI_EndRxTransaction>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	75fb      	strb	r3, [r7, #23]
 80022ac:	e000      	b.n	80022b0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80022ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b08c      	sub	sp, #48	; 0x30
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022d8:	2301      	movs	r3, #1
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x26>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e18a      	b.n	8002606 <HAL_SPI_TransmitReceive+0x33c>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f8:	f7fe fe14 	bl	8000f24 <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002316:	2b01      	cmp	r3, #1
 8002318:	d00f      	beq.n	800233a <HAL_SPI_TransmitReceive+0x70>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002320:	d107      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x68>
 800232a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800232e:	2b04      	cmp	r3, #4
 8002330:	d003      	beq.n	800233a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002338:	e15b      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_SPI_TransmitReceive+0x82>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_SPI_TransmitReceive+0x82>
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002352:	e14e      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b04      	cmp	r3, #4
 800235e:	d003      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2205      	movs	r2, #5
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	887a      	ldrh	r2, [r7, #2]
 800237e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d007      	beq.n	80023bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c4:	d178      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_SPI_TransmitReceive+0x10a>
 80023ce:	8b7b      	ldrh	r3, [r7, #26]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d166      	bne.n	80024a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	1c9a      	adds	r2, r3, #2
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f8:	e053      	b.n	80024a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b02      	cmp	r3, #2
 8002406:	d11b      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x176>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x176>
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d113      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	1c9a      	adds	r2, r3, #2
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d119      	bne.n	8002482 <HAL_SPI_TransmitReceive+0x1b8>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d014      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	b292      	uxth	r2, r2
 8002464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800247e:	2301      	movs	r3, #1
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002482:	f7fe fd4f 	bl	8000f24 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800248e:	429a      	cmp	r2, r3
 8002490:	d807      	bhi.n	80024a2 <HAL_SPI_TransmitReceive+0x1d8>
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002498:	d003      	beq.n	80024a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024a0:	e0a7      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1a6      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x130>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1a1      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x130>
 80024b6:	e07c      	b.n	80025b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x1fc>
 80024c0:	8b7b      	ldrh	r3, [r7, #26]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d16b      	bne.n	800259e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ec:	e057      	b.n	800259e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d11c      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x26c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d017      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x26c>
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d114      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	7812      	ldrb	r2, [r2, #0]
 8002518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x2ae>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002578:	f7fe fcd4 	bl	8000f24 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002584:	429a      	cmp	r2, r3
 8002586:	d803      	bhi.n	8002590 <HAL_SPI_TransmitReceive+0x2c6>
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800258e:	d102      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x2cc>
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800259c:	e029      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1a2      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x224>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d19d      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f8f8 	bl	80027ac <SPI_EndRxTxTransaction>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025ce:	e010      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	e000      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002606:	4618      	mov	r0, r3
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800261e:	e04c      	b.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002626:	d048      	beq.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002628:	f7fe fc7c 	bl	8000f24 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d902      	bls.n	800263e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d13d      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800264c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002656:	d111      	bne.n	800267c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002660:	d004      	beq.n	800266c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d107      	bne.n	800267c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	d10f      	bne.n	80026a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e00f      	b.n	80026da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1a3      	bne.n	8002620 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af02      	add	r7, sp, #8
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f6:	d111      	bne.n	800271c <SPI_EndRxTransaction+0x3a>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002700:	d004      	beq.n	800270c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d107      	bne.n	800271c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002724:	d12a      	bne.n	800277c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272e:	d012      	beq.n	8002756 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ff67 	bl	800260e <SPI_WaitFlagStateUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02d      	beq.n	80027a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e026      	b.n	80027a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	2101      	movs	r1, #1
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff ff54 	bl	800260e <SPI_WaitFlagStateUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01a      	beq.n	80027a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e013      	b.n	80027a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	2101      	movs	r1, #1
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff ff41 	bl	800260e <SPI_WaitFlagStateUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e000      	b.n	80027a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <SPI_EndRxTxTransaction+0x7c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <SPI_EndRxTxTransaction+0x80>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0d5b      	lsrs	r3, r3, #21
 80027c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d6:	d112      	bne.n	80027fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff ff13 	bl	800260e <SPI_WaitFlagStateUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0220 	orr.w	r2, r3, #32
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e00f      	b.n	800281e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3b01      	subs	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d0f2      	beq.n	80027fe <SPI_EndRxTxTransaction+0x52>
 8002818:	e000      	b.n	800281c <SPI_EndRxTxTransaction+0x70>
        break;
 800281a:	bf00      	nop
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000030 	.word	0x20000030
 800282c:	165e9f81 	.word	0x165e9f81

08002830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e01d      	b.n	800287e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f007 ffac 	bl	800a7b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fba2 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d007      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e01d      	b.n	800291c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f815 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 fb53 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e083      	b.n	8002a54 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f007 fead 	bl	800a6c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297c:	f023 0307 	bic.w	r3, r3, #7
 8002980:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 fb13 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	4313      	orrs	r3, r2
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80029d8:	f023 030c 	bic.w	r3, r3, #12
 80029dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	4313      	orrs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	011a      	lsls	r2, r3, #4
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	031b      	lsls	r3, r3, #12
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0202 	mvn.w	r2, #2
 8002a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa6b 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa5d 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fa6e 	bl	8002f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0204 	mvn.w	r2, #4
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa41 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa33 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fa44 	bl	8002f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0208 	mvn.w	r2, #8
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2204      	movs	r2, #4
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa17 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa09 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa1a 	bl	8002f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0210 	mvn.w	r2, #16
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9ed 	bl	8002f7a <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9df 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9f0 	bl	8002f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0201 	mvn.w	r2, #1
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f006 fd86 	bl	80096ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	2b80      	cmp	r3, #128	; 0x80
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fccb 	bl	80035a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f9b5 	bl	8002fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0220 	mvn.w	r2, #32
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fc95 	bl	800358e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e0b4      	b.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	f200 809f 	bhi.w	8002ddc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002ddd 	.word	0x08002ddd
 8002cac:	08002ddd 	.word	0x08002ddd
 8002cb0:	08002ddd 	.word	0x08002ddd
 8002cb4:	08002d19 	.word	0x08002d19
 8002cb8:	08002ddd 	.word	0x08002ddd
 8002cbc:	08002ddd 	.word	0x08002ddd
 8002cc0:	08002ddd 	.word	0x08002ddd
 8002cc4:	08002d5b 	.word	0x08002d5b
 8002cc8:	08002ddd 	.word	0x08002ddd
 8002ccc:	08002ddd 	.word	0x08002ddd
 8002cd0:	08002ddd 	.word	0x08002ddd
 8002cd4:	08002d9b 	.word	0x08002d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f9ea 	bl	80030b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6999      	ldr	r1, [r3, #24]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	619a      	str	r2, [r3, #24]
      break;
 8002d16:	e062      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fa30 	bl	8003184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6999      	ldr	r1, [r3, #24]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	021a      	lsls	r2, r3, #8
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	619a      	str	r2, [r3, #24]
      break;
 8002d58:	e041      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fa7b 	bl	800325c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0208 	orr.w	r2, r2, #8
 8002d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0204 	bic.w	r2, r2, #4
 8002d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69d9      	ldr	r1, [r3, #28]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	61da      	str	r2, [r3, #28]
      break;
 8002d98:	e021      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fac5 	bl	8003330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69d9      	ldr	r1, [r3, #28]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	61da      	str	r2, [r3, #28]
      break;
 8002dda:	e000      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ddc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIM_ConfigClockSource+0x18>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0a6      	b.n	8002f5e <HAL_TIM_ConfigClockSource+0x166>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d067      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x120>
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d80b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x6c>
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d073      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0x140>
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d802      	bhi.n	8002e5a <HAL_TIM_ConfigClockSource+0x62>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d06f      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e58:	e078      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d06c      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0x140>
 8002e5e:	2b30      	cmp	r3, #48	; 0x30
 8002e60:	d06a      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e62:	e073      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d00d      	beq.n	8002e84 <HAL_TIM_ConfigClockSource+0x8c>
 8002e68:	2b70      	cmp	r3, #112	; 0x70
 8002e6a:	d804      	bhi.n	8002e76 <HAL_TIM_ConfigClockSource+0x7e>
 8002e6c:	2b50      	cmp	r3, #80	; 0x50
 8002e6e:	d033      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0xe0>
 8002e70:	2b60      	cmp	r3, #96	; 0x60
 8002e72:	d041      	beq.n	8002ef8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e74:	e06a      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d066      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x152>
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	d017      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e82:	e063      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f000 fb16 	bl	80034c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ea6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]
      break;
 8002eb0:	e04c      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f000 faff 	bl	80034c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed4:	609a      	str	r2, [r3, #8]
      break;
 8002ed6:	e039      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f000 fa73 	bl	80033d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2150      	movs	r1, #80	; 0x50
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 facc 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002ef6:	e029      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f000 fa92 	bl	800342e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2160      	movs	r1, #96	; 0x60
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fabc 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002f16:	e019      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	461a      	mov	r2, r3
 8002f26:	f000 fa53 	bl	80033d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 faac 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002f36:	e009      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 faa3 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002f48:	e000      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <TIM_Base_SetConfig+0xe4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00f      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <TIM_Base_SetConfig+0xe8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a30      	ldr	r2, [pc, #192]	; (80030a4 <TIM_Base_SetConfig+0xec>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <TIM_Base_SetConfig+0xf0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <TIM_Base_SetConfig+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01b      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d017      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <TIM_Base_SetConfig+0xe8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <TIM_Base_SetConfig+0xec>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00f      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <TIM_Base_SetConfig+0xf0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00b      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <TIM_Base_SetConfig+0xf4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <TIM_Base_SetConfig+0xf8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <TIM_Base_SetConfig+0xfc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <TIM_Base_SetConfig+0xe4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800

080030b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0201 	bic.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 0302 	bic.w	r3, r3, #2
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10c      	bne.n	800312e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0308 	bic.w	r3, r3, #8
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40010000 	.word	0x40010000

08003184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0210 	bic.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0320 	bic.w	r3, r3, #32
 80031ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <TIM_OC2_SetConfig+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10d      	bne.n	8003200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <TIM_OC2_SetConfig+0xd4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000

0800325c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <TIM_OC3_SetConfig+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10d      	bne.n	80032d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <TIM_OC3_SetConfig+0xd0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d113      	bne.n	8003306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40010000 	.word	0x40010000

08003330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <TIM_OC4_SetConfig+0x9c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d109      	bne.n	80033a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000

080033d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f023 0201 	bic.w	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 030a 	bic.w	r3, r3, #10
 800340c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800346a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f043 0307 	orr.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003518:	2302      	movs	r3, #2
 800351a:	e032      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003554:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4313      	orrs	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e03f      	b.n	8003648 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f007 f965 	bl	800a8ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2224      	movs	r2, #36	; 0x24
 80035e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f90c 	bl	8003818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800360e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800361e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	f040 8083 	bne.w	8003778 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_UART_Transmit+0x2e>
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e07b      	b.n	800377a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UART_Transmit+0x40>
 800368c:	2302      	movs	r3, #2
 800368e:	e074      	b.n	800377a <HAL_UART_Transmit+0x12a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2221      	movs	r2, #33	; 0x21
 80036a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036a6:	f7fd fc3d 	bl	8000f24 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036b8:	e042      	b.n	8003740 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d122      	bne.n	8003718 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f850 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e046      	b.n	800377a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fe:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3302      	adds	r3, #2
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	e017      	b.n	8003740 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3301      	adds	r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	e013      	b.n	8003740 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f82d 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e023      	b.n	800377a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	60ba      	str	r2, [r7, #8]
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1b7      	bne.n	80036ba <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f814 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e00a      	b.n	800377a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	e02c      	b.n	80037ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379a:	d028      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037a2:	f7fd fbbf 	bl	8000f24 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d21d      	bcs.n	80037ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e00f      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	429a      	cmp	r2, r3
 800380a:	d0c3      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003858:	f023 030c 	bic.w	r3, r3, #12
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	430b      	orrs	r3, r1
 8003864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003884:	f040 80e4 	bne.w	8003a50 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4aab      	ldr	r2, [pc, #684]	; (8003b3c <UART_SetConfig+0x324>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <UART_SetConfig+0x84>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4aaa      	ldr	r2, [pc, #680]	; (8003b40 <UART_SetConfig+0x328>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d16c      	bne.n	8003976 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800389c:	f7fe fa2e 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	4aa3      	ldr	r2, [pc, #652]	; (8003b44 <UART_SetConfig+0x32c>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	011c      	lsls	r4, r3, #4
 80038c0:	f7fe fa1c 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009a      	lsls	r2, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80038da:	f7fe fa0f 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009a      	lsls	r2, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	4a93      	ldr	r2, [pc, #588]	; (8003b44 <UART_SetConfig+0x32c>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2264      	movs	r2, #100	; 0x64
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	1aeb      	subs	r3, r5, r3
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	3332      	adds	r3, #50	; 0x32
 8003908:	4a8e      	ldr	r2, [pc, #568]	; (8003b44 <UART_SetConfig+0x32c>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003916:	441c      	add	r4, r3
 8003918:	f7fe f9f0 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 800391c:	4602      	mov	r2, r0
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009a      	lsls	r2, r3, #2
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003932:	f7fe f9e3 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003936:	4602      	mov	r2, r0
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <UART_SetConfig+0x32c>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2264      	movs	r2, #100	; 0x64
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	1aeb      	subs	r3, r5, r3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	3332      	adds	r3, #50	; 0x32
 8003960:	4a78      	ldr	r2, [pc, #480]	; (8003b44 <UART_SetConfig+0x32c>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	f003 0207 	and.w	r2, r3, #7
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4422      	add	r2, r4
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	e154      	b.n	8003c20 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003976:	f7fe f9ad 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 800397a:	4602      	mov	r2, r0
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a6c      	ldr	r2, [pc, #432]	; (8003b44 <UART_SetConfig+0x32c>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	011c      	lsls	r4, r3, #4
 800399a:	f7fe f99b 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009a      	lsls	r2, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80039b4:	f7fe f98e 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009a      	lsls	r2, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <UART_SetConfig+0x32c>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	2264      	movs	r2, #100	; 0x64
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	1aeb      	subs	r3, r5, r3
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	3332      	adds	r3, #50	; 0x32
 80039e2:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <UART_SetConfig+0x32c>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039f0:	441c      	add	r4, r3
 80039f2:	f7fe f96f 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a0c:	f7fe f962 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	441a      	add	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	4a47      	ldr	r2, [pc, #284]	; (8003b44 <UART_SetConfig+0x32c>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2264      	movs	r2, #100	; 0x64
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	1aeb      	subs	r3, r5, r3
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <UART_SetConfig+0x32c>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4422      	add	r2, r4
 8003a4c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003a4e:	e0e7      	b.n	8003c20 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a39      	ldr	r2, [pc, #228]	; (8003b3c <UART_SetConfig+0x324>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <UART_SetConfig+0x24c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a38      	ldr	r2, [pc, #224]	; (8003b40 <UART_SetConfig+0x328>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d171      	bne.n	8003b48 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003a64:	f7fe f94a 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009a      	lsls	r2, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <UART_SetConfig+0x32c>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	011c      	lsls	r4, r3, #4
 8003a88:	f7fe f938 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	441a      	add	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003aa2:	f7fe f92b 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009a      	lsls	r2, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <UART_SetConfig+0x32c>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2264      	movs	r2, #100	; 0x64
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	1aeb      	subs	r3, r5, r3
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	3332      	adds	r3, #50	; 0x32
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <UART_SetConfig+0x32c>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003adc:	441c      	add	r4, r3
 8003ade:	f7fe f90d 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fbb2 f5f3 	udiv	r5, r2, r3
 8003af8:	f7fe f900 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <UART_SetConfig+0x32c>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2264      	movs	r2, #100	; 0x64
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	1aeb      	subs	r3, r5, r3
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	3332      	adds	r3, #50	; 0x32
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <UART_SetConfig+0x32c>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4422      	add	r2, r4
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	e071      	b.n	8003c20 <UART_SetConfig+0x408>
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	40011400 	.word	0x40011400
 8003b44:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003b48:	f7fe f8c4 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <UART_SetConfig+0x410>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	011c      	lsls	r4, r3, #4
 8003b6c:	f7fe f8b2 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	441a      	add	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b86:	f7fe f8a5 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <UART_SetConfig+0x410>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2264      	movs	r2, #100	; 0x64
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	1aeb      	subs	r3, r5, r3
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <UART_SetConfig+0x410>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc0:	441c      	add	r4, r3
 8003bc2:	f7fe f887 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003bdc:	f7fe f87a 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <UART_SetConfig+0x410>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2264      	movs	r2, #100	; 0x64
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	1aeb      	subs	r3, r5, r3
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	3332      	adds	r3, #50	; 0x32
 8003c0a:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <UART_SetConfig+0x410>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 020f 	and.w	r2, r3, #15
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4422      	add	r2, r4
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	e7ff      	b.n	8003c20 <UART_SetConfig+0x408>
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bdb0      	pop	{r4, r5, r7, pc}
 8003c28:	51eb851f 	.word	0x51eb851f

08003c2c <_ZN10ValueField9putInDumpEPh>:
	std::vector<unsigned char> value;
	bool exist;
public:
	ValueField(std::vector<unsigned char> value): value(value) {}
	ValueField() {}
	void putInDump(unsigned char * begin) {std::copy(value.begin(), value.end(), begin);}
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f99b 	bl	8003f74 <_ZNSt6vectorIhSaIhEE5beginEv>
 8003c3e:	4604      	mov	r4, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f9a6 	bl	8003f94 <_ZNSt6vectorIhSaIhEE3endEv>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 f9b1 	bl	8003fb6 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <_ZN10ValueField7getSizeEv>:
//		value.resize(content_len);
//		int size = value.size();
//		std::copy(begin, begin + value.size(), value.begin());
	}
	void setValue(std::vector<unsigned char> value) {this->value = value;}
	unsigned short getSize() {return value.size();}
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f9bd 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_Z12buildRequestP10SLMPPacketPh>:
// Created by data-scientist on 07->02->2020->
//

#include "SLMPRequestBuilder.h"

void buildRequest(SLMPPacket *packet, unsigned char *msg) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
	unsigned char *slider = msg;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	60fb      	str	r3, [r7, #12]

	if (packet->is_serial_no.exist) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	789b      	ldrb	r3, [r3, #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <_Z12buildRequestP10SLMPPacketPh+0x26>
		packet->is_serial_no.putInDump(slider);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f9b7 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	60fb      	str	r3, [r7, #12]
	}

	if (packet->is_serial_no.getValue() != 0x0050) {
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f9c8 	bl	8004036 <_ZN5FieldItLj2EE8getValueEv>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b50      	cmp	r3, #80	; 0x50
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <_Z12buildRequestP10SLMPPacketPh+0x70>
			packet->serial_no.putInDump(slider);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f9a2 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
			packet->serial_no.exist = true;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	719a      	strb	r2, [r3, #6]
			slider += 2;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	60fb      	str	r3, [r7, #12]

			packet->field_If_serial_no.putInDump(slider);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3348      	adds	r3, #72	; 0x48
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f996 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
			packet->field_If_serial_no.exist = true;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			slider += 2;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	60fb      	str	r3, [r7, #12]
	}

	if (packet->request_dest_net_no.exist) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7a5b      	ldrb	r3, [r3, #9]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <_Z12buildRequestP10SLMPPacketPh+0x8a>
		packet->request_dest_net_no.putInDump(slider);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9ab 	bl	8004052 <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_dest_station_no.exist) {
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7adb      	ldrb	r3, [r3, #11]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <_Z12buildRequestP10SLMPPacketPh+0xa4>
		packet->request_dest_station_no.putInDump(slider);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	330a      	adds	r3, #10
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f99e 	bl	8004052 <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_processor.exist) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7b9b      	ldrb	r3, [r3, #14]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <_Z12buildRequestP10SLMPPacketPh+0xbe>
		packet->request_processor.putInDump(slider);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	330c      	adds	r3, #12
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f96b 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3302      	adds	r3, #2
 8003d34:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_reserved.exist) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7c5b      	ldrb	r3, [r3, #17]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <_Z12buildRequestP10SLMPPacketPh+0xd8>
		packet->request_reserved.putInDump(slider);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3310      	adds	r3, #16
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f984 	bl	8004052 <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
	}

	packet->data_length = Field<unsigned short, 2>(0xc + ((packet->value.exist) ? packet->value.getSize(): 0));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <_Z12buildRequestP10SLMPPacketPh+0xf4>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3334      	adds	r3, #52	; 0x34
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ff7c 	bl	8003c5c <_ZN10ValueField7getSizeEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	330c      	adds	r3, #12
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	e000      	b.n	8003d6e <_Z12buildRequestP10SLMPPacketPh+0xf6>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	f107 0208 	add.w	r2, r7, #8
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 f984 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3344      	adds	r3, #68	; 0x44
 8003d7e:	f107 0208 	add.w	r2, r7, #8
 8003d82:	8811      	ldrh	r1, [r2, #0]
 8003d84:	7892      	ldrb	r2, [r2, #2]
 8003d86:	8019      	strh	r1, [r3, #0]
 8003d88:	709a      	strb	r2, [r3, #2]
	//packet->data_length.setValue(12 + ((packet->value.exist) ? packet->value.getSize(): 0));

	packet->data_length.putInDump(slider);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3344      	adds	r3, #68	; 0x44
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f938 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
	slider += 2;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	60fb      	str	r3, [r7, #12]

	if (packet->monitoring_time.exist) {
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7d1b      	ldrb	r3, [r3, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <_Z12buildRequestP10SLMPPacketPh+0x13e>
		packet->monitoring_time.putInDump(slider);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3312      	adds	r3, #18
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f92b 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3302      	adds	r3, #2
 8003db4:	60fb      	str	r3, [r7, #12]
	}
	if (packet->command.exist) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7e1b      	ldrb	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <_Z12buildRequestP10SLMPPacketPh+0x158>
		packet->command.putInDump(slider);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3316      	adds	r3, #22
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f91e 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3302      	adds	r3, #2
 8003dce:	60fb      	str	r3, [r7, #12]
	}
	if (packet->subcommand.exist) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7f1b      	ldrb	r3, [r3, #28]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <_Z12buildRequestP10SLMPPacketPh+0x172>
		packet->subcommand.putInDump(slider);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	331a      	adds	r3, #26
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f911 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3302      	adds	r3, #2
 8003de8:	60fb      	str	r3, [r7, #12]
	}
	if (packet->head_device_no.exist) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <_Z12buildRequestP10SLMPPacketPh+0x18e>
		packet->head_device_no.putInDump(slider);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3320      	adds	r3, #32
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f954 	bl	80040a8 <_ZN5FieldIjLj3EE9putInDumpEPh>
		slider += 3;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3303      	adds	r3, #3
 8003e04:	60fb      	str	r3, [r7, #12]
	}
	if (packet->device_code.exist) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <_Z12buildRequestP10SLMPPacketPh+0x1aa>
		packet->device_code.putInDump(slider);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3328      	adds	r3, #40	; 0x28
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f91b 	bl	8004052 <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
	}
	if (packet->no_of_device_points.exist) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <_Z12buildRequestP10SLMPPacketPh+0x1c6>
		packet->no_of_device_points.putInDump(slider);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	332a      	adds	r3, #42	; 0x2a
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f8e7 	bl	8004006 <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	60fb      	str	r3, [r7, #12]
	}

	if (packet->value.exist) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <_Z12buildRequestP10SLMPPacketPh+0x1e2>
		packet->value.putInDump(slider);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3334      	adds	r3, #52	; 0x34
 8003e4c:	68f9      	ldr	r1, [r7, #12]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff feec 	bl	8003c2c <_ZN10ValueField9putInDumpEPh>
		slider += 2;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3302      	adds	r3, #2
 8003e58:	60fb      	str	r3, [r7, #12]
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_Z9getMsgLenP10SLMPPacket>:

unsigned short getMsgLen(SLMPPacket* packet) {
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	unsigned short len = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	81fb      	strh	r3, [r7, #14]

	if (packet->is_serial_no.exist) {len += 2;}
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	789b      	ldrb	r3, [r3, #2]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <_Z9getMsgLenP10SLMPPacket+0x1a>
 8003e76:	89fb      	ldrh	r3, [r7, #14]
 8003e78:	3302      	adds	r3, #2
 8003e7a:	81fb      	strh	r3, [r7, #14]
	if (packet->serial_no.exist) {len += 2;}
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	799b      	ldrb	r3, [r3, #6]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <_Z9getMsgLenP10SLMPPacket+0x28>
 8003e84:	89fb      	ldrh	r3, [r7, #14]
 8003e86:	3302      	adds	r3, #2
 8003e88:	81fb      	strh	r3, [r7, #14]
	if (packet->field_If_serial_no.exist) {len += 2;}
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <_Z9getMsgLenP10SLMPPacket+0x38>
 8003e94:	89fb      	ldrh	r3, [r7, #14]
 8003e96:	3302      	adds	r3, #2
 8003e98:	81fb      	strh	r3, [r7, #14]
	if (packet->request_dest_net_no.exist) {len += 1;}
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7a5b      	ldrb	r3, [r3, #9]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <_Z9getMsgLenP10SLMPPacket+0x46>
 8003ea2:	89fb      	ldrh	r3, [r7, #14]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	81fb      	strh	r3, [r7, #14]
	if (packet->request_dest_station_no.exist) {len += 1;}
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7adb      	ldrb	r3, [r3, #11]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <_Z9getMsgLenP10SLMPPacket+0x54>
 8003eb0:	89fb      	ldrh	r3, [r7, #14]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	81fb      	strh	r3, [r7, #14]
	if (packet->request_processor.exist) {len += 2;}
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7b9b      	ldrb	r3, [r3, #14]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <_Z9getMsgLenP10SLMPPacket+0x62>
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	81fb      	strh	r3, [r7, #14]
	if (packet->request_reserved.exist) {len += 1;}
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7c5b      	ldrb	r3, [r3, #17]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <_Z9getMsgLenP10SLMPPacket+0x70>
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	81fb      	strh	r3, [r7, #14]
	if (packet->data_length.exist) {len += 2;}
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <_Z9getMsgLenP10SLMPPacket+0x80>
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	3302      	adds	r3, #2
 8003ee0:	81fb      	strh	r3, [r7, #14]
	if (packet->monitoring_time.exist) {len += 2;}
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7d1b      	ldrb	r3, [r3, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <_Z9getMsgLenP10SLMPPacket+0x8e>
 8003eea:	89fb      	ldrh	r3, [r7, #14]
 8003eec:	3302      	adds	r3, #2
 8003eee:	81fb      	strh	r3, [r7, #14]
	if (packet->command.exist) {len += 2;}
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e1b      	ldrb	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <_Z9getMsgLenP10SLMPPacket+0x9c>
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	3302      	adds	r3, #2
 8003efc:	81fb      	strh	r3, [r7, #14]
	if (packet->subcommand.exist) {len += 2;}
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7f1b      	ldrb	r3, [r3, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <_Z9getMsgLenP10SLMPPacket+0xaa>
 8003f06:	89fb      	ldrh	r3, [r7, #14]
 8003f08:	3302      	adds	r3, #2
 8003f0a:	81fb      	strh	r3, [r7, #14]
	if (packet->head_device_no.exist) {len += 3;}
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <_Z9getMsgLenP10SLMPPacket+0xba>
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	3303      	adds	r3, #3
 8003f1a:	81fb      	strh	r3, [r7, #14]
	if (packet->device_code.exist) {len += 1;}
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <_Z9getMsgLenP10SLMPPacket+0xca>
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	81fb      	strh	r3, [r7, #14]
	if (packet->no_of_device_points.exist) {len += 2;}
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <_Z9getMsgLenP10SLMPPacket+0xda>
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	81fb      	strh	r3, [r7, #14]
	if (packet->end_code.exist) {len += 2;}
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <_Z9getMsgLenP10SLMPPacket+0xea>
 8003f46:	89fb      	ldrh	r3, [r7, #14]
 8003f48:	3302      	adds	r3, #2
 8003f4a:	81fb      	strh	r3, [r7, #14]
	if (packet->value.exist) {len += packet->value.getSize();}
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <_Z9getMsgLenP10SLMPPacket+0x108>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3334      	adds	r3, #52	; 0x34
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fe7e 	bl	8003c5c <_ZN10ValueField7getSizeEv>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	4413      	add	r3, r2
 8003f68:	81fb      	strh	r3, [r7, #14]

	return len;
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZNSt6vectorIhSaIhEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f8a7 	bl	80040d8 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZNSt6vectorIhSaIhEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f896 	bl	80040d8 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003fb6:	b590      	push	{r4, r7, lr}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f898 	bl	80040f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f000 f894 	bl	80040f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8003fd0:	4603      	mov	r3, r0
	       __result));
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f000 f899 	bl	800410e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>
 8003fdc:	4603      	mov	r3, r0
    }
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd90      	pop	{r4, r7, pc}

08003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <_ZN5FieldItLj2EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 8004006:	b590      	push	{r4, r7, lr}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f8af 	bl	8004176 <_ZNSt5arrayIhLj2EE5beginEv>
 8004018:	4604      	mov	r4, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f8b6 	bl	800418e <_ZNSt5arrayIhLj2EE3endEv>
 8004022:	4603      	mov	r3, r0
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4620      	mov	r0, r4
 800402a:	f000 f88c 	bl	8004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bd90      	pop	{r4, r7, pc}

08004036 <_ZN5FieldItLj2EE8getValueEv>:
	ValueType getValue() {
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
		ValueType tmp = this->data.value;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	81fb      	strh	r3, [r7, #14]
		return tmp;
 8004044:	89fb      	ldrh	r3, [r7, #14]
	}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN5FieldIhLj1EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f8a2 	bl	80041a8 <_ZNSt5arrayIhLj1EE5beginEv>
 8004064:	4604      	mov	r4, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f8a9 	bl	80041c0 <_ZNSt5arrayIhLj1EE3endEv>
 800406e:	4603      	mov	r3, r0
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4620      	mov	r0, r4
 8004076:	f000 f866 	bl	8004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bd90      	pop	{r4, r7, pc}

08004082 <_ZN5FieldItLj2EEC1Et>:
	Field(ValueType value) {
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	807b      	strh	r3, [r7, #2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	709a      	strb	r2, [r3, #2]
		data.value = value;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	801a      	strh	r2, [r3, #0]
	}
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_ZN5FieldIjLj3EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f890 	bl	80041da <_ZNSt5arrayIhLj3EE5beginEv>
 80040ba:	4604      	mov	r4, r0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f897 	bl	80041f2 <_ZNSt5arrayIhLj3EE3endEv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	4620      	mov	r0, r4
 80040cc:	f000 f83b 	bl	8004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd90      	pop	{r4, r7, pc}

080040d8 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800410e:	b5b0      	push	{r4, r5, r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f876 	bl	800420c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004120:	4604      	mov	r4, r0
 8004122:	68b8      	ldr	r0, [r7, #8]
 8004124:	f000 f872 	bl	800420c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004128:	4605      	mov	r5, r0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f87c 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 8004130:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004132:	461a      	mov	r2, r3
 8004134:	4629      	mov	r1, r5
 8004136:	4620      	mov	r0, r4
 8004138:	f000 f881 	bl	800423e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 800413c:	4603      	mov	r3, r0
    }
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bdb0      	pop	{r4, r5, r7, pc}

08004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f890 	bl	8004278 <_ZSt12__miter_baseIPhET_S1_>
 8004158:	4604      	mov	r4, r0
 800415a:	68b8      	ldr	r0, [r7, #8]
 800415c:	f000 f88c 	bl	8004278 <_ZSt12__miter_baseIPhET_S1_>
 8004160:	4603      	mov	r3, r0
	       __result));
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4619      	mov	r1, r3
 8004166:	4620      	mov	r0, r4
 8004168:	f000 f891 	bl	800428e <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800416c:	4603      	mov	r3, r0
    }
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}

08004176 <_ZNSt5arrayIhLj2EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8a1 	bl	80042c6 <_ZNSt5arrayIhLj2EE4dataEv>
 8004184:	4603      	mov	r3, r0
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_ZNSt5arrayIhLj2EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f895 	bl	80042c6 <_ZNSt5arrayIhLj2EE4dataEv>
 800419c:	4603      	mov	r3, r0
 800419e:	3302      	adds	r3, #2
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <_ZNSt5arrayIhLj1EE5beginEv>:
      begin() noexcept
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f895 	bl	80042e0 <_ZNSt5arrayIhLj1EE4dataEv>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <_ZNSt5arrayIhLj1EE3endEv>:
      end() noexcept
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f889 	bl	80042e0 <_ZNSt5arrayIhLj1EE4dataEv>
 80041ce:	4603      	mov	r3, r0
 80041d0:	3301      	adds	r3, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <_ZNSt5arrayIhLj3EE5beginEv>:
      begin() noexcept
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f889 	bl	80042fa <_ZNSt5arrayIhLj3EE4dataEv>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <_ZNSt5arrayIhLj3EE3endEv>:
      end() noexcept
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f87d 	bl	80042fa <_ZNSt5arrayIhLj3EE4dataEv>
 8004200:	4603      	mov	r3, r0
 8004202:	3303      	adds	r3, #3
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f823 	bl	8004262 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800421c:	4603      	mov	r3, r0
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f85e 	bl	8004314 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8004258:	4603      	mov	r3, r0
    }
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800428e:	b5b0      	push	{r4, r5, r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff ffc4 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 80042a0:	4604      	mov	r4, r0
 80042a2:	68b8      	ldr	r0, [r7, #8]
 80042a4:	f7ff ffc0 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 80042a8:	4605      	mov	r5, r0
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ffbc 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 80042b0:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80042b2:	461a      	mov	r2, r3
 80042b4:	4629      	mov	r1, r5
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7ff ffc1 	bl	800423e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80042bc:	4603      	mov	r3, r0
    }
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}

080042c6 <_ZNSt5arrayIhLj2EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f839 	bl	8004348 <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZNSt5arrayIhLj1EE4dataEv>:
      data() noexcept
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f837 	bl	800435e <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_ZNSt5arrayIhLj3EE4dataEv>:
      data() noexcept
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f835 	bl	8004374 <_ZNSt14__array_traitsIhLj3EE6_S_ptrERA3_Kh>
 800430a:	4603      	mov	r3, r0
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	461a      	mov	r2, r3
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f006 ff06 	bl	800b146 <memmove>
	  return __result + _Num;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
	}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <_ZNSt14__array_traitsIhLj3EE6_S_ptrERA3_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_ZN10ValueField11getFromDumpEPhj>:
	void getFromDump(unsigned char * begin, unsigned content_len) {
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
		while(value.size()) {
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fe18 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <_ZN10ValueField11getFromDumpEPhj+0x2e>
			value.pop_back();
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f8bc 	bl	8004546 <_ZNSt6vectorIhSaIhEE8pop_backEv>
		while(value.size()) {
 80043ce:	e7ee      	b.n	80043ae <_ZN10ValueField11getFromDumpEPhj+0xc>
		for(int i = 0; i < content_len; i++) {
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d90a      	bls.n	80043f2 <_ZN10ValueField11getFromDumpEPhj+0x50>
			value.push_back(begin[i]);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	4413      	add	r3, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	f000 f8c2 	bl	800456e <_ZNSt6vectorIhSaIhEE9push_backERKh>
		for(int i = 0; i < content_len; i++) {
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3301      	adds	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e7f0      	b.n	80043d4 <_ZN10ValueField11getFromDumpEPhj+0x32>
	}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_Z13parseResponseP10SLMPPacketPh>:
// Created by data-scientist on 07.02.2020.
//

#include "SLMPResponseParser.h"

void parseResponse(SLMPPacket *packet, unsigned char * msg) {
 80043fa:	b590      	push	{r4, r7, lr}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
	unsigned char *slider = msg;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	60fb      	str	r3, [r7, #12]

	packet->is_serial_no.getFromDump(slider);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f8d3 	bl	80045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->is_serial_no.exist = true;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	709a      	strb	r2, [r3, #2]
	slider += 2;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3302      	adds	r3, #2
 800441c:	60fb      	str	r3, [r7, #12]

	if (packet->is_serial_no.getValue() == 0x0050) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fe08 	bl	8004036 <_ZN5FieldItLj2EE8getValueEv>
 8004426:	4603      	mov	r3, r0
 8004428:	2b50      	cmp	r3, #80	; 0x50
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d011      	beq.n	800445a <_Z13parseResponseP10SLMPPacketPh+0x60>
		packet->serial_no.getFromDump(slider);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f8bb 	bl	80045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>
		slider += 2;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3302      	adds	r3, #2
 8004446:	60fb      	str	r3, [r7, #12]

		packet->field_If_serial_no.getFromDump(slider);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3348      	adds	r3, #72	; 0x48
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f8b2 	bl	80045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>
		slider += 2;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3302      	adds	r3, #2
 8004458:	60fb      	str	r3, [r7, #12]
	}

	packet->request_dest_net_no.getFromDump(slider);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3308      	adds	r3, #8
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f8be 	bl	80045e2 <_ZN5FieldIhLj1EE11getFromDumpEPh>
	packet->request_dest_net_no.exist = true;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	725a      	strb	r2, [r3, #9]
	slider += 1;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]

	packet->request_dest_station_no.getFromDump(slider);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	330a      	adds	r3, #10
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f8b2 	bl	80045e2 <_ZN5FieldIhLj1EE11getFromDumpEPh>
	packet->request_dest_station_no.exist = true;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	72da      	strb	r2, [r3, #11]
	slider += 1;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]

	packet->request_processor.getFromDump(slider);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	330c      	adds	r3, #12
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f891 	bl	80045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->request_processor.exist = true;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	739a      	strb	r2, [r3, #14]
	slider += 2;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3302      	adds	r3, #2
 80044a0:	60fb      	str	r3, [r7, #12]

	packet->request_reserved.getFromDump(slider);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3310      	adds	r3, #16
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f89a 	bl	80045e2 <_ZN5FieldIhLj1EE11getFromDumpEPh>
	packet->request_reserved.exist = true;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	745a      	strb	r2, [r3, #17]
	slider += 1;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]

	packet->data_length.getFromDump(slider);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3344      	adds	r3, #68	; 0x44
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f879 	bl	80045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->data_length.exist = true;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	slider += 2;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3302      	adds	r3, #2
 80044d2:	60fb      	str	r3, [r7, #12]

	packet->end_code.getFromDump(slider);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	332e      	adds	r3, #46	; 0x2e
 80044d8:	68f9      	ldr	r1, [r7, #12]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f86c 	bl	80045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>
	packet->end_code.exist = true;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	slider += 2;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3302      	adds	r3, #2
 80044ec:	60fb      	str	r3, [r7, #12]


	if ((packet->data_length.getValue() > 2) && !packet->end_code.getValue()) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3344      	adds	r3, #68	; 0x44
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fd9f 	bl	8004036 <_ZN5FieldItLj2EE8getValueEv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d909      	bls.n	8004512 <_Z13parseResponseP10SLMPPacketPh+0x118>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	332e      	adds	r3, #46	; 0x2e
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fd97 	bl	8004036 <_ZN5FieldItLj2EE8getValueEv>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <_Z13parseResponseP10SLMPPacketPh+0x118>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <_Z13parseResponseP10SLMPPacketPh+0x11a>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d012      	beq.n	800453e <_Z13parseResponseP10SLMPPacketPh+0x144>
		packet->value.exist = true;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		packet->value.getFromDump(slider, packet->data_length.getValue() - 2);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3344      	adds	r3, #68	; 0x44
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fd83 	bl	8004036 <_ZN5FieldItLj2EE8getValueEv>
 8004530:	4603      	mov	r3, r0
 8004532:	3b02      	subs	r3, #2
 8004534:	461a      	mov	r2, r3
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff ff32 	bl	80043a2 <_ZN10ValueField11getFromDumpEPhj>
	}
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bd90      	pop	{r4, r7, pc}

08004546 <_ZNSt6vectorIhSaIhEE8pop_backEv>:
       *  Note that no data is returned, and if the last element's
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 f877 	bl	8004654 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
      }
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	d00c      	beq.n	800459e <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4619      	mov	r1, r3
 800458e:	f000 f879 	bl	8004684 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]
      }
 800459c:	e008      	b.n	80045b0 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fcf8 	bl	8003f94 <_ZNSt6vectorIhSaIhEE3endEv>
 80045a4:	4603      	mov	r3, r0
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f87e 	bl	80046ac <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_ZN5FieldItLj2EE11getFromDumpEPh>:
	void getFromDump(unsigned char * begin) {std::copy(begin, begin + DumpSize, data.raw.begin());}
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	1c9c      	adds	r4, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fdd4 	bl	8004176 <_ZNSt5arrayIhLj2EE5beginEv>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	4621      	mov	r1, r4
 80045d4:	6838      	ldr	r0, [r7, #0]
 80045d6:	f7ff fdb6 	bl	8004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}

080045e2 <_ZN5FieldIhLj1EE11getFromDumpEPh>:
 80045e2:	b590      	push	{r4, r7, lr}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1c5c      	adds	r4, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fdd8 	bl	80041a8 <_ZNSt5arrayIhLj1EE5beginEv>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	4621      	mov	r1, r4
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7ff fda1 	bl	8004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bd90      	pop	{r4, r7, pc}

0800460c <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8cb 	bl	80047e2 <_ZSt8_DestroyIPhEvT_S1_>
    }
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8cb 	bl	80047fc <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff ffec 	bl	800466e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f8b8 	bl	8004812 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80046ac:	b5b0      	push	{r4, r5, r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80046b8:	4a3f      	ldr	r2, [pc, #252]	; (80047b8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x10c>)
 80046ba:	2101      	movs	r1, #1
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f8c1 	bl	8004844 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f7ff fc55 	bl	8003f74 <_ZNSt6vectorIhSaIhEE5beginEv>
 80046ca:	4603      	mov	r3, r0
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	f107 0214 	add.w	r2, r7, #20
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f8fb 	bl	80048d4 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80046de:	4603      	mov	r3, r0
 80046e0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f909 	bl	80048fe <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80046ec:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80046f2:	68fc      	ldr	r4, [r7, #12]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	18d5      	adds	r5, r2, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ffb7 	bl	800466e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	4629      	mov	r1, r5
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff ffbc 	bl	8004684 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681c      	ldr	r4, [r3, #0]
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fda2 	bl	8004262 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800471e:	4603      	mov	r3, r0
 8004720:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff7c 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800472a:	4603      	mov	r3, r0
	  __new_finish
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	4629      	mov	r1, r5
 8004730:	4620      	mov	r0, r4
 8004732:	f000 f8f8 	bl	8004926 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8004736:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3301      	adds	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fd8d 	bl	8004262 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8004748:	4603      	mov	r3, r0
 800474a:	681c      	ldr	r4, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff65 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004758:	4603      	mov	r3, r0
	  __new_finish
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4629      	mov	r1, r5
 800475e:	4620      	mov	r0, r4
 8004760:	f000 f8e1 	bl	8004926 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8004764:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681c      	ldr	r4, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff56 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004776:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004778:	461a      	mov	r2, r3
 800477a:	4629      	mov	r1, r5
 800477c:	4620      	mov	r0, r4
 800477e:	f7ff ff5b 	bl	8004638 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800478c:	461a      	mov	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1ad3      	subs	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8004794:	461a      	mov	r2, r3
 8004796:	f000 f811 	bl	80047bc <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
    }
 80047b0:	bf00      	nop
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bdb0      	pop	{r4, r5, r7, pc}
 80047b8:	0800d350 	.word	0x0800d350

080047bc <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	if (__p)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 f8bf 	bl	8004958 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8c1 	bl	8004976 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004812:	b590      	push	{r4, r7, lr}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff25 	bl	800466e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8004824:	4603      	mov	r3, r0
 8004826:	781c      	ldrb	r4, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4619      	mov	r1, r3
 800482c:	2001      	movs	r0, #1
 800482e:	f7ff fdac 	bl	800438a <_ZnwjPv>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_+0x2a>
 8004838:	4622      	mov	r2, r4
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bd90      	pop	{r4, r7, pc}

08004844 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f89b 	bl	800498c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004856:	4604      	mov	r4, r0
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fbc4 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800485e:	4603      	mov	r3, r0
 8004860:	1ae2      	subs	r2, r4, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	bf34      	ite	cc
 8004868:	2301      	movcc	r3, #1
 800486a:	2300      	movcs	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	f006 f988 	bl	800ab8a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff fbb3 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004880:	4604      	mov	r4, r0
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff fbaf 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004888:	4603      	mov	r3, r0
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	f107 0208 	add.w	r2, r7, #8
 8004890:	f107 0310 	add.w	r3, r7, #16
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f889 	bl	80049ae <_ZSt3maxIjERKT_S2_S2_>
 800489c:	4603      	mov	r3, r0
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4423      	add	r3, r4
 80048a2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fb9e 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d306      	bcc.n	80048c0 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7c>
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f86a 	bl	800498c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80048b8:	4602      	mov	r2, r0
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	4293      	cmp	r3, r2
 80048be:	d904      	bls.n	80048ca <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f863 	bl	800498c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80048c6:	4603      	mov	r3, r0
 80048c8:	e000      	b.n	80048cc <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x88>
 80048ca:	697b      	ldr	r3, [r7, #20]
      }
 80048cc:	4618      	mov	r0, r3
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd90      	pop	{r4, r7, pc}

080048d4 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fcbf 	bl	8004262 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80048e4:	4603      	mov	r3, r0
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461c      	mov	r4, r3
 80048ea:	6838      	ldr	r0, [r7, #0]
 80048ec:	f7ff fcb9 	bl	8004262 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80048f0:	4603      	mov	r3, r0
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1ae3      	subs	r3, r4, r3
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}

080048fe <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f85f 	bl	80049d6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8004918:	4603      	mov	r3, r0
 800491a:	e000      	b.n	800491e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 800491c:	2300      	movs	r3, #0
      }
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004926:	b590      	push	{r4, r7, lr}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f85d 	bl	80049f4 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800493a:	4604      	mov	r4, r0
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f000 f859 	bl	80049f4 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8004942:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4620      	mov	r0, r4
 800494a:	f000 f862 	bl	8004a12 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 800494e:	4603      	mov	r3, r0
    }
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	bd90      	pop	{r4, r7, pc}

08004958 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f863 	bl	8004a34 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fe38 	bl	800460c <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800499c:	4603      	mov	r3, r0
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f855 	bl	8004a4e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d201      	bcs.n	80049c8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	e000      	b.n	80049ca <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80049c8:	687b      	ldr	r3, [r7, #4]
    }
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80049e0:	2200      	movs	r2, #0
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f83e 	bl	8004a66 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80049fc:	f107 030c 	add.w	r3, r7, #12
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f84b 	bl	8004a9e <_ZNSt13move_iteratorIPhEC1ES0_>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f849 	bl	8004abc <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f002 f869 	bl	8006b18 <_ZdlPv>
      }
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f842 	bl	8004ae0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f834 	bl	8004ae0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	bf8c      	ite	hi
 8004a80:	2301      	movhi	r3, #1
 8004a82:	2300      	movls	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004a8a:	f006 f878 	bl	800ab7e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004a8e:	68b8      	ldr	r0, [r7, #8]
 8004a90:	f002 f836 	bl	8006b00 <_Znwj>
 8004a94:	4603      	mov	r3, r0
      }
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f811 	bl	8004af8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8004ad6:	4603      	mov	r3, r0
    }
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f805 	bl	8004b18 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f80f 	bl	8004b48 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	68b8      	ldr	r0, [r7, #8]
 8004b2e:	f000 f80b 	bl	8004b48 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004b32:	4603      	mov	r3, r0
	       __result));
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4619      	mov	r1, r3
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 f816 	bl	8004b6a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8004b3e:	4603      	mov	r3, r0
    }
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}

08004b48 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f825 	bl	8004ba2 <_ZNKSt13move_iteratorIPhE4baseEv>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fb8c 	bl	8004278 <_ZSt12__miter_baseIPhET_S1_>
 8004b60:	4603      	mov	r3, r0
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004b6a:	b5b0      	push	{r4, r5, r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7ff fb56 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	f7ff fb52 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 8004b84:	4605      	mov	r5, r0
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fb4e 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 8004b8c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4629      	mov	r1, r5
 8004b92:	4620      	mov	r0, r4
 8004b94:	f000 f811 	bl	8004bba <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8004b98:	4603      	mov	r3, r0
    }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}

08004ba2 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f805 	bl	8004bde <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8004bd4:	4603      	mov	r3, r0
    }
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f006 faa1 	bl	800b146 <memmove>
	  return __result + _Num;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
	}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <_ZN9W5500ChipC1Ev>:
#include "W5500_chip.h"

W5500Chip::W5500Chip() {}
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <_ZN9W5500Chip8initChipEv>:

void W5500Chip::initChip(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8004c30:	4927      	ldr	r1, [pc, #156]	; (8004cd0 <_ZN9W5500Chip8initChipEv+0xa8>)
 8004c32:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <_ZN9W5500Chip8initChipEv+0xac>)
 8004c34:	f001 fcae 	bl	8006594 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8004c38:	4927      	ldr	r1, [pc, #156]	; (8004cd8 <_ZN9W5500Chip8initChipEv+0xb0>)
 8004c3a:	4828      	ldr	r0, [pc, #160]	; (8004cdc <_ZN9W5500Chip8initChipEv+0xb4>)
 8004c3c:	f001 fcce 	bl	80065dc <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8004c40:	4927      	ldr	r1, [pc, #156]	; (8004ce0 <_ZN9W5500Chip8initChipEv+0xb8>)
 8004c42:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <_ZN9W5500Chip8initChipEv+0xbc>)
 8004c44:	f001 fcf6 	bl	8006634 <reg_wizchip_spiburst_cbfunc>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2};
 8004c48:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <_ZN9W5500Chip8initChipEv+0xc0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8004c4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 fd63 	bl	8006724 <wizchip_init>
    wiz_NetInfo net_info = {
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	f8c3 2013 	str.w	r2, [r3, #19]
 8004c72:	2308      	movs	r3, #8
 8004c74:	737b      	strb	r3, [r7, #13]
 8004c76:	23dc      	movs	r3, #220	; 0xdc
 8004c78:	73bb      	strb	r3, [r7, #14]
 8004c7a:	23ab      	movs	r3, #171	; 0xab
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	231d      	movs	r3, #29
 8004c80:	743b      	strb	r3, [r7, #16]
 8004c82:	23e8      	movs	r3, #232	; 0xe8
 8004c84:	747b      	strb	r3, [r7, #17]
 8004c86:	23c0      	movs	r3, #192	; 0xc0
 8004c88:	74bb      	strb	r3, [r7, #18]
 8004c8a:	23a8      	movs	r3, #168	; 0xa8
 8004c8c:	74fb      	strb	r3, [r7, #19]
 8004c8e:	2337      	movs	r3, #55	; 0x37
 8004c90:	753b      	strb	r3, [r7, #20]
 8004c92:	2372      	movs	r3, #114	; 0x72
 8004c94:	757b      	strb	r3, [r7, #21]
 8004c96:	23ff      	movs	r3, #255	; 0xff
 8004c98:	75bb      	strb	r3, [r7, #22]
 8004c9a:	23ff      	movs	r3, #255	; 0xff
 8004c9c:	75fb      	strb	r3, [r7, #23]
 8004c9e:	23ff      	movs	r3, #255	; 0xff
 8004ca0:	763b      	strb	r3, [r7, #24]
 8004ca2:	23c0      	movs	r3, #192	; 0xc0
 8004ca4:	76bb      	strb	r3, [r7, #26]
 8004ca6:	23a8      	movs	r3, #168	; 0xa8
 8004ca8:	76fb      	strb	r3, [r7, #27]
 8004caa:	2337      	movs	r3, #55	; 0x37
 8004cac:	773b      	strb	r3, [r7, #28]
 8004cae:	2301      	movs	r3, #1
 8004cb0:	777b      	strb	r3, [r7, #29]
    	.mac = {0x00, 0x08, 0xdc, 0xab, 0x1d, 0xe8},
        .ip = {192, 168, 55, 114},
        .sn = {255, 255, 255, 0},
        .gw = {192, 168,55, 1}};
    wizchip_setnetinfo(&net_info);
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fdc0 	bl	800683c <wizchip_setnetinfo>
    wizchip_getnetinfo(&net_info);
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 fdfb 	bl	80068bc <wizchip_getnetinfo>
}
 8004cc6:	bf00      	nop
 8004cc8:	3728      	adds	r7, #40	; 0x28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	08004d05 	.word	0x08004d05
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004dbf 	.word	0x08004dbf
 8004cdc:	08004da5 	.word	0x08004da5
 8004ce0:	08004d61 	.word	0x08004d61
 8004ce4:	08004d1d 	.word	0x08004d1d
 8004ce8:	0800d36c 	.word	0x0800d36c

08004cec <_ZN9W5500Chip12W5500_SelectEv>:

void W5500Chip::W5500_Select(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CHIP_CS_GPIO_Port, CHIP_CS_Pin, GPIO_PIN_RESET);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4802      	ldr	r0, [pc, #8]	; (8004d00 <_ZN9W5500Chip12W5500_SelectEv+0x14>)
 8004cf6:	f7fc fba7 	bl	8001448 <HAL_GPIO_WritePin>
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40020400 	.word	0x40020400

08004d04 <_ZN9W5500Chip14W5500_UnselectEv>:

void W5500Chip::W5500_Unselect(void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CHIP_CS_GPIO_Port, CHIP_CS_Pin, GPIO_PIN_SET);
 8004d08:	2201      	movs	r2, #1
 8004d0a:	2104      	movs	r1, #4
 8004d0c:	4802      	ldr	r0, [pc, #8]	; (8004d18 <_ZN9W5500Chip14W5500_UnselectEv+0x14>)
 8004d0e:	f7fc fb9b 	bl	8001448 <HAL_GPIO_WritePin>
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40020400 	.word	0x40020400

08004d1c <_ZN9W5500Chip14W5500_ReadBuffEPht>:

void W5500Chip::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
	uint32_t begin = HAL_GetTick();
 8004d28:	f7fc f8fc 	bl	8000f24 <HAL_GetTick>
 8004d2c:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Receive(hspi, buff, len, 100);
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <_ZN9W5500Chip14W5500_ReadBuffEPht+0x40>)
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	2364      	movs	r3, #100	; 0x64
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	f7fd f9be 	bl	80020b8 <HAL_SPI_Receive>
	uint32_t end = HAL_GetTick();
 8004d3c:	f7fc f8f2 	bl	8000f24 <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b6e      	cmp	r3, #110	; 0x6e
 8004d4a:	d902      	bls.n	8004d52 <_ZN9W5500Chip14W5500_ReadBuffEPht+0x36>
		HAL_Delay(50);
 8004d4c:	2032      	movs	r0, #50	; 0x32
 8004d4e:	f7fc f8f5 	bl	8000f3c <HAL_Delay>
	}
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000268 	.word	0x20000268

08004d60 <_ZN9W5500Chip15W5500_WriteBuffEPht>:

void W5500Chip::W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
	uint32_t begin = HAL_GetTick();
 8004d6c:	f7fc f8da 	bl	8000f24 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Transmit(hspi, buff, len, 100);
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <_ZN9W5500Chip15W5500_WriteBuffEPht+0x40>)
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	2364      	movs	r3, #100	; 0x64
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	f7fd f868 	bl	8001e50 <HAL_SPI_Transmit>
	uint32_t end = HAL_GetTick();
 8004d80:	f7fc f8d0 	bl	8000f24 <HAL_GetTick>
 8004d84:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b6e      	cmp	r3, #110	; 0x6e
 8004d8e:	d902      	bls.n	8004d96 <_ZN9W5500Chip15W5500_WriteBuffEPht+0x36>
		HAL_Delay(50);
 8004d90:	2032      	movs	r0, #50	; 0x32
 8004d92:	f7fc f8d3 	bl	8000f3c <HAL_Delay>
	}
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000268 	.word	0x20000268

08004da4 <_ZN9W5500Chip14W5500_ReadByteEv>:

uint8_t W5500Chip::W5500_ReadByte(void) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8004daa:	1dfb      	adds	r3, r7, #7
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ffb4 	bl	8004d1c <_ZN9W5500Chip14W5500_ReadBuffEPht>
    return byte;
 8004db4:	79fb      	ldrb	r3, [r7, #7]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <_ZN9W5500Chip15W5500_WriteByteEh>:

void W5500Chip::W5500_WriteByte(uint8_t byte) {
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8004dc8:	1dfb      	adds	r3, r7, #7
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ffc7 	bl	8004d60 <_ZN9W5500Chip15W5500_WriteBuffEPht>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <_Z13LiquidCrystalP12GPIO_TypeDefttttttt>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	; 0x38
 8004de0:	af0a      	add	r7, sp, #40	; 0x28
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	817b      	strh	r3, [r7, #10]
 8004dee:	460b      	mov	r3, r1
 8004df0:	813b      	strh	r3, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <_Z13LiquidCrystalP12GPIO_TypeDefttttttt+0x90>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d019      	beq.n	8004e32 <_Z13LiquidCrystalP12GPIO_TypeDefttttttt+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8004dfe:	8939      	ldrh	r1, [r7, #8]
 8004e00:	897a      	ldrh	r2, [r7, #10]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9308      	str	r3, [sp, #32]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9307      	str	r3, [sp, #28]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9306      	str	r3, [sp, #24]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	8c3b      	ldrh	r3, [r7, #32]
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	8bbb      	ldrh	r3, [r7, #28]
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	8b3b      	ldrh	r3, [r7, #24]
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	460b      	mov	r3, r1
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f000 f820 	bl	8004e70 <_Z4inithP12GPIO_TypeDefttttttttttt>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8004e30:	e018      	b.n	8004e64 <_Z13LiquidCrystalP12GPIO_TypeDefttttttt+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8004e32:	8939      	ldrh	r1, [r7, #8]
 8004e34:	897a      	ldrh	r2, [r7, #10]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9308      	str	r3, [sp, #32]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9307      	str	r3, [sp, #28]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9306      	str	r3, [sp, #24]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9305      	str	r3, [sp, #20]
 8004e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e48:	9304      	str	r3, [sp, #16]
 8004e4a:	8c3b      	ldrh	r3, [r7, #32]
 8004e4c:	9303      	str	r3, [sp, #12]
 8004e4e:	8bbb      	ldrh	r3, [r7, #28]
 8004e50:	9302      	str	r3, [sp, #8]
 8004e52:	8b3b      	ldrh	r3, [r7, #24]
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f000 f806 	bl	8004e70 <_Z4inithP12GPIO_TypeDefttttttttttt>
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000001 	.word	0x20000001

08004e70 <_Z4inithP12GPIO_TypeDefttttttttttt>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
 8004e80:	460b      	mov	r3, r1
 8004e82:	81bb      	strh	r3, [r7, #12]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <_Z4inithP12GPIO_TypeDefttttttttttt+0x84>)
 8004e8a:	89bb      	ldrh	r3, [r7, #12]
 8004e8c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8004e8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ef8 <_Z4inithP12GPIO_TypeDefttttttttttt+0x88>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <_Z4inithP12GPIO_TypeDefttttttttttt+0x8c>)
 8004e96:	8b3b      	ldrh	r3, [r7, #24]
 8004e98:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <_Z4inithP12GPIO_TypeDefttttttttttt+0x90>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004ea2:	8bbb      	ldrh	r3, [r7, #28]
 8004ea4:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8004ea6:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004ea8:	8c3b      	ldrh	r3, [r7, #32]
 8004eaa:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb0:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8004eb2:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004eb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004eb6:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8004eb8:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004eba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ebc:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8004ebe:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004ec0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ec2:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8004ec4:	4a0f      	ldr	r2, [pc, #60]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004ec6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ec8:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <_Z4inithP12GPIO_TypeDefttttttttttt+0x94>)
 8004ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ece:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <_Z4inithP12GPIO_TypeDefttttttttttt+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <_Z4inithP12GPIO_TypeDefttttttttttt+0x98>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e002      	b.n	8004ee4 <_Z4inithP12GPIO_TypeDefttttttttttt+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <_Z4inithP12GPIO_TypeDefttttttttttt+0x98>)
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	2010      	movs	r0, #16
 8004ee8:	f000 f810 	bl	8004f0c <_Z5beginhh>
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000222 	.word	0x20000222
 8004ef8:	20000224 	.word	0x20000224
 8004efc:	20000226 	.word	0x20000226
 8004f00:	20000238 	.word	0x20000238
 8004f04:	20000228 	.word	0x20000228
 8004f08:	2000023c 	.word	0x2000023c

08004f0c <_Z5beginhh>:

void begin(uint8_t cols, uint8_t lines) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	460a      	mov	r2, r1
 8004f16:	71fb      	strb	r3, [r7, #7]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8004f1c:	79bb      	ldrb	r3, [r7, #6]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d906      	bls.n	8004f30 <_Z5beginhh+0x24>
    _displayfunction |= LCD_2LINE;
 8004f22:	4b77      	ldr	r3, [pc, #476]	; (8005100 <_Z5beginhh+0x1f4>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f043 0308 	orr.w	r3, r3, #8
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	4b74      	ldr	r3, [pc, #464]	; (8005100 <_Z5beginhh+0x1f4>)
 8004f2e:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8004f30:	4a74      	ldr	r2, [pc, #464]	; (8005104 <_Z5beginhh+0x1f8>)
 8004f32:	79bb      	ldrb	r3, [r7, #6]
 8004f34:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8004f36:	79fa      	ldrb	r2, [r7, #7]
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	3340      	adds	r3, #64	; 0x40
 8004f3c:	2140      	movs	r1, #64	; 0x40
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f000 f982 	bl	8005248 <_Z13setRowOffsetsiiii>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8004f44:	4b70      	ldr	r3, [pc, #448]	; (8005108 <_Z5beginhh+0x1fc>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <_Z5beginhh+0x54>
 8004f4c:	79bb      	ldrb	r3, [r7, #6]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d106      	bne.n	8004f60 <_Z5beginhh+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8004f52:	4b6b      	ldr	r3, [pc, #428]	; (8005100 <_Z5beginhh+0x1f4>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	4b68      	ldr	r3, [pc, #416]	; (8005100 <_Z5beginhh+0x1f4>)
 8004f5e:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8004f60:	f000 f8e4 	bl	800512c <_Z11enableClockv>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f64:	2302      	movs	r3, #2
 8004f66:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8004f6c:	4b67      	ldr	r3, [pc, #412]	; (800510c <_Z5beginhh+0x200>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <_Z5beginhh+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8004f74:	4b66      	ldr	r3, [pc, #408]	; (8005110 <_Z5beginhh+0x204>)
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	4b66      	ldr	r3, [pc, #408]	; (8005114 <_Z5beginhh+0x208>)
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	4b65      	ldr	r3, [pc, #404]	; (8005118 <_Z5beginhh+0x20c>)
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	4b64      	ldr	r3, [pc, #400]	; (800511c <_Z5beginhh+0x210>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b62      	ldr	r3, [pc, #392]	; (800511c <_Z5beginhh+0x210>)
 8004f92:	885b      	ldrh	r3, [r3, #2]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	4b60      	ldr	r3, [pc, #384]	; (800511c <_Z5beginhh+0x210>)
 8004f9a:	889b      	ldrh	r3, [r3, #4]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	4b5e      	ldr	r3, [pc, #376]	; (800511c <_Z5beginhh+0x210>)
 8004fa2:	88db      	ldrh	r3, [r3, #6]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e02a      	b.n	8005002 <_Z5beginhh+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8004fac:	4b58      	ldr	r3, [pc, #352]	; (8005110 <_Z5beginhh+0x204>)
 8004fae:	881a      	ldrh	r2, [r3, #0]
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <_Z5beginhh+0x208>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	4b57      	ldr	r3, [pc, #348]	; (8005118 <_Z5beginhh+0x20c>)
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	4b56      	ldr	r3, [pc, #344]	; (800511c <_Z5beginhh+0x210>)
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	4b54      	ldr	r3, [pc, #336]	; (800511c <_Z5beginhh+0x210>)
 8004fca:	885b      	ldrh	r3, [r3, #2]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	4b52      	ldr	r3, [pc, #328]	; (800511c <_Z5beginhh+0x210>)
 8004fd2:	889b      	ldrh	r3, [r3, #4]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	4b50      	ldr	r3, [pc, #320]	; (800511c <_Z5beginhh+0x210>)
 8004fda:	88db      	ldrh	r3, [r3, #6]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	b29a      	uxth	r2, r3
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8004fe0:	4b4e      	ldr	r3, [pc, #312]	; (800511c <_Z5beginhh+0x210>)
 8004fe2:	891b      	ldrh	r3, [r3, #8]
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b29a      	uxth	r2, r3
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8004fe8:	4b4c      	ldr	r3, [pc, #304]	; (800511c <_Z5beginhh+0x210>)
 8004fea:	895b      	ldrh	r3, [r3, #10]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	4b4a      	ldr	r3, [pc, #296]	; (800511c <_Z5beginhh+0x210>)
 8004ff2:	899b      	ldrh	r3, [r3, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	4b48      	ldr	r3, [pc, #288]	; (800511c <_Z5beginhh+0x210>)
 8004ffa:	89db      	ldrh	r3, [r3, #14]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8005000:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <_Z5beginhh+0x214>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f107 020c 	add.w	r2, r7, #12
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f7fc f899 	bl	8001144 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 8005012:	2032      	movs	r0, #50	; 0x32
 8005014:	f7fb ff92 	bl	8000f3c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8005018:	4b41      	ldr	r3, [pc, #260]	; (8005120 <_Z5beginhh+0x214>)
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	4b3c      	ldr	r3, [pc, #240]	; (8005110 <_Z5beginhh+0x204>)
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	2200      	movs	r2, #0
 8005022:	4619      	mov	r1, r3
 8005024:	f7fc fa10 	bl	8001448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8005028:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <_Z5beginhh+0x214>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	4b3a      	ldr	r3, [pc, #232]	; (8005118 <_Z5beginhh+0x20c>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	2200      	movs	r2, #0
 8005032:	4619      	mov	r1, r3
 8005034:	f7fc fa08 	bl	8001448 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8005038:	4b36      	ldr	r3, [pc, #216]	; (8005114 <_Z5beginhh+0x208>)
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	2bff      	cmp	r3, #255	; 0xff
 800503e:	d007      	beq.n	8005050 <_Z5beginhh+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8005040:	4b37      	ldr	r3, [pc, #220]	; (8005120 <_Z5beginhh+0x214>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	4b33      	ldr	r3, [pc, #204]	; (8005114 <_Z5beginhh+0x208>)
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	2200      	movs	r2, #0
 800504a:	4619      	mov	r1, r3
 800504c:	f7fc f9fc 	bl	8001448 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <_Z5beginhh+0x1f4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d115      	bne.n	8005088 <_Z5beginhh+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 800505c:	2003      	movs	r0, #3
 800505e:	f000 f9ed 	bl	800543c <_Z10write4bitsh>
    HAL_Delay(5); // wait min 4.1ms
 8005062:	2005      	movs	r0, #5
 8005064:	f7fb ff6a 	bl	8000f3c <HAL_Delay>

    // second try
    write4bits(0x03);
 8005068:	2003      	movs	r0, #3
 800506a:	f000 f9e7 	bl	800543c <_Z10write4bitsh>
    HAL_Delay(5); // wait min 4.1ms
 800506e:	2005      	movs	r0, #5
 8005070:	f7fb ff64 	bl	8000f3c <HAL_Delay>

    // third go!
    write4bits(0x03);
 8005074:	2003      	movs	r0, #3
 8005076:	f000 f9e1 	bl	800543c <_Z10write4bitsh>
    HAL_Delay(1);
 800507a:	2001      	movs	r0, #1
 800507c:	f7fb ff5e 	bl	8000f3c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8005080:	2002      	movs	r0, #2
 8005082:	f000 f9db 	bl	800543c <_Z10write4bitsh>
 8005086:	e01d      	b.n	80050c4 <_Z5beginhh+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <_Z5beginhh+0x1f4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f043 0320 	orr.w	r3, r3, #32
 8005090:	b2db      	uxtb	r3, r3
 8005092:	4618      	mov	r0, r3
 8005094:	f000 f94c 	bl	8005330 <_Z7commandh>
    HAL_Delay(5);  // wait more than 4.1ms
 8005098:	2005      	movs	r0, #5
 800509a:	f7fb ff4f 	bl	8000f3c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <_Z5beginhh+0x1f4>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f043 0320 	orr.w	r3, r3, #32
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 f941 	bl	8005330 <_Z7commandh>
    HAL_Delay(1);
 80050ae:	2001      	movs	r0, #1
 80050b0:	f7fb ff44 	bl	8000f3c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <_Z5beginhh+0x1f4>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f043 0320 	orr.w	r3, r3, #32
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f936 	bl	8005330 <_Z7commandh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <_Z5beginhh+0x1f4>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f043 0320 	orr.w	r3, r3, #32
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f92e 	bl	8005330 <_Z7commandh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <_Z5beginhh+0x218>)
 80050d6:	2204      	movs	r2, #4
 80050d8:	701a      	strb	r2, [r3, #0]
  display();
 80050da:	f000 f8df 	bl	800529c <_Z7displayv>

  // clear it off
  clear();
 80050de:	f000 f8d3 	bl	8005288 <_Z5clearv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <_Z5beginhh+0x21c>)
 80050e4:	2202      	movs	r2, #2
 80050e6:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <_Z5beginhh+0x21c>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f91c 	bl	8005330 <_Z7commandh>

}
 80050f8:	bf00      	nop
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	2000023c 	.word	0x2000023c
 8005104:	2000023f 	.word	0x2000023f
 8005108:	20000220 	.word	0x20000220
 800510c:	20000001 	.word	0x20000001
 8005110:	20000222 	.word	0x20000222
 8005114:	20000224 	.word	0x20000224
 8005118:	20000226 	.word	0x20000226
 800511c:	20000228 	.word	0x20000228
 8005120:	20000238 	.word	0x20000238
 8005124:	2000023d 	.word	0x2000023d
 8005128:	2000023e 	.word	0x2000023e

0800512c <_Z11enableClockv>:

// enables GPIO RCC Clock
void enableClock(void)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8005132:	4b3e      	ldr	r3, [pc, #248]	; (800522c <_Z11enableClockv+0x100>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3e      	ldr	r2, [pc, #248]	; (8005230 <_Z11enableClockv+0x104>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10e      	bne.n	800515a <_Z11enableClockv+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	4b3c      	ldr	r3, [pc, #240]	; (8005234 <_Z11enableClockv+0x108>)
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	4a3b      	ldr	r2, [pc, #236]	; (8005234 <_Z11enableClockv+0x108>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6313      	str	r3, [r2, #48]	; 0x30
 800514c:	4b39      	ldr	r3, [pc, #228]	; (8005234 <_Z11enableClockv+0x108>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOE_CLK_ENABLE();
//	else if(_port == GPIOF)
//		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8005158:	e062      	b.n	8005220 <_Z11enableClockv+0xf4>
  else if(_port == GPIOB)
 800515a:	4b34      	ldr	r3, [pc, #208]	; (800522c <_Z11enableClockv+0x100>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a36      	ldr	r2, [pc, #216]	; (8005238 <_Z11enableClockv+0x10c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10e      	bne.n	8005182 <_Z11enableClockv+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <_Z11enableClockv+0x108>)
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	4a31      	ldr	r2, [pc, #196]	; (8005234 <_Z11enableClockv+0x108>)
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	6313      	str	r3, [r2, #48]	; 0x30
 8005174:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <_Z11enableClockv+0x108>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]
}
 8005180:	e04e      	b.n	8005220 <_Z11enableClockv+0xf4>
  else if(_port == GPIOB)
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <_Z11enableClockv+0x100>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2c      	ldr	r2, [pc, #176]	; (8005238 <_Z11enableClockv+0x10c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10e      	bne.n	80051aa <_Z11enableClockv+0x7e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	4b28      	ldr	r3, [pc, #160]	; (8005234 <_Z11enableClockv+0x108>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	4a27      	ldr	r2, [pc, #156]	; (8005234 <_Z11enableClockv+0x108>)
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	6313      	str	r3, [r2, #48]	; 0x30
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <_Z11enableClockv+0x108>)
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
}
 80051a8:	e03a      	b.n	8005220 <_Z11enableClockv+0xf4>
	else if(_port == GPIOC)
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <_Z11enableClockv+0x100>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a23      	ldr	r2, [pc, #140]	; (800523c <_Z11enableClockv+0x110>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10e      	bne.n	80051d2 <_Z11enableClockv+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <_Z11enableClockv+0x108>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <_Z11enableClockv+0x108>)
 80051be:	f043 0304 	orr.w	r3, r3, #4
 80051c2:	6313      	str	r3, [r2, #48]	; 0x30
 80051c4:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <_Z11enableClockv+0x108>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
}
 80051d0:	e026      	b.n	8005220 <_Z11enableClockv+0xf4>
	else if(_port == GPIOD)
 80051d2:	4b16      	ldr	r3, [pc, #88]	; (800522c <_Z11enableClockv+0x100>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <_Z11enableClockv+0x114>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10e      	bne.n	80051fa <_Z11enableClockv+0xce>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <_Z11enableClockv+0x108>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <_Z11enableClockv+0x108>)
 80051e6:	f043 0308 	orr.w	r3, r3, #8
 80051ea:	6313      	str	r3, [r2, #48]	; 0x30
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <_Z11enableClockv+0x108>)
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
}
 80051f8:	e012      	b.n	8005220 <_Z11enableClockv+0xf4>
	else if(_port == GPIOE)
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <_Z11enableClockv+0x100>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <_Z11enableClockv+0x118>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10d      	bne.n	8005220 <_Z11enableClockv+0xf4>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <_Z11enableClockv+0x108>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <_Z11enableClockv+0x108>)
 800520e:	f043 0310 	orr.w	r3, r3, #16
 8005212:	6313      	str	r3, [r2, #48]	; 0x30
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <_Z11enableClockv+0x108>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000238 	.word	0x20000238
 8005230:	40020000 	.word	0x40020000
 8005234:	40023800 	.word	0x40023800
 8005238:	40020400 	.word	0x40020400
 800523c:	40020800 	.word	0x40020800
 8005240:	40020c00 	.word	0x40020c00
 8005244:	40021000 	.word	0x40021000

08005248 <_Z13setRowOffsetsiiii>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <_Z13setRowOffsetsiiii+0x3c>)
 800525c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <_Z13setRowOffsetsiiii+0x3c>)
 8005264:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <_Z13setRowOffsetsiiii+0x3c>)
 800526c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <_Z13setRowOffsetsiiii+0x3c>)
 8005274:	70da      	strb	r2, [r3, #3]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000240 	.word	0x20000240

08005288 <_Z5clearv>:

/********** high level commands, for the user! */
void clear(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800528c:	2001      	movs	r0, #1
 800528e:	f000 f84f 	bl	8005330 <_Z7commandh>
  HAL_Delay(2);  // this command takes a long time!
 8005292:	2002      	movs	r0, #2
 8005294:	f7fb fe52 	bl	8000f3c <HAL_Delay>
}
 8005298:	bf00      	nop
 800529a:	bd80      	pop	{r7, pc}

0800529c <_Z7displayv>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <_Z7displayv+0x28>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f043 0304 	orr.w	r3, r3, #4
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <_Z7displayv+0x28>)
 80052ac:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <_Z7displayv+0x28>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f043 0308 	orr.w	r3, r3, #8
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f839 	bl	8005330 <_Z7commandh>
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2000023d 	.word	0x2000023d

080052c8 <_Z5printPKc>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <_Z5printPKc+0x12>
 80052d6:	2300      	movs	r3, #0
 80052d8:	e026      	b.n	8005328 <_Z5printPKc+0x60>

  const uint8_t *buffer = (const uint8_t *)str;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fa ffce 	bl	8000280 <strlen>
 80052e4:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	613a      	str	r2, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d013      	beq.n	8005326 <_Z5printPKc+0x5e>
    if (write(*buffer++)) n++;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	617a      	str	r2, [r7, #20]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f820 	bl	800534c <_Z5writeh>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf14      	ite	ne
 8005312:	2301      	movne	r3, #1
 8005314:	2300      	moveq	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <_Z5printPKc+0x5c>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8005322:	e7e2      	b.n	80052ea <_Z5printPKc+0x22>
    else break;
 8005324:	bf00      	nop
  }
  return n;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <_Z7commandh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
  send_(value, GPIO_PIN_RESET);
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f814 	bl	800536c <_Z5send_h13GPIO_PinState>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <_Z5writeh>:

inline size_t write(uint8_t value) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
  send_(value, GPIO_PIN_SET);
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f806 	bl	800536c <_Z5send_h13GPIO_PinState>
  return 1; // assume sucess
 8005360:	2301      	movs	r3, #1
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <_Z5send_h13GPIO_PinState>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send_(uint8_t value, GPIO_PinState mode) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	460a      	mov	r2, r1
 8005376:	71fb      	strb	r3, [r7, #7]
 8005378:	4613      	mov	r3, r2
 800537a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <_Z5send_h13GPIO_PinState+0x6c>)
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <_Z5send_h13GPIO_PinState+0x70>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	79ba      	ldrb	r2, [r7, #6]
 8005386:	4619      	mov	r1, r3
 8005388:	f7fc f85e 	bl	8001448 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 800538c:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <_Z5send_h13GPIO_PinState+0x74>)
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	2bff      	cmp	r3, #255	; 0xff
 8005392:	d007      	beq.n	80053a4 <_Z5send_h13GPIO_PinState+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <_Z5send_h13GPIO_PinState+0x6c>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <_Z5send_h13GPIO_PinState+0x74>)
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	2200      	movs	r2, #0
 800539e:	4619      	mov	r1, r3
 80053a0:	f7fc f852 	bl	8001448 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <_Z5send_h13GPIO_PinState+0x78>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <_Z5send_h13GPIO_PinState+0x4e>
    write8bits(value);
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f86e 	bl	8005494 <_Z10write8bitsh>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80053b8:	e009      	b.n	80053ce <_Z5send_h13GPIO_PinState+0x62>
    write4bits(value>>4);
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	111b      	asrs	r3, r3, #4
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f83b 	bl	800543c <_Z10write4bitsh>
    write4bits(value);
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f837 	bl	800543c <_Z10write4bitsh>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000238 	.word	0x20000238
 80053dc:	20000222 	.word	0x20000222
 80053e0:	20000224 	.word	0x20000224
 80053e4:	2000023c 	.word	0x2000023c

080053e8 <_Z11pulseEnablev>:

void pulseEnable(void) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <_Z11pulseEnablev+0x4c>)
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <_Z11pulseEnablev+0x50>)
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	2200      	movs	r2, #0
 80053f6:	4619      	mov	r1, r3
 80053f8:	f7fc f826 	bl	8001448 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80053fc:	2001      	movs	r0, #1
 80053fe:	f7fb fd9d 	bl	8000f3c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <_Z11pulseEnablev+0x4c>)
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <_Z11pulseEnablev+0x50>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	4619      	mov	r1, r3
 800540e:	f7fc f81b 	bl	8001448 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8005412:	2001      	movs	r0, #1
 8005414:	f7fb fd92 	bl	8000f3c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <_Z11pulseEnablev+0x4c>)
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <_Z11pulseEnablev+0x50>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	4619      	mov	r1, r3
 8005424:	f7fc f810 	bl	8001448 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8005428:	2001      	movs	r0, #1
 800542a:	f7fb fd87 	bl	8000f3c <HAL_Delay>
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000238 	.word	0x20000238
 8005438:	20000226 	.word	0x20000226

0800543c <_Z10write4bitsh>:

void write4bits(uint8_t value) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b03      	cmp	r3, #3
 800544e:	dc17      	bgt.n	8005480 <_Z10write4bitsh+0x44>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <_Z10write4bitsh+0x50>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4a0e      	ldr	r2, [pc, #56]	; (8005490 <_Z10write4bitsh+0x54>)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800545c:	79fa      	ldrb	r2, [r7, #7]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	fa42 f303 	asr.w	r3, r2, r3
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <_Z10write4bitsh+0x34>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <_Z10write4bitsh+0x36>
 8005470:	2300      	movs	r3, #0
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb ffe8 	bl	8001448 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e7e4      	b.n	800544a <_Z10write4bitsh+0xe>
  }

  pulseEnable();
 8005480:	f7ff ffb2 	bl	80053e8 <_Z11pulseEnablev>
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000238 	.word	0x20000238
 8005490:	20000228 	.word	0x20000228

08005494 <_Z10write8bitsh>:

void write8bits(uint8_t value) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b07      	cmp	r3, #7
 80054a6:	dc17      	bgt.n	80054d8 <_Z10write8bitsh+0x44>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80054a8:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <_Z10write8bitsh+0x50>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	4a0e      	ldr	r2, [pc, #56]	; (80054e8 <_Z10write8bitsh+0x54>)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80054b4:	79fa      	ldrb	r2, [r7, #7]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	fa42 f303 	asr.w	r3, r2, r3
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <_Z10write8bitsh+0x34>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <_Z10write8bitsh+0x36>
 80054c8:	2300      	movs	r3, #0
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fb ffbc 	bl	8001448 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e7e4      	b.n	80054a2 <_Z10write8bitsh+0xe>
  }

  pulseEnable();
 80054d8:	f7ff ff86 	bl	80053e8 <_Z11pulseEnablev>
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000238 	.word	0x20000238
 80054e8:	20000228 	.word	0x20000228

080054ec <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <WIZCHIP_READ+0x94>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80054fa:	4b21      	ldr	r3, [pc, #132]	; (8005580 <WIZCHIP_READ+0x94>)
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005500:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <WIZCHIP_READ+0x94>)
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <WIZCHIP_READ+0x24>
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <WIZCHIP_READ+0x94>)
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d114      	bne.n	800553a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <WIZCHIP_READ+0x94>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	0c12      	lsrs	r2, r2, #16
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	4610      	mov	r0, r2
 800551c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <WIZCHIP_READ+0x94>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	0a12      	lsrs	r2, r2, #8
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800552c:	4b14      	ldr	r3, [pc, #80]	; (8005580 <WIZCHIP_READ+0x94>)
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
 8005538:	e011      	b.n	800555e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b2db      	uxtb	r3, r3
 8005540:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	b2db      	uxtb	r3, r3
 8005548:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <WIZCHIP_READ+0x94>)
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	f107 020c 	add.w	r2, r7, #12
 8005558:	2103      	movs	r1, #3
 800555a:	4610      	mov	r0, r2
 800555c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800555e:	4b08      	ldr	r3, [pc, #32]	; (8005580 <WIZCHIP_READ+0x94>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	4798      	blx	r3
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <WIZCHIP_READ+0x94>)
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <WIZCHIP_READ+0x94>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4798      	blx	r3
   return ret;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000004 	.word	0x20000004

08005584 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <WIZCHIP_WRITE+0x98>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <WIZCHIP_WRITE+0x98>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <WIZCHIP_WRITE+0x98>)
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d119      	bne.n	80055e0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <WIZCHIP_WRITE+0x98>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	0c12      	lsrs	r2, r2, #16
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <WIZCHIP_WRITE+0x98>)
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	0a12      	lsrs	r2, r2, #8
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	4610      	mov	r0, r2
 80055c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <WIZCHIP_WRITE+0x98>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <WIZCHIP_WRITE+0x98>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	4610      	mov	r0, r2
 80055dc:	4798      	blx	r3
 80055de:	e013      	b.n	8005608 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <WIZCHIP_WRITE+0x98>)
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f107 020c 	add.w	r2, r7, #12
 8005602:	2104      	movs	r1, #4
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <WIZCHIP_WRITE+0x98>)
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800560e:	4b03      	ldr	r3, [pc, #12]	; (800561c <WIZCHIP_WRITE+0x98>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4798      	blx	r3
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000004 	.word	0x20000004

08005620 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800563a:	4b28      	ldr	r3, [pc, #160]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <WIZCHIP_READ_BUF+0x2a>
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d126      	bne.n	8005698 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	0c12      	lsrs	r2, r2, #16
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	0a12      	lsrs	r2, r2, #8
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	4610      	mov	r0, r2
 8005664:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	4610      	mov	r0, r2
 8005670:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	82fb      	strh	r3, [r7, #22]
 8005676:	e00a      	b.n	800568e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8005678:	4b18      	ldr	r3, [pc, #96]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	8afa      	ldrh	r2, [r7, #22]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	188c      	adds	r4, r1, r2
 8005682:	4798      	blx	r3
 8005684:	4603      	mov	r3, r0
 8005686:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8005688:	8afb      	ldrh	r3, [r7, #22]
 800568a:	3301      	adds	r3, #1
 800568c:	82fb      	strh	r3, [r7, #22]
 800568e:	8afa      	ldrh	r2, [r7, #22]
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	429a      	cmp	r2, r3
 8005694:	d3f0      	bcc.n	8005678 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005696:	e017      	b.n	80056c8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	b2db      	uxtb	r3, r3
 800569e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	f107 0210 	add.w	r2, r7, #16
 80056b6:	2103      	movs	r1, #3
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	4611      	mov	r1, r2
 80056c4:	68b8      	ldr	r0, [r7, #8]
 80056c6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80056ce:	4b03      	ldr	r3, [pc, #12]	; (80056dc <WIZCHIP_READ_BUF+0xbc>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4798      	blx	r3
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd90      	pop	{r4, r7, pc}
 80056dc:	20000004 	.word	0x20000004

080056e0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80056f4:	4b29      	ldr	r3, [pc, #164]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f043 0304 	orr.w	r3, r3, #4
 8005700:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d126      	bne.n	8005758 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	0c12      	lsrs	r2, r2, #16
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005718:	4b20      	ldr	r3, [pc, #128]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	0a12      	lsrs	r2, r2, #8
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005732:	2300      	movs	r3, #0
 8005734:	82fb      	strh	r3, [r7, #22]
 8005736:	e00a      	b.n	800574e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	8afa      	ldrh	r2, [r7, #22]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	440a      	add	r2, r1
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005748:	8afb      	ldrh	r3, [r7, #22]
 800574a:	3301      	adds	r3, #1
 800574c:	82fb      	strh	r3, [r7, #22]
 800574e:	8afa      	ldrh	r2, [r7, #22]
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	429a      	cmp	r2, r3
 8005754:	d3f0      	bcc.n	8005738 <WIZCHIP_WRITE_BUF+0x58>
 8005756:	e017      	b.n	8005788 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	b2db      	uxtb	r3, r3
 800575e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	b2db      	uxtb	r3, r3
 8005766:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f107 0210 	add.w	r2, r7, #16
 8005776:	2103      	movs	r1, #3
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800577c:	4b07      	ldr	r3, [pc, #28]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	4611      	mov	r1, r2
 8005784:	68b8      	ldr	r0, [r7, #8]
 8005786:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800578e:	4b03      	ldr	r3, [pc, #12]	; (800579c <WIZCHIP_WRITE_BUF+0xbc>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4798      	blx	r3
}
 8005794:	bf00      	nop
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000004 	.word	0x20000004

080057a0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	81fb      	strh	r3, [r7, #14]
 80057ae:	2300      	movs	r3, #0
 80057b0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	3301      	adds	r3, #1
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fe94 	bl	80054ec <WIZCHIP_READ>
 80057c4:	4603      	mov	r3, r0
 80057c6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80057c8:	89bb      	ldrh	r3, [r7, #12]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b29c      	uxth	r4, r3
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3301      	adds	r3, #1
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fe86 	bl	80054ec <WIZCHIP_READ>
 80057e0:	4603      	mov	r3, r0
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	4423      	add	r3, r4
 80057e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80057e8:	89bb      	ldrh	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01a      	beq.n	8005824 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	3301      	adds	r3, #1
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fe76 	bl	80054ec <WIZCHIP_READ>
 8005800:	4603      	mov	r3, r0
 8005802:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	b29c      	uxth	r4, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	3301      	adds	r3, #1
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fe68 	bl	80054ec <WIZCHIP_READ>
 800581c:	4603      	mov	r3, r0
 800581e:	b29b      	uxth	r3, r3
 8005820:	4423      	add	r3, r4
 8005822:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005824:	89fa      	ldrh	r2, [r7, #14]
 8005826:	89bb      	ldrh	r3, [r7, #12]
 8005828:	429a      	cmp	r2, r3
 800582a:	d1c2      	bne.n	80057b2 <getSn_TX_FSR+0x12>
   return val;
 800582c:	89fb      	ldrh	r3, [r7, #14]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bd90      	pop	{r4, r7, pc}

08005836 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005836:	b590      	push	{r4, r7, lr}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	4603      	mov	r3, r0
 800583e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005840:	2300      	movs	r3, #0
 8005842:	81fb      	strh	r3, [r7, #14]
 8005844:	2300      	movs	r3, #0
 8005846:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	3301      	adds	r3, #1
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fe49 	bl	80054ec <WIZCHIP_READ>
 800585a:	4603      	mov	r3, r0
 800585c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800585e:	89bb      	ldrh	r3, [r7, #12]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	b29c      	uxth	r4, r3
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3301      	adds	r3, #1
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fe3b 	bl	80054ec <WIZCHIP_READ>
 8005876:	4603      	mov	r3, r0
 8005878:	b29b      	uxth	r3, r3
 800587a:	4423      	add	r3, r4
 800587c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800587e:	89bb      	ldrh	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	3301      	adds	r3, #1
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fe2b 	bl	80054ec <WIZCHIP_READ>
 8005896:	4603      	mov	r3, r0
 8005898:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800589a:	89fb      	ldrh	r3, [r7, #14]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	b29c      	uxth	r4, r3
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	3301      	adds	r3, #1
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fe1d 	bl	80054ec <WIZCHIP_READ>
 80058b2:	4603      	mov	r3, r0
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	4423      	add	r3, r4
 80058b8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80058ba:	89fa      	ldrh	r2, [r7, #14]
 80058bc:	89bb      	ldrh	r3, [r7, #12]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d1c2      	bne.n	8005848 <getSn_RX_RSR+0x12>
   return val;
 80058c2:	89fb      	ldrh	r3, [r7, #14]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd90      	pop	{r4, r7, pc}

080058cc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80058cc:	b590      	push	{r4, r7, lr}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	71fb      	strb	r3, [r7, #7]
 80058d8:	4613      	mov	r3, r2
 80058da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80058e4:	88bb      	ldrh	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d048      	beq.n	800597c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	3301      	adds	r3, #1
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fdf8 	bl	80054ec <WIZCHIP_READ>
 80058fc:	4603      	mov	r3, r0
 80058fe:	b29b      	uxth	r3, r3
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	b29c      	uxth	r4, r3
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	3301      	adds	r3, #1
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fdeb 	bl	80054ec <WIZCHIP_READ>
 8005916:	4603      	mov	r3, r0
 8005918:	b29b      	uxth	r3, r3
 800591a:	4423      	add	r3, r4
 800591c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800591e:	89fb      	ldrh	r3, [r7, #14]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	79fa      	ldrb	r2, [r7, #7]
 8005924:	0092      	lsls	r2, r2, #2
 8005926:	3202      	adds	r2, #2
 8005928:	00d2      	lsls	r2, r2, #3
 800592a:	4413      	add	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800592e:	88bb      	ldrh	r3, [r7, #4]
 8005930:	461a      	mov	r2, r3
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	68b8      	ldr	r0, [r7, #8]
 8005936:	f7ff fed3 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800593a:	89fa      	ldrh	r2, [r7, #14]
 800593c:	88bb      	ldrh	r3, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	3301      	adds	r3, #1
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800594e:	461a      	mov	r2, r3
 8005950:	89fb      	ldrh	r3, [r7, #14]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	b29b      	uxth	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f7ff fe12 	bl	8005584 <WIZCHIP_WRITE>
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	3301      	adds	r3, #1
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800596c:	461a      	mov	r2, r3
 800596e:	89fb      	ldrh	r3, [r7, #14]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f7ff fe05 	bl	8005584 <WIZCHIP_WRITE>
 800597a:	e000      	b.n	800597e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800597c:	bf00      	nop
}
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	bd90      	pop	{r4, r7, pc}

08005984 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	6039      	str	r1, [r7, #0]
 800598e:	71fb      	strb	r3, [r7, #7]
 8005990:	4613      	mov	r3, r2
 8005992:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800599c:	88bb      	ldrh	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d048      	beq.n	8005a34 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	3301      	adds	r3, #1
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fd9c 	bl	80054ec <WIZCHIP_READ>
 80059b4:	4603      	mov	r3, r0
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	b29c      	uxth	r4, r3
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	3301      	adds	r3, #1
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fd8f 	bl	80054ec <WIZCHIP_READ>
 80059ce:	4603      	mov	r3, r0
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	4423      	add	r3, r4
 80059d4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	3203      	adds	r2, #3
 80059e0:	00d2      	lsls	r2, r2, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80059e6:	88bb      	ldrh	r3, [r7, #4]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f7ff fe17 	bl	8005620 <WIZCHIP_READ_BUF>
   ptr += len;
 80059f2:	89fa      	ldrh	r2, [r7, #14]
 80059f4:	88bb      	ldrh	r3, [r7, #4]
 80059f6:	4413      	add	r3, r2
 80059f8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	3301      	adds	r3, #1
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005a06:	461a      	mov	r2, r3
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7ff fdb6 	bl	8005584 <WIZCHIP_WRITE>
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005a24:	461a      	mov	r2, r3
 8005a26:	89fb      	ldrh	r3, [r7, #14]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	f7ff fda9 	bl	8005584 <WIZCHIP_WRITE>
 8005a32:	e000      	b.n	8005a36 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8005a34:	bf00      	nop
}
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd90      	pop	{r4, r7, pc}

08005a3c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	460a      	mov	r2, r1
 8005a46:	71fb      	strb	r3, [r7, #7]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	3301      	adds	r3, #1
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fd45 	bl	80054ec <WIZCHIP_READ>
 8005a62:	4603      	mov	r3, r0
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	b29c      	uxth	r4, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	3301      	adds	r3, #1
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fd38 	bl	80054ec <WIZCHIP_READ>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4423      	add	r3, r4
 8005a82:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005a84:	89fa      	ldrh	r2, [r7, #14]
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	3301      	adds	r3, #1
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005a98:	461a      	mov	r2, r3
 8005a9a:	89fb      	ldrh	r3, [r7, #14]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7ff fd6d 	bl	8005584 <WIZCHIP_WRITE>
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	3301      	adds	r3, #1
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	89fb      	ldrh	r3, [r7, #14]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f7ff fd60 	bl	8005584 <WIZCHIP_WRITE>
}
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd90      	pop	{r4, r7, pc}

08005acc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4623      	mov	r3, r4
 8005adc:	71fb      	strb	r3, [r7, #7]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71bb      	strb	r3, [r7, #6]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	80bb      	strh	r3, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d902      	bls.n	8005af6 <socket+0x2a>
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af4:	e0f1      	b.n	8005cda <socket+0x20e>
	switch(protocol)
 8005af6:	79bb      	ldrb	r3, [r7, #6]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d004      	beq.n	8005b06 <socket+0x3a>
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	db10      	blt.n	8005b22 <socket+0x56>
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	dc0e      	bgt.n	8005b22 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8005b04:	e010      	b.n	8005b28 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8005b06:	f107 030c 	add.w	r3, r7, #12
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005b12:	f7ff fd85 	bl	8005620 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <socket+0x5c>
 8005b1c:	f06f 0302 	mvn.w	r3, #2
 8005b20:	e0db      	b.n	8005cda <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8005b22:	f06f 0304 	mvn.w	r3, #4
 8005b26:	e0d8      	b.n	8005cda <socket+0x20e>
         break;
 8005b28:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <socket+0x6e>
 8005b34:	f06f 0305 	mvn.w	r3, #5
 8005b38:	e0cf      	b.n	8005cda <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d025      	beq.n	8005b8c <socket+0xc0>
	{
   	switch(protocol)
 8005b40:	79bb      	ldrb	r3, [r7, #6]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d002      	beq.n	8005b4c <socket+0x80>
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d008      	beq.n	8005b5c <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8005b4a:	e024      	b.n	8005b96 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d11c      	bne.n	8005b90 <socket+0xc4>
 8005b56:	f06f 0305 	mvn.w	r3, #5
 8005b5a:	e0be      	b.n	8005cda <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	db02      	blt.n	8005b74 <socket+0xa8>
 8005b6e:	f06f 0305 	mvn.w	r3, #5
 8005b72:	e0b2      	b.n	8005cda <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	db06      	blt.n	8005b94 <socket+0xc8>
 8005b86:	f06f 0305 	mvn.w	r3, #5
 8005b8a:	e0a6      	b.n	8005cda <socket+0x20e>
   	}
   }
 8005b8c:	bf00      	nop
 8005b8e:	e002      	b.n	8005b96 <socket+0xca>
   	      break;
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <socket+0xca>
   	      break;
 8005b94:	bf00      	nop
	close(sn);
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f8ad 	bl	8005cf8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bac:	f023 030f 	bic.w	r3, r3, #15
 8005bb0:	b25a      	sxtb	r2, r3
 8005bb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f7ff fce1 	bl	8005584 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005bc2:	88bb      	ldrh	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d110      	bne.n	8005bea <socket+0x11e>
	{
	   port = sock_any_port++;
 8005bc8:	4b46      	ldr	r3, [pc, #280]	; (8005ce4 <socket+0x218>)
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	b291      	uxth	r1, r2
 8005bd0:	4a44      	ldr	r2, [pc, #272]	; (8005ce4 <socket+0x218>)
 8005bd2:	8011      	strh	r1, [r2, #0]
 8005bd4:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <socket+0x218>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d103      	bne.n	8005bea <socket+0x11e>
 8005be2:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <socket+0x218>)
 8005be4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005be8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	3301      	adds	r3, #1
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	88bb      	ldrh	r3, [r7, #4]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7ff fcbe 	bl	8005584 <WIZCHIP_WRITE>
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c14:	461a      	mov	r2, r3
 8005c16:	88bb      	ldrh	r3, [r7, #4]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f7ff fcb1 	bl	8005584 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	3301      	adds	r3, #1
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fca7 	bl	8005584 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005c36:	bf00      	nop
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fc51 	bl	80054ec <WIZCHIP_READ>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f3      	bne.n	8005c38 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	2201      	movs	r2, #1
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	b21b      	sxth	r3, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	b21a      	sxth	r2, r3
 8005c5e:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <socket+0x21c>)
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	4013      	ands	r3, r2
 8005c66:	b21b      	sxth	r3, r3
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <socket+0x21c>)
 8005c6c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	f003 0201 	and.w	r2, r3, #1
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	b21a      	sxth	r2, r3
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <socket+0x21c>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b21b      	sxth	r3, r3
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <socket+0x21c>)
 8005c8a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	b21b      	sxth	r3, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <socket+0x220>)
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b21b      	sxth	r3, r3
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <socket+0x220>)
 8005ca8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <socket+0x224>)
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <socket+0x228>)
 8005cb8:	2100      	movs	r1, #0
 8005cba:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005cbc:	bf00      	nop
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fc0e 	bl	80054ec <WIZCHIP_READ>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f3      	beq.n	8005cbe <socket+0x1f2>
   return (int8_t)sn;
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd90      	pop	{r4, r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000002 	.word	0x20000002
 8005ce8:	20000244 	.word	0x20000244
 8005cec:	20000246 	.word	0x20000246
 8005cf0:	20000248 	.word	0x20000248
 8005cf4:	20000258 	.word	0x20000258

08005cf8 <close>:

int8_t close(uint8_t sn)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d902      	bls.n	8005d0e <close+0x16>
 8005d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0c:	e055      	b.n	8005dba <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	3301      	adds	r3, #1
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d1a:	2110      	movs	r1, #16
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fc31 	bl	8005584 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005d22:	bf00      	nop
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	3301      	adds	r3, #1
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fbdb 	bl	80054ec <WIZCHIP_READ>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f3      	bne.n	8005d24 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	3301      	adds	r3, #1
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005d48:	211f      	movs	r1, #31
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fc1a 	bl	8005584 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	2201      	movs	r2, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	b21a      	sxth	r2, r3
 8005d5e:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <close+0xcc>)
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b21b      	sxth	r3, r3
 8005d64:	4013      	ands	r3, r2
 8005d66:	b21b      	sxth	r3, r3
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <close+0xcc>)
 8005d6c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	2201      	movs	r2, #1
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	b21b      	sxth	r3, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	b21a      	sxth	r2, r3
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <close+0xd0>)
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	4013      	ands	r3, r2
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <close+0xd0>)
 8005d8a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <close+0xd4>)
 8005d90:	2100      	movs	r1, #0
 8005d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	4a0d      	ldr	r2, [pc, #52]	; (8005dd0 <close+0xd8>)
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005d9e:	bf00      	nop
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	3301      	adds	r3, #1
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fb9d 	bl	80054ec <WIZCHIP_READ>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f3      	bne.n	8005da0 <close+0xa8>
	return SOCK_OK;
 8005db8:	2301      	movs	r3, #1
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000244 	.word	0x20000244
 8005dc8:	20000246 	.word	0x20000246
 8005dcc:	20000248 	.word	0x20000248
 8005dd0:	20000258 	.word	0x20000258

08005dd4 <listen>:

int8_t listen(uint8_t sn)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d902      	bls.n	8005dea <listen+0x16>
 8005de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de8:	e049      	b.n	8005e7e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	3301      	adds	r3, #1
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fb7a 	bl	80054ec <WIZCHIP_READ>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d002      	beq.n	8005e08 <listen+0x34>
 8005e02:	f06f 0304 	mvn.w	r3, #4
 8005e06:	e03a      	b.n	8005e7e <listen+0xaa>
	CHECK_SOCKINIT();
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff fb69 	bl	80054ec <WIZCHIP_READ>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b13      	cmp	r3, #19
 8005e1e:	d002      	beq.n	8005e26 <listen+0x52>
 8005e20:	f06f 0302 	mvn.w	r3, #2
 8005e24:	e02b      	b.n	8005e7e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e32:	2102      	movs	r1, #2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fba5 	bl	8005584 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8005e3a:	bf00      	nop
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	3301      	adds	r3, #1
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fb4f 	bl	80054ec <WIZCHIP_READ>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f3      	bne.n	8005e3c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005e54:	e006      	b.n	8005e64 <listen+0x90>
   {
         close(sn);
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff ff4d 	bl	8005cf8 <close>
         return SOCKERR_SOCKCLOSED;
 8005e5e:	f06f 0303 	mvn.w	r3, #3
 8005e62:	e00c      	b.n	8005e7e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	3301      	adds	r3, #1
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fb3b 	bl	80054ec <WIZCHIP_READ>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b14      	cmp	r3, #20
 8005e7a:	d1ec      	bne.n	8005e56 <listen+0x82>
   }
   return SOCK_OK;
 8005e7c:	2301      	movs	r3, #1
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	4613      	mov	r3, r2
 8005e98:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d902      	bls.n	8005eae <sendto+0x26>
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eac:	e11b      	b.n	80060e6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fb18 	bl	80054ec <WIZCHIP_READ>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	3b02      	subs	r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d902      	bls.n	8005ece <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005ec8:	f06f 0304 	mvn.w	r3, #4
 8005ecc:	e10b      	b.n	80060e6 <sendto+0x25e>
         break;
 8005ece:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005ed0:	89bb      	ldrh	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <sendto+0x54>
 8005ed6:	f06f 030d 	mvn.w	r3, #13
 8005eda:	e104      	b.n	80060e6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	3201      	adds	r2, #1
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	3202      	adds	r2, #2
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	3203      	adds	r2, #3
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <sendto+0xa8>
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	3301      	adds	r3, #1
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fae6 	bl	80054ec <WIZCHIP_READ>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d002      	beq.n	8005f30 <sendto+0xa8>
 8005f2a:	f06f 030b 	mvn.w	r3, #11
 8005f2e:	e0da      	b.n	80060e6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005f30:	8c3b      	ldrh	r3, [r7, #32]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10e      	bne.n	8005f54 <sendto+0xcc>
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fad4 	bl	80054ec <WIZCHIP_READ>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d002      	beq.n	8005f54 <sendto+0xcc>
 8005f4e:	f06f 030a 	mvn.w	r3, #10
 8005f52:	e0c8      	b.n	80060e6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	3301      	adds	r3, #1
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fac3 	bl	80054ec <WIZCHIP_READ>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	2b42      	cmp	r3, #66	; 0x42
 8005f6e:	d008      	beq.n	8005f82 <sendto+0xfa>
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	2b22      	cmp	r3, #34	; 0x22
 8005f74:	d005      	beq.n	8005f82 <sendto+0xfa>
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	2b32      	cmp	r3, #50	; 0x32
 8005f7a:	d002      	beq.n	8005f82 <sendto+0xfa>
 8005f7c:	f06f 0306 	mvn.w	r3, #6
 8005f80:	e0b1      	b.n	80060e6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	3301      	adds	r3, #1
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005f8e:	2204      	movs	r2, #4
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fba4 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	8c3b      	ldrh	r3, [r7, #32]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7ff fae7 	bl	8005584 <WIZCHIP_WRITE>
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	3301      	adds	r3, #1
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	8c3b      	ldrh	r3, [r7, #32]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f7ff fada 	bl	8005584 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fa85 	bl	80054ec <WIZCHIP_READ>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005fea:	89ba      	ldrh	r2, [r7, #12]
 8005fec:	8abb      	ldrh	r3, [r7, #20]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d901      	bls.n	8005ff6 <sendto+0x16e>
 8005ff2:	8abb      	ldrh	r3, [r7, #20]
 8005ff4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fbd1 	bl	80057a0 <getSn_TX_FSR>
 8005ffe:	4603      	mov	r3, r0
 8006000:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	3301      	adds	r3, #1
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fa6c 	bl	80054ec <WIZCHIP_READ>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <sendto+0x198>
 800601a:	f06f 0303 	mvn.w	r3, #3
 800601e:	e062      	b.n	80060e6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006020:	4b33      	ldr	r3, [pc, #204]	; (80060f0 <sendto+0x268>)
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	fa42 f303 	asr.w	r3, r2, r3
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <sendto+0x1b8>
 8006034:	89ba      	ldrh	r2, [r7, #12]
 8006036:	8abb      	ldrh	r3, [r7, #20]
 8006038:	429a      	cmp	r2, r3
 800603a:	d901      	bls.n	8006040 <sendto+0x1b8>
 800603c:	2300      	movs	r3, #0
 800603e:	e052      	b.n	80060e6 <sendto+0x25e>
      if(len <= freesize) break;
 8006040:	89ba      	ldrh	r2, [r7, #12]
 8006042:	8abb      	ldrh	r3, [r7, #20]
 8006044:	429a      	cmp	r2, r3
 8006046:	d900      	bls.n	800604a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8006048:	e7d5      	b.n	8005ff6 <sendto+0x16e>
      if(len <= freesize) break;
 800604a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800604c:	89ba      	ldrh	r2, [r7, #12]
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fc3a 	bl	80058cc <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	3301      	adds	r3, #1
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006064:	2120      	movs	r1, #32
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fa8c 	bl	8005584 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800606c:	bf00      	nop
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	3301      	adds	r3, #1
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fa36 	bl	80054ec <WIZCHIP_READ>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f3      	bne.n	800606e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	3301      	adds	r3, #1
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fa2a 	bl	80054ec <WIZCHIP_READ>
 8006098:	4603      	mov	r3, r0
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00c      	beq.n	80060c4 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	3301      	adds	r3, #1
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060b6:	2110      	movs	r1, #16
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fa63 	bl	8005584 <WIZCHIP_WRITE>
         break;
 80060be:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80060c0:	89bb      	ldrh	r3, [r7, #12]
 80060c2:	e010      	b.n	80060e6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0db      	beq.n	8006086 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	3301      	adds	r3, #1
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060da:	2108      	movs	r1, #8
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fa51 	bl	8005584 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80060e2:	f06f 030c 	mvn.w	r3, #12
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000244 	.word	0x20000244

080060f4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
 8006102:	4613      	mov	r3, r2
 8006104:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8006106:	2300      	movs	r3, #0
 8006108:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d902      	bls.n	8006116 <recvfrom+0x22>
 8006110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006114:	e1d1      	b.n	80064ba <recvfrom+0x3c6>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	3301      	adds	r3, #1
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f9e4 	bl	80054ec <WIZCHIP_READ>
 8006124:	4603      	mov	r3, r0
 8006126:	777b      	strb	r3, [r7, #29]
 8006128:	7f7b      	ldrb	r3, [r7, #29]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	3b02      	subs	r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	d902      	bls.n	800613a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006134:	f06f 0304 	mvn.w	r3, #4
 8006138:	e1bf      	b.n	80064ba <recvfrom+0x3c6>
         break;
 800613a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800613c:	89bb      	ldrh	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d102      	bne.n	8006148 <recvfrom+0x54>
 8006142:	f06f 030d 	mvn.w	r3, #13
 8006146:	e1b8      	b.n	80064ba <recvfrom+0x3c6>
   if(sock_remained_size[sn] == 0)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4ab1      	ldr	r2, [pc, #708]	; (8006410 <recvfrom+0x31c>)
 800614c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d128      	bne.n	80061a6 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fb6d 	bl	8005836 <getSn_RX_RSR>
 800615c:	4603      	mov	r3, r0
 800615e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	3301      	adds	r3, #1
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff f9bd 	bl	80054ec <WIZCHIP_READ>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <recvfrom+0x8a>
 8006178:	f06f 0303 	mvn.w	r3, #3
 800617c:	e19d      	b.n	80064ba <recvfrom+0x3c6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800617e:	4ba5      	ldr	r3, [pc, #660]	; (8006414 <recvfrom+0x320>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	fa42 f303 	asr.w	r3, r2, r3
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <recvfrom+0xa8>
 8006192:	8bfb      	ldrh	r3, [r7, #30]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <recvfrom+0xa8>
 8006198:	2300      	movs	r3, #0
 800619a:	e18e      	b.n	80064ba <recvfrom+0x3c6>
         if(pack_len != 0) break;
 800619c:	8bfb      	ldrh	r3, [r7, #30]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d100      	bne.n	80061a4 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80061a2:	e7d7      	b.n	8006154 <recvfrom+0x60>
         if(pack_len != 0) break;
 80061a4:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80061a6:	7f7b      	ldrb	r3, [r7, #29]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	f000 80d9 	beq.w	8006364 <recvfrom+0x270>
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d073      	beq.n	800629e <recvfrom+0x1aa>
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	f040 813c 	bne.w	8006434 <recvfrom+0x340>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	4a94      	ldr	r2, [pc, #592]	; (8006410 <recvfrom+0x31c>)
 80061c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d152      	bne.n	800626e <recvfrom+0x17a>
	      {
   			wiz_recv_data(sn, head, 8);
 80061c8:	f107 0114 	add.w	r1, r7, #20
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2208      	movs	r2, #8
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fbd7 	bl	8005984 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	3301      	adds	r3, #1
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061e2:	2140      	movs	r1, #64	; 0x40
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff f9cd 	bl	8005584 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80061ea:	bf00      	nop
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	3301      	adds	r3, #1
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff f977 	bl	80054ec <WIZCHIP_READ>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f3      	bne.n	80061ec <recvfrom+0xf8>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8006204:	7d3a      	ldrb	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3301      	adds	r3, #1
 800620e:	7d7a      	ldrb	r2, [r7, #21]
 8006210:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3302      	adds	r3, #2
 8006216:	7dba      	ldrb	r2, [r7, #22]
 8006218:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3303      	adds	r3, #3
 800621e:	7dfa      	ldrb	r2, [r7, #23]
 8006220:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8006222:	7e3b      	ldrb	r3, [r7, #24]
 8006224:	b29a      	uxth	r2, r3
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	b29a      	uxth	r2, r3
 8006232:	7e7b      	ldrb	r3, [r7, #25]
 8006234:	b29b      	uxth	r3, r3
 8006236:	4413      	add	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800623e:	7eba      	ldrb	r2, [r7, #26]
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	b291      	uxth	r1, r2
 8006244:	4a72      	ldr	r2, [pc, #456]	; (8006410 <recvfrom+0x31c>)
 8006246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	4a70      	ldr	r2, [pc, #448]	; (8006410 <recvfrom+0x31c>)
 800624e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	b299      	uxth	r1, r3
 8006256:	7efb      	ldrb	r3, [r7, #27]
 8006258:	b29a      	uxth	r2, r3
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	440a      	add	r2, r1
 800625e:	b291      	uxth	r1, r2
 8006260:	4a6b      	ldr	r2, [pc, #428]	; (8006410 <recvfrom+0x31c>)
 8006262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	4a6b      	ldr	r2, [pc, #428]	; (8006418 <recvfrom+0x324>)
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	4a67      	ldr	r2, [pc, #412]	; (8006410 <recvfrom+0x31c>)
 8006272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006276:	89ba      	ldrh	r2, [r7, #12]
 8006278:	429a      	cmp	r2, r3
 800627a:	d202      	bcs.n	8006282 <recvfrom+0x18e>
 800627c:	89bb      	ldrh	r3, [r7, #12]
 800627e:	83fb      	strh	r3, [r7, #30]
 8006280:	e004      	b.n	800628c <recvfrom+0x198>
			else pack_len = sock_remained_size[sn];
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	4a62      	ldr	r2, [pc, #392]	; (8006410 <recvfrom+0x31c>)
 8006286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800628c:	8bfb      	ldrh	r3, [r7, #30]
 800628e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006290:	8bfa      	ldrh	r2, [r7, #30]
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fb74 	bl	8005984 <wiz_recv_data>
			break;
 800629c:	e0d6      	b.n	800644c <recvfrom+0x358>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	4a5b      	ldr	r2, [pc, #364]	; (8006410 <recvfrom+0x31c>)
 80062a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d146      	bne.n	8006338 <recvfrom+0x244>
	      {
   			wiz_recv_data(sn, head, 2);
 80062aa:	f107 0114 	add.w	r1, r7, #20
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2202      	movs	r2, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff fb66 	bl	8005984 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	3301      	adds	r3, #1
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f95c 	bl	8005584 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80062cc:	bf00      	nop
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3301      	adds	r3, #1
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff f906 	bl	80054ec <WIZCHIP_READ>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f3      	bne.n	80062ce <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80062e6:	7d3a      	ldrb	r2, [r7, #20]
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	b291      	uxth	r1, r2
 80062ec:	4a48      	ldr	r2, [pc, #288]	; (8006410 <recvfrom+0x31c>)
 80062ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	4a46      	ldr	r2, [pc, #280]	; (8006410 <recvfrom+0x31c>)
 80062f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	7d7b      	ldrb	r3, [r7, #21]
 8006300:	b29b      	uxth	r3, r3
 8006302:	4413      	add	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	3a02      	subs	r2, #2
 800630a:	b291      	uxth	r1, r2
 800630c:	4a40      	ldr	r2, [pc, #256]	; (8006410 <recvfrom+0x31c>)
 800630e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	4a3e      	ldr	r2, [pc, #248]	; (8006410 <recvfrom+0x31c>)
 8006316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800631a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800631e:	4293      	cmp	r3, r2
 8006320:	d906      	bls.n	8006330 <recvfrom+0x23c>
   			{
   			   close(sn);
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fce7 	bl	8005cf8 <close>
   			   return SOCKFATAL_PACKLEN;
 800632a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800632e:	e0c4      	b.n	80064ba <recvfrom+0x3c6>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4a39      	ldr	r2, [pc, #228]	; (8006418 <recvfrom+0x324>)
 8006334:	2180      	movs	r1, #128	; 0x80
 8006336:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	4a35      	ldr	r2, [pc, #212]	; (8006410 <recvfrom+0x31c>)
 800633c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006340:	89ba      	ldrh	r2, [r7, #12]
 8006342:	429a      	cmp	r2, r3
 8006344:	d202      	bcs.n	800634c <recvfrom+0x258>
 8006346:	89bb      	ldrh	r3, [r7, #12]
 8006348:	83fb      	strh	r3, [r7, #30]
 800634a:	e004      	b.n	8006356 <recvfrom+0x262>
			else pack_len = sock_remained_size[sn];
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	4a30      	ldr	r2, [pc, #192]	; (8006410 <recvfrom+0x31c>)
 8006350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006354:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8006356:	8bfa      	ldrh	r2, [r7, #30]
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fb11 	bl	8005984 <wiz_recv_data>
		   break;
 8006362:	e073      	b.n	800644c <recvfrom+0x358>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <recvfrom+0x31c>)
 8006368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d144      	bne.n	80063fa <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 8006370:	f107 0114 	add.w	r1, r7, #20
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2206      	movs	r2, #6
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fb03 	bl	8005984 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	3301      	adds	r3, #1
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800638a:	2140      	movs	r1, #64	; 0x40
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff f8f9 	bl	8005584 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006392:	bf00      	nop
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	3301      	adds	r3, #1
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff f8a3 	bl	80054ec <WIZCHIP_READ>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1f3      	bne.n	8006394 <recvfrom+0x2a0>
   			addr[0] = head[0];
 80063ac:	7d3a      	ldrb	r2, [r7, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3301      	adds	r3, #1
 80063b6:	7d7a      	ldrb	r2, [r7, #21]
 80063b8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3302      	adds	r3, #2
 80063be:	7dba      	ldrb	r2, [r7, #22]
 80063c0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3303      	adds	r3, #3
 80063c6:	7dfa      	ldrb	r2, [r7, #23]
 80063c8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80063ca:	7e3a      	ldrb	r2, [r7, #24]
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	b291      	uxth	r1, r2
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <recvfrom+0x31c>)
 80063d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	4a0d      	ldr	r2, [pc, #52]	; (8006410 <recvfrom+0x31c>)
 80063da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	b299      	uxth	r1, r3
 80063e2:	7e7b      	ldrb	r3, [r7, #25]
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	440a      	add	r2, r1
 80063ea:	b291      	uxth	r1, r2
 80063ec:	4a08      	ldr	r2, [pc, #32]	; (8006410 <recvfrom+0x31c>)
 80063ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <recvfrom+0x324>)
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <recvfrom+0x31c>)
 80063fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006402:	89ba      	ldrh	r2, [r7, #12]
 8006404:	429a      	cmp	r2, r3
 8006406:	d209      	bcs.n	800641c <recvfrom+0x328>
 8006408:	89bb      	ldrh	r3, [r7, #12]
 800640a:	83fb      	strh	r3, [r7, #30]
 800640c:	e00b      	b.n	8006426 <recvfrom+0x332>
 800640e:	bf00      	nop
 8006410:	20000248 	.word	0x20000248
 8006414:	20000244 	.word	0x20000244
 8006418:	20000258 	.word	0x20000258
			else pack_len = sock_remained_size[sn];
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	4a29      	ldr	r2, [pc, #164]	; (80064c4 <recvfrom+0x3d0>)
 8006420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006424:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006426:	8bfa      	ldrh	r2, [r7, #30]
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff faa9 	bl	8005984 <wiz_recv_data>
			break;
 8006432:	e00b      	b.n	800644c <recvfrom+0x358>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8006434:	8bfa      	ldrh	r2, [r7, #30]
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fafe 	bl	8005a3c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4920      	ldr	r1, [pc, #128]	; (80064c4 <recvfrom+0x3d0>)
 8006444:	8bfa      	ldrh	r2, [r7, #30]
 8006446:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800644a:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	3301      	adds	r3, #1
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006458:	2140      	movs	r1, #64	; 0x40
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff f892 	bl	8005584 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8006460:	bf00      	nop
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	3301      	adds	r3, #1
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff f83c 	bl	80054ec <WIZCHIP_READ>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f3      	bne.n	8006462 <recvfrom+0x36e>
	sock_remained_size[sn] -= pack_len;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <recvfrom+0x3d0>)
 800647e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	8bfa      	ldrh	r2, [r7, #30]
 8006486:	1a8a      	subs	r2, r1, r2
 8006488:	b291      	uxth	r1, r2
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <recvfrom+0x3d0>)
 800648c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <recvfrom+0x3d0>)
 8006494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <recvfrom+0x3bc>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <recvfrom+0x3d4>)
 80064a0:	5cd2      	ldrb	r2, [r2, r3]
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	b2d1      	uxtb	r1, r2
 80064aa:	4a07      	ldr	r2, [pc, #28]	; (80064c8 <recvfrom+0x3d4>)
 80064ac:	54d1      	strb	r1, [r2, r3]
 80064ae:	e003      	b.n	80064b8 <recvfrom+0x3c4>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <recvfrom+0x3d4>)
 80064b4:	2100      	movs	r1, #0
 80064b6:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80064b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000248 	.word	0x20000248
 80064c8:	20000258 	.word	0x20000258

080064cc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80064da:	b480      	push	{r7}
 80064dc:	af00      	add	r7, sp, #0
 80064de:	bf00      	nop
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	bf00      	nop
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80064f6:	b480      	push	{r7}
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
 8006540:	2300      	movs	r3, #0
 8006542:	4618      	mov	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	71fb      	strb	r3, [r7, #7]
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	807b      	strh	r3, [r7, #2]
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	807b      	strh	r3, [r7, #2]
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <reg_wizchip_cs_cbfunc+0x16>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80065ac:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <reg_wizchip_cs_cbfunc+0x40>)
 80065ae:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80065b2:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <reg_wizchip_cs_cbfunc+0x44>)
 80065b4:	615a      	str	r2, [r3, #20]
 80065b6:	e005      	b.n	80065c4 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80065b8:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80065be:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <reg_wizchip_cs_cbfunc+0x3c>)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	6153      	str	r3, [r2, #20]
   }
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20000004 	.word	0x20000004
 80065d4:	080064e9 	.word	0x080064e9
 80065d8:	080064f7 	.word	0x080064f7

080065dc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80065e6:	bf00      	nop
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <reg_wizchip_spi_cbfunc+0x4c>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f9      	beq.n	80065e8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <reg_wizchip_spi_cbfunc+0x24>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <reg_wizchip_spi_cbfunc+0x4c>)
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <reg_wizchip_spi_cbfunc+0x50>)
 8006604:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <reg_wizchip_spi_cbfunc+0x4c>)
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <reg_wizchip_spi_cbfunc+0x54>)
 800660a:	61da      	str	r2, [r3, #28]
 800660c:	e005      	b.n	800661a <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800660e:	4a06      	ldr	r2, [pc, #24]	; (8006628 <reg_wizchip_spi_cbfunc+0x4c>)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <reg_wizchip_spi_cbfunc+0x4c>)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	61d3      	str	r3, [r2, #28]
   }
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000004 	.word	0x20000004
 800662c:	0800653d 	.word	0x0800653d
 8006630:	0800654d 	.word	0x0800654d

08006634 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800663e:	bf00      	nop
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f9      	beq.n	8006640 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <reg_wizchip_spiburst_cbfunc+0x24>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8006658:	4b09      	ldr	r3, [pc, #36]	; (8006680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800665a:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <reg_wizchip_spiburst_cbfunc+0x50>)
 800665c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006660:	4a09      	ldr	r2, [pc, #36]	; (8006688 <reg_wizchip_spiburst_cbfunc+0x54>)
 8006662:	625a      	str	r2, [r3, #36]	; 0x24
 8006664:	e005      	b.n	8006672 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8006666:	4a06      	ldr	r2, [pc, #24]	; (8006680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800666c:	4a04      	ldr	r2, [pc, #16]	; (8006680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000004 	.word	0x20000004
 8006684:	08006563 	.word	0x08006563
 8006688:	0800657b 	.word	0x0800657b

0800668c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	2206      	movs	r2, #6
 8006696:	4619      	mov	r1, r3
 8006698:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800669c:	f7fe ffc0 	bl	8005620 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	2204      	movs	r2, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066ac:	f7fe ffb8 	bl	8005620 <WIZCHIP_READ_BUF>
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	2204      	movs	r2, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80066bc:	f7fe ffb0 	bl	8005620 <WIZCHIP_READ_BUF>
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	2204      	movs	r2, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80066cc:	f7fe ffa8 	bl	8005620 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fe ff56 	bl	8005584 <WIZCHIP_WRITE>
   getMR(); // for delay
 80066d8:	2000      	movs	r0, #0
 80066da:	f7fe ff07 	bl	80054ec <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80066de:	1d3b      	adds	r3, r7, #4
 80066e0:	2206      	movs	r2, #6
 80066e2:	4619      	mov	r1, r3
 80066e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80066e8:	f7fe fffa 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	2204      	movs	r2, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066f8:	f7fe fff2 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	2204      	movs	r2, #4
 8006702:	4619      	mov	r1, r3
 8006704:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006708:	f7fe ffea 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	2204      	movs	r2, #4
 8006712:	4619      	mov	r1, r3
 8006714:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006718:	f7fe ffe2 	bl	80056e0 <WIZCHIP_WRITE_BUF>
}
 800671c:	bf00      	nop
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006732:	f7ff ffab 	bl	800668c <wizchip_sw_reset>
   if(txsize)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d03b      	beq.n	80067b4 <wizchip_init+0x90>
   {
      tmp = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	e015      	b.n	8006772 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8006746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	4413      	add	r3, r2
 8006754:	b2db      	uxtb	r3, r3
 8006756:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8006758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800675c:	2b10      	cmp	r3, #16
 800675e:	dd02      	ble.n	8006766 <wizchip_init+0x42>
 8006760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006764:	e066      	b.n	8006834 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	3301      	adds	r3, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006776:	2b07      	cmp	r3, #7
 8006778:	dde5      	ble.n	8006746 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
 800677e:	e015      	b.n	80067ac <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8006780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	3301      	adds	r3, #1
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800678e:	4618      	mov	r0, r3
 8006790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	f7fe fef2 	bl	8005584 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80067a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b0:	2b07      	cmp	r3, #7
 80067b2:	dde5      	ble.n	8006780 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d03b      	beq.n	8006832 <wizchip_init+0x10e>
   {
      tmp = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	e015      	b.n	80067f0 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 80067c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	4413      	add	r3, r2
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	4413      	add	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80067d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067da:	2b10      	cmp	r3, #16
 80067dc:	dd02      	ble.n	80067e4 <wizchip_init+0xc0>
 80067de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067e2:	e027      	b.n	8006834 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80067e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f4:	2b07      	cmp	r3, #7
 80067f6:	dde5      	ble.n	80067c4 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e015      	b.n	800682a <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80067fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	3301      	adds	r3, #1
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800680c:	4618      	mov	r0, r3
 800680e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	4413      	add	r3, r2
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	4619      	mov	r1, r3
 800681a:	f7fe feb3 	bl	8005584 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	3301      	adds	r3, #1
 8006826:	b2db      	uxtb	r3, r3
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682e:	2b07      	cmp	r3, #7
 8006830:	dde5      	ble.n	80067fe <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2206      	movs	r2, #6
 8006848:	4619      	mov	r1, r3
 800684a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800684e:	f7fe ff47 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	330e      	adds	r3, #14
 8006856:	2204      	movs	r2, #4
 8006858:	4619      	mov	r1, r3
 800685a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800685e:	f7fe ff3f 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	330a      	adds	r3, #10
 8006866:	2204      	movs	r2, #4
 8006868:	4619      	mov	r1, r3
 800686a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800686e:	f7fe ff37 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3306      	adds	r3, #6
 8006876:	2204      	movs	r2, #4
 8006878:	4619      	mov	r1, r3
 800687a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800687e:	f7fe ff2f 	bl	80056e0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7c9a      	ldrb	r2, [r3, #18]
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <wizchip_setnetinfo+0x78>)
 8006888:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7cda      	ldrb	r2, [r3, #19]
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <wizchip_setnetinfo+0x78>)
 8006890:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7d1a      	ldrb	r2, [r3, #20]
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <wizchip_setnetinfo+0x78>)
 8006898:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7d5a      	ldrb	r2, [r3, #21]
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <wizchip_setnetinfo+0x78>)
 80068a0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7d9a      	ldrb	r2, [r3, #22]
 80068a6:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <wizchip_setnetinfo+0x7c>)
 80068a8:	701a      	strb	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000260 	.word	0x20000260
 80068b8:	20000264 	.word	0x20000264

080068bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2206      	movs	r2, #6
 80068c8:	4619      	mov	r1, r3
 80068ca:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80068ce:	f7fe fea7 	bl	8005620 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	330e      	adds	r3, #14
 80068d6:	2204      	movs	r2, #4
 80068d8:	4619      	mov	r1, r3
 80068da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80068de:	f7fe fe9f 	bl	8005620 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	330a      	adds	r3, #10
 80068e6:	2204      	movs	r2, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80068ee:	f7fe fe97 	bl	8005620 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3306      	adds	r3, #6
 80068f6:	2204      	movs	r2, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80068fe:	f7fe fe8f 	bl	8005620 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006902:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <wizchip_getnetinfo+0x78>)
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <wizchip_getnetinfo+0x78>)
 800690c:	785a      	ldrb	r2, [r3, #1]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <wizchip_getnetinfo+0x78>)
 8006914:	789a      	ldrb	r2, [r3, #2]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <wizchip_getnetinfo+0x78>)
 800691c:	78da      	ldrb	r2, [r3, #3]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <wizchip_getnetinfo+0x7c>)
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	759a      	strb	r2, [r3, #22]
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000260 	.word	0x20000260
 8006938:	20000264 	.word	0x20000264

0800693c <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <_ZNSt7__cxx119to_stringEi+0x24>)
 800694e:	2210      	movs	r2, #16
 8006950:	4904      	ldr	r1, [pc, #16]	; (8006964 <_ZNSt7__cxx119to_stringEi+0x28>)
 8006952:	f000 f8ec 	bl	8006b2e <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	0800d370 	.word	0x0800d370
 8006964:	0800bb21 	.word	0x0800bb21

08006968 <_ZNSt7__cxx119to_stringEj>:

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af02      	add	r7, sp, #8
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned),
					   "%u", __val); }
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <_ZNSt7__cxx119to_stringEj+0x24>)
 800697a:	2210      	movs	r2, #16
 800697c:	4904      	ldr	r1, [pc, #16]	; (8006990 <_ZNSt7__cxx119to_stringEj+0x28>)
 800697e:	f000 f8d6 	bl	8006b2e <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	0800d374 	.word	0x0800d374
 8006990:	0800bb21 	.word	0x0800bb21

08006994 <_Z19float_to_std_stringB5cxx11f>:
#include "overrided.h"

std::string float_to_std_string(float number) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b0a8      	sub	sp, #160	; 0xa0
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	ed87 0a00 	vstr	s0, [r7]
	int ceil = int(number);
 80069a0:	edd7 7a00 	vldr	s15, [r7]
 80069a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069a8:	ee17 3a90 	vmov	r3, s15
 80069ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float fraction_float = number - (float)ceil;
 80069b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069bc:	ed97 7a00 	vldr	s14, [r7]
 80069c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069c4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float precision = 1e-2, err;
 80069c8:	4b4b      	ldr	r3, [pc, #300]	; (8006af8 <_Z19float_to_std_stringB5cxx11f+0x164>)
 80069ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	unsigned int front_fraction_zero_counter = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float digit = 0;
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	 do {
		 fraction_float *= 10;
 80069dc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80069e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80069e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069e8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

		 digit = unsigned(fraction_float);
 80069ec:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80069f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

		 if (!digit) {front_fraction_zero_counter++;}
 80069fc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a08:	d104      	bne.n	8006a14 <_Z19float_to_std_stringB5cxx11f+0x80>
 8006a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		 err = fraction_float - digit;
 8006a14:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006a18:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a20:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

	 } while(err >= precision);
 8006a24:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8006a28:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a34:	db00      	blt.n	8006a38 <_Z19float_to_std_stringB5cxx11f+0xa4>
	 do {
 8006a36:	e7d1      	b.n	80069dc <_Z19float_to_std_stringB5cxx11f+0x48>

	 unsigned int fraction_int = unsigned(fraction_float);
 8006a38:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a40:	ee17 3a90 	vmov	r3, s15
 8006a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	 return std::to_string(ceil) + "." + std::string(front_fraction_zero_counter, '0') +  std::to_string(fraction_int);
 8006a48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a4c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff ff73 	bl	800693c <_ZNSt7__cxx119to_stringEi>
 8006a56:	f107 0320 	add.w	r3, r7, #32
 8006a5a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006a5e:	4a27      	ldr	r2, [pc, #156]	; (8006afc <_Z19float_to_std_stringB5cxx11f+0x168>)
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f89c 	bl	8006b9e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006a66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f004 f885 	bl	800ab7a <_ZNSaIcEC1Ev>
 8006a70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a74:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006a78:	2230      	movs	r2, #48	; 0x30
 8006a7a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006a7e:	f004 f97f 	bl	800ad80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a8a:	f107 0120 	add.w	r1, r7, #32
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f89c 	bl	8006bcc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8006a94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a98:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff63 	bl	8006968 <_ZNSt7__cxx119to_stringEj>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006aa8:	f107 0108 	add.w	r1, r7, #8
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 f88d 	bl	8006bcc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8006ab2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f004 f985 	bl	800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006abc:	f107 0308 	add.w	r3, r7, #8
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f004 f980 	bl	800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006aca:	4618      	mov	r0, r3
 8006acc:	f004 f97b 	bl	800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ad0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f004 f851 	bl	800ab7c <_ZNSaIcED1Ev>
 8006ada:	f107 0320 	add.w	r3, r7, #32
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f004 f971 	bl	800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f004 f96c 	bl	800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006aee:	bf00      	nop
}
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	37a0      	adds	r7, #160	; 0xa0
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	3c23d70a 	.word	0x3c23d70a
 8006afc:	0800d378 	.word	0x0800d378

08006b00 <_Znwj>:

void * operator new( size_t size )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f002 f8fb 	bl	8008d04 <pvPortMalloc>
 8006b0e:	4603      	mov	r3, r0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f002 f9b1 	bl	8008e88 <vPortFree>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8006b2e:	b408      	push	{r3}
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3307      	adds	r3, #7
 8006b40:	3307      	adds	r3, #7
 8006b42:	08db      	lsrs	r3, r3, #3
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	ebad 0d03 	sub.w	sp, sp, r3
 8006b4a:	466b      	mov	r3, sp
 8006b4c:	3307      	adds	r3, #7
 8006b4e:	08db      	lsrs	r3, r3, #3
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8006b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b58:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8006b5a:	68bc      	ldr	r4, [r7, #8]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	69f8      	ldr	r0, [r7, #28]
 8006b64:	47a0      	blx	r4
 8006b66:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	18d4      	adds	r4, r2, r3
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	4618      	mov	r0, r3
 8006b74:	f004 f801 	bl	800ab7a <_ZNSaIcEC1Ev>
 8006b78:	f107 0314 	add.w	r3, r7, #20
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	69f9      	ldr	r1, [r7, #28]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f864 	bl	8006c4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8006b86:	f107 0314 	add.w	r3, r7, #20
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f003 fff6 	bl	800ab7c <_ZNSaIcED1Ev>
    }
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006b9a:	b001      	add	sp, #4
 8006b9c:	4770      	bx	lr

08006b9e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	68b8      	ldr	r0, [r7, #8]
 8006bae:	f004 f9df 	bl	800af70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f865 	bl	8006c84 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f004 f8e7 	bl	800ad92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
      const auto __size = __lhs.size() + __rhs.size();
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f004 f8fa 	bl	800add2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8006bde:	4604      	mov	r4, r0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f004 f8f6 	bl	800add2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4423      	add	r3, r4
 8006bea:	617b      	str	r3, [r7, #20]
      const bool __cond = (__size > __lhs.capacity()
 8006bec:	68b8      	ldr	r0, [r7, #8]
 8006bee:	f004 f8f2 	bl	800add6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006bf2:	4602      	mov	r2, r0
			   && __size <= __rhs.capacity());
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d908      	bls.n	8006c0c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f004 f8eb 	bl	800add6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006c00:	4602      	mov	r2, r0
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d801      	bhi.n	8006c0c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x42>
 8006c0c:	2300      	movs	r3, #0
      const bool __cond = (__size > __lhs.capacity()
 8006c0e:	74fb      	strb	r3, [r7, #19]
	            : std::move(__lhs.append(__rhs));
 8006c10:	7cfb      	ldrb	r3, [r7, #19]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x60>
      return __cond ? std::move(__rhs.insert(0, __lhs))
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f004 f976 	bl	800af0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8006c20:	4603      	mov	r3, r0
	            : std::move(__lhs.append(__rhs));
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f82e 	bl	8006c84 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	e008      	b.n	8006c3e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x72>
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68b8      	ldr	r0, [r7, #8]
 8006c30:	f004 f998 	bl	800af64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8006c34:	4603      	mov	r3, r0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f824 	bl	8006c84 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f004 f8a6 	bl	800ad92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}

08006c4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8006c4e:	b590      	push	{r4, r7, lr}
 8006c50:	b085      	sub	sp, #20
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8006c5c:	68fc      	ldr	r4, [r7, #12]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f003 ffb9 	bl	800abd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8006c64:	4603      	mov	r3, r0
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f004 f998 	bl	800afa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f810 	bl	8006c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd90      	pop	{r4, r7, pc}

08006c84 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f804 	bl	8006cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8006cc6:	4623      	mov	r3, r4
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f805 	bl	8006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd90      	pop	{r4, r7, pc}
	...

08006cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8006cea:	68b8      	ldr	r0, [r7, #8]
 8006cec:	f000 f83e 	bl	8006d6c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d001      	beq.n	8006d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8006d08:	4817      	ldr	r0, [pc, #92]	; (8006d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8006d0a:	f003 ff3b 	bl	800ab84 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	68b8      	ldr	r0, [r7, #8]
 8006d12:	f000 f845 	bl	8006da0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8006d16:	4603      	mov	r3, r0
 8006d18:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b0f      	cmp	r3, #15
 8006d1e:	d910      	bls.n	8006d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	2200      	movs	r2, #0
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f003 ff5d 	bl	800abe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4619      	mov	r1, r3
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f003 ff4b 	bl	800abce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f003 ff4c 	bl	800abda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f003 ff45 	bl	800abd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f003 ffd2 	bl	800acf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4619      	mov	r1, r3
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f003 ff40 	bl	800abde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8006d5e:	bf00      	nop
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	0800d37c 	.word	0x0800d37c

08006d6c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006daa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff ffec 	bl	8006d8c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8006db4:	462a      	mov	r2, r5
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f805 	bl	8006dc8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8006dbe:	4603      	mov	r3, r0
    }
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}

08006dc8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1ad3      	subs	r3, r2, r3
    }
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <_ZN10UartHelperC1Ev>:
 */

#include <stdlib.h>
#include "uart_helper.h"

UartHelper::UartHelper() {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <_ZN10UartHelperC1Ev+0x28>)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	char buff[20];
	uart_queue = xQueueCreate( 8, sizeof( buff ) );
 8006df6:	2200      	movs	r2, #0
 8006df8:	2114      	movs	r1, #20
 8006dfa:	2008      	movs	r0, #8
 8006dfc:	f000 fb7a 	bl	80074f4 <xQueueGenericCreate>
 8006e00:	4602      	mov	r2, r0
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	605a      	str	r2, [r3, #4]
}
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	0800d544 	.word	0x0800d544

08006e14 <_ZN10UartHelperD1Ev>:

UartHelper::~UartHelper() {
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <_ZN10UartHelperD1Ev+0x1c>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	0800d544 	.word	0x0800d544

08006e34 <_ZN10UartHelperD0Ev>:
UartHelper::~UartHelper() {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
}
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ffe9 	bl	8006e14 <_ZN10UartHelperD1Ev>
 8006e42:	210c      	movs	r1, #12
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f003 fe96 	bl	800ab76 <_ZdlPvj>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>:

void UartHelper::init(UART_HandleTypeDef *main_huart){
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
	huart = main_huart;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	609a      	str	r2, [r3, #8]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <_ZN10UartHelper6printfEPKcz>:

void UartHelper::printf(const char* fmt, ...) {
 8006e70:	b40e      	push	{r1, r2, r3}
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b089      	sub	sp, #36	; 0x24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
	char buff[20];
    //int len = strlen(fmt);
    //void* buff = calloc(len+1, sizeof(char));
    va_list args;
    va_start(args, fmt);
 8006e7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e7e:	60bb      	str	r3, [r7, #8]
    vsnprintf((char*)buff, sizeof(buff), fmt, args);
 8006e80:	f107 000c 	add.w	r0, r7, #12
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e88:	2114      	movs	r1, #20
 8006e8a:	f004 fe49 	bl	800bb20 <vsniprintf>
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6858      	ldr	r0, [r3, #4]
 8006e92:	f107 010c 	add.w	r1, r7, #12
 8006e96:	2300      	movs	r3, #0
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e9c:	f000 fb86 	bl	80075ac <xQueueGenericSend>
    va_end(args);
}
 8006ea0:	bf00      	nop
 8006ea2:	3724      	adds	r7, #36	; 0x24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eaa:	b003      	add	sp, #12
 8006eac:	4770      	bx	lr

08006eae <_ZN10UartHelper8UARTTaskEv>:
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
//    va_end(args);
}

void UartHelper::UARTTask()
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  char buff[20];
	  xQueueReceive( uart_queue, &( buff ), portMAX_DELAY );
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f107 0108 	add.w	r1, r7, #8
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fc6c 	bl	80077a0 <xQueueReceive>
	  int len = strlen(buff);
 8006ec8:	f107 0308 	add.w	r3, r7, #8
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7f9 f9d7 	bl	8000280 <strlen>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	61fb      	str	r3, [r7, #28]
	  HAL_UART_Transmit(huart, (uint8_t*)buff, len, HAL_MAX_DELAY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6898      	ldr	r0, [r3, #8]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	f107 0108 	add.w	r1, r7, #8
 8006ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ee6:	f7fc fbb3 	bl	8003650 <HAL_UART_Transmit>
	  osDelay(50);
 8006eea:	2032      	movs	r0, #50	; 0x32
 8006eec:	f000 f9d1 	bl	8007292 <osDelay>
  }
 8006ef0:	e7e1      	b.n	8006eb6 <_ZN10UartHelper8UARTTaskEv+0x8>
	...

08006ef4 <_ZN12SocketClientC1Ev>:
#include "udp_client.h"

SPI_HandleTypeDef *CHIP::hspi;

SocketClient::SocketClient() {}
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <_ZN12SocketClientC1Ev+0x30>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <_ZN12SocketClientC1Ev+0x34>)
 8006f06:	330d      	adds	r3, #13
 8006f08:	6810      	ldr	r0, [r2, #0]
 8006f0a:	6018      	str	r0, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f241 328c 	movw	r2, #5004	; 0x138c
 8006f12:	825a      	strh	r2, [r3, #18]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	0800d554 	.word	0x0800d554
 8006f28:	0800d3a8 	.word	0x0800d3a8

08006f2c <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>:

void SocketClient::init(SPI_HandleTypeDef *main_hspi1, UartHelper *main_uart_helper) {
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
	uart_helper = main_uart_helper;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	609a      	str	r2, [r3, #8]
	CHIP::hspi = main_hspi1;
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x68>)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6013      	str	r3, [r2, #0]
	chip = new CHIP();
 8006f44:	2001      	movs	r0, #1
 8006f46:	f7ff fddb 	bl	8006b00 <_Znwj>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461c      	mov	r4, r3
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7fd fe5f 	bl	8004c12 <_ZN9W5500ChipC1Ev>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	615c      	str	r4, [r3, #20]

	 HAL_GPIO_WritePin(CHIP_RST_GPIO_Port, CHIP_RST_Pin, GPIO_PIN_RESET);
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2140      	movs	r1, #64	; 0x40
 8006f5c:	480e      	ldr	r0, [pc, #56]	; (8006f98 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x6c>)
 8006f5e:	f7fa fa73 	bl	8001448 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006f62:	2064      	movs	r0, #100	; 0x64
 8006f64:	f7f9 ffea 	bl	8000f3c <HAL_Delay>
	 HAL_GPIO_WritePin(CHIP_RST_GPIO_Port, CHIP_RST_Pin, GPIO_PIN_SET);
 8006f68:	2201      	movs	r2, #1
 8006f6a:	2140      	movs	r1, #64	; 0x40
 8006f6c:	480a      	ldr	r0, [pc, #40]	; (8006f98 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x6c>)
 8006f6e:	f7fa fa6b 	bl	8001448 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006f72:	2064      	movs	r0, #100	; 0x64
 8006f74:	f7f9 ffe2 	bl	8000f3c <HAL_Delay>

	SocketClient::socket_init();
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f8ef 	bl	800715c <_ZN12SocketClient11socket_initEv>
	(*uart_helper).printf("socket inited\r\n");
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	4906      	ldr	r1, [pc, #24]	; (8006f9c <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x70>)
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff ff73 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd90      	pop	{r4, r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000268 	.word	0x20000268
 8006f98:	40020400 	.word	0x40020400
 8006f9c:	0800d3ac 	.word	0x0800d3ac

08006fa0 <_ZN12SocketClientD1Ev>:

SocketClient::~SocketClient() {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	4a08      	ldr	r2, [pc, #32]	; (8006fcc <_ZN12SocketClientD1Ev+0x2c>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
	(*uart_helper).printf("\r\ndestructor\r\n");
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	4907      	ldr	r1, [pc, #28]	; (8006fd0 <_ZN12SocketClientD1Ev+0x30>)
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ff5b 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
	SocketClient::socket_close();
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8b8 	bl	8007130 <_ZN12SocketClient12socket_closeEv>
}
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	0800d554 	.word	0x0800d554
 8006fd0:	0800d3bc 	.word	0x0800d3bc

08006fd4 <_ZN12SocketClientD0Ev>:
SocketClient::~SocketClient() {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
}
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff ffdf 	bl	8006fa0 <_ZN12SocketClientD1Ev>
 8006fe2:	2118      	movs	r1, #24
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f003 fdc6 	bl	800ab76 <_ZdlPvj>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <_ZN12SocketClient14socket_connectEv>:
void SocketClient::socket_connect(){
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	//uint8_t code = connect(http_socket, addr, port);
	uint8_t code = listen(http_socket);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	791b      	ldrb	r3, [r3, #4]
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fee7 	bl	8005dd4 <listen>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
	if(code < 0) {
    	(*uart_helper).printf("connect() failed, code = %d\r\n", code);
        close(http_socket);
        return;
    }
    (*uart_helper).printf("socket connected\r\n");
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	4903      	ldr	r1, [pc, #12]	; (800701c <_ZN12SocketClient14socket_connectEv+0x28>)
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff2d 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
}
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	0800d3cc 	.word	0x0800d3cc

08007020 <_ZN12SocketClient11socket_sendEPht>:

void SocketClient::socket_send(uint8_t *pData, uint16_t len){
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]

    while(len > 0) {
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d02a      	beq.n	800708a <_ZN12SocketClient11socket_sendEPht+0x6a>
        //int32_t nbytes = send(http_socket, pData, len);
    	int32_t nbytes = sendto(http_socket, pData, len, addr, port);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	7918      	ldrb	r0, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f103 010d 	add.w	r1, r3, #13
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8a5b      	ldrh	r3, [r3, #18]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	460b      	mov	r3, r1
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	f7fe ff1d 	bl	8005e88 <sendto>
 800704e:	6178      	str	r0, [r7, #20]

    	if(nbytes <= 0) {
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc0c      	bgt.n	8007070 <_ZN12SocketClient11socket_sendEPht+0x50>
        	(*uart_helper).printf("send() failed, %d returned\r\n", nbytes);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	490c      	ldr	r1, [pc, #48]	; (8007090 <_ZN12SocketClient11socket_sendEPht+0x70>)
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ff06 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
            close(http_socket);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fe45 	bl	8005cf8 <close>
            return;
 800706e:	e00c      	b.n	800708a <_ZN12SocketClient11socket_sendEPht+0x6a>
        	HAL_Delay(50);
        } else{
			(*uart_helper).printf("%d bytes sent!\r\n", nbytes);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4907      	ldr	r1, [pc, #28]	; (8007094 <_ZN12SocketClient11socket_sendEPht+0x74>)
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fef9 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
			len -= nbytes;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	b29b      	uxth	r3, r3
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	80fb      	strh	r3, [r7, #6]
    while(len > 0) {
 8007088:	e7d1      	b.n	800702e <_ZN12SocketClient11socket_sendEPht+0xe>
        }
    }
}
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	0800d3e0 	.word	0x0800d3e0
 8007094:	0800d400 	.word	0x0800d400

08007098 <_ZN12SocketClient14socket_receiveEPhtPm>:
			len -= nbytes;
        }
    }
}

void SocketClient::socket_receive(uint8_t *pData, uint16_t Size, uint32_t* rdmaInd){
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	80fb      	strh	r3, [r7, #6]
		int32_t nbytes = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
		uint16_t recvsize = getSn_RX_RSR(http_socket);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fbc0 	bl	8005836 <getSn_RX_RSR>
 80070b6:	4603      	mov	r3, r0
 80070b8:	827b      	strh	r3, [r7, #18]
		if (recvsize > 0){
 80070ba:	8a7b      	ldrh	r3, [r7, #18]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <_ZN12SocketClient14socket_receiveEPhtPm+0x44>
			//nbytes = recv(http_socket, pData, Size);
			nbytes = recvfrom(http_socket, pData, Size, addr, &port);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	7918      	ldrb	r0, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f103 010d 	add.w	r1, r3, #13
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3312      	adds	r3, #18
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	460b      	mov	r3, r1
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	f7ff f80d 	bl	80060f4 <recvfrom>
 80070da:	6178      	str	r0, [r7, #20]
		}
		*rdmaInd = nbytes;
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	601a      	str	r2, [r3, #0]


		if(nbytes < 0) {
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da07      	bge.n	80070f8 <_ZN12SocketClient14socket_receiveEPhtPm+0x60>
			(*uart_helper).printf("\r\nrecv() failed, %d returned\r\n", nbytes);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	490d      	ldr	r1, [pc, #52]	; (8007124 <_ZN12SocketClient14socket_receiveEPhtPm+0x8c>)
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff febd 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
			return;
 80070f6:	e011      	b.n	800711c <_ZN12SocketClient14socket_receiveEPhtPm+0x84>
		}
		if (nbytes > 0){
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dd07      	ble.n	800710e <_ZN12SocketClient14socket_receiveEPhtPm+0x76>
			(*uart_helper).printf("\r\nrecv() %d returned\r\n", nbytes);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4908      	ldr	r1, [pc, #32]	; (8007128 <_ZN12SocketClient14socket_receiveEPhtPm+0x90>)
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff feb2 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
			return;
 800710c:	e006      	b.n	800711c <_ZN12SocketClient14socket_receiveEPhtPm+0x84>
		} else {
			(*uart_helper).printf("\r\nrecv() socket busy\r\n");
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4906      	ldr	r1, [pc, #24]	; (800712c <_ZN12SocketClient14socket_receiveEPhtPm+0x94>)
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff feab 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
			return;
 800711a:	bf00      	nop
		}
}
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	0800d414 	.word	0x0800d414
 8007128:	0800d434 	.word	0x0800d434
 800712c:	0800d44c 	.word	0x0800d44c

08007130 <_ZN12SocketClient12socket_closeEv>:


void SocketClient::socket_close(){
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	  close(http_socket);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	791b      	ldrb	r3, [r3, #4]
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fddb 	bl	8005cf8 <close>
	  (*uart_helper).printf("Closing socket.\r\n");
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	4904      	ldr	r1, [pc, #16]	; (8007158 <_ZN12SocketClient12socket_closeEv+0x28>)
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fe91 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	0800d464 	.word	0x0800d464

0800715c <_ZN12SocketClient11socket_initEv>:

void SocketClient::socket_init(){
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	chip->initChip();
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	4618      	mov	r0, r3
 800716a:	f7fd fd5d 	bl	8004c28 <_ZN9W5500Chip8initChipEv>

    SocketClient::http_socket = HTTP_SOCKET;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	711a      	strb	r2, [r3, #4]
    //uint8_t code = socket(SocketClient::http_socket, Sn_MR_TCP, 10888, SF_IO_NONBLOCK );
    uint8_t code = socket(SocketClient::http_socket, Sn_MR_UDP, 10888, SF_IO_NONBLOCK );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	7918      	ldrb	r0, [r3, #4]
 8007178:	2301      	movs	r3, #1
 800717a:	f642 2288 	movw	r2, #10888	; 0x2a88
 800717e:	2102      	movs	r1, #2
 8007180:	f7fe fca4 	bl	8005acc <socket>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

    if(code != SocketClient::http_socket) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	791b      	ldrb	r3, [r3, #4]
 800718c:	7bfa      	ldrb	r2, [r7, #15]
 800718e:	429a      	cmp	r2, r3
 8007190:	d007      	beq.n	80071a2 <_ZN12SocketClient11socket_initEv+0x46>
    	(*uart_helper).printf("socket() failed, code = %d\r\n", code);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	7bfa      	ldrb	r2, [r7, #15]
 8007198:	4906      	ldr	r1, [pc, #24]	; (80071b4 <_ZN12SocketClient11socket_initEv+0x58>)
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fe68 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
        return;
 80071a0:	e005      	b.n	80071ae <_ZN12SocketClient11socket_initEv+0x52>
    }

    (*uart_helper).printf("Socket created, connecting...\r\n");
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	4904      	ldr	r1, [pc, #16]	; (80071b8 <_ZN12SocketClient11socket_initEv+0x5c>)
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fe61 	bl	8006e70 <_ZN10UartHelper6printfEPKcz>
}
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	0800d478 	.word	0x0800d478
 80071b8:	0800d498 	.word	0x0800d498

080071bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80071ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ce:	2b84      	cmp	r3, #132	; 0x84
 80071d0:	d005      	beq.n	80071de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80071d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	3303      	adds	r3, #3
 80071dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80071de:	68fb      	ldr	r3, [r7, #12]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80071f0:	f000 fe7c 	bl	8007eec <vTaskStartScheduler>
  
  return osOK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	bd80      	pop	{r7, pc}

080071fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80071fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fc:	b089      	sub	sp, #36	; 0x24
 80071fe:	af04      	add	r7, sp, #16
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d020      	beq.n	800724e <osThreadCreate+0x54>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01c      	beq.n	800724e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685c      	ldr	r4, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681d      	ldr	r5, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691e      	ldr	r6, [r3, #16]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff ffc8 	bl	80071bc <makeFreeRtosPriority>
 800722c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007236:	9202      	str	r2, [sp, #8]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	9100      	str	r1, [sp, #0]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	4632      	mov	r2, r6
 8007240:	4629      	mov	r1, r5
 8007242:	4620      	mov	r0, r4
 8007244:	f000 fc98 	bl	8007b78 <xTaskCreateStatic>
 8007248:	4603      	mov	r3, r0
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e01c      	b.n	8007288 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685c      	ldr	r4, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800725a:	b29e      	uxth	r6, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ffaa 	bl	80071bc <makeFreeRtosPriority>
 8007268:	4602      	mov	r2, r0
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	9200      	str	r2, [sp, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	4632      	mov	r2, r6
 8007276:	4629      	mov	r1, r5
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fcd6 	bl	8007c2a <xTaskCreate>
 800727e:	4603      	mov	r3, r0
 8007280:	2b01      	cmp	r3, #1
 8007282:	d001      	beq.n	8007288 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007292 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <osDelay+0x16>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	e000      	b.n	80072aa <osDelay+0x18>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fdea 	bl	8007e84 <vTaskDelay>
  
  return osOK;
 80072b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f103 0208 	add.w	r2, r3, #8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f103 0208 	add.w	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f103 0208 	add.w	r2, r3, #8
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	601a      	str	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007372:	d103      	bne.n	800737c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e00c      	b.n	8007396 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3308      	adds	r3, #8
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	e002      	b.n	800738a <vListInsert+0x2e>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d2f6      	bcs.n	8007384 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6892      	ldr	r2, [r2, #8]
 80073e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6852      	ldr	r2, [r2, #4]
 80073ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d103      	bne.n	8007402 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	e7fe      	b.n	800744a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800744c:	f001 fb7e 	bl	8008b4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	68f9      	ldr	r1, [r7, #12]
 800745a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	441a      	add	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	3b01      	subs	r3, #1
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	441a      	add	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	22ff      	movs	r2, #255	; 0xff
 8007490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	22ff      	movs	r2, #255	; 0xff
 8007498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d114      	bne.n	80074cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01a      	beq.n	80074e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3310      	adds	r3, #16
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 ff5e 	bl	8008370 <xTaskRemoveFromEventList>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d012      	beq.n	80074e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074ba:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <xQueueGenericReset+0xcc>)
 80074bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	e009      	b.n	80074e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3310      	adds	r3, #16
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fef2 	bl	80072ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3324      	adds	r3, #36	; 0x24
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff feed 	bl	80072ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074e0:	f001 fb62 	bl	8008ba8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074e4:	2301      	movs	r3, #1
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <xQueueGenericCreate+0x28>
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	e7fe      	b.n	800751a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e004      	b.n	8007532 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	fb02 f303 	mul.w	r3, r2, r3
 8007530:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	3348      	adds	r3, #72	; 0x48
 8007536:	4618      	mov	r0, r3
 8007538:	f001 fbe4 	bl	8008d04 <pvPortMalloc>
 800753c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00f      	beq.n	8007564 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	3348      	adds	r3, #72	; 0x48
 8007548:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007552:	79fa      	ldrb	r2, [r7, #7]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4613      	mov	r3, r2
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f805 	bl	800756e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007564:	69bb      	ldr	r3, [r7, #24]
	}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d103      	bne.n	800758a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e002      	b.n	8007590 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800759c:	2101      	movs	r1, #1
 800759e:	69b8      	ldr	r0, [r7, #24]
 80075a0:	f7ff ff40 	bl	8007424 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075ba:	2300      	movs	r3, #0
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <xQueueGenericSend+0x30>
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80075da:	e7fe      	b.n	80075da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <xQueueGenericSend+0x3e>
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <xQueueGenericSend+0x42>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericSend+0x44>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d109      	bne.n	8007608 <xQueueGenericSend+0x5c>
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	e7fe      	b.n	8007606 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d103      	bne.n	8007616 <xQueueGenericSend+0x6a>
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <xQueueGenericSend+0x6e>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <xQueueGenericSend+0x70>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d109      	bne.n	8007634 <xQueueGenericSend+0x88>
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	e7fe      	b.n	8007632 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007634:	f001 f858 	bl	80086e8 <xTaskGetSchedulerState>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d102      	bne.n	8007644 <xQueueGenericSend+0x98>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <xQueueGenericSend+0x9c>
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <xQueueGenericSend+0x9e>
 8007648:	2300      	movs	r3, #0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <xQueueGenericSend+0xb6>
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e7fe      	b.n	8007660 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007662:	f001 fa73 	bl	8008b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <xQueueGenericSend+0xcc>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d129      	bne.n	80076cc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767e:	f000 f96b 	bl	8007958 <prvCopyDataToQueue>
 8007682:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	3324      	adds	r3, #36	; 0x24
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fe6d 	bl	8008370 <xTaskRemoveFromEventList>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d013      	beq.n	80076c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800769c:	4b3f      	ldr	r3, [pc, #252]	; (800779c <xQueueGenericSend+0x1f0>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	e00a      	b.n	80076c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076b4:	4b39      	ldr	r3, [pc, #228]	; (800779c <xQueueGenericSend+0x1f0>)
 80076b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076c4:	f001 fa70 	bl	8008ba8 <vPortExitCritical>
				return pdPASS;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e063      	b.n	8007794 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076d2:	f001 fa69 	bl	8008ba8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e05c      	b.n	8007794 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d106      	bne.n	80076ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076e0:	f107 0314 	add.w	r3, r7, #20
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fea5 	bl	8008434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ee:	f001 fa5b 	bl	8008ba8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076f2:	f000 fc59 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076f6:	f001 fa29 	bl	8008b4c <vPortEnterCritical>
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007700:	b25b      	sxtb	r3, r3
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007706:	d103      	bne.n	8007710 <xQueueGenericSend+0x164>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007716:	b25b      	sxtb	r3, r3
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771c:	d103      	bne.n	8007726 <xQueueGenericSend+0x17a>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007726:	f001 fa3f 	bl	8008ba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800772a:	1d3a      	adds	r2, r7, #4
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fe94 	bl	8008460 <xTaskCheckForTimeOut>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d124      	bne.n	8007788 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800773e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007740:	f000 fa02 	bl	8007b48 <prvIsQueueFull>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d018      	beq.n	800777c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	3310      	adds	r3, #16
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	4611      	mov	r1, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fde8 	bl	8008328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800775a:	f000 f98d 	bl	8007a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800775e:	f000 fc31 	bl	8007fc4 <xTaskResumeAll>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	f47f af7c 	bne.w	8007662 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <xQueueGenericSend+0x1f0>)
 800776c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	e772      	b.n	8007662 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800777c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800777e:	f000 f97b 	bl	8007a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007782:	f000 fc1f 	bl	8007fc4 <xTaskResumeAll>
 8007786:	e76c      	b.n	8007662 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800778a:	f000 f975 	bl	8007a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800778e:	f000 fc19 	bl	8007fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007792:	2300      	movs	r3, #0
		}
	}
}
 8007794:	4618      	mov	r0, r3
 8007796:	3738      	adds	r7, #56	; 0x38
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <xQueueReceive+0x2e>
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	623b      	str	r3, [r7, #32]
 80077cc:	e7fe      	b.n	80077cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <xQueueReceive+0x3c>
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <xQueueReceive+0x40>
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <xQueueReceive+0x42>
 80077e0:	2300      	movs	r3, #0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <xQueueReceive+0x5a>
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	e7fe      	b.n	80077f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077fa:	f000 ff75 	bl	80086e8 <xTaskGetSchedulerState>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d102      	bne.n	800780a <xQueueReceive+0x6a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <xQueueReceive+0x6e>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <xQueueReceive+0x70>
 800780e:	2300      	movs	r3, #0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <xQueueReceive+0x88>
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	e7fe      	b.n	8007826 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007828:	f001 f990 	bl	8008b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01f      	beq.n	8007878 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783c:	f000 f8f6 	bl	8007a2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	1e5a      	subs	r2, r3, #1
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00f      	beq.n	8007870 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	3310      	adds	r3, #16
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fd8b 	bl	8008370 <xTaskRemoveFromEventList>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007860:	4b3c      	ldr	r3, [pc, #240]	; (8007954 <xQueueReceive+0x1b4>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007870:	f001 f99a 	bl	8008ba8 <vPortExitCritical>
				return pdPASS;
 8007874:	2301      	movs	r3, #1
 8007876:	e069      	b.n	800794c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800787e:	f001 f993 	bl	8008ba8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007882:	2300      	movs	r3, #0
 8007884:	e062      	b.n	800794c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800788c:	f107 0310 	add.w	r3, r7, #16
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fdcf 	bl	8008434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800789a:	f001 f985 	bl	8008ba8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800789e:	f000 fb83 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a2:	f001 f953 	bl	8008b4c <vPortEnterCritical>
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b2:	d103      	bne.n	80078bc <xQueueReceive+0x11c>
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c8:	d103      	bne.n	80078d2 <xQueueReceive+0x132>
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d2:	f001 f969 	bl	8008ba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078d6:	1d3a      	adds	r2, r7, #4
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fdbe 	bl	8008460 <xTaskCheckForTimeOut>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d123      	bne.n	8007932 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ec:	f000 f916 	bl	8007b1c <prvIsQueueEmpty>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d017      	beq.n	8007926 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	3324      	adds	r3, #36	; 0x24
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fd12 	bl	8008328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 f8b7 	bl	8007a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800790a:	f000 fb5b 	bl	8007fc4 <xTaskResumeAll>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d189      	bne.n	8007828 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007914:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <xQueueReceive+0x1b4>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	e780      	b.n	8007828 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007928:	f000 f8a6 	bl	8007a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800792c:	f000 fb4a 	bl	8007fc4 <xTaskResumeAll>
 8007930:	e77a      	b.n	8007828 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007934:	f000 f8a0 	bl	8007a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007938:	f000 fb44 	bl	8007fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f000 f8ed 	bl	8007b1c <prvIsQueueEmpty>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	f43f af6f 	beq.w	8007828 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800794a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800794c:	4618      	mov	r0, r3
 800794e:	3730      	adds	r7, #48	; 0x30
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10d      	bne.n	8007992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d14d      	bne.n	8007a1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fece 	bl	8008724 <xTaskPriorityDisinherit>
 8007988:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	605a      	str	r2, [r3, #4]
 8007990:	e043      	b.n	8007a1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d119      	bne.n	80079cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6898      	ldr	r0, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	461a      	mov	r2, r3
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	f003 fbc4 	bl	800b130 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d32b      	bcc.n	8007a1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	609a      	str	r2, [r3, #8]
 80079ca:	e026      	b.n	8007a1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68d8      	ldr	r0, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	461a      	mov	r2, r3
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	f003 fbaa 	bl	800b130 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	425b      	negs	r3, r3
 80079e6:	441a      	add	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d207      	bcs.n	8007a08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	425b      	negs	r3, r3
 8007a02:	441a      	add	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d105      	bne.n	8007a1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a22:	697b      	ldr	r3, [r7, #20]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d018      	beq.n	8007a70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	441a      	add	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d303      	bcc.n	8007a60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68d9      	ldr	r1, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6838      	ldr	r0, [r7, #0]
 8007a6c:	f003 fb60 	bl	800b130 <memcpy>
	}
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a80:	f001 f864 	bl	8008b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a8c:	e011      	b.n	8007ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d012      	beq.n	8007abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3324      	adds	r3, #36	; 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fc68 	bl	8008370 <xTaskRemoveFromEventList>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007aa6:	f000 fd3b 	bl	8008520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dce9      	bgt.n	8007a8e <prvUnlockQueue+0x16>
 8007aba:	e000      	b.n	8007abe <prvUnlockQueue+0x46>
					break;
 8007abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	22ff      	movs	r2, #255	; 0xff
 8007ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ac6:	f001 f86f 	bl	8008ba8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aca:	f001 f83f 	bl	8008b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ad6:	e011      	b.n	8007afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d012      	beq.n	8007b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fc43 	bl	8008370 <xTaskRemoveFromEventList>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007af0:	f000 fd16 	bl	8008520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dce9      	bgt.n	8007ad8 <prvUnlockQueue+0x60>
 8007b04:	e000      	b.n	8007b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	22ff      	movs	r2, #255	; 0xff
 8007b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b10:	f001 f84a 	bl	8008ba8 <vPortExitCritical>
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b24:	f001 f812 	bl	8008b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e001      	b.n	8007b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b3a:	f001 f835 	bl	8008ba8 <vPortExitCritical>

	return xReturn;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b50:	f000 fffc 	bl	8008b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d102      	bne.n	8007b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e001      	b.n	8007b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b6a:	f001 f81d 	bl	8008ba8 <vPortExitCritical>

	return xReturn;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08e      	sub	sp, #56	; 0x38
 8007b7c:	af04      	add	r7, sp, #16
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <xTaskCreateStatic+0x28>
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	e7fe      	b.n	8007b9e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <xTaskCreateStatic+0x42>
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	e7fe      	b.n	8007bb8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bba:	2354      	movs	r3, #84	; 0x54
 8007bbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b54      	cmp	r3, #84	; 0x54
 8007bc2:	d009      	beq.n	8007bd8 <xTaskCreateStatic+0x60>
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	e7fe      	b.n	8007bd6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01e      	beq.n	8007c1c <xTaskCreateStatic+0xa4>
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01b      	beq.n	8007c1c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	f107 0314 	add.w	r3, r7, #20
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f850 	bl	8007cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c16:	f000 f8cb 	bl	8007db0 <prvAddNewTaskToReadyList>
 8007c1a:	e001      	b.n	8007c20 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c20:	697b      	ldr	r3, [r7, #20]
	}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3728      	adds	r7, #40	; 0x28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b08c      	sub	sp, #48	; 0x30
 8007c2e:	af04      	add	r7, sp, #16
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 f860 	bl	8008d04 <pvPortMalloc>
 8007c44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00e      	beq.n	8007c6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007c4c:	2054      	movs	r0, #84	; 0x54
 8007c4e:	f001 f859 	bl	8008d04 <pvPortMalloc>
 8007c52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007c60:	e005      	b.n	8007c6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c62:	6978      	ldr	r0, [r7, #20]
 8007c64:	f001 f910 	bl	8008e88 <vPortFree>
 8007c68:	e001      	b.n	8007c6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d017      	beq.n	8007ca4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c7c:	88fa      	ldrh	r2, [r7, #6]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9303      	str	r3, [sp, #12]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f80e 	bl	8007cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c98:	69f8      	ldr	r0, [r7, #28]
 8007c9a:	f000 f889 	bl	8007db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e002      	b.n	8007caa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007caa:	69bb      	ldr	r3, [r7, #24]
	}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d009      	beq.n	8007cfa <prvInitialiseNewTask+0x46>
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	e7fe      	b.n	8007cf8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e012      	b.n	8007d26 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	7819      	ldrb	r1, [r3, #0]
 8007d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3334      	adds	r3, #52	; 0x34
 8007d10:	460a      	mov	r2, r1
 8007d12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	3301      	adds	r3, #1
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b0f      	cmp	r3, #15
 8007d2a:	d9e9      	bls.n	8007d00 <prvInitialiseNewTask+0x4c>
 8007d2c:	e000      	b.n	8007d30 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007d2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	2b06      	cmp	r3, #6
 8007d3c:	d901      	bls.n	8007d42 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d3e:	2306      	movs	r3, #6
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2200      	movs	r2, #0
 8007d52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff face 	bl	80072fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	3318      	adds	r3, #24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fac9 	bl	80072fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	f1c3 0207 	rsb	r2, r3, #7
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2200      	movs	r2, #0
 8007d82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	69b8      	ldr	r0, [r7, #24]
 8007d92:	f000 fdb1 	bl	80088f8 <pxPortInitialiseStack>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da8:	bf00      	nop
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007db8:	f000 fec8 	bl	8008b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dbc:	4b2a      	ldr	r3, [pc, #168]	; (8007e68 <prvAddNewTaskToReadyList+0xb8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <prvAddNewTaskToReadyList+0xb8>)
 8007dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <prvAddNewTaskToReadyList+0xbc>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dce:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <prvAddNewTaskToReadyList+0xbc>)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dd4:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <prvAddNewTaskToReadyList+0xb8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d110      	bne.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ddc:	f000 fbc4 	bl	8008568 <prvInitialiseTaskLists>
 8007de0:	e00d      	b.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007de2:	4b23      	ldr	r3, [pc, #140]	; (8007e70 <prvAddNewTaskToReadyList+0xc0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dea:	4b20      	ldr	r3, [pc, #128]	; (8007e6c <prvAddNewTaskToReadyList+0xbc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d802      	bhi.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007df8:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <prvAddNewTaskToReadyList+0xbc>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <prvAddNewTaskToReadyList+0xc4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a1b      	ldr	r2, [pc, #108]	; (8007e74 <prvAddNewTaskToReadyList+0xc4>)
 8007e06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	409a      	lsls	r2, r3
 8007e10:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <prvAddNewTaskToReadyList+0xcc>)
 8007e28:	441a      	add	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f7ff fa6f 	bl	8007314 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e36:	f000 feb7 	bl	8008ba8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <prvAddNewTaskToReadyList+0xc0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00e      	beq.n	8007e60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e42:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <prvAddNewTaskToReadyList+0xbc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d207      	bcs.n	8007e60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <prvAddNewTaskToReadyList+0xd0>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	2000036c 	.word	0x2000036c
 8007e6c:	2000026c 	.word	0x2000026c
 8007e70:	20000378 	.word	0x20000378
 8007e74:	20000388 	.word	0x20000388
 8007e78:	20000374 	.word	0x20000374
 8007e7c:	20000270 	.word	0x20000270
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d016      	beq.n	8007ec4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e96:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <vTaskDelay+0x60>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <vTaskDelay+0x2e>
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60bb      	str	r3, [r7, #8]
 8007eb0:	e7fe      	b.n	8007eb0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007eb2:	f000 f879 	bl	8007fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fcb7 	bl	800882c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ebe:	f000 f881 	bl	8007fc4 <xTaskResumeAll>
 8007ec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <vTaskDelay+0x64>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000394 	.word	0x20000394
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	; 0x28
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007efa:	463a      	mov	r2, r7
 8007efc:	1d39      	adds	r1, r7, #4
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 f8d4 	bl	80090b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	9202      	str	r2, [sp, #8]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	460a      	mov	r2, r1
 8007f1a:	491d      	ldr	r1, [pc, #116]	; (8007f90 <vTaskStartScheduler+0xa4>)
 8007f1c:	481d      	ldr	r0, [pc, #116]	; (8007f94 <vTaskStartScheduler+0xa8>)
 8007f1e:	f7ff fe2b 	bl	8007b78 <xTaskCreateStatic>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <vTaskStartScheduler+0xac>)
 8007f26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f28:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <vTaskStartScheduler+0xac>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e001      	b.n	8007f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d115      	bne.n	8007f6c <vTaskStartScheduler+0x80>
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <vTaskStartScheduler+0xb0>)
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f5a:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <vTaskStartScheduler+0xb4>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f60:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <vTaskStartScheduler+0xb8>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f66:	f000 fd53 	bl	8008a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f6a:	e00d      	b.n	8007f88 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f72:	d109      	bne.n	8007f88 <vTaskStartScheduler+0x9c>
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e7fe      	b.n	8007f86 <vTaskStartScheduler+0x9a>
}
 8007f88:	bf00      	nop
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	0800d4b8 	.word	0x0800d4b8
 8007f94:	08008539 	.word	0x08008539
 8007f98:	20000390 	.word	0x20000390
 8007f9c:	2000038c 	.word	0x2000038c
 8007fa0:	20000378 	.word	0x20000378
 8007fa4:	20000370 	.word	0x20000370

08007fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <vTaskSuspendAll+0x18>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	4a03      	ldr	r2, [pc, #12]	; (8007fc0 <vTaskSuspendAll+0x18>)
 8007fb4:	6013      	str	r3, [r2, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20000394 	.word	0x20000394

08007fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fd2:	4b41      	ldr	r3, [pc, #260]	; (80080d8 <xTaskResumeAll+0x114>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <xTaskResumeAll+0x2a>
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	e7fe      	b.n	8007fec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fee:	f000 fdad 	bl	8008b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ff2:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <xTaskResumeAll+0x114>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	4a37      	ldr	r2, [pc, #220]	; (80080d8 <xTaskResumeAll+0x114>)
 8007ffa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ffc:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <xTaskResumeAll+0x114>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d161      	bne.n	80080c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008004:	4b35      	ldr	r3, [pc, #212]	; (80080dc <xTaskResumeAll+0x118>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d05d      	beq.n	80080c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800800c:	e02e      	b.n	800806c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800800e:	4b34      	ldr	r3, [pc, #208]	; (80080e0 <xTaskResumeAll+0x11c>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3318      	adds	r3, #24
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff f9d7 	bl	80073ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3304      	adds	r3, #4
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff f9d2 	bl	80073ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	2201      	movs	r2, #1
 8008030:	409a      	lsls	r2, r3
 8008032:	4b2c      	ldr	r3, [pc, #176]	; (80080e4 <xTaskResumeAll+0x120>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4313      	orrs	r3, r2
 8008038:	4a2a      	ldr	r2, [pc, #168]	; (80080e4 <xTaskResumeAll+0x120>)
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4a27      	ldr	r2, [pc, #156]	; (80080e8 <xTaskResumeAll+0x124>)
 800804a:	441a      	add	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7ff f95e 	bl	8007314 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4b23      	ldr	r3, [pc, #140]	; (80080ec <xTaskResumeAll+0x128>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	429a      	cmp	r2, r3
 8008064:	d302      	bcc.n	800806c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008066:	4b22      	ldr	r3, [pc, #136]	; (80080f0 <xTaskResumeAll+0x12c>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800806c:	4b1c      	ldr	r3, [pc, #112]	; (80080e0 <xTaskResumeAll+0x11c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1cc      	bne.n	800800e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800807a:	f000 fb0f 	bl	800869c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800807e:	4b1d      	ldr	r3, [pc, #116]	; (80080f4 <xTaskResumeAll+0x130>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d010      	beq.n	80080ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800808a:	f000 f837 	bl	80080fc <xTaskIncrementTick>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008094:	4b16      	ldr	r3, [pc, #88]	; (80080f0 <xTaskResumeAll+0x12c>)
 8008096:	2201      	movs	r2, #1
 8008098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3b01      	subs	r3, #1
 800809e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f1      	bne.n	800808a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <xTaskResumeAll+0x130>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <xTaskResumeAll+0x12c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d009      	beq.n	80080c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <xTaskResumeAll+0x134>)
 80080ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080c8:	f000 fd6e 	bl	8008ba8 <vPortExitCritical>

	return xAlreadyYielded;
 80080cc:	68bb      	ldr	r3, [r7, #8]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000394 	.word	0x20000394
 80080dc:	2000036c 	.word	0x2000036c
 80080e0:	2000032c 	.word	0x2000032c
 80080e4:	20000374 	.word	0x20000374
 80080e8:	20000270 	.word	0x20000270
 80080ec:	2000026c 	.word	0x2000026c
 80080f0:	20000380 	.word	0x20000380
 80080f4:	2000037c 	.word	0x2000037c
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008106:	4b50      	ldr	r3, [pc, #320]	; (8008248 <xTaskIncrementTick+0x14c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 808c 	bne.w	8008228 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008110:	4b4e      	ldr	r3, [pc, #312]	; (800824c <xTaskIncrementTick+0x150>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008118:	4a4c      	ldr	r2, [pc, #304]	; (800824c <xTaskIncrementTick+0x150>)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11f      	bne.n	8008164 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008124:	4b4a      	ldr	r3, [pc, #296]	; (8008250 <xTaskIncrementTick+0x154>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <xTaskIncrementTick+0x46>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	e7fe      	b.n	8008140 <xTaskIncrementTick+0x44>
 8008142:	4b43      	ldr	r3, [pc, #268]	; (8008250 <xTaskIncrementTick+0x154>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	4b42      	ldr	r3, [pc, #264]	; (8008254 <xTaskIncrementTick+0x158>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a40      	ldr	r2, [pc, #256]	; (8008250 <xTaskIncrementTick+0x154>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	4a40      	ldr	r2, [pc, #256]	; (8008254 <xTaskIncrementTick+0x158>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	4b40      	ldr	r3, [pc, #256]	; (8008258 <xTaskIncrementTick+0x15c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	4a3e      	ldr	r2, [pc, #248]	; (8008258 <xTaskIncrementTick+0x15c>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	f000 fa9c 	bl	800869c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008164:	4b3d      	ldr	r3, [pc, #244]	; (800825c <xTaskIncrementTick+0x160>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d34d      	bcc.n	800820a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800816e:	4b38      	ldr	r3, [pc, #224]	; (8008250 <xTaskIncrementTick+0x154>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <xTaskIncrementTick+0x80>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <xTaskIncrementTick+0x82>
 800817c:	2300      	movs	r3, #0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008182:	4b36      	ldr	r3, [pc, #216]	; (800825c <xTaskIncrementTick+0x160>)
 8008184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008188:	601a      	str	r2, [r3, #0]
					break;
 800818a:	e03e      	b.n	800820a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800818c:	4b30      	ldr	r3, [pc, #192]	; (8008250 <xTaskIncrementTick+0x154>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d203      	bcs.n	80081ac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081a4:	4a2d      	ldr	r2, [pc, #180]	; (800825c <xTaskIncrementTick+0x160>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6013      	str	r3, [r2, #0]
						break;
 80081aa:	e02e      	b.n	800820a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff f90c 	bl	80073ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3318      	adds	r3, #24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff f903 	bl	80073ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	2201      	movs	r2, #1
 80081ce:	409a      	lsls	r2, r3
 80081d0:	4b23      	ldr	r3, [pc, #140]	; (8008260 <xTaskIncrementTick+0x164>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	4a22      	ldr	r2, [pc, #136]	; (8008260 <xTaskIncrementTick+0x164>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a1f      	ldr	r2, [pc, #124]	; (8008264 <xTaskIncrementTick+0x168>)
 80081e8:	441a      	add	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7ff f88f 	bl	8007314 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fa:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <xTaskIncrementTick+0x16c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d3b4      	bcc.n	800816e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008204:	2301      	movs	r3, #1
 8008206:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008208:	e7b1      	b.n	800816e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800820a:	4b17      	ldr	r3, [pc, #92]	; (8008268 <xTaskIncrementTick+0x16c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008210:	4914      	ldr	r1, [pc, #80]	; (8008264 <xTaskIncrementTick+0x168>)
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d907      	bls.n	8008232 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	e004      	b.n	8008232 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008228:	4b10      	ldr	r3, [pc, #64]	; (800826c <xTaskIncrementTick+0x170>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	4a0f      	ldr	r2, [pc, #60]	; (800826c <xTaskIncrementTick+0x170>)
 8008230:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <xTaskIncrementTick+0x174>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800823a:	2301      	movs	r3, #1
 800823c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800823e:	697b      	ldr	r3, [r7, #20]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000394 	.word	0x20000394
 800824c:	20000370 	.word	0x20000370
 8008250:	20000324 	.word	0x20000324
 8008254:	20000328 	.word	0x20000328
 8008258:	20000384 	.word	0x20000384
 800825c:	2000038c 	.word	0x2000038c
 8008260:	20000374 	.word	0x20000374
 8008264:	20000270 	.word	0x20000270
 8008268:	2000026c 	.word	0x2000026c
 800826c:	2000037c 	.word	0x2000037c
 8008270:	20000380 	.word	0x20000380

08008274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800827a:	4b26      	ldr	r3, [pc, #152]	; (8008314 <vTaskSwitchContext+0xa0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008282:	4b25      	ldr	r3, [pc, #148]	; (8008318 <vTaskSwitchContext+0xa4>)
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008288:	e03e      	b.n	8008308 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800828a:	4b23      	ldr	r3, [pc, #140]	; (8008318 <vTaskSwitchContext+0xa4>)
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008290:	4b22      	ldr	r3, [pc, #136]	; (800831c <vTaskSwitchContext+0xa8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	fab3 f383 	clz	r3, r3
 800829c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	f1c3 031f 	rsb	r3, r3, #31
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	491e      	ldr	r1, [pc, #120]	; (8008320 <vTaskSwitchContext+0xac>)
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	440b      	add	r3, r1
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	e7fe      	b.n	80082cc <vTaskSwitchContext+0x58>
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a11      	ldr	r2, [pc, #68]	; (8008320 <vTaskSwitchContext+0xac>)
 80082da:	4413      	add	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	605a      	str	r2, [r3, #4]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	3308      	adds	r3, #8
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d104      	bne.n	80082fe <vTaskSwitchContext+0x8a>
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	4a07      	ldr	r2, [pc, #28]	; (8008324 <vTaskSwitchContext+0xb0>)
 8008306:	6013      	str	r3, [r2, #0]
}
 8008308:	bf00      	nop
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	20000394 	.word	0x20000394
 8008318:	20000380 	.word	0x20000380
 800831c:	20000374 	.word	0x20000374
 8008320:	20000270 	.word	0x20000270
 8008324:	2000026c 	.word	0x2000026c

08008328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d109      	bne.n	800834c <vTaskPlaceOnEventList+0x24>
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e7fe      	b.n	800834a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <vTaskPlaceOnEventList+0x44>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3318      	adds	r3, #24
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff f801 	bl	800735c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800835a:	2101      	movs	r1, #1
 800835c:	6838      	ldr	r0, [r7, #0]
 800835e:	f000 fa65 	bl	800882c <prvAddCurrentTaskToDelayedList>
}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	2000026c 	.word	0x2000026c

08008370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <xTaskRemoveFromEventList+0x2a>
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e7fe      	b.n	8008398 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	3318      	adds	r3, #24
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff f815 	bl	80073ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a4:	4b1d      	ldr	r3, [pc, #116]	; (800841c <xTaskRemoveFromEventList+0xac>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d11c      	bne.n	80083e6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff f80c 	bl	80073ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	2201      	movs	r2, #1
 80083bc:	409a      	lsls	r2, r3
 80083be:	4b18      	ldr	r3, [pc, #96]	; (8008420 <xTaskRemoveFromEventList+0xb0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	4a16      	ldr	r2, [pc, #88]	; (8008420 <xTaskRemoveFromEventList+0xb0>)
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4a13      	ldr	r2, [pc, #76]	; (8008424 <xTaskRemoveFromEventList+0xb4>)
 80083d6:	441a      	add	r2, r3
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3304      	adds	r3, #4
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f7fe ff98 	bl	8007314 <vListInsertEnd>
 80083e4:	e005      	b.n	80083f2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	3318      	adds	r3, #24
 80083ea:	4619      	mov	r1, r3
 80083ec:	480e      	ldr	r0, [pc, #56]	; (8008428 <xTaskRemoveFromEventList+0xb8>)
 80083ee:	f7fe ff91 	bl	8007314 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f6:	4b0d      	ldr	r3, [pc, #52]	; (800842c <xTaskRemoveFromEventList+0xbc>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d905      	bls.n	800840c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008404:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <xTaskRemoveFromEventList+0xc0>)
 8008406:	2201      	movs	r2, #1
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e001      	b.n	8008410 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008410:	697b      	ldr	r3, [r7, #20]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000394 	.word	0x20000394
 8008420:	20000374 	.word	0x20000374
 8008424:	20000270 	.word	0x20000270
 8008428:	2000032c 	.word	0x2000032c
 800842c:	2000026c 	.word	0x2000026c
 8008430:	20000380 	.word	0x20000380

08008434 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <vTaskInternalSetTimeOutState+0x24>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <vTaskInternalSetTimeOutState+0x28>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	605a      	str	r2, [r3, #4]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	20000384 	.word	0x20000384
 800845c:	20000370 	.word	0x20000370

08008460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <xTaskCheckForTimeOut+0x24>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	e7fe      	b.n	8008482 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <xTaskCheckForTimeOut+0x3e>
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e7fe      	b.n	800849c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800849e:	f000 fb55 	bl	8008b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084a2:	4b1d      	ldr	r3, [pc, #116]	; (8008518 <xTaskCheckForTimeOut+0xb8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ba:	d102      	bne.n	80084c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084bc:	2300      	movs	r3, #0
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	e023      	b.n	800850a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4b15      	ldr	r3, [pc, #84]	; (800851c <xTaskCheckForTimeOut+0xbc>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d007      	beq.n	80084de <xTaskCheckForTimeOut+0x7e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d302      	bcc.n	80084de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	e015      	b.n	800850a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d20b      	bcs.n	8008500 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff ff9d 	bl	8008434 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	e004      	b.n	800850a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800850a:	f000 fb4d 	bl	8008ba8 <vPortExitCritical>

	return xReturn;
 800850e:	69fb      	ldr	r3, [r7, #28]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3720      	adds	r7, #32
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000370 	.word	0x20000370
 800851c:	20000384 	.word	0x20000384

08008520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008524:	4b03      	ldr	r3, [pc, #12]	; (8008534 <vTaskMissedYield+0x14>)
 8008526:	2201      	movs	r2, #1
 8008528:	601a      	str	r2, [r3, #0]
}
 800852a:	bf00      	nop
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	20000380 	.word	0x20000380

08008538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008540:	f000 f852 	bl	80085e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <prvIdleTask+0x28>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d9f9      	bls.n	8008540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <prvIdleTask+0x2c>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800855c:	e7f0      	b.n	8008540 <prvIdleTask+0x8>
 800855e:	bf00      	nop
 8008560:	20000270 	.word	0x20000270
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
 8008572:	e00c      	b.n	800858e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4a12      	ldr	r2, [pc, #72]	; (80085c8 <prvInitialiseTaskLists+0x60>)
 8008580:	4413      	add	r3, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fe99 	bl	80072ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3301      	adds	r3, #1
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b06      	cmp	r3, #6
 8008592:	d9ef      	bls.n	8008574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008594:	480d      	ldr	r0, [pc, #52]	; (80085cc <prvInitialiseTaskLists+0x64>)
 8008596:	f7fe fe90 	bl	80072ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800859a:	480d      	ldr	r0, [pc, #52]	; (80085d0 <prvInitialiseTaskLists+0x68>)
 800859c:	f7fe fe8d 	bl	80072ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085a0:	480c      	ldr	r0, [pc, #48]	; (80085d4 <prvInitialiseTaskLists+0x6c>)
 80085a2:	f7fe fe8a 	bl	80072ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085a6:	480c      	ldr	r0, [pc, #48]	; (80085d8 <prvInitialiseTaskLists+0x70>)
 80085a8:	f7fe fe87 	bl	80072ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085ac:	480b      	ldr	r0, [pc, #44]	; (80085dc <prvInitialiseTaskLists+0x74>)
 80085ae:	f7fe fe84 	bl	80072ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085b2:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <prvInitialiseTaskLists+0x78>)
 80085b4:	4a05      	ldr	r2, [pc, #20]	; (80085cc <prvInitialiseTaskLists+0x64>)
 80085b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <prvInitialiseTaskLists+0x7c>)
 80085ba:	4a05      	ldr	r2, [pc, #20]	; (80085d0 <prvInitialiseTaskLists+0x68>)
 80085bc:	601a      	str	r2, [r3, #0]
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000270 	.word	0x20000270
 80085cc:	200002fc 	.word	0x200002fc
 80085d0:	20000310 	.word	0x20000310
 80085d4:	2000032c 	.word	0x2000032c
 80085d8:	20000340 	.word	0x20000340
 80085dc:	20000358 	.word	0x20000358
 80085e0:	20000324 	.word	0x20000324
 80085e4:	20000328 	.word	0x20000328

080085e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085ee:	e019      	b.n	8008624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085f0:	f000 faac 	bl	8008b4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085f4:	4b0f      	ldr	r3, [pc, #60]	; (8008634 <prvCheckTasksWaitingTermination+0x4c>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fee4 	bl	80073ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008606:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <prvCheckTasksWaitingTermination+0x50>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <prvCheckTasksWaitingTermination+0x50>)
 800860e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008610:	4b0a      	ldr	r3, [pc, #40]	; (800863c <prvCheckTasksWaitingTermination+0x54>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3b01      	subs	r3, #1
 8008616:	4a09      	ldr	r2, [pc, #36]	; (800863c <prvCheckTasksWaitingTermination+0x54>)
 8008618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800861a:	f000 fac5 	bl	8008ba8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f80e 	bl	8008640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008624:	4b05      	ldr	r3, [pc, #20]	; (800863c <prvCheckTasksWaitingTermination+0x54>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e1      	bne.n	80085f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000340 	.word	0x20000340
 8008638:	2000036c 	.word	0x2000036c
 800863c:	20000354 	.word	0x20000354

08008640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800864e:	2b00      	cmp	r3, #0
 8008650:	d108      	bne.n	8008664 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fc16 	bl	8008e88 <vPortFree>
				vPortFree( pxTCB );
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fc13 	bl	8008e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008662:	e017      	b.n	8008694 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800866a:	2b01      	cmp	r3, #1
 800866c:	d103      	bne.n	8008676 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc0a 	bl	8008e88 <vPortFree>
	}
 8008674:	e00e      	b.n	8008694 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800867c:	2b02      	cmp	r3, #2
 800867e:	d009      	beq.n	8008694 <prvDeleteTCB+0x54>
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e7fe      	b.n	8008692 <prvDeleteTCB+0x52>
	}
 8008694:	bf00      	nop
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a2:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <prvResetNextTaskUnblockTime+0x44>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <prvResetNextTaskUnblockTime+0x14>
 80086ac:	2301      	movs	r3, #1
 80086ae:	e000      	b.n	80086b2 <prvResetNextTaskUnblockTime+0x16>
 80086b0:	2300      	movs	r3, #0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d004      	beq.n	80086c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <prvResetNextTaskUnblockTime+0x48>)
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086be:	e008      	b.n	80086d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <prvResetNextTaskUnblockTime+0x44>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	4a05      	ldr	r2, [pc, #20]	; (80086e4 <prvResetNextTaskUnblockTime+0x48>)
 80086d0:	6013      	str	r3, [r2, #0]
}
 80086d2:	bf00      	nop
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000324 	.word	0x20000324
 80086e4:	2000038c 	.word	0x2000038c

080086e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086ee:	4b0b      	ldr	r3, [pc, #44]	; (800871c <xTaskGetSchedulerState+0x34>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d102      	bne.n	80086fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086f6:	2301      	movs	r3, #1
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	e008      	b.n	800870e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fc:	4b08      	ldr	r3, [pc, #32]	; (8008720 <xTaskGetSchedulerState+0x38>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d102      	bne.n	800870a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008704:	2302      	movs	r3, #2
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	e001      	b.n	800870e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800870e:	687b      	ldr	r3, [r7, #4]
	}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20000378 	.word	0x20000378
 8008720:	20000394 	.word	0x20000394

08008724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d06c      	beq.n	8008814 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800873a:	4b39      	ldr	r3, [pc, #228]	; (8008820 <xTaskPriorityDisinherit+0xfc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	d009      	beq.n	8008758 <xTaskPriorityDisinherit+0x34>
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	e7fe      	b.n	8008756 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875c:	2b00      	cmp	r3, #0
 800875e:	d109      	bne.n	8008774 <xTaskPriorityDisinherit+0x50>
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	e7fe      	b.n	8008772 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008778:	1e5a      	subs	r2, r3, #1
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	429a      	cmp	r2, r3
 8008788:	d044      	beq.n	8008814 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800878e:	2b00      	cmp	r3, #0
 8008790:	d140      	bne.n	8008814 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3304      	adds	r3, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fe19 	bl	80073ce <uxListRemove>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d115      	bne.n	80087ce <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a6:	491f      	ldr	r1, [pc, #124]	; (8008824 <xTaskPriorityDisinherit+0x100>)
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xTaskPriorityDisinherit+0xaa>
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	2201      	movs	r2, #1
 80087be:	fa02 f303 	lsl.w	r3, r2, r3
 80087c2:	43da      	mvns	r2, r3
 80087c4:	4b18      	ldr	r3, [pc, #96]	; (8008828 <xTaskPriorityDisinherit+0x104>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4013      	ands	r3, r2
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <xTaskPriorityDisinherit+0x104>)
 80087cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	f1c3 0207 	rsb	r2, r3, #7
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	2201      	movs	r2, #1
 80087e8:	409a      	lsls	r2, r3
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <xTaskPriorityDisinherit+0x104>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <xTaskPriorityDisinherit+0x104>)
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4a08      	ldr	r2, [pc, #32]	; (8008824 <xTaskPriorityDisinherit+0x100>)
 8008802:	441a      	add	r2, r3
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	3304      	adds	r3, #4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fe fd82 	bl	8007314 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008814:	697b      	ldr	r3, [r7, #20]
	}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	2000026c 	.word	0x2000026c
 8008824:	20000270 	.word	0x20000270
 8008828:	20000374 	.word	0x20000374

0800882c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008836:	4b29      	ldr	r3, [pc, #164]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800883c:	4b28      	ldr	r3, [pc, #160]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3304      	adds	r3, #4
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fdc3 	bl	80073ce <uxListRemove>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	2201      	movs	r2, #1
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	43da      	mvns	r2, r3
 800885c:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4013      	ands	r3, r2
 8008862:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008864:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886c:	d10a      	bne.n	8008884 <prvAddCurrentTaskToDelayedList+0x58>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008874:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3304      	adds	r3, #4
 800887a:	4619      	mov	r1, r3
 800887c:	481a      	ldr	r0, [pc, #104]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800887e:	f7fe fd49 	bl	8007314 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008882:	e026      	b.n	80088d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800888c:	4b14      	ldr	r3, [pc, #80]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	429a      	cmp	r2, r3
 800889a:	d209      	bcs.n	80088b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800889c:	4b13      	ldr	r3, [pc, #76]	; (80088ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fe fd57 	bl	800735c <vListInsert>
}
 80088ae:	e010      	b.n	80088d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7fe fd4d 	bl	800735c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088c2:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d202      	bcs.n	80088d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088cc:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6013      	str	r3, [r2, #0]
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20000370 	.word	0x20000370
 80088e0:	2000026c 	.word	0x2000026c
 80088e4:	20000374 	.word	0x20000374
 80088e8:	20000358 	.word	0x20000358
 80088ec:	20000328 	.word	0x20000328
 80088f0:	20000324 	.word	0x20000324
 80088f4:	2000038c 	.word	0x2000038c

080088f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3b04      	subs	r3, #4
 8008908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3b04      	subs	r3, #4
 8008916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f023 0201 	bic.w	r2, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3b04      	subs	r3, #4
 8008926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008928:	4a0c      	ldr	r2, [pc, #48]	; (800895c <pxPortInitialiseStack+0x64>)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b14      	subs	r3, #20
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3b04      	subs	r3, #4
 800893e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f06f 0202 	mvn.w	r2, #2
 8008946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3b20      	subs	r3, #32
 800894c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800894e:	68fb      	ldr	r3, [r7, #12]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	08008961 	.word	0x08008961

08008960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800896a:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <prvTaskExitError+0x50>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008972:	d009      	beq.n	8008988 <prvTaskExitError+0x28>
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e7fe      	b.n	8008986 <prvTaskExitError+0x26>
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800899a:	bf00      	nop
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0fc      	beq.n	800899c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	2000002c 	.word	0x2000002c
	...

080089c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <pxCurrentTCBConst2>)
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	f380 8809 	msr	PSP, r0
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	4770      	bx	lr
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst2>:
 80089e0:	2000026c 	.word	0x2000026c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089e8:	4808      	ldr	r0, [pc, #32]	; (8008a0c <prvPortStartFirstTask+0x24>)
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f380 8808 	msr	MSP, r0
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8814 	msr	CONTROL, r0
 80089fa:	b662      	cpsie	i
 80089fc:	b661      	cpsie	f
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	df00      	svc	0
 8008a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a0a:	bf00      	nop
 8008a0c:	e000ed08 	.word	0xe000ed08

08008a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a16:	4b44      	ldr	r3, [pc, #272]	; (8008b28 <xPortStartScheduler+0x118>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a44      	ldr	r2, [pc, #272]	; (8008b2c <xPortStartScheduler+0x11c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d109      	bne.n	8008a34 <xPortStartScheduler+0x24>
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	e7fe      	b.n	8008a32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a34:	4b3c      	ldr	r3, [pc, #240]	; (8008b28 <xPortStartScheduler+0x118>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a3d      	ldr	r2, [pc, #244]	; (8008b30 <xPortStartScheduler+0x120>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d109      	bne.n	8008a52 <xPortStartScheduler+0x42>
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e7fe      	b.n	8008a50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a52:	4b38      	ldr	r3, [pc, #224]	; (8008b34 <xPortStartScheduler+0x124>)
 8008a54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	4b30      	ldr	r3, [pc, #192]	; (8008b38 <xPortStartScheduler+0x128>)
 8008a78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a7a:	4b30      	ldr	r3, [pc, #192]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a80:	e009      	b.n	8008a96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008a82:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	4a2c      	ldr	r2, [pc, #176]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008a8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9e:	2b80      	cmp	r3, #128	; 0x80
 8008aa0:	d0ef      	beq.n	8008a82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aa2:	4b26      	ldr	r3, [pc, #152]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f1c3 0307 	rsb	r3, r3, #7
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d009      	beq.n	8008ac2 <xPortStartScheduler+0xb2>
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	e7fe      	b.n	8008ac0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	4a1c      	ldr	r2, [pc, #112]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008aca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008acc:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ad4:	4a19      	ldr	r2, [pc, #100]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008ad6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <xPortStartScheduler+0x130>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <xPortStartScheduler+0x130>)
 8008ae6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <xPortStartScheduler+0x130>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <xPortStartScheduler+0x130>)
 8008af2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008af6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008af8:	f000 f8d6 	bl	8008ca8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008afc:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <xPortStartScheduler+0x134>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b02:	f000 f8f5 	bl	8008cf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <xPortStartScheduler+0x138>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a0f      	ldr	r2, [pc, #60]	; (8008b48 <xPortStartScheduler+0x138>)
 8008b0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b12:	f7ff ff69 	bl	80089e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b16:	f7ff fbad 	bl	8008274 <vTaskSwitchContext>
	prvTaskExitError();
 8008b1a:	f7ff ff21 	bl	8008960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000ed00 	.word	0xe000ed00
 8008b2c:	410fc271 	.word	0x410fc271
 8008b30:	410fc270 	.word	0x410fc270
 8008b34:	e000e400 	.word	0xe000e400
 8008b38:	20000398 	.word	0x20000398
 8008b3c:	2000039c 	.word	0x2000039c
 8008b40:	e000ed20 	.word	0xe000ed20
 8008b44:	2000002c 	.word	0x2000002c
 8008b48:	e000ef34 	.word	0xe000ef34

08008b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <vPortEnterCritical+0x54>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	4a0d      	ldr	r2, [pc, #52]	; (8008ba0 <vPortEnterCritical+0x54>)
 8008b6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <vPortEnterCritical+0x54>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d10e      	bne.n	8008b94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <vPortEnterCritical+0x58>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <vPortEnterCritical+0x48>
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	e7fe      	b.n	8008b92 <vPortEnterCritical+0x46>
	}
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	2000002c 	.word	0x2000002c
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bae:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <vPortExitCritical+0x4c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <vPortExitCritical+0x22>
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	607b      	str	r3, [r7, #4]
 8008bc8:	e7fe      	b.n	8008bc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <vPortExitCritical+0x4c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <vPortExitCritical+0x4c>)
 8008bd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <vPortExitCritical+0x4c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <vPortExitCritical+0x3e>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	2000002c 	.word	0x2000002c
	...

08008c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c00:	f3ef 8009 	mrs	r0, PSP
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <pxCurrentTCBConst>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	f01e 0f10 	tst.w	lr, #16
 8008c10:	bf08      	it	eq
 8008c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	6010      	str	r0, [r2, #0]
 8008c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c24:	f380 8811 	msr	BASEPRI, r0
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f7ff fb20 	bl	8008274 <vTaskSwitchContext>
 8008c34:	f04f 0000 	mov.w	r0, #0
 8008c38:	f380 8811 	msr	BASEPRI, r0
 8008c3c:	bc09      	pop	{r0, r3}
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	6808      	ldr	r0, [r1, #0]
 8008c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c46:	f01e 0f10 	tst.w	lr, #16
 8008c4a:	bf08      	it	eq
 8008c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c50:	f380 8809 	msr	PSP, r0
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	f3af 8000 	nop.w

08008c60 <pxCurrentTCBConst>:
 8008c60:	2000026c 	.word	0x2000026c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop

08008c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c80:	f7ff fa3c 	bl	80080fc <xTaskIncrementTick>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <SysTick_Handler+0x3c>)
 8008c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <vPortSetupTimerInterrupt+0x34>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <vPortSetupTimerInterrupt+0x38>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <vPortSetupTimerInterrupt+0x3c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a0a      	ldr	r2, [pc, #40]	; (8008ce8 <vPortSetupTimerInterrupt+0x40>)
 8008cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	4a09      	ldr	r2, [pc, #36]	; (8008cec <vPortSetupTimerInterrupt+0x44>)
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <vPortSetupTimerInterrupt+0x34>)
 8008ccc:	2207      	movs	r2, #7
 8008cce:	601a      	str	r2, [r3, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	e000e010 	.word	0xe000e010
 8008ce0:	e000e018 	.word	0xe000e018
 8008ce4:	20000030 	.word	0x20000030
 8008ce8:	10624dd3 	.word	0x10624dd3
 8008cec:	e000e014 	.word	0xe000e014

08008cf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d00 <vPortEnableVFP+0x10>
 8008cf4:	6801      	ldr	r1, [r0, #0]
 8008cf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cfa:	6001      	str	r1, [r0, #0]
 8008cfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cfe:	bf00      	nop
 8008d00:	e000ed88 	.word	0xe000ed88

08008d04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d10:	f7ff f94a 	bl	8007fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d14:	4b57      	ldr	r3, [pc, #348]	; (8008e74 <pvPortMalloc+0x170>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d1c:	f000 f90c 	bl	8008f38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d20:	4b55      	ldr	r3, [pc, #340]	; (8008e78 <pvPortMalloc+0x174>)
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4013      	ands	r3, r2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f040 808c 	bne.w	8008e46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01c      	beq.n	8008d6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008d34:	2208      	movs	r2, #8
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4413      	add	r3, r2
 8008d3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d013      	beq.n	8008d6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f023 0307 	bic.w	r3, r3, #7
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <pvPortMalloc+0x6a>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	e7fe      	b.n	8008d6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d068      	beq.n	8008e46 <pvPortMalloc+0x142>
 8008d74:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <pvPortMalloc+0x178>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d863      	bhi.n	8008e46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d7e:	4b40      	ldr	r3, [pc, #256]	; (8008e80 <pvPortMalloc+0x17c>)
 8008d80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d82:	4b3f      	ldr	r3, [pc, #252]	; (8008e80 <pvPortMalloc+0x17c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d88:	e004      	b.n	8008d94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d903      	bls.n	8008da6 <pvPortMalloc+0xa2>
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1f1      	bne.n	8008d8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008da6:	4b33      	ldr	r3, [pc, #204]	; (8008e74 <pvPortMalloc+0x170>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d04a      	beq.n	8008e46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2208      	movs	r2, #8
 8008db6:	4413      	add	r3, r2
 8008db8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	1ad2      	subs	r2, r2, r3
 8008dca:	2308      	movs	r3, #8
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d91e      	bls.n	8008e10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <pvPortMalloc+0xf4>
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	e7fe      	b.n	8008df6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e0a:	69b8      	ldr	r0, [r7, #24]
 8008e0c:	f000 f8f6 	bl	8008ffc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e10:	4b1a      	ldr	r3, [pc, #104]	; (8008e7c <pvPortMalloc+0x178>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <pvPortMalloc+0x178>)
 8008e1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e1e:	4b17      	ldr	r3, [pc, #92]	; (8008e7c <pvPortMalloc+0x178>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4b18      	ldr	r3, [pc, #96]	; (8008e84 <pvPortMalloc+0x180>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d203      	bcs.n	8008e32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <pvPortMalloc+0x178>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a15      	ldr	r2, [pc, #84]	; (8008e84 <pvPortMalloc+0x180>)
 8008e30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <pvPortMalloc+0x174>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e46:	f7ff f8bd 	bl	8007fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d009      	beq.n	8008e68 <pvPortMalloc+0x164>
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	e7fe      	b.n	8008e66 <pvPortMalloc+0x162>
	return pvReturn;
 8008e68:	69fb      	ldr	r3, [r7, #28]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20003fa8 	.word	0x20003fa8
 8008e78:	20003fb4 	.word	0x20003fb4
 8008e7c:	20003fac 	.word	0x20003fac
 8008e80:	20003fa0 	.word	0x20003fa0
 8008e84:	20003fb0 	.word	0x20003fb0

08008e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d046      	beq.n	8008f28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	4b20      	ldr	r3, [pc, #128]	; (8008f30 <vPortFree+0xa8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <vPortFree+0x42>
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e7fe      	b.n	8008ec8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d009      	beq.n	8008ee6 <vPortFree+0x5e>
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60bb      	str	r3, [r7, #8]
 8008ee4:	e7fe      	b.n	8008ee4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <vPortFree+0xa8>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d019      	beq.n	8008f28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d115      	bne.n	8008f28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <vPortFree+0xa8>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	43db      	mvns	r3, r3
 8008f06:	401a      	ands	r2, r3
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f0c:	f7ff f84c 	bl	8007fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <vPortFree+0xac>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4413      	add	r3, r2
 8008f1a:	4a06      	ldr	r2, [pc, #24]	; (8008f34 <vPortFree+0xac>)
 8008f1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f1e:	6938      	ldr	r0, [r7, #16]
 8008f20:	f000 f86c 	bl	8008ffc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f24:	f7ff f84e 	bl	8007fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f28:	bf00      	nop
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20003fb4 	.word	0x20003fb4
 8008f34:	20003fac 	.word	0x20003fac

08008f38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f44:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <prvHeapInit+0xac>)
 8008f46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00c      	beq.n	8008f6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3307      	adds	r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0307 	bic.w	r3, r3, #7
 8008f5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	4a1f      	ldr	r2, [pc, #124]	; (8008fe4 <prvHeapInit+0xac>)
 8008f68:	4413      	add	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f70:	4a1d      	ldr	r2, [pc, #116]	; (8008fe8 <prvHeapInit+0xb0>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f76:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <prvHeapInit+0xb0>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f84:	2208      	movs	r2, #8
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0307 	bic.w	r3, r3, #7
 8008f92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4a15      	ldr	r2, [pc, #84]	; (8008fec <prvHeapInit+0xb4>)
 8008f98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <prvHeapInit+0xb4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fa2:	4b12      	ldr	r3, [pc, #72]	; (8008fec <prvHeapInit+0xb4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fb8:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <prvHeapInit+0xb4>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a0a      	ldr	r2, [pc, #40]	; (8008ff0 <prvHeapInit+0xb8>)
 8008fc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4a09      	ldr	r2, [pc, #36]	; (8008ff4 <prvHeapInit+0xbc>)
 8008fce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fd0:	4b09      	ldr	r3, [pc, #36]	; (8008ff8 <prvHeapInit+0xc0>)
 8008fd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fd6:	601a      	str	r2, [r3, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	200003a0 	.word	0x200003a0
 8008fe8:	20003fa0 	.word	0x20003fa0
 8008fec:	20003fa8 	.word	0x20003fa8
 8008ff0:	20003fb0 	.word	0x20003fb0
 8008ff4:	20003fac 	.word	0x20003fac
 8008ff8:	20003fb4 	.word	0x20003fb4

08008ffc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009004:	4b28      	ldr	r3, [pc, #160]	; (80090a8 <prvInsertBlockIntoFreeList+0xac>)
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e002      	b.n	8009010 <prvInsertBlockIntoFreeList+0x14>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	429a      	cmp	r2, r3
 8009018:	d8f7      	bhi.n	800900a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	4413      	add	r3, r2
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d108      	bne.n	800903e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	441a      	add	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	441a      	add	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d118      	bne.n	8009084 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b15      	ldr	r3, [pc, #84]	; (80090ac <prvInsertBlockIntoFreeList+0xb0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d00d      	beq.n	800907a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	441a      	add	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e008      	b.n	800908c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <prvInsertBlockIntoFreeList+0xb0>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e003      	b.n	800908c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	429a      	cmp	r2, r3
 8009092:	d002      	beq.n	800909a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20003fa0 	.word	0x20003fa0
 80090ac:	20003fa8 	.word	0x20003fa8

080090b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4a07      	ldr	r2, [pc, #28]	; (80090dc <vApplicationGetIdleTaskMemory+0x2c>)
 80090c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	4a06      	ldr	r2, [pc, #24]	; (80090e0 <vApplicationGetIdleTaskMemory+0x30>)
 80090c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2280      	movs	r2, #128	; 0x80
 80090cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20003fb8 	.word	0x20003fb8
 80090e0:	2000400c 	.word	0x2000400c

080090e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80090e4:	b5b0      	push	{r4, r5, r7, lr}
 80090e6:	b08a      	sub	sp, #40	; 0x28
 80090e8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80090ea:	f7f7 fee5 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80090ee:	f000 f839 	bl	8009164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80090f2:	f000 fa45 	bl	8009580 <MX_GPIO_Init>
  MX_SPI1_Init();
 80090f6:	f000 f89f 	bl	8009238 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80090fa:	f000 fa17 	bl	800952c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80090fe:	f000 f929 	bl	8009354 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009102:	f000 f97b 	bl	80093fc <MX_TIM3_Init>
  MX_TIM1_Init();
 8009106:	f000 f8cd 	bl	80092a4 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <main+0x64>)
 800910c:	1d3c      	adds	r4, r7, #4
 800910e:	461d      	mov	r5, r3
 8009110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800911c:	1d3b      	adds	r3, r7, #4
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f7fe f86a 	bl	80071fa <osThreadCreate>
 8009126:	4602      	mov	r2, r0
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <main+0x68>)
 800912a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  setup(&huart2, &hspi1, &htim3, &htim3, &htim2, &htim1);
 800912c:	4b08      	ldr	r3, [pc, #32]	; (8009150 <main+0x6c>)
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	4b08      	ldr	r3, [pc, #32]	; (8009154 <main+0x70>)
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	4b08      	ldr	r3, [pc, #32]	; (8009158 <main+0x74>)
 8009136:	4a08      	ldr	r2, [pc, #32]	; (8009158 <main+0x74>)
 8009138:	4908      	ldr	r1, [pc, #32]	; (800915c <main+0x78>)
 800913a:	4809      	ldr	r0, [pc, #36]	; (8009160 <main+0x7c>)
 800913c:	f000 fdba 	bl	8009cb4 <setup>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009140:	f7fe f854 	bl	80071ec <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009144:	e7fe      	b.n	8009144 <main+0x60>
 8009146:	bf00      	nop
 8009148:	0800d4cc 	.word	0x0800d4cc
 800914c:	20004388 	.word	0x20004388
 8009150:	200043cc 	.word	0x200043cc
 8009154:	20004464 	.word	0x20004464
 8009158:	2000438c 	.word	0x2000438c
 800915c:	2000440c 	.word	0x2000440c
 8009160:	200044a4 	.word	0x200044a4

08009164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b094      	sub	sp, #80	; 0x50
 8009168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800916a:	f107 0320 	add.w	r3, r7, #32
 800916e:	2230      	movs	r2, #48	; 0x30
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f002 f800 	bl	800b178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009178:	f107 030c 	add.w	r3, r7, #12
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	605a      	str	r2, [r3, #4]
 8009182:	609a      	str	r2, [r3, #8]
 8009184:	60da      	str	r2, [r3, #12]
 8009186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009188:	2300      	movs	r3, #0
 800918a:	60bb      	str	r3, [r7, #8]
 800918c:	4b28      	ldr	r3, [pc, #160]	; (8009230 <SystemClock_Config+0xcc>)
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	4a27      	ldr	r2, [pc, #156]	; (8009230 <SystemClock_Config+0xcc>)
 8009192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009196:	6413      	str	r3, [r2, #64]	; 0x40
 8009198:	4b25      	ldr	r3, [pc, #148]	; (8009230 <SystemClock_Config+0xcc>)
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80091a4:	2300      	movs	r3, #0
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	4b22      	ldr	r3, [pc, #136]	; (8009234 <SystemClock_Config+0xd0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80091b0:	4a20      	ldr	r2, [pc, #128]	; (8009234 <SystemClock_Config+0xd0>)
 80091b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <SystemClock_Config+0xd0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80091c0:	607b      	str	r3, [r7, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80091c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091ce:	2302      	movs	r3, #2
 80091d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80091d8:	2304      	movs	r3, #4
 80091da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80091dc:	2348      	movs	r3, #72	; 0x48
 80091de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091e0:	2302      	movs	r3, #2
 80091e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80091e4:	2307      	movs	r3, #7
 80091e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091e8:	f107 0320 	add.w	r3, r7, #32
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7f8 f969 	bl	80014c4 <HAL_RCC_OscConfig>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80091f8:	f000 fa8a 	bl	8009710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091fc:	230f      	movs	r3, #15
 80091fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009200:	2302      	movs	r3, #2
 8009202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009204:	2300      	movs	r3, #0
 8009206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800920c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009212:	f107 030c 	add.w	r3, r7, #12
 8009216:	2102      	movs	r1, #2
 8009218:	4618      	mov	r0, r3
 800921a:	f7f8 fb95 	bl	8001948 <HAL_RCC_ClockConfig>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8009224:	f000 fa74 	bl	8009710 <Error_Handler>
  }
}
 8009228:	bf00      	nop
 800922a:	3750      	adds	r7, #80	; 0x50
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40023800 	.word	0x40023800
 8009234:	40007000 	.word	0x40007000

08009238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800923c:	4b17      	ldr	r3, [pc, #92]	; (800929c <MX_SPI1_Init+0x64>)
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <MX_SPI1_Init+0x68>)
 8009240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009242:	4b16      	ldr	r3, [pc, #88]	; (800929c <MX_SPI1_Init+0x64>)
 8009244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800924a:	4b14      	ldr	r3, [pc, #80]	; (800929c <MX_SPI1_Init+0x64>)
 800924c:	2200      	movs	r2, #0
 800924e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009250:	4b12      	ldr	r3, [pc, #72]	; (800929c <MX_SPI1_Init+0x64>)
 8009252:	2200      	movs	r2, #0
 8009254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009256:	4b11      	ldr	r3, [pc, #68]	; (800929c <MX_SPI1_Init+0x64>)
 8009258:	2200      	movs	r2, #0
 800925a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <MX_SPI1_Init+0x64>)
 800925e:	2200      	movs	r2, #0
 8009260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009262:	4b0e      	ldr	r3, [pc, #56]	; (800929c <MX_SPI1_Init+0x64>)
 8009264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <MX_SPI1_Init+0x64>)
 800926c:	2200      	movs	r2, #0
 800926e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009270:	4b0a      	ldr	r3, [pc, #40]	; (800929c <MX_SPI1_Init+0x64>)
 8009272:	2200      	movs	r2, #0
 8009274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <MX_SPI1_Init+0x64>)
 8009278:	2200      	movs	r2, #0
 800927a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <MX_SPI1_Init+0x64>)
 800927e:	2200      	movs	r2, #0
 8009280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <MX_SPI1_Init+0x64>)
 8009284:	220a      	movs	r2, #10
 8009286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009288:	4804      	ldr	r0, [pc, #16]	; (800929c <MX_SPI1_Init+0x64>)
 800928a:	f7f8 fd7d 	bl	8001d88 <HAL_SPI_Init>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009294:	f000 fa3c 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009298:	bf00      	nop
 800929a:	bd80      	pop	{r7, pc}
 800929c:	2000440c 	.word	0x2000440c
 80092a0:	40013000 	.word	0x40013000

080092a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08c      	sub	sp, #48	; 0x30
 80092a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80092aa:	f107 030c 	add.w	r3, r7, #12
 80092ae:	2224      	movs	r2, #36	; 0x24
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 ff60 	bl	800b178 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092b8:	1d3b      	adds	r3, r7, #4
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80092c0:	4b22      	ldr	r3, [pc, #136]	; (800934c <MX_TIM1_Init+0xa8>)
 80092c2:	4a23      	ldr	r2, [pc, #140]	; (8009350 <MX_TIM1_Init+0xac>)
 80092c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80092c6:	4b21      	ldr	r3, [pc, #132]	; (800934c <MX_TIM1_Init+0xa8>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092cc:	4b1f      	ldr	r3, [pc, #124]	; (800934c <MX_TIM1_Init+0xa8>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80092d2:	4b1e      	ldr	r3, [pc, #120]	; (800934c <MX_TIM1_Init+0xa8>)
 80092d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092da:	4b1c      	ldr	r3, [pc, #112]	; (800934c <MX_TIM1_Init+0xa8>)
 80092dc:	2200      	movs	r2, #0
 80092de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80092e0:	4b1a      	ldr	r3, [pc, #104]	; (800934c <MX_TIM1_Init+0xa8>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092e6:	4b19      	ldr	r3, [pc, #100]	; (800934c <MX_TIM1_Init+0xa8>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80092ec:	2303      	movs	r3, #3
 80092ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80092f0:	2300      	movs	r3, #0
 80092f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80092f4:	2301      	movs	r3, #1
 80092f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8009300:	2302      	movs	r3, #2
 8009302:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009304:	2301      	movs	r3, #1
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009308:	2300      	movs	r3, #0
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8009310:	f107 030c 	add.w	r3, r7, #12
 8009314:	4619      	mov	r1, r3
 8009316:	480d      	ldr	r0, [pc, #52]	; (800934c <MX_TIM1_Init+0xa8>)
 8009318:	f7f9 fb0e 	bl	8002938 <HAL_TIM_Encoder_Init>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8009322:	f000 f9f5 	bl	8009710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <MX_TIM1_Init+0xa8>)
 8009334:	f7fa f8e6 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800933e:	f000 f9e7 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009342:	bf00      	nop
 8009344:	3730      	adds	r7, #48	; 0x30
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	200043cc 	.word	0x200043cc
 8009350:	40010000 	.word	0x40010000

08009354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08c      	sub	sp, #48	; 0x30
 8009358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800935a:	f107 030c 	add.w	r3, r7, #12
 800935e:	2224      	movs	r2, #36	; 0x24
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f001 ff08 	bl	800b178 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009368:	1d3b      	adds	r3, r7, #4
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009370:	4b21      	ldr	r3, [pc, #132]	; (80093f8 <MX_TIM2_Init+0xa4>)
 8009372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009378:	4b1f      	ldr	r3, [pc, #124]	; (80093f8 <MX_TIM2_Init+0xa4>)
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800937e:	4b1e      	ldr	r3, [pc, #120]	; (80093f8 <MX_TIM2_Init+0xa4>)
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8009384:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <MX_TIM2_Init+0xa4>)
 8009386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800938a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <MX_TIM2_Init+0xa4>)
 800938e:	2200      	movs	r2, #0
 8009390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009392:	4b19      	ldr	r3, [pc, #100]	; (80093f8 <MX_TIM2_Init+0xa4>)
 8009394:	2200      	movs	r2, #0
 8009396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009398:	2303      	movs	r3, #3
 800939a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80093a0:	2301      	movs	r3, #1
 80093a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80093a4:	2300      	movs	r3, #0
 80093a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80093ac:	2302      	movs	r3, #2
 80093ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80093b0:	2301      	movs	r3, #1
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80093b4:	2300      	movs	r3, #0
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80093bc:	f107 030c 	add.w	r3, r7, #12
 80093c0:	4619      	mov	r1, r3
 80093c2:	480d      	ldr	r0, [pc, #52]	; (80093f8 <MX_TIM2_Init+0xa4>)
 80093c4:	f7f9 fab8 	bl	8002938 <HAL_TIM_Encoder_Init>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80093ce:	f000 f99f 	bl	8009710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093d2:	2300      	movs	r3, #0
 80093d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	4619      	mov	r1, r3
 80093de:	4806      	ldr	r0, [pc, #24]	; (80093f8 <MX_TIM2_Init+0xa4>)
 80093e0:	f7fa f890 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80093ea:	f000 f991 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80093ee:	bf00      	nop
 80093f0:	3730      	adds	r7, #48	; 0x30
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20004464 	.word	0x20004464

080093fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08e      	sub	sp, #56	; 0x38
 8009400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	605a      	str	r2, [r3, #4]
 800940c:	609a      	str	r2, [r3, #8]
 800940e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009410:	f107 0320 	add.w	r3, r7, #32
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800941a:	1d3b      	adds	r3, r7, #4
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	605a      	str	r2, [r3, #4]
 8009422:	609a      	str	r2, [r3, #8]
 8009424:	60da      	str	r2, [r3, #12]
 8009426:	611a      	str	r2, [r3, #16]
 8009428:	615a      	str	r2, [r3, #20]
 800942a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800942c:	4b3d      	ldr	r3, [pc, #244]	; (8009524 <MX_TIM3_Init+0x128>)
 800942e:	4a3e      	ldr	r2, [pc, #248]	; (8009528 <MX_TIM3_Init+0x12c>)
 8009430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 8009432:	4b3c      	ldr	r3, [pc, #240]	; (8009524 <MX_TIM3_Init+0x128>)
 8009434:	2228      	movs	r2, #40	; 0x28
 8009436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009438:	4b3a      	ldr	r3, [pc, #232]	; (8009524 <MX_TIM3_Init+0x128>)
 800943a:	2200      	movs	r2, #0
 800943c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256;
 800943e:	4b39      	ldr	r3, [pc, #228]	; (8009524 <MX_TIM3_Init+0x128>)
 8009440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009446:	4b37      	ldr	r3, [pc, #220]	; (8009524 <MX_TIM3_Init+0x128>)
 8009448:	2200      	movs	r2, #0
 800944a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800944c:	4b35      	ldr	r3, [pc, #212]	; (8009524 <MX_TIM3_Init+0x128>)
 800944e:	2200      	movs	r2, #0
 8009450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009452:	4834      	ldr	r0, [pc, #208]	; (8009524 <MX_TIM3_Init+0x128>)
 8009454:	f7f9 f9ec 	bl	8002830 <HAL_TIM_Base_Init>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800945e:	f000 f957 	bl	8009710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800946c:	4619      	mov	r1, r3
 800946e:	482d      	ldr	r0, [pc, #180]	; (8009524 <MX_TIM3_Init+0x128>)
 8009470:	f7f9 fcc2 	bl	8002df8 <HAL_TIM_ConfigClockSource>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800947a:	f000 f949 	bl	8009710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800947e:	4829      	ldr	r0, [pc, #164]	; (8009524 <MX_TIM3_Init+0x128>)
 8009480:	f7f9 fa25 	bl	80028ce <HAL_TIM_PWM_Init>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800948a:	f000 f941 	bl	8009710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800948e:	2300      	movs	r3, #0
 8009490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009492:	2300      	movs	r3, #0
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009496:	f107 0320 	add.w	r3, r7, #32
 800949a:	4619      	mov	r1, r3
 800949c:	4821      	ldr	r0, [pc, #132]	; (8009524 <MX_TIM3_Init+0x128>)
 800949e:	f7fa f831 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80094a8:	f000 f932 	bl	8009710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094ac:	2360      	movs	r3, #96	; 0x60
 80094ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	2200      	movs	r2, #0
 80094c0:	4619      	mov	r1, r3
 80094c2:	4818      	ldr	r0, [pc, #96]	; (8009524 <MX_TIM3_Init+0x128>)
 80094c4:	f7f9 fbd2 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80094ce:	f000 f91f 	bl	8009710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	2204      	movs	r2, #4
 80094d6:	4619      	mov	r1, r3
 80094d8:	4812      	ldr	r0, [pc, #72]	; (8009524 <MX_TIM3_Init+0x128>)
 80094da:	f7f9 fbc7 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80094e4:	f000 f914 	bl	8009710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	2208      	movs	r2, #8
 80094ec:	4619      	mov	r1, r3
 80094ee:	480d      	ldr	r0, [pc, #52]	; (8009524 <MX_TIM3_Init+0x128>)
 80094f0:	f7f9 fbbc 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80094fa:	f000 f909 	bl	8009710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80094fe:	1d3b      	adds	r3, r7, #4
 8009500:	220c      	movs	r2, #12
 8009502:	4619      	mov	r1, r3
 8009504:	4807      	ldr	r0, [pc, #28]	; (8009524 <MX_TIM3_Init+0x128>)
 8009506:	f7f9 fbb1 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8009510:	f000 f8fe 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009514:	4803      	ldr	r0, [pc, #12]	; (8009524 <MX_TIM3_Init+0x128>)
 8009516:	f001 f96f 	bl	800a7f8 <HAL_TIM_MspPostInit>

}
 800951a:	bf00      	nop
 800951c:	3738      	adds	r7, #56	; 0x38
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	2000438c 	.word	0x2000438c
 8009528:	40000400 	.word	0x40000400

0800952c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009530:	4b11      	ldr	r3, [pc, #68]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009532:	4a12      	ldr	r2, [pc, #72]	; (800957c <MX_USART2_UART_Init+0x50>)
 8009534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8009536:	4b10      	ldr	r3, [pc, #64]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009538:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800953c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800953e:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009540:	2200      	movs	r2, #0
 8009542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009546:	2200      	movs	r2, #0
 8009548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 800954c:	2200      	movs	r2, #0
 800954e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009552:	220c      	movs	r2, #12
 8009554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009558:	2200      	movs	r2, #0
 800955a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 800955e:	2200      	movs	r2, #0
 8009560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009562:	4805      	ldr	r0, [pc, #20]	; (8009578 <MX_USART2_UART_Init+0x4c>)
 8009564:	f7fa f827 	bl	80035b6 <HAL_UART_Init>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800956e:	f000 f8cf 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009572:	bf00      	nop
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	200044a4 	.word	0x200044a4
 800957c:	40004400 	.word	0x40004400

08009580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	605a      	str	r2, [r3, #4]
 8009590:	609a      	str	r2, [r3, #8]
 8009592:	60da      	str	r2, [r3, #12]
 8009594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009596:	2300      	movs	r3, #0
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	4b45      	ldr	r3, [pc, #276]	; (80096b0 <MX_GPIO_Init+0x130>)
 800959c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959e:	4a44      	ldr	r2, [pc, #272]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095a0:	f043 0304 	orr.w	r3, r3, #4
 80095a4:	6313      	str	r3, [r2, #48]	; 0x30
 80095a6:	4b42      	ldr	r3, [pc, #264]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	4a3d      	ldr	r2, [pc, #244]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c0:	6313      	str	r3, [r2, #48]	; 0x30
 80095c2:	4b3b      	ldr	r3, [pc, #236]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
 80095d2:	4b37      	ldr	r3, [pc, #220]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	4a36      	ldr	r2, [pc, #216]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	6313      	str	r3, [r2, #48]	; 0x30
 80095de:	4b34      	ldr	r3, [pc, #208]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	4b30      	ldr	r3, [pc, #192]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	4a2f      	ldr	r2, [pc, #188]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095f4:	f043 0302 	orr.w	r3, r3, #2
 80095f8:	6313      	str	r3, [r2, #48]	; 0x30
 80095fa:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <MX_GPIO_Init+0x130>)
 80095fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	607b      	str	r3, [r7, #4]
 8009604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009606:	2200      	movs	r2, #0
 8009608:	21ff      	movs	r1, #255	; 0xff
 800960a:	482a      	ldr	r0, [pc, #168]	; (80096b4 <MX_GPIO_Init+0x134>)
 800960c:	f7f7 ff1c 	bl	8001448 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8009610:	2200      	movs	r2, #0
 8009612:	2110      	movs	r1, #16
 8009614:	4828      	ldr	r0, [pc, #160]	; (80096b8 <MX_GPIO_Init+0x138>)
 8009616:	f7f7 ff17 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 800961a:	2200      	movs	r2, #0
 800961c:	f247 4145 	movw	r1, #29765	; 0x7445
 8009620:	4826      	ldr	r0, [pc, #152]	; (80096bc <MX_GPIO_Init+0x13c>)
 8009622:	f7f7 ff11 	bl	8001448 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009626:	23ff      	movs	r3, #255	; 0xff
 8009628:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800962a:	2301      	movs	r3, #1
 800962c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009632:	2300      	movs	r3, #0
 8009634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009636:	f107 0314 	add.w	r3, r7, #20
 800963a:	4619      	mov	r1, r3
 800963c:	481d      	ldr	r0, [pc, #116]	; (80096b4 <MX_GPIO_Init+0x134>)
 800963e:	f7f7 fd81 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009642:	2310      	movs	r3, #16
 8009644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009646:	2301      	movs	r3, #1
 8009648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800964a:	2300      	movs	r3, #0
 800964c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800964e:	2300      	movs	r3, #0
 8009650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009652:	f107 0314 	add.w	r3, r7, #20
 8009656:	4619      	mov	r1, r3
 8009658:	4817      	ldr	r0, [pc, #92]	; (80096b8 <MX_GPIO_Init+0x138>)
 800965a:	f7f7 fd73 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12 
                           PB13 PB14 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 800965e:	f247 4345 	movw	r3, #29765	; 0x7445
 8009662:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009664:	2301      	movs	r3, #1
 8009666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009668:	2300      	movs	r3, #0
 800966a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800966c:	2300      	movs	r3, #0
 800966e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009670:	f107 0314 	add.w	r3, r7, #20
 8009674:	4619      	mov	r1, r3
 8009676:	4811      	ldr	r0, [pc, #68]	; (80096bc <MX_GPIO_Init+0x13c>)
 8009678:	f7f7 fd64 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800967c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009682:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <MX_GPIO_Init+0x140>)
 8009684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	4619      	mov	r1, r3
 8009690:	4808      	ldr	r0, [pc, #32]	; (80096b4 <MX_GPIO_Init+0x134>)
 8009692:	f7f7 fd57 	bl	8001144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009696:	2200      	movs	r2, #0
 8009698:	2105      	movs	r1, #5
 800969a:	2028      	movs	r0, #40	; 0x28
 800969c:	f7f7 fd28 	bl	80010f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80096a0:	2028      	movs	r0, #40	; 0x28
 80096a2:	f7f7 fd41 	bl	8001128 <HAL_NVIC_EnableIRQ>

}
 80096a6:	bf00      	nop
 80096a8:	3728      	adds	r7, #40	; 0x28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40023800 	.word	0x40023800
 80096b4:	40020800 	.word	0x40020800
 80096b8:	40020000 	.word	0x40020000
 80096bc:	40020400 	.word	0x40020400
 80096c0:	10310000 	.word	0x10310000

080096c4 <malloc>:

/* USER CODE BEGIN 4 */

void* malloc(size_t size) {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
	return pvPortMalloc( size );
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff fb19 	bl	8008d04 <pvPortMalloc>
 80096d2:	4603      	mov	r3, r0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80096e4:	2001      	movs	r0, #1
 80096e6:	f7fd fdd4 	bl	8007292 <osDelay>
 80096ea:	e7fb      	b.n	80096e4 <StartDefaultTask+0x8>

080096ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a04      	ldr	r2, [pc, #16]	; (800970c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d101      	bne.n	8009702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80096fe:	f7f7 fbfd 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40000800 	.word	0x40000800

08009710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <_ZN10ValueFieldC1Ev>:
struct ValueField {
	std::vector<unsigned char> value;
	bool exist;
public:
	ValueField(std::vector<unsigned char> value): value(value) {}
	ValueField() {}
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fb7f 	bl	8009e2c <_ZNSt6vectorIhSaIhEEC1Ev>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <_ZN10ValueField8getValueEv>:
//		int size = value.size();
//		std::copy(begin, begin + value.size(), value.begin());
	}
	void setValue(std::vector<unsigned char> value) {this->value = value;}
	unsigned short getSize() {return value.size();}
	std::vector<unsigned char> getValue() {return value;}
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb18 	bl	8009d7c <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <_ZN10ValueFieldD1Ev>:
struct ValueField {
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fb49 	bl	8009df6 <_ZNSt6vectorIhSaIhEED1Ev>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <_ZN10SLMPPacketC1Ev>:
	Field<unsigned short, 2> no_of_device_points;
	Field<unsigned short, 2> end_code;
	ValueField value;
	//ValueField<100> value;

	SLMPPacket() {data_length.exist = true;}
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fb64 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fb5f 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3308      	adds	r3, #8
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fb68 	bl	8009e62 <_ZN5FieldIhLj1EEC1Ev>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	330a      	adds	r3, #10
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fb63 	bl	8009e62 <_ZN5FieldIhLj1EEC1Ev>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	330c      	adds	r3, #12
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fb50 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3310      	adds	r3, #16
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fb59 	bl	8009e62 <_ZN5FieldIhLj1EEC1Ev>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3312      	adds	r3, #18
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fb46 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3316      	adds	r3, #22
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fb41 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	331a      	adds	r3, #26
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 fb3c 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3320      	adds	r3, #32
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fb53 	bl	8009e7e <_ZN5FieldIjLj3EEC1Ev>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	3328      	adds	r3, #40	; 0x28
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fb40 	bl	8009e62 <_ZN5FieldIhLj1EEC1Ev>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	332a      	adds	r3, #42	; 0x2a
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fb2d 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	332e      	adds	r3, #46	; 0x2e
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fb28 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3334      	adds	r3, #52	; 0x34
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff ff8f 	bl	800971e <_ZN10ValueFieldC1Ev>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3344      	adds	r3, #68	; 0x44
 8009804:	4618      	mov	r0, r3
 8009806:	f000 fb1e 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3348      	adds	r3, #72	; 0x48
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fb19 	bl	8009e46 <_ZN5FieldItLj2EEC1Ev>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <_Z13StartUARTTaskPKv>:
SLMPPacket packet;
unsigned int msg_len = 0;


void StartUARTTask(void const * argument)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	uart_helper.UARTTask();
 8009830:	4803      	ldr	r0, [pc, #12]	; (8009840 <_Z13StartUARTTaskPKv+0x18>)
 8009832:	f7fd fb3c 	bl	8006eae <_ZN10UartHelper8UARTTaskEv>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20004214 	.word	0x20004214

08009844 <_ZN10SLMPPacketD1Ev>:
struct SLMPPacket {
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3334      	adds	r3, #52	; 0x34
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff ff7f 	bl	8009754 <_ZN10ValueFieldD1Ev>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <__tcf_0>:
			static float val_before = 0;

			uint8_t rbuf[rbuflen];
			uint16_t Size = 30;
			uint32_t* rdmaInd;
			static SLMPPacket response;
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
 8009864:	4801      	ldr	r0, [pc, #4]	; (800986c <__tcf_0+0xc>)
 8009866:	f7ff ffed 	bl	8009844 <_ZN10SLMPPacketD1Ev>
 800986a:	bd80      	pop	{r7, pc}
 800986c:	2000428c 	.word	0x2000428c

08009870 <_Z19StartSocketSendTaskPKv>:
{
 8009870:	b590      	push	{r4, r7, lr}
 8009872:	b09b      	sub	sp, #108	; 0x6c
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
		unsigned char msg[msg_len];
 8009878:	4b53      	ldr	r3, [pc, #332]	; (80099c8 <_Z19StartSocketSendTaskPKv+0x158>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	1e58      	subs	r0, r3, #1
 800987e:	6678      	str	r0, [r7, #100]	; 0x64
 8009880:	4603      	mov	r3, r0
 8009882:	3301      	adds	r3, #1
 8009884:	4619      	mov	r1, r3
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	f04f 0300 	mov.w	r3, #0
 800988e:	f04f 0400 	mov.w	r4, #0
 8009892:	00d4      	lsls	r4, r2, #3
 8009894:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009898:	00cb      	lsls	r3, r1, #3
 800989a:	4603      	mov	r3, r0
 800989c:	3301      	adds	r3, #1
 800989e:	4619      	mov	r1, r3
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	f04f 0400 	mov.w	r4, #0
 80098ac:	00d4      	lsls	r4, r2, #3
 80098ae:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80098b2:	00cb      	lsls	r3, r1, #3
 80098b4:	4603      	mov	r3, r0
 80098b6:	3301      	adds	r3, #1
 80098b8:	3307      	adds	r3, #7
 80098ba:	08db      	lsrs	r3, r3, #3
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	ebad 0d03 	sub.w	sp, sp, r3
 80098c2:	466b      	mov	r3, sp
 80098c4:	3300      	adds	r3, #0
 80098c6:	663b      	str	r3, [r7, #96]	; 0x60
		buildRequest(&packet, msg);
 80098c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ca:	4619      	mov	r1, r3
 80098cc:	483f      	ldr	r0, [pc, #252]	; (80099cc <_Z19StartSocketSendTaskPKv+0x15c>)
 80098ce:	f7fa f9d3 	bl	8003c78 <_Z12buildRequestP10SLMPPacketPh>
			uint16_t Size = 30;
 80098d2:	231e      	movs	r3, #30
 80098d4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			static SLMPPacket response;
 80098d8:	4b3d      	ldr	r3, [pc, #244]	; (80099d0 <_Z19StartSocketSendTaskPKv+0x160>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d108      	bne.n	80098f6 <_Z19StartSocketSendTaskPKv+0x86>
 80098e4:	483b      	ldr	r0, [pc, #236]	; (80099d4 <_Z19StartSocketSendTaskPKv+0x164>)
 80098e6:	f7ff ff42 	bl	800976e <_ZN10SLMPPacketC1Ev>
 80098ea:	4b39      	ldr	r3, [pc, #228]	; (80099d0 <_Z19StartSocketSendTaskPKv+0x160>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	4839      	ldr	r0, [pc, #228]	; (80099d8 <_Z19StartSocketSendTaskPKv+0x168>)
 80098f2:	f001 fbec 	bl	800b0ce <atexit>
			static Field<float, 4> res_val;
 80098f6:	4b39      	ldr	r3, [pc, #228]	; (80099dc <_Z19StartSocketSendTaskPKv+0x16c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d105      	bne.n	800990e <_Z19StartSocketSendTaskPKv+0x9e>
 8009902:	4837      	ldr	r0, [pc, #220]	; (80099e0 <_Z19StartSocketSendTaskPKv+0x170>)
 8009904:	f000 fac9 	bl	8009e9a <_ZN5FieldIfLj4EEC1Ev>
 8009908:	4b34      	ldr	r3, [pc, #208]	; (80099dc <_Z19StartSocketSendTaskPKv+0x16c>)
 800990a:	2201      	movs	r2, #1
 800990c:	601a      	str	r2, [r3, #0]

			  for(;;)
			  {
				  socket_client.socket_send(msg, msg_len);
 800990e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009910:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <_Z19StartSocketSendTaskPKv+0x158>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	4832      	ldr	r0, [pc, #200]	; (80099e4 <_Z19StartSocketSendTaskPKv+0x174>)
 800991a:	f7fd fb81 	bl	8007020 <_ZN12SocketClient11socket_sendEPht>
				  osDelay(1000);
 800991e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009922:	f7fd fcb6 	bl	8007292 <osDelay>
				  socket_client.socket_receive(rbuf, Size, rdmaInd);
 8009926:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800992a:	f107 010c 	add.w	r1, r7, #12
 800992e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009930:	482c      	ldr	r0, [pc, #176]	; (80099e4 <_Z19StartSocketSendTaskPKv+0x174>)
 8009932:	f7fd fbb1 	bl	8007098 <_ZN12SocketClient14socket_receiveEPhtPm>
				  parseResponse(&response, rbuf);
 8009936:	f107 030c 	add.w	r3, r7, #12
 800993a:	4619      	mov	r1, r3
 800993c:	4825      	ldr	r0, [pc, #148]	; (80099d4 <_Z19StartSocketSendTaskPKv+0x164>)
 800993e:	f7fa fd5c 	bl	80043fa <_Z13parseResponseP10SLMPPacketPh>

				  unsigned char * data_field_begin = &response.value.getValue().front();
 8009942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009946:	4928      	ldr	r1, [pc, #160]	; (80099e8 <_Z19StartSocketSendTaskPKv+0x178>)
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fef5 	bl	8009738 <_ZN10ValueField8getValueEv>
 800994e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009952:	4618      	mov	r0, r3
 8009954:	f000 faaf 	bl	8009eb6 <_ZNSt6vectorIhSaIhEE5frontEv>
 8009958:	6578      	str	r0, [r7, #84]	; 0x54
 800995a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fa49 	bl	8009df6 <_ZNSt6vectorIhSaIhEED1Ev>
				  res_val.getFromDump(data_field_begin);
 8009964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009966:	481e      	ldr	r0, [pc, #120]	; (80099e0 <_Z19StartSocketSendTaskPKv+0x170>)
 8009968:	f000 fab8 	bl	8009edc <_ZN5FieldIfLj4EE11getFromDumpEPh>
				  float val = res_val.getValue();
 800996c:	481c      	ldr	r0, [pc, #112]	; (80099e0 <_Z19StartSocketSendTaskPKv+0x170>)
 800996e:	f000 faca 	bl	8009f06 <_ZN5FieldIfLj4EE8getValueEv>
 8009972:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

				  if  (val != val_before) {
 8009976:	4b1d      	ldr	r3, [pc, #116]	; (80099ec <_Z19StartSocketSendTaskPKv+0x17c>)
 8009978:	edd3 7a00 	vldr	s15, [r3]
 800997c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009980:	eeb4 7a67 	vcmp.f32	s14, s15
 8009984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009988:	d019      	beq.n	80099be <_Z19StartSocketSendTaskPKv+0x14e>
					  val_before = val;
 800998a:	4a18      	ldr	r2, [pc, #96]	; (80099ec <_Z19StartSocketSendTaskPKv+0x17c>)
 800998c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800998e:	6013      	str	r3, [r2, #0]
					  clear();
 8009990:	f7fb fc7a 	bl	8005288 <_Z5clearv>
					  print(float_to_std_string(val).c_str());
 8009994:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009998:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800999c:	4618      	mov	r0, r3
 800999e:	f7fc fff9 	bl	8006994 <_Z19float_to_std_stringB5cxx11f>
 80099a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 faf8 	bl	800af9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80099ac:	4603      	mov	r3, r0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fb fc8a 	bl	80052c8 <_Z5printPKc>
 80099b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fa04 	bl	800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  }
				  osDelay(100);
 80099be:	2064      	movs	r0, #100	; 0x64
 80099c0:	f7fd fc67 	bl	8007292 <osDelay>
			  }
 80099c4:	e7a3      	b.n	800990e <_Z19StartSocketSendTaskPKv+0x9e>
 80099c6:	bf00      	nop
 80099c8:	20004284 	.word	0x20004284
 80099cc:	20004238 	.word	0x20004238
 80099d0:	200042d8 	.word	0x200042d8
 80099d4:	2000428c 	.word	0x2000428c
 80099d8:	08009861 	.word	0x08009861
 80099dc:	200042e4 	.word	0x200042e4
 80099e0:	200042dc 	.word	0x200042dc
 80099e4:	20004220 	.word	0x20004220
 80099e8:	200042c0 	.word	0x200042c0
 80099ec:	20004288 	.word	0x20004288

080099f0 <_ZN10ValueFieldaSEOS_>:
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 fa9c 	bl	8009f3e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	7b1a      	ldrb	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	731a      	strb	r2, [r3, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZN10SLMPPacketaSEOS_>:
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	8811      	ldrh	r1, [r2, #0]
 8009a28:	7892      	ldrb	r2, [r2, #2]
 8009a2a:	8019      	strh	r1, [r3, #0]
 8009a2c:	709a      	strb	r2, [r3, #2]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	3304      	adds	r3, #4
 8009a34:	3204      	adds	r2, #4
 8009a36:	8811      	ldrh	r1, [r2, #0]
 8009a38:	7892      	ldrb	r2, [r2, #2]
 8009a3a:	8019      	strh	r1, [r3, #0]
 8009a3c:	709a      	strb	r2, [r3, #2]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	8912      	ldrh	r2, [r2, #8]
 8009a44:	811a      	strh	r2, [r3, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	8952      	ldrh	r2, [r2, #10]
 8009a4c:	815a      	strh	r2, [r3, #10]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	330c      	adds	r3, #12
 8009a54:	320c      	adds	r2, #12
 8009a56:	8811      	ldrh	r1, [r2, #0]
 8009a58:	7892      	ldrb	r2, [r2, #2]
 8009a5a:	8019      	strh	r1, [r3, #0]
 8009a5c:	709a      	strb	r2, [r3, #2]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	8a12      	ldrh	r2, [r2, #16]
 8009a64:	821a      	strh	r2, [r3, #16]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	3312      	adds	r3, #18
 8009a6c:	3212      	adds	r2, #18
 8009a6e:	8811      	ldrh	r1, [r2, #0]
 8009a70:	7892      	ldrb	r2, [r2, #2]
 8009a72:	8019      	strh	r1, [r3, #0]
 8009a74:	709a      	strb	r2, [r3, #2]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	3316      	adds	r3, #22
 8009a7c:	3216      	adds	r2, #22
 8009a7e:	8811      	ldrh	r1, [r2, #0]
 8009a80:	7892      	ldrb	r2, [r2, #2]
 8009a82:	8019      	strh	r1, [r3, #0]
 8009a84:	709a      	strb	r2, [r3, #2]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	331a      	adds	r3, #26
 8009a8c:	321a      	adds	r2, #26
 8009a8e:	8811      	ldrh	r1, [r2, #0]
 8009a90:	7892      	ldrb	r2, [r2, #2]
 8009a92:	8019      	strh	r1, [r3, #0]
 8009a94:	709a      	strb	r2, [r3, #2]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	3320      	adds	r3, #32
 8009a9c:	3220      	adds	r2, #32
 8009a9e:	6811      	ldr	r1, [r2, #0]
 8009aa0:	6019      	str	r1, [r3, #0]
 8009aa2:	7912      	ldrb	r2, [r2, #4]
 8009aa4:	711a      	strb	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009aac:	851a      	strh	r2, [r3, #40]	; 0x28
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	332a      	adds	r3, #42	; 0x2a
 8009ab4:	322a      	adds	r2, #42	; 0x2a
 8009ab6:	8811      	ldrh	r1, [r2, #0]
 8009ab8:	7892      	ldrb	r2, [r2, #2]
 8009aba:	8019      	strh	r1, [r3, #0]
 8009abc:	709a      	strb	r2, [r3, #2]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	332e      	adds	r3, #46	; 0x2e
 8009ac4:	322e      	adds	r2, #46	; 0x2e
 8009ac6:	8811      	ldrh	r1, [r2, #0]
 8009ac8:	7892      	ldrb	r2, [r2, #2]
 8009aca:	8019      	strh	r1, [r3, #0]
 8009acc:	709a      	strb	r2, [r3, #2]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	3334      	adds	r3, #52	; 0x34
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7ff ff88 	bl	80099f0 <_ZN10ValueFieldaSEOS_>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	3344      	adds	r3, #68	; 0x44
 8009ae6:	3244      	adds	r2, #68	; 0x44
 8009ae8:	8811      	ldrh	r1, [r2, #0]
 8009aea:	7892      	ldrb	r2, [r2, #2]
 8009aec:	8019      	strh	r1, [r3, #0]
 8009aee:	709a      	strb	r2, [r3, #2]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	3348      	adds	r3, #72	; 0x48
 8009af6:	3248      	adds	r2, #72	; 0x48
 8009af8:	8811      	ldrh	r1, [r2, #0]
 8009afa:	7892      	ldrb	r2, [r2, #2]
 8009afc:	8019      	strh	r1, [r3, #0]
 8009afe:	709a      	strb	r2, [r3, #2]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <prepareSLMPRequest>:

//	vTaskDelete( NULL );
}

void prepareSLMPRequest(void) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b0a0      	sub	sp, #128	; 0x80
 8009b10:	af00      	add	r7, sp, #0
	packet = SLMPPacket();
 8009b12:	1d3b      	adds	r3, r7, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fe2a 	bl	800976e <_ZN10SLMPPacketC1Ev>
 8009b1a:	1d3b      	adds	r3, r7, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4863      	ldr	r0, [pc, #396]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b20:	f7ff ff7a 	bl	8009a18 <_ZN10SLMPPacketaSEOS_>
 8009b24:	1d3b      	adds	r3, r7, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fe8c 	bl	8009844 <_ZN10SLMPPacketD1Ev>

		  packet.is_serial_no = Field<unsigned short, 2>(0x0050);
 8009b2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009b30:	2150      	movs	r1, #80	; 0x50
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fa faa5 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8009b38:	4b5c      	ldr	r3, [pc, #368]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009b3e:	6812      	ldr	r2, [r2, #0]
 8009b40:	4611      	mov	r1, r2
 8009b42:	8019      	strh	r1, [r3, #0]
 8009b44:	3302      	adds	r3, #2
 8009b46:	0c12      	lsrs	r2, r2, #16
 8009b48:	701a      	strb	r2, [r3, #0]
		  packet.is_serial_no.exist = true;
 8009b4a:	4b58      	ldr	r3, [pc, #352]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	709a      	strb	r2, [r3, #2]

		  packet.request_dest_net_no = Field<unsigned char, 1>(0x0);
 8009b50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 fa06 	bl	8009f68 <_ZN5FieldIhLj1EEC1Eh>
 8009b5c:	4a53      	ldr	r2, [pc, #332]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009b62:	8113      	strh	r3, [r2, #8]
		  packet.request_dest_net_no.exist = true;
 8009b64:	4b51      	ldr	r3, [pc, #324]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	725a      	strb	r2, [r3, #9]

		  packet.request_dest_station_no = Field<unsigned char, 1>(0xff);
 8009b6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b6e:	21ff      	movs	r1, #255	; 0xff
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 f9f9 	bl	8009f68 <_ZN5FieldIhLj1EEC1Eh>
 8009b76:	4a4d      	ldr	r2, [pc, #308]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b78:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009b7c:	8153      	strh	r3, [r2, #10]
		  packet.request_dest_station_no.exist = true;
 8009b7e:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	72da      	strb	r2, [r3, #11]

		  packet.request_processor = Field<unsigned short, 2>(0x3ff);
 8009b84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009b88:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fa fa78 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8009b92:	4b46      	ldr	r3, [pc, #280]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009b94:	330c      	adds	r3, #12
 8009b96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009b9a:	6812      	ldr	r2, [r2, #0]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	8019      	strh	r1, [r3, #0]
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	0c12      	lsrs	r2, r2, #16
 8009ba4:	701a      	strb	r2, [r3, #0]
		  packet.request_processor.exist = true;
 8009ba6:	4b41      	ldr	r3, [pc, #260]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	739a      	strb	r2, [r3, #14]

		  packet.request_reserved = Field<unsigned char, 1>(0x0);
 8009bac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f9d8 	bl	8009f68 <_ZN5FieldIhLj1EEC1Eh>
 8009bb8:	4a3c      	ldr	r2, [pc, #240]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009bba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8009bbe:	8213      	strh	r3, [r2, #16]
		  packet.request_reserved.exist = true;
 8009bc0:	4b3a      	ldr	r3, [pc, #232]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	745a      	strb	r2, [r3, #17]

		  packet.monitoring_time = Field<unsigned short, 2>(0x1);
 8009bc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fa fa58 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8009bd2:	4b36      	ldr	r3, [pc, #216]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009bd4:	3312      	adds	r3, #18
 8009bd6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009bda:	8811      	ldrh	r1, [r2, #0]
 8009bdc:	7892      	ldrb	r2, [r2, #2]
 8009bde:	8019      	strh	r1, [r3, #0]
 8009be0:	709a      	strb	r2, [r3, #2]
		  packet.monitoring_time.exist = true;
 8009be2:	4b32      	ldr	r3, [pc, #200]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	751a      	strb	r2, [r3, #20]

		  packet.command = Field<unsigned short, 2>(0x0401);
 8009be8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009bec:	f240 4101 	movw	r1, #1025	; 0x401
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fa fa46 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8009bf6:	4b2d      	ldr	r3, [pc, #180]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009bf8:	3316      	adds	r3, #22
 8009bfa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009bfe:	8811      	ldrh	r1, [r2, #0]
 8009c00:	7892      	ldrb	r2, [r2, #2]
 8009c02:	8019      	strh	r1, [r3, #0]
 8009c04:	709a      	strb	r2, [r3, #2]
		  //packet.command = Field<unsigned short, 2>(0x1401);
		  packet.command.exist = true;
 8009c06:	4b29      	ldr	r3, [pc, #164]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c08:	2201      	movs	r2, #1
 8009c0a:	761a      	strb	r2, [r3, #24]

		  packet.subcommand = Field<unsigned short, 2>(0x0);
 8009c0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fa fa35 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8009c18:	4b24      	ldr	r3, [pc, #144]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c1a:	331a      	adds	r3, #26
 8009c1c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009c20:	8811      	ldrh	r1, [r2, #0]
 8009c22:	7892      	ldrb	r2, [r2, #2]
 8009c24:	8019      	strh	r1, [r3, #0]
 8009c26:	709a      	strb	r2, [r3, #2]
		  packet.subcommand.exist = true;
 8009c28:	4b20      	ldr	r3, [pc, #128]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	771a      	strb	r2, [r3, #28]

		  packet.head_device_no = Field<unsigned int, 3>(100);
 8009c2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009c32:	2164      	movs	r1, #100	; 0x64
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f9aa 	bl	8009f8e <_ZN5FieldIjLj3EEC1Ej>
 8009c3a:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c3c:	3320      	adds	r3, #32
 8009c3e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c46:	6018      	str	r0, [r3, #0]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	7019      	strb	r1, [r3, #0]
		  packet.head_device_no.exist = true;
 8009c4c:	4b17      	ldr	r3, [pc, #92]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  packet.device_code = Field<unsigned char, 1>(0xa8);
 8009c54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009c58:	21a8      	movs	r1, #168	; 0xa8
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 f984 	bl	8009f68 <_ZN5FieldIhLj1EEC1Eh>
 8009c60:	4a12      	ldr	r2, [pc, #72]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c62:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009c66:	8513      	strh	r3, [r2, #40]	; 0x28
		  packet.device_code.exist = true;
 8009c68:	4b10      	ldr	r3, [pc, #64]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

		  packet.no_of_device_points = Field<unsigned short, 2>(0x2);
 8009c70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009c74:	2102      	movs	r1, #2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fa fa03 	bl	8004082 <_ZN5FieldItLj2EEC1Et>
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c7e:	332a      	adds	r3, #42	; 0x2a
 8009c80:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8009c84:	8811      	ldrh	r1, [r2, #0]
 8009c86:	7892      	ldrb	r2, [r2, #2]
 8009c88:	8019      	strh	r1, [r3, #0]
 8009c8a:	709a      	strb	r2, [r3, #2]
		  packet.no_of_device_points.exist = true;
 8009c8c:	4b07      	ldr	r3, [pc, #28]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//		  packet.value = ValueField({12, '\x00', 14, '\x00'});
//		  packet.value.exist = true;

		  msg_len = getMsgLen(&packet);
 8009c94:	4805      	ldr	r0, [pc, #20]	; (8009cac <prepareSLMPRequest+0x1a0>)
 8009c96:	f7fa f8e4 	bl	8003e62 <_Z9getMsgLenP10SLMPPacket>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <prepareSLMPRequest+0x1a4>)
 8009ca0:	601a      	str	r2, [r3, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	3780      	adds	r7, #128	; 0x80
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20004238 	.word	0x20004238
 8009cb0:	20004284 	.word	0x20004284

08009cb4 <setup>:

void setup(UART_HandleTypeDef *main_huart, SPI_HandleTypeDef *main_hspi1,
		TIM_HandleTypeDef *main_htim, TIM_HandleTypeDef *main_htim2,
		TIM_HandleTypeDef *main_encoder_htim1, TIM_HandleTypeDef *main_encoder_htim2)
{
 8009cb4:	b5b0      	push	{r4, r5, r7, lr}
 8009cb6:	b096      	sub	sp, #88	; 0x58
 8009cb8:	af04      	add	r7, sp, #16
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_12, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5);
 8009cc2:	2320      	movs	r3, #32
 8009cc4:	9303      	str	r3, [sp, #12]
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	9302      	str	r3, [sp, #8]
 8009cca:	2308      	movs	r3, #8
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	2304      	movs	r3, #4
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009cd8:	2101      	movs	r1, #1
 8009cda:	4821      	ldr	r0, [pc, #132]	; (8009d60 <setup+0xac>)
 8009cdc:	f7fb f87e 	bl	8004ddc <_Z13LiquidCrystalP12GPIO_TypeDefttttttt>
	  huart = main_huart;
 8009ce0:	4a20      	ldr	r2, [pc, #128]	; (8009d64 <setup+0xb0>)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6013      	str	r3, [r2, #0]
	  hspi = main_hspi1;
 8009ce6:	4a20      	ldr	r2, [pc, #128]	; (8009d68 <setup+0xb4>)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	6013      	str	r3, [r2, #0]
	  uart_helper.init(huart);
 8009cec:	4b1d      	ldr	r3, [pc, #116]	; (8009d64 <setup+0xb0>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	481e      	ldr	r0, [pc, #120]	; (8009d6c <setup+0xb8>)
 8009cf4:	f7fd f8ae 	bl	8006e54 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>

	  socket_client.init(hspi, &uart_helper);
 8009cf8:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <setup+0xb4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1b      	ldr	r2, [pc, #108]	; (8009d6c <setup+0xb8>)
 8009cfe:	4619      	mov	r1, r3
 8009d00:	481b      	ldr	r0, [pc, #108]	; (8009d70 <setup+0xbc>)
 8009d02:	f7fd f913 	bl	8006f2c <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>
	  HAL_Delay(1000 * 2);
 8009d06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d0a:	f7f7 f917 	bl	8000f3c <HAL_Delay>
	  socket_client.socket_connect();
 8009d0e:	4818      	ldr	r0, [pc, #96]	; (8009d70 <setup+0xbc>)
 8009d10:	f7fd f970 	bl	8006ff4 <_ZN12SocketClient14socket_connectEv>

	  prepareSLMPRequest();
 8009d14:	f7ff fefa 	bl	8009b0c <prepareSLMPRequest>
	  //****** UART **********
	  osThreadDef(UartTask, StartUARTTask, osPriorityNormal, 1, 256);
 8009d18:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <setup+0xc0>)
 8009d1a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8009d1e:	461d      	mov	r5, r3
 8009d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(UartTask), NULL);
 8009d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fd fa61 	bl	80071fa <osThreadCreate>

	  //******* Socket Test *************
	  osThreadDef(SocketSendTask, StartSocketSendTask, osPriorityNormal, 1, 2048);
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <setup+0xc4>)
 8009d3a:	f107 0410 	add.w	r4, r7, #16
 8009d3e:	461d      	mov	r5, r3
 8009d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(SocketSendTask), NULL);
 8009d4c:	f107 0310 	add.w	r3, r7, #16
 8009d50:	2100      	movs	r1, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fd fa51 	bl	80071fa <osThreadCreate>
}
 8009d58:	bf00      	nop
 8009d5a:	3748      	adds	r7, #72	; 0x48
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8009d60:	40020800 	.word	0x40020800
 8009d64:	2000420c 	.word	0x2000420c
 8009d68:	20004210 	.word	0x20004210
 8009d6c:	20004214 	.word	0x20004214
 8009d70:	20004220 	.word	0x20004220
 8009d74:	0800d4f4 	.word	0x0800d4f4
 8009d78:	0800d520 	.word	0x0800d520

08009d7c <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8009d86:	687c      	ldr	r4, [r7, #4]
 8009d88:	6838      	ldr	r0, [r7, #0]
 8009d8a:	f7fa f92c 	bl	8003fe6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fa fc3a 	bl	800460c <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	f107 030c 	add.w	r3, r7, #12
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f906 	bl	8009fb2 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	461a      	mov	r2, r3
 8009dac:	4629      	mov	r1, r5
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 f925 	bl	8009ffe <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 f908 	bl	8009fce <_ZNSaIhED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009dbe:	6838      	ldr	r0, [r7, #0]
 8009dc0:	f000 f94a 	bl	800a058 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	6838      	ldr	r0, [r7, #0]
 8009dc8:	f000 f95a 	bl	800a080 <_ZNKSt6vectorIhSaIhEE3endEv>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fa fc24 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009dda:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f961 	bl	800a0a8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 8009de6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	605a      	str	r2, [r3, #4]
      }
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009df6 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009df6:	b5b0      	push	{r4, r5, r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681c      	ldr	r4, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fa fc0a 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009e0e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009e10:	461a      	mov	r2, r3
 8009e12:	4629      	mov	r1, r5
 8009e14:	4620      	mov	r0, r4
 8009e16:	f7fa fc0f 	bl	8004638 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f902 	bl	800a026 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bdb0      	pop	{r4, r5, r7, pc}

08009e2c <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f947 	bl	800a0ca <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <_ZN5FieldItLj2EEC1Ev>:
	Field() {}
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	709a      	strb	r2, [r3, #2]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4618      	mov	r0, r3
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <_ZN5FieldIhLj1EEC1Ev>:
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	705a      	strb	r2, [r3, #1]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <_ZN5FieldIjLj3EEC1Ev>:
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	711a      	strb	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <_ZN5FieldIfLj4EEC1Ev>:
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	711a      	strb	r2, [r3, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <_ZNSt6vectorIhSaIhEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
	return *begin();
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7fa f858 	bl	8003f74 <_ZNSt6vectorIhSaIhEE5beginEv>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	f107 030c 	add.w	r3, r7, #12
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f909 	bl	800a0e4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8009ed2:	4603      	mov	r3, r0
      }
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZN5FieldIfLj4EE11getFromDumpEPh>:
	void getFromDump(unsigned char * begin) {std::copy(begin, begin + DumpSize, data.raw.begin());}
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	1d1c      	adds	r4, r3, #4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 f905 	bl	800a0fc <_ZNSt5arrayIhLj4EE5beginEv>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	6838      	ldr	r0, [r7, #0]
 8009efa:	f7fa f924 	bl	8004146 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd90      	pop	{r4, r7, pc}

08009f06 <_ZN5FieldIfLj4EE8getValueEv>:
	ValueType getValue() {
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
		ValueType tmp = this->data.value;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]
		return tmp;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	ee07 3a90 	vmov	s15, r3
	}
 8009f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8009f3e:	b590      	push	{r4, r7, lr}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8009f48:	2301      	movs	r3, #1
 8009f4a:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8009f4c:	6838      	ldr	r0, [r7, #0]
 8009f4e:	f7ff ffeb 	bl	8009f28 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8009f52:	4603      	mov	r3, r0
 8009f54:	4622      	mov	r2, r4
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f8db 	bl	800a114 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8009f5e:	687b      	ldr	r3, [r7, #4]
      }
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd90      	pop	{r4, r7, pc}

08009f68 <_ZN5FieldIhLj1EEC1Eh>:
	Field(ValueType value) {
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	705a      	strb	r2, [r3, #1]
		data.value = value;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	701a      	strb	r2, [r3, #0]
	}
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <_ZN5FieldIjLj3EEC1Ej>:
	Field(ValueType value) {
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	711a      	strb	r2, [r3, #4]
		data.value = value;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	601a      	str	r2, [r3, #0]
	}
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 f8e5 	bl	800a190 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f8f5 	bl	800a1c6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff ffed 	bl	8009fce <_ZNSaIhED1Ev>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f8e4 	bl	800a1dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f8f7 	bl	800a20a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6819      	ldr	r1, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800a03e:	461a      	mov	r2, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7fa fbbb 	bl	80047bc <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ffcc 	bl	8009fe6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	f107 020c 	add.w	r2, r7, #12
 800a06a:	f107 0308 	add.w	r3, r7, #8
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f000 f8e4 	bl	800a23e <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	f107 020c 	add.w	r2, r7, #12
 800a092:	f107 0308 	add.w	r3, r7, #8
 800a096:	4611      	mov	r1, r2
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f8d0 	bl	800a23e <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f8cf 	bl	800a25e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 f8d4 	bl	800a282 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <_ZNSt5arrayIhLj4EE5beginEv>:
      begin() noexcept
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f8dc 	bl	800a2c2 <_ZNSt5arrayIhLj4EE4dataEv>
 800a10a:	4603      	mov	r3, r0
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b089      	sub	sp, #36	; 0x24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f107 031c 	add.w	r3, r7, #28
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 f8d7 	bl	800a2dc <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 800a12e:	f107 021c 	add.w	r2, r7, #28
 800a132:	f107 0310 	add.w	r3, r7, #16
 800a136:	4611      	mov	r1, r2
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 f8e0 	bl	800a2fe <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 800a13e:	f107 031c 	add.w	r3, r7, #28
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff ff43 	bl	8009fce <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f107 0210 	add.w	r2, r7, #16
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f8e3 	bl	800a31c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	this->_M_impl._M_swap_data(__x._M_impl);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	4611      	mov	r1, r2
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f8dd 	bl	800a31c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4618      	mov	r0, r3
 800a166:	f7fa fa5c 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800a16a:	4604      	mov	r4, r0
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fa fa57 	bl	8004622 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800a174:	4603      	mov	r3, r0
 800a176:	4619      	mov	r1, r3
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 f8ef 	bl	800a35c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 800a17e:	f107 0310 	add.w	r3, r7, #16
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff fe37 	bl	8009df6 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 800a188:	bf00      	nop
 800a18a:	3724      	adds	r7, #36	; 0x24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd90      	pop	{r4, r7, pc}

0800a190 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f804 	bl	800a1aa <_ZNSaIhEC1ERKS_>
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f8de 	bl	800a378 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a1c6:	b480      	push	{r7}
 800a1c8:	b083      	sub	sp, #12
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff ffde 	bl	800a1aa <_ZNSaIhEC1ERKS_>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	605a      	str	r2, [r3, #4]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	609a      	str	r2, [r3, #8]
	{ }
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b082      	sub	sp, #8
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7fa fb71 	bl	80048fe <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800a21c:	4602      	mov	r2, r0
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	441a      	add	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	609a      	str	r2, [r3, #8]
      }
 800a236:	bf00      	nop
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a23e:	b480      	push	{r7}
 800a240:	b083      	sub	sp, #12
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a25e:	b580      	push	{r7, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a26a:	2301      	movs	r3, #1
 800a26c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f88c 	bl	800a390 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 800a278:	4603      	mov	r3, r0
    }
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f890 	bl	800a3b0 <_ZNSaIhEC1Ev>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	605a      	str	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	609a      	str	r2, [r3, #8]
	{ }
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <_ZNSt5arrayIhLj4EE4dataEv>:
      data() noexcept
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f89b 	bl	800a408 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 800a2e6:	6838      	ldr	r0, [r7, #0]
 800a2e8:	f7fa f990 	bl	800460c <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff ff5a 	bl	800a1aa <_ZNSaIhEC1ERKS_>
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f886 	bl	800a41e <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	4611      	mov	r1, r2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 f890 	bl	800a452 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_finish, __x._M_finish);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	1d1a      	adds	r2, r3, #4
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f000 f888 	bl	800a452 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f103 0208 	add.w	r2, r3, #8
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	3308      	adds	r3, #8
 800a34c:	4619      	mov	r1, r3
 800a34e:	4610      	mov	r0, r2
 800a350:	f000 f87f 	bl	800a452 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 800a366:	461a      	mov	r2, r3
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f89b 	bl	800a4a6 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 800a370:	bf00      	nop
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f88d 	bl	800a4c0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f899 	bl	800a4f0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800a3d0:	1d3b      	adds	r3, r7, #4
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f897 	bl	800a506 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f7f9 ff8b 	bl	8004314 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800a3fe:	4603      	mov	r3, r0
    }
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fed5 	bl	800a1dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff ffed 	bl	800a43c <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800a462:	4603      	mov	r3, r0
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800a468:	6838      	ldr	r0, [r7, #0]
 800a46a:	f7ff ffe7 	bl	800a43c <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800a46e:	4603      	mov	r3, r0
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800a476:	f107 030c 	add.w	r3, r7, #12
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff ffde 	bl	800a43c <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800a480:	4603      	mov	r3, r0
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	601a      	str	r2, [r3, #0]
    }
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4618      	mov	r0, r3
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f7ff ffec 	bl	800a490 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 800a4b8:	bf00      	nop
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800a4c0:	b590      	push	{r4, r7, lr}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff feed 	bl	800a2ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	68b8      	ldr	r0, [r7, #8]
 800a4d6:	f7ff fee9 	bl	800a2ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800a4da:	4603      	mov	r3, r0
	       __result));
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 f81b 	bl	800a51c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 800a4e6:	4603      	mov	r3, r0
    }
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd90      	pop	{r4, r7, pc}

0800a4f0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800a51c:	b5b0      	push	{r4, r5, r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff ff4d 	bl	800a3c8 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800a52e:	4604      	mov	r4, r0
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f7ff ff49 	bl	800a3c8 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800a536:	4605      	mov	r5, r0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7f9 fe75 	bl	8004228 <_ZSt12__niter_baseIPhET_S1_>
 800a53e:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800a540:	461a      	mov	r2, r3
 800a542:	4629      	mov	r1, r5
 800a544:	4620      	mov	r0, r4
 800a546:	f7ff ff4d 	bl	800a3e4 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 800a54a:	4603      	mov	r3, r0
    }
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bdb0      	pop	{r4, r5, r7, pc}

0800a554 <_Z41__static_initialization_and_destruction_0ii>:
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d10d      	bne.n	800a580 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d108      	bne.n	800a580 <_Z41__static_initialization_and_destruction_0ii+0x2c>
UartHelper uart_helper;
 800a56e:	480f      	ldr	r0, [pc, #60]	; (800a5ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800a570:	f7fc fc3a 	bl	8006de8 <_ZN10UartHelperC1Ev>
SocketClient socket_client;
 800a574:	480e      	ldr	r0, [pc, #56]	; (800a5b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a576:	f7fc fcbd 	bl	8006ef4 <_ZN12SocketClientC1Ev>
SLMPPacket packet;
 800a57a:	480e      	ldr	r0, [pc, #56]	; (800a5b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a57c:	f7ff f8f7 	bl	800976e <_ZN10SLMPPacketC1Ev>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10d      	bne.n	800a5a2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d108      	bne.n	800a5a2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800a590:	4808      	ldr	r0, [pc, #32]	; (800a5b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a592:	f7ff f957 	bl	8009844 <_ZN10SLMPPacketD1Ev>
SocketClient socket_client;
 800a596:	4806      	ldr	r0, [pc, #24]	; (800a5b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a598:	f7fc fd02 	bl	8006fa0 <_ZN12SocketClientD1Ev>
UartHelper uart_helper;
 800a59c:	4803      	ldr	r0, [pc, #12]	; (800a5ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800a59e:	f7fc fc39 	bl	8006e14 <_ZN10UartHelperD1Ev>
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20004214 	.word	0x20004214
 800a5b0:	20004220 	.word	0x20004220
 800a5b4:	20004238 	.word	0x20004238

0800a5b8 <_GLOBAL__sub_I_huart>:
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	f7ff ffc7 	bl	800a554 <_Z41__static_initialization_and_destruction_0ii>
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <_GLOBAL__sub_D_huart>:
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f7ff ffbf 	bl	800a554 <_Z41__static_initialization_and_destruction_0ii>
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5de:	2300      	movs	r3, #0
 800a5e0:	607b      	str	r3, [r7, #4]
 800a5e2:	4b12      	ldr	r3, [pc, #72]	; (800a62c <HAL_MspInit+0x54>)
 800a5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e6:	4a11      	ldr	r2, [pc, #68]	; (800a62c <HAL_MspInit+0x54>)
 800a5e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a5ee:	4b0f      	ldr	r3, [pc, #60]	; (800a62c <HAL_MspInit+0x54>)
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5f6:	607b      	str	r3, [r7, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	603b      	str	r3, [r7, #0]
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <HAL_MspInit+0x54>)
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <HAL_MspInit+0x54>)
 800a604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a608:	6413      	str	r3, [r2, #64]	; 0x40
 800a60a:	4b08      	ldr	r3, [pc, #32]	; (800a62c <HAL_MspInit+0x54>)
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a616:	2200      	movs	r2, #0
 800a618:	210f      	movs	r1, #15
 800a61a:	f06f 0001 	mvn.w	r0, #1
 800a61e:	f7f6 fd67 	bl	80010f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	40023800 	.word	0x40023800

0800a630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08a      	sub	sp, #40	; 0x28
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a638:	f107 0314 	add.w	r3, r7, #20
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	605a      	str	r2, [r3, #4]
 800a642:	609a      	str	r2, [r3, #8]
 800a644:	60da      	str	r2, [r3, #12]
 800a646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a19      	ldr	r2, [pc, #100]	; (800a6b4 <HAL_SPI_MspInit+0x84>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d12b      	bne.n	800a6aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a652:	2300      	movs	r3, #0
 800a654:	613b      	str	r3, [r7, #16]
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <HAL_SPI_MspInit+0x88>)
 800a658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <HAL_SPI_MspInit+0x88>)
 800a65c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a660:	6453      	str	r3, [r2, #68]	; 0x44
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <HAL_SPI_MspInit+0x88>)
 800a664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a66a:	613b      	str	r3, [r7, #16]
 800a66c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <HAL_SPI_MspInit+0x88>)
 800a674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a676:	4a10      	ldr	r2, [pc, #64]	; (800a6b8 <HAL_SPI_MspInit+0x88>)
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	6313      	str	r3, [r2, #48]	; 0x30
 800a67e:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <HAL_SPI_MspInit+0x88>)
 800a680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a68a:	23e0      	movs	r3, #224	; 0xe0
 800a68c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a68e:	2302      	movs	r3, #2
 800a690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a692:	2300      	movs	r3, #0
 800a694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a696:	2303      	movs	r3, #3
 800a698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a69a:	2305      	movs	r3, #5
 800a69c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a69e:	f107 0314 	add.w	r3, r7, #20
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4805      	ldr	r0, [pc, #20]	; (800a6bc <HAL_SPI_MspInit+0x8c>)
 800a6a6:	f7f6 fd4d 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a6aa:	bf00      	nop
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	40013000 	.word	0x40013000
 800a6b8:	40023800 	.word	0x40023800
 800a6bc:	40020000 	.word	0x40020000

0800a6c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08c      	sub	sp, #48	; 0x30
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c8:	f107 031c 	add.w	r3, r7, #28
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	605a      	str	r2, [r3, #4]
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	60da      	str	r2, [r3, #12]
 800a6d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a32      	ldr	r2, [pc, #200]	; (800a7a8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d12d      	bne.n	800a73e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	61bb      	str	r3, [r7, #24]
 800a6e6:	4b31      	ldr	r3, [pc, #196]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	4a30      	ldr	r2, [pc, #192]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a6ec:	f043 0301 	orr.w	r3, r3, #1
 800a6f0:	6453      	str	r3, [r2, #68]	; 0x44
 800a6f2:	4b2e      	ldr	r3, [pc, #184]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	61bb      	str	r3, [r7, #24]
 800a6fc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	4b2a      	ldr	r3, [pc, #168]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	4a29      	ldr	r2, [pc, #164]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a708:	f043 0301 	orr.w	r3, r3, #1
 800a70c:	6313      	str	r3, [r2, #48]	; 0x30
 800a70e:	4b27      	ldr	r3, [pc, #156]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a71a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a71e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a720:	2302      	movs	r3, #2
 800a722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a724:	2300      	movs	r3, #0
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a728:	2300      	movs	r3, #0
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a72c:	2301      	movs	r3, #1
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a730:	f107 031c 	add.w	r3, r7, #28
 800a734:	4619      	mov	r1, r3
 800a736:	481e      	ldr	r0, [pc, #120]	; (800a7b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800a738:	f7f6 fd04 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a73c:	e030      	b.n	800a7a0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a746:	d12b      	bne.n	800a7a0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a748:	2300      	movs	r3, #0
 800a74a:	613b      	str	r3, [r7, #16]
 800a74c:	4b17      	ldr	r3, [pc, #92]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	4a16      	ldr	r2, [pc, #88]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a752:	f043 0301 	orr.w	r3, r3, #1
 800a756:	6413      	str	r3, [r2, #64]	; 0x40
 800a758:	4b14      	ldr	r3, [pc, #80]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	4b10      	ldr	r3, [pc, #64]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76c:	4a0f      	ldr	r2, [pc, #60]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	6313      	str	r3, [r2, #48]	; 0x30
 800a774:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <HAL_TIM_Encoder_MspInit+0xec>)
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a780:	2303      	movs	r3, #3
 800a782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a784:	2302      	movs	r3, #2
 800a786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a788:	2300      	movs	r3, #0
 800a78a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a78c:	2300      	movs	r3, #0
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a790:	2301      	movs	r3, #1
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a794:	f107 031c 	add.w	r3, r7, #28
 800a798:	4619      	mov	r1, r3
 800a79a:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800a79c:	f7f6 fcd2 	bl	8001144 <HAL_GPIO_Init>
}
 800a7a0:	bf00      	nop
 800a7a2:	3730      	adds	r7, #48	; 0x30
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	40010000 	.word	0x40010000
 800a7ac:	40023800 	.word	0x40023800
 800a7b0:	40020000 	.word	0x40020000

0800a7b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a0b      	ldr	r2, [pc, #44]	; (800a7f0 <HAL_TIM_Base_MspInit+0x3c>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d10d      	bne.n	800a7e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <HAL_TIM_Base_MspInit+0x40>)
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ce:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <HAL_TIM_Base_MspInit+0x40>)
 800a7d0:	f043 0302 	orr.w	r3, r3, #2
 800a7d4:	6413      	str	r3, [r2, #64]	; 0x40
 800a7d6:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <HAL_TIM_Base_MspInit+0x40>)
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	f003 0302 	and.w	r3, r3, #2
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a7e2:	bf00      	nop
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40023800 	.word	0x40023800

0800a7f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	; 0x28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a800:	f107 0314 	add.w	r3, r7, #20
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]
 800a808:	605a      	str	r2, [r3, #4]
 800a80a:	609a      	str	r2, [r3, #8]
 800a80c:	60da      	str	r2, [r3, #12]
 800a80e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a21      	ldr	r2, [pc, #132]	; (800a89c <HAL_TIM_MspPostInit+0xa4>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d13c      	bne.n	800a894 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a81a:	2300      	movs	r3, #0
 800a81c:	613b      	str	r3, [r7, #16]
 800a81e:	4b20      	ldr	r3, [pc, #128]	; (800a8a0 <HAL_TIM_MspPostInit+0xa8>)
 800a820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a822:	4a1f      	ldr	r2, [pc, #124]	; (800a8a0 <HAL_TIM_MspPostInit+0xa8>)
 800a824:	f043 0302 	orr.w	r3, r3, #2
 800a828:	6313      	str	r3, [r2, #48]	; 0x30
 800a82a:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <HAL_TIM_MspPostInit+0xa8>)
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	613b      	str	r3, [r7, #16]
 800a834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	4b19      	ldr	r3, [pc, #100]	; (800a8a0 <HAL_TIM_MspPostInit+0xa8>)
 800a83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83e:	4a18      	ldr	r2, [pc, #96]	; (800a8a0 <HAL_TIM_MspPostInit+0xa8>)
 800a840:	f043 0304 	orr.w	r3, r3, #4
 800a844:	6313      	str	r3, [r2, #48]	; 0x30
 800a846:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <HAL_TIM_MspPostInit+0xa8>)
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a852:	2332      	movs	r3, #50	; 0x32
 800a854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a856:	2302      	movs	r3, #2
 800a858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a85e:	2300      	movs	r3, #0
 800a860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a862:	2302      	movs	r3, #2
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a866:	f107 0314 	add.w	r3, r7, #20
 800a86a:	4619      	mov	r1, r3
 800a86c:	480d      	ldr	r0, [pc, #52]	; (800a8a4 <HAL_TIM_MspPostInit+0xac>)
 800a86e:	f7f6 fc69 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a878:	2302      	movs	r3, #2
 800a87a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a880:	2300      	movs	r3, #0
 800a882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a884:	2302      	movs	r3, #2
 800a886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a888:	f107 0314 	add.w	r3, r7, #20
 800a88c:	4619      	mov	r1, r3
 800a88e:	4806      	ldr	r0, [pc, #24]	; (800a8a8 <HAL_TIM_MspPostInit+0xb0>)
 800a890:	f7f6 fc58 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a894:	bf00      	nop
 800a896:	3728      	adds	r7, #40	; 0x28
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40023800 	.word	0x40023800
 800a8a4:	40020400 	.word	0x40020400
 800a8a8:	40020800 	.word	0x40020800

0800a8ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08a      	sub	sp, #40	; 0x28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8b4:	f107 0314 	add.w	r3, r7, #20
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	605a      	str	r2, [r3, #4]
 800a8be:	609a      	str	r2, [r3, #8]
 800a8c0:	60da      	str	r2, [r3, #12]
 800a8c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a19      	ldr	r2, [pc, #100]	; (800a930 <HAL_UART_MspInit+0x84>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d12b      	bne.n	800a926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	613b      	str	r3, [r7, #16]
 800a8d2:	4b18      	ldr	r3, [pc, #96]	; (800a934 <HAL_UART_MspInit+0x88>)
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	4a17      	ldr	r2, [pc, #92]	; (800a934 <HAL_UART_MspInit+0x88>)
 800a8d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8dc:	6413      	str	r3, [r2, #64]	; 0x40
 800a8de:	4b15      	ldr	r3, [pc, #84]	; (800a934 <HAL_UART_MspInit+0x88>)
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <HAL_UART_MspInit+0x88>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	4a10      	ldr	r2, [pc, #64]	; (800a934 <HAL_UART_MspInit+0x88>)
 800a8f4:	f043 0301 	orr.w	r3, r3, #1
 800a8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <HAL_UART_MspInit+0x88>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a906:	230c      	movs	r3, #12
 800a908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a90a:	2302      	movs	r3, #2
 800a90c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a90e:	2301      	movs	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a912:	2303      	movs	r3, #3
 800a914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a916:	2307      	movs	r3, #7
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a91a:	f107 0314 	add.w	r3, r7, #20
 800a91e:	4619      	mov	r1, r3
 800a920:	4805      	ldr	r0, [pc, #20]	; (800a938 <HAL_UART_MspInit+0x8c>)
 800a922:	f7f6 fc0f 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a926:	bf00      	nop
 800a928:	3728      	adds	r7, #40	; 0x28
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	40004400 	.word	0x40004400
 800a934:	40023800 	.word	0x40023800
 800a938:	40020000 	.word	0x40020000

0800a93c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08c      	sub	sp, #48	; 0x30
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800a94c:	2200      	movs	r2, #0
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	201e      	movs	r0, #30
 800a952:	f7f6 fbcd 	bl	80010f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800a956:	201e      	movs	r0, #30
 800a958:	f7f6 fbe6 	bl	8001128 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	4b1f      	ldr	r3, [pc, #124]	; (800a9e0 <HAL_InitTick+0xa4>)
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	4a1e      	ldr	r2, [pc, #120]	; (800a9e0 <HAL_InitTick+0xa4>)
 800a966:	f043 0304 	orr.w	r3, r3, #4
 800a96a:	6413      	str	r3, [r2, #64]	; 0x40
 800a96c:	4b1c      	ldr	r3, [pc, #112]	; (800a9e0 <HAL_InitTick+0xa4>)
 800a96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a978:	f107 0210 	add.w	r2, r7, #16
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	4611      	mov	r1, r2
 800a982:	4618      	mov	r0, r3
 800a984:	f7f7 f9ce 	bl	8001d24 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a988:	f7f7 f9a4 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 800a98c:	4603      	mov	r3, r0
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	4a13      	ldr	r2, [pc, #76]	; (800a9e4 <HAL_InitTick+0xa8>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	0c9b      	lsrs	r3, r3, #18
 800a99c:	3b01      	subs	r3, #1
 800a99e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800a9a0:	4b11      	ldr	r3, [pc, #68]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9a2:	4a12      	ldr	r2, [pc, #72]	; (800a9ec <HAL_InitTick+0xb0>)
 800a9a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800a9a6:	4b10      	ldr	r3, [pc, #64]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a9ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800a9ae:	4a0e      	ldr	r2, [pc, #56]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9ba:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800a9c0:	4809      	ldr	r0, [pc, #36]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9c2:	f7f7 ff35 	bl	8002830 <HAL_TIM_Base_Init>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d104      	bne.n	800a9d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800a9cc:	4806      	ldr	r0, [pc, #24]	; (800a9e8 <HAL_InitTick+0xac>)
 800a9ce:	f7f7 ff5a 	bl	8002886 <HAL_TIM_Base_Start_IT>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	e000      	b.n	800a9d8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3730      	adds	r7, #48	; 0x30
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	40023800 	.word	0x40023800
 800a9e4:	431bde83 	.word	0x431bde83
 800a9e8:	200044e4 	.word	0x200044e4
 800a9ec:	40000800 	.word	0x40000800

0800a9f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a9f4:	bf00      	nop
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 800aa02:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 800aa04:	bf00      	nop
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aa12:	e7fe      	b.n	800aa12 <MemManage_Handler+0x4>

0800aa14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aa14:	b480      	push	{r7}
 800aa16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aa18:	e7fe      	b.n	800aa18 <BusFault_Handler+0x4>

0800aa1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aa1e:	e7fe      	b.n	800aa1e <UsageFault_Handler+0x4>

0800aa20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aa24:	bf00      	nop
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
	...

0800aa30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800aa34:	4802      	ldr	r0, [pc, #8]	; (800aa40 <TIM4_IRQHandler+0x10>)
 800aa36:	f7f8 f811 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800aa3a:	bf00      	nop
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	200044e4 	.word	0x200044e4

0800aa44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800aa48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800aa4c:	f7f6 fd16 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800aa50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800aa54:	f7f6 fd12 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800aa58:	bf00      	nop
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
	return 1;
 800aa60:	2301      	movs	r3, #1
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <_kill>:

int _kill(int pid, int sig)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aa76:	f000 fb31 	bl	800b0dc <__errno>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	2316      	movs	r3, #22
 800aa7e:	6013      	str	r3, [r2, #0]
	return -1;
 800aa80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <_exit>:

void _exit (int status)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aa94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ffe7 	bl	800aa6c <_kill>
	while (1) {}		/* Make sure we hang here */
 800aa9e:	e7fe      	b.n	800aa9e <_exit+0x12>

0800aaa0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aaa8:	4b11      	ldr	r3, [pc, #68]	; (800aaf0 <_sbrk+0x50>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <_sbrk+0x16>
		heap_end = &end;
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <_sbrk+0x50>)
 800aab2:	4a10      	ldr	r2, [pc, #64]	; (800aaf4 <_sbrk+0x54>)
 800aab4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aab6:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <_sbrk+0x50>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800aabc:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <_sbrk+0x50>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4413      	add	r3, r2
 800aac4:	466a      	mov	r2, sp
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d907      	bls.n	800aada <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800aaca:	f000 fb07 	bl	800b0dc <__errno>
 800aace:	4602      	mov	r2, r0
 800aad0:	230c      	movs	r3, #12
 800aad2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aad8:	e006      	b.n	800aae8 <_sbrk+0x48>
	}

	heap_end += incr;
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <_sbrk+0x50>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4413      	add	r3, r2
 800aae2:	4a03      	ldr	r2, [pc, #12]	; (800aaf0 <_sbrk+0x50>)
 800aae4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	200042e8 	.word	0x200042e8
 800aaf4:	20004528 	.word	0x20004528

0800aaf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aafc:	4b08      	ldr	r3, [pc, #32]	; (800ab20 <SystemInit+0x28>)
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab02:	4a07      	ldr	r2, [pc, #28]	; (800ab20 <SystemInit+0x28>)
 800ab04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <SystemInit+0x28>)
 800ab0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab12:	609a      	str	r2, [r3, #8]
#endif
}
 800ab14:	bf00      	nop
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	e000ed00 	.word	0xe000ed00

0800ab24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800ab24:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ab5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ab28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ab2a:	e003      	b.n	800ab34 <LoopCopyDataInit>

0800ab2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ab2c:	4b0c      	ldr	r3, [pc, #48]	; (800ab60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ab2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ab30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ab32:	3104      	adds	r1, #4

0800ab34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ab34:	480b      	ldr	r0, [pc, #44]	; (800ab64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ab36:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ab38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ab3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ab3c:	d3f6      	bcc.n	800ab2c <CopyDataInit>
  ldr  r2, =_sbss
 800ab3e:	4a0b      	ldr	r2, [pc, #44]	; (800ab6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ab40:	e002      	b.n	800ab48 <LoopFillZerobss>

0800ab42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ab42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ab44:	f842 3b04 	str.w	r3, [r2], #4

0800ab48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ab4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ab4c:	d3f9      	bcc.n	800ab42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ab4e:	f7ff ffd3 	bl	800aaf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab52:	f000 fac9 	bl	800b0e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ab56:	f7fe fac5 	bl	80090e4 <main>
  bx  lr    
 800ab5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ab5c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800ab60:	0800d8f0 	.word	0x0800d8f0
  ldr  r0, =_sdata
 800ab64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ab68:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 800ab6c:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 800ab70:	20004528 	.word	0x20004528

0800ab74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ab74:	e7fe      	b.n	800ab74 <ADC_IRQHandler>

0800ab76 <_ZdlPvj>:
 800ab76:	f7fb bfcf 	b.w	8006b18 <_ZdlPv>

0800ab7a <_ZNSaIcEC1Ev>:
 800ab7a:	4770      	bx	lr

0800ab7c <_ZNSaIcED1Ev>:
 800ab7c:	4770      	bx	lr

0800ab7e <_ZSt17__throw_bad_allocv>:
 800ab7e:	b508      	push	{r3, lr}
 800ab80:	f000 fa9e 	bl	800b0c0 <abort>

0800ab84 <_ZSt19__throw_logic_errorPKc>:
 800ab84:	b508      	push	{r3, lr}
 800ab86:	f000 fa9b 	bl	800b0c0 <abort>

0800ab8a <_ZSt20__throw_length_errorPKc>:
 800ab8a:	b508      	push	{r3, lr}
 800ab8c:	f000 fa98 	bl	800b0c0 <abort>

0800ab90 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800ab90:	b40f      	push	{r0, r1, r2, r3}
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	f107 0410 	add.w	r4, r7, #16
 800ab9c:	f854 5b04 	ldr.w	r5, [r4], #4
 800aba0:	4628      	mov	r0, r5
 800aba2:	f7f5 fb6d 	bl	8000280 <strlen>
 800aba6:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800abaa:	f023 0307 	bic.w	r3, r3, #7
 800abae:	ebad 0d03 	sub.w	sp, sp, r3
 800abb2:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800abb6:	4623      	mov	r3, r4
 800abb8:	462a      	mov	r2, r5
 800abba:	4668      	mov	r0, sp
 800abbc:	607c      	str	r4, [r7, #4]
 800abbe:	f000 fa3f 	bl	800b040 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800abc2:	f000 fa7d 	bl	800b0c0 <abort>

0800abc6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800abc6:	b10a      	cbz	r2, 800abcc <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800abc8:	f000 bab2 	b.w	800b130 <memcpy>
 800abcc:	4770      	bx	lr

0800abce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800abce:	6001      	str	r1, [r0, #0]
 800abd0:	4770      	bx	lr

0800abd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800abd2:	6800      	ldr	r0, [r0, #0]
 800abd4:	4770      	bx	lr

0800abd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800abd6:	3008      	adds	r0, #8
 800abd8:	4770      	bx	lr

0800abda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800abda:	6081      	str	r1, [r0, #8]
 800abdc:	4770      	bx	lr

0800abde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800abde:	6803      	ldr	r3, [r0, #0]
 800abe0:	6041      	str	r1, [r0, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	545a      	strb	r2, [r3, r1]
 800abe6:	4770      	bx	lr

0800abe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800abe8:	b508      	push	{r3, lr}
 800abea:	680b      	ldr	r3, [r1, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	da02      	bge.n	800abf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800abf0:	4809      	ldr	r0, [pc, #36]	; (800ac18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800abf2:	f7ff ffca 	bl	800ab8a <_ZSt20__throw_length_errorPKc>
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d908      	bls.n	800ac0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800abfa:	0052      	lsls	r2, r2, #1
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d205      	bcs.n	800ac0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	bfb6      	itet	lt
 800ac04:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800ac08:	600a      	strge	r2, [r1, #0]
 800ac0a:	600b      	strlt	r3, [r1, #0]
 800ac0c:	6808      	ldr	r0, [r1, #0]
 800ac0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac12:	3001      	adds	r0, #1
 800ac14:	f7fb bf74 	b.w	8006b00 <_Znwj>
 800ac18:	0800d5ef 	.word	0x0800d5ef

0800ac1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f853 0b08 	ldr.w	r0, [r3], #8
 800ac22:	4298      	cmp	r0, r3
 800ac24:	d001      	beq.n	800ac2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800ac26:	f7fb bf77 	b.w	8006b18 <_ZdlPv>
 800ac2a:	4770      	bx	lr

0800ac2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	6843      	ldr	r3, [r0, #4]
 800ac30:	4299      	cmp	r1, r3
 800ac32:	4614      	mov	r4, r2
 800ac34:	d904      	bls.n	800ac40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 800ac36:	460a      	mov	r2, r1
 800ac38:	4802      	ldr	r0, [pc, #8]	; (800ac44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	f7ff ffa8 	bl	800ab90 <_ZSt24__throw_out_of_range_fmtPKcz>
 800ac40:	4608      	mov	r0, r1
 800ac42:	bd10      	pop	{r4, pc}
 800ac44:	0800d574 	.word	0x0800d574

0800ac48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800ac48:	b508      	push	{r3, lr}
 800ac4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ac4e:	6840      	ldr	r0, [r0, #4]
 800ac50:	3901      	subs	r1, #1
 800ac52:	1a09      	subs	r1, r1, r0
 800ac54:	4291      	cmp	r1, r2
 800ac56:	d202      	bcs.n	800ac5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff ff96 	bl	800ab8a <_ZSt20__throw_length_errorPKc>
 800ac5e:	bd08      	pop	{r3, pc}

0800ac60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800ac60:	6803      	ldr	r3, [r0, #0]
 800ac62:	428b      	cmp	r3, r1
 800ac64:	d806      	bhi.n	800ac74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800ac66:	6840      	ldr	r0, [r0, #4]
 800ac68:	4418      	add	r0, r3
 800ac6a:	4281      	cmp	r1, r0
 800ac6c:	bf94      	ite	ls
 800ac6e:	2000      	movls	r0, #0
 800ac70:	2001      	movhi	r0, #1
 800ac72:	4770      	bx	lr
 800ac74:	2001      	movs	r0, #1
 800ac76:	4770      	bx	lr

0800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ac78:	2a01      	cmp	r2, #1
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	d102      	bne.n	800ac84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800ac7e:	780a      	ldrb	r2, [r1, #0]
 800ac80:	7002      	strb	r2, [r0, #0]
 800ac82:	bd10      	pop	{r4, pc}
 800ac84:	f7ff ff9f 	bl	800abc6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800ac88:	e7fb      	b.n	800ac82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800ac8a:	2a01      	cmp	r2, #1
 800ac8c:	b430      	push	{r4, r5}
 800ac8e:	d103      	bne.n	800ac98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800ac90:	780b      	ldrb	r3, [r1, #0]
 800ac92:	7003      	strb	r3, [r0, #0]
 800ac94:	bc30      	pop	{r4, r5}
 800ac96:	4770      	bx	lr
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	d0fb      	beq.n	800ac94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800ac9c:	bc30      	pop	{r4, r5}
 800ac9e:	f000 ba52 	b.w	800b146 <memmove>

0800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800aca2:	460b      	mov	r3, r1
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	b410      	push	{r4}
 800aca8:	4611      	mov	r1, r2
 800acaa:	4604      	mov	r4, r0
 800acac:	d103      	bne.n	800acb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800acae:	7022      	strb	r2, [r4, #0]
 800acb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0fa      	beq.n	800acb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800acba:	461a      	mov	r2, r3
 800acbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc0:	f000 ba5a 	b.w	800b178 <memset>

0800acc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800acc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acc6:	290f      	cmp	r1, #15
 800acc8:	4604      	mov	r4, r0
 800acca:	9101      	str	r1, [sp, #4]
 800accc:	4615      	mov	r5, r2
 800acce:	d906      	bls.n	800acde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800acd0:	2200      	movs	r2, #0
 800acd2:	a901      	add	r1, sp, #4
 800acd4:	f7ff ff88 	bl	800abe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	6020      	str	r0, [r4, #0]
 800acdc:	60a3      	str	r3, [r4, #8]
 800acde:	9901      	ldr	r1, [sp, #4]
 800ace0:	b119      	cbz	r1, 800acea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800ace2:	462a      	mov	r2, r5
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	f7ff ffdc 	bl	800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800acea:	9b01      	ldr	r3, [sp, #4]
 800acec:	6822      	ldr	r2, [r4, #0]
 800acee:	6063      	str	r3, [r4, #4]
 800acf0:	2100      	movs	r1, #0
 800acf2:	54d1      	strb	r1, [r2, r3]
 800acf4:	b003      	add	sp, #12
 800acf6:	bd30      	pop	{r4, r5, pc}

0800acf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800acf8:	b508      	push	{r3, lr}
 800acfa:	1a52      	subs	r2, r2, r1
 800acfc:	f7ff ffbc 	bl	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ad00:	bd08      	pop	{r3, pc}

0800ad02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800ad02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad06:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800ad0a:	4616      	mov	r6, r2
 800ad0c:	6842      	ldr	r2, [r0, #4]
 800ad0e:	469a      	mov	sl, r3
 800ad10:	eba8 0306 	sub.w	r3, r8, r6
 800ad14:	1a57      	subs	r7, r2, r1
 800ad16:	4413      	add	r3, r2
 800ad18:	6802      	ldr	r2, [r0, #0]
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	f100 0308 	add.w	r3, r0, #8
 800ad20:	429a      	cmp	r2, r3
 800ad22:	460d      	mov	r5, r1
 800ad24:	bf14      	ite	ne
 800ad26:	6882      	ldrne	r2, [r0, #8]
 800ad28:	220f      	moveq	r2, #15
 800ad2a:	a901      	add	r1, sp, #4
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	f7ff ff5b 	bl	800abe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ad32:	1bbf      	subs	r7, r7, r6
 800ad34:	4681      	mov	r9, r0
 800ad36:	b11d      	cbz	r5, 800ad40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800ad38:	462a      	mov	r2, r5
 800ad3a:	6821      	ldr	r1, [r4, #0]
 800ad3c:	f7ff ff9c 	bl	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ad40:	f1ba 0f00 	cmp.w	sl, #0
 800ad44:	d008      	beq.n	800ad58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800ad46:	f1b8 0f00 	cmp.w	r8, #0
 800ad4a:	d005      	beq.n	800ad58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800ad4c:	4642      	mov	r2, r8
 800ad4e:	4651      	mov	r1, sl
 800ad50:	eb09 0005 	add.w	r0, r9, r5
 800ad54:	f7ff ff90 	bl	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ad58:	b147      	cbz	r7, 800ad6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800ad5a:	6821      	ldr	r1, [r4, #0]
 800ad5c:	442e      	add	r6, r5
 800ad5e:	eb05 0008 	add.w	r0, r5, r8
 800ad62:	463a      	mov	r2, r7
 800ad64:	4431      	add	r1, r6
 800ad66:	4448      	add	r0, r9
 800ad68:	f7ff ff86 	bl	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7ff ff55 	bl	800ac1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	f8c4 9000 	str.w	r9, [r4]
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	b002      	add	sp, #8
 800ad7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ad80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	f100 0308 	add.w	r3, r0, #8
 800ad86:	4604      	mov	r4, r0
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	f7ff ff9b 	bl	800acc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	bd10      	pop	{r4, pc}

0800ad92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800ad92:	b570      	push	{r4, r5, r6, lr}
 800ad94:	4604      	mov	r4, r0
 800ad96:	460e      	mov	r6, r1
 800ad98:	3008      	adds	r0, #8
 800ad9a:	6020      	str	r0, [r4, #0]
 800ad9c:	f856 3b08 	ldr.w	r3, [r6], #8
 800ada0:	429e      	cmp	r6, r3
 800ada2:	460d      	mov	r5, r1
 800ada4:	d10b      	bne.n	800adbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800ada6:	2210      	movs	r2, #16
 800ada8:	4631      	mov	r1, r6
 800adaa:	f7ff ff0c 	bl	800abc6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800adae:	686b      	ldr	r3, [r5, #4]
 800adb0:	6063      	str	r3, [r4, #4]
 800adb2:	2300      	movs	r3, #0
 800adb4:	602e      	str	r6, [r5, #0]
 800adb6:	606b      	str	r3, [r5, #4]
 800adb8:	722b      	strb	r3, [r5, #8]
 800adba:	4620      	mov	r0, r4
 800adbc:	bd70      	pop	{r4, r5, r6, pc}
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	688b      	ldr	r3, [r1, #8]
 800adc2:	60a3      	str	r3, [r4, #8]
 800adc4:	e7f3      	b.n	800adae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800adc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800adc6:	b510      	push	{r4, lr}
 800adc8:	4604      	mov	r4, r0
 800adca:	f7ff ff27 	bl	800ac1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800adce:	4620      	mov	r0, r4
 800add0:	bd10      	pop	{r4, pc}

0800add2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800add2:	6840      	ldr	r0, [r0, #4]
 800add4:	4770      	bx	lr

0800add6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800add6:	6802      	ldr	r2, [r0, #0]
 800add8:	f100 0308 	add.w	r3, r0, #8
 800addc:	429a      	cmp	r2, r3
 800adde:	bf14      	ite	ne
 800ade0:	6880      	ldrne	r0, [r0, #8]
 800ade2:	200f      	moveq	r0, #15
 800ade4:	4770      	bx	lr
	...

0800ade8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800ade8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800adee:	4614      	mov	r4, r2
 800adf0:	4681      	mov	r9, r0
 800adf2:	462a      	mov	r2, r5
 800adf4:	460f      	mov	r7, r1
 800adf6:	4698      	mov	r8, r3
 800adf8:	4621      	mov	r1, r4
 800adfa:	4b37      	ldr	r3, [pc, #220]	; (800aed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800adfc:	f7ff ff24 	bl	800ac48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800ae00:	464a      	mov	r2, r9
 800ae02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ae06:	f852 6b08 	ldr.w	r6, [r2], #8
 800ae0a:	4296      	cmp	r6, r2
 800ae0c:	eba5 0b04 	sub.w	fp, r5, r4
 800ae10:	bf18      	it	ne
 800ae12:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800ae16:	eb03 0a0b 	add.w	sl, r3, fp
 800ae1a:	bf08      	it	eq
 800ae1c:	220f      	moveq	r2, #15
 800ae1e:	4552      	cmp	r2, sl
 800ae20:	d34e      	bcc.n	800aec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800ae22:	443e      	add	r6, r7
 800ae24:	4641      	mov	r1, r8
 800ae26:	1bdf      	subs	r7, r3, r7
 800ae28:	4648      	mov	r0, r9
 800ae2a:	1b3f      	subs	r7, r7, r4
 800ae2c:	f7ff ff18 	bl	800ac60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800ae30:	b170      	cbz	r0, 800ae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800ae32:	b137      	cbz	r7, 800ae42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800ae34:	42ac      	cmp	r4, r5
 800ae36:	d004      	beq.n	800ae42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800ae38:	463a      	mov	r2, r7
 800ae3a:	1931      	adds	r1, r6, r4
 800ae3c:	1970      	adds	r0, r6, r5
 800ae3e:	f7ff ff24 	bl	800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ae42:	b30d      	cbz	r5, 800ae88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800ae44:	462a      	mov	r2, r5
 800ae46:	4641      	mov	r1, r8
 800ae48:	4630      	mov	r0, r6
 800ae4a:	f7ff ff15 	bl	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ae4e:	e01b      	b.n	800ae88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800ae50:	b135      	cbz	r5, 800ae60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800ae52:	42ac      	cmp	r4, r5
 800ae54:	d33c      	bcc.n	800aed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800ae56:	462a      	mov	r2, r5
 800ae58:	4641      	mov	r1, r8
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7ff ff15 	bl	800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ae60:	b197      	cbz	r7, 800ae88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800ae62:	42ac      	cmp	r4, r5
 800ae64:	d010      	beq.n	800ae88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800ae66:	463a      	mov	r2, r7
 800ae68:	1931      	adds	r1, r6, r4
 800ae6a:	1970      	adds	r0, r6, r5
 800ae6c:	f7ff ff0d 	bl	800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ae70:	42ac      	cmp	r4, r5
 800ae72:	d209      	bcs.n	800ae88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800ae74:	4434      	add	r4, r6
 800ae76:	eb08 0305 	add.w	r3, r8, r5
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d30f      	bcc.n	800ae9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800ae7e:	462a      	mov	r2, r5
 800ae80:	4641      	mov	r1, r8
 800ae82:	4630      	mov	r0, r6
 800ae84:	f7ff ff01 	bl	800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ae88:	f8d9 3000 	ldr.w	r3, [r9]
 800ae8c:	f8c9 a004 	str.w	sl, [r9, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	4648      	mov	r0, r9
 800ae94:	f803 200a 	strb.w	r2, [r3, sl]
 800ae98:	b003      	add	sp, #12
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	4544      	cmp	r4, r8
 800aea0:	d803      	bhi.n	800aeaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800aea2:	462a      	mov	r2, r5
 800aea4:	eb08 010b 	add.w	r1, r8, fp
 800aea8:	e7ce      	b.n	800ae48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800aeaa:	eba4 0408 	sub.w	r4, r4, r8
 800aeae:	4622      	mov	r2, r4
 800aeb0:	4641      	mov	r1, r8
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff fee9 	bl	800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800aeb8:	1b2a      	subs	r2, r5, r4
 800aeba:	1971      	adds	r1, r6, r5
 800aebc:	1930      	adds	r0, r6, r4
 800aebe:	e7c4      	b.n	800ae4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800aec0:	9500      	str	r5, [sp, #0]
 800aec2:	4643      	mov	r3, r8
 800aec4:	4622      	mov	r2, r4
 800aec6:	4639      	mov	r1, r7
 800aec8:	4648      	mov	r0, r9
 800aeca:	f7ff ff1a 	bl	800ad02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800aece:	e7db      	b.n	800ae88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800aed0:	2f00      	cmp	r7, #0
 800aed2:	d0cf      	beq.n	800ae74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800aed4:	e7c7      	b.n	800ae66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800aed6:	bf00      	nop
 800aed8:	0800d5ab 	.word	0x0800d5ab

0800aedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800aedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	4615      	mov	r5, r2
 800aee2:	4a09      	ldr	r2, [pc, #36]	; (800af08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800aee4:	460f      	mov	r7, r1
 800aee6:	461e      	mov	r6, r3
 800aee8:	f7ff fea0 	bl	800ac2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800aeec:	6862      	ldr	r2, [r4, #4]
 800aeee:	9b08      	ldr	r3, [sp, #32]
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	1bd2      	subs	r2, r2, r7
 800aef4:	42aa      	cmp	r2, r5
 800aef6:	4601      	mov	r1, r0
 800aef8:	4633      	mov	r3, r6
 800aefa:	bf28      	it	cs
 800aefc:	462a      	movcs	r2, r5
 800aefe:	4620      	mov	r0, r4
 800af00:	f7ff ff72 	bl	800ade8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800af04:	b003      	add	sp, #12
 800af06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af08:	0800d5d9 	.word	0x0800d5d9

0800af0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 800af0c:	b507      	push	{r0, r1, r2, lr}
 800af0e:	6853      	ldr	r3, [r2, #4]
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	6813      	ldr	r3, [r2, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	f7ff ffe1 	bl	800aedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800af1a:	b003      	add	sp, #12
 800af1c:	f85d fb04 	ldr.w	pc, [sp], #4

0800af20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800af20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af22:	4604      	mov	r4, r0
 800af24:	4626      	mov	r6, r4
 800af26:	6840      	ldr	r0, [r0, #4]
 800af28:	f856 3b08 	ldr.w	r3, [r6], #8
 800af2c:	42b3      	cmp	r3, r6
 800af2e:	bf18      	it	ne
 800af30:	68a6      	ldrne	r6, [r4, #8]
 800af32:	eb00 0502 	add.w	r5, r0, r2
 800af36:	bf08      	it	eq
 800af38:	260f      	moveq	r6, #15
 800af3a:	42b5      	cmp	r5, r6
 800af3c:	d80a      	bhi.n	800af54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800af3e:	b112      	cbz	r2, 800af46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800af40:	4418      	add	r0, r3
 800af42:	f7ff fe99 	bl	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	6065      	str	r5, [r4, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	4620      	mov	r0, r4
 800af4e:	555a      	strb	r2, [r3, r5]
 800af50:	b002      	add	sp, #8
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	9200      	str	r2, [sp, #0]
 800af56:	460b      	mov	r3, r1
 800af58:	2200      	movs	r2, #0
 800af5a:	4601      	mov	r1, r0
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7ff fed0 	bl	800ad02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800af62:	e7f0      	b.n	800af46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800af64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800af64:	b508      	push	{r3, lr}
 800af66:	e9d1 1200 	ldrd	r1, r2, [r1]
 800af6a:	f7ff ffd9 	bl	800af20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800af6e:	bd08      	pop	{r3, pc}

0800af70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	4608      	mov	r0, r1
 800af76:	460d      	mov	r5, r1
 800af78:	f7f5 f982 	bl	8000280 <strlen>
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800af7e:	4606      	mov	r6, r0
 800af80:	4602      	mov	r2, r0
 800af82:	2100      	movs	r1, #0
 800af84:	4620      	mov	r0, r4
 800af86:	f7ff fe5f 	bl	800ac48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800af8a:	4632      	mov	r2, r6
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	f7ff ffc6 	bl	800af20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800af94:	bd70      	pop	{r4, r5, r6, pc}
 800af96:	bf00      	nop
 800af98:	0800d5c4 	.word	0x0800d5c4

0800af9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800af9c:	6800      	ldr	r0, [r0, #0]
 800af9e:	4770      	bx	lr

0800afa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800afa0:	6001      	str	r1, [r0, #0]
 800afa2:	4770      	bx	lr

0800afa4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b09c      	sub	sp, #112	; 0x70
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	1a0e      	subs	r6, r1, r0
 800afac:	4680      	mov	r8, r0
 800afae:	2269      	movs	r2, #105	; 0x69
 800afb0:	490e      	ldr	r1, [pc, #56]	; (800afec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800afb2:	1d38      	adds	r0, r7, #4
 800afb4:	f000 f8bc 	bl	800b130 <memcpy>
 800afb8:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800afbc:	f023 0307 	bic.w	r3, r3, #7
 800afc0:	ebad 0d03 	sub.w	sp, sp, r3
 800afc4:	466c      	mov	r4, sp
 800afc6:	2268      	movs	r2, #104	; 0x68
 800afc8:	1d39      	adds	r1, r7, #4
 800afca:	1c75      	adds	r5, r6, #1
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 f8af 	bl	800b130 <memcpy>
 800afd2:	4425      	add	r5, r4
 800afd4:	4632      	mov	r2, r6
 800afd6:	4641      	mov	r1, r8
 800afd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800afdc:	f000 f8a8 	bl	800b130 <memcpy>
 800afe0:	2300      	movs	r3, #0
 800afe2:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7ff fdcc 	bl	800ab84 <_ZSt19__throw_logic_errorPKc>
 800afec:	0800d612 	.word	0x0800d612

0800aff0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	b086      	sub	sp, #24
 800aff6:	466d      	mov	r5, sp
 800aff8:	f105 040c 	add.w	r4, r5, #12
 800affc:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800b03c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800b000:	4623      	mov	r3, r4
 800b002:	f04f 0c0a 	mov.w	ip, #10
 800b006:	fbb2 f6fc 	udiv	r6, r2, ip
 800b00a:	fb0c 2216 	mls	r2, ip, r6, r2
 800b00e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800b012:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800b016:	4632      	mov	r2, r6
 800b018:	2e00      	cmp	r6, #0
 800b01a:	d1f4      	bne.n	800b006 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800b01c:	1ae4      	subs	r4, r4, r3
 800b01e:	428c      	cmp	r4, r1
 800b020:	d808      	bhi.n	800b034 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800b022:	f1c4 010c 	rsb	r1, r4, #12
 800b026:	4622      	mov	r2, r4
 800b028:	4429      	add	r1, r5
 800b02a:	f000 f881 	bl	800b130 <memcpy>
 800b02e:	4620      	mov	r0, r4
 800b030:	46bd      	mov	sp, r7
 800b032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b038:	e7f9      	b.n	800b02e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800b03a:	bf00      	nop
 800b03c:	0800d607 	.word	0x0800d607

0800b040 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800b040:	3901      	subs	r1, #1
 800b042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	4606      	mov	r6, r0
 800b048:	4615      	mov	r5, r2
 800b04a:	1847      	adds	r7, r0, r1
 800b04c:	4604      	mov	r4, r0
 800b04e:	782a      	ldrb	r2, [r5, #0]
 800b050:	b392      	cbz	r2, 800b0b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800b052:	42bc      	cmp	r4, r7
 800b054:	d22c      	bcs.n	800b0b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800b056:	2a25      	cmp	r2, #37	; 0x25
 800b058:	d107      	bne.n	800b06a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800b05a:	786a      	ldrb	r2, [r5, #1]
 800b05c:	2a73      	cmp	r2, #115	; 0x73
 800b05e:	d009      	beq.n	800b074 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 800b060:	2a7a      	cmp	r2, #122	; 0x7a
 800b062:	d012      	beq.n	800b08a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800b064:	2a25      	cmp	r2, #37	; 0x25
 800b066:	d100      	bne.n	800b06a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800b068:	3501      	adds	r5, #1
 800b06a:	782a      	ldrb	r2, [r5, #0]
 800b06c:	7022      	strb	r2, [r4, #0]
 800b06e:	3501      	adds	r5, #1
 800b070:	3401      	adds	r4, #1
 800b072:	e7ec      	b.n	800b04e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800b074:	1d19      	adds	r1, r3, #4
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3b01      	subs	r3, #1
 800b07a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b07e:	b1a2      	cbz	r2, 800b0aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 800b080:	42bc      	cmp	r4, r7
 800b082:	d015      	beq.n	800b0b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800b084:	f804 2b01 	strb.w	r2, [r4], #1
 800b088:	e7f7      	b.n	800b07a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800b08a:	78aa      	ldrb	r2, [r5, #2]
 800b08c:	2a75      	cmp	r2, #117	; 0x75
 800b08e:	d1ec      	bne.n	800b06a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	1b39      	subs	r1, r7, r4
 800b094:	4620      	mov	r0, r4
 800b096:	f103 0804 	add.w	r8, r3, #4
 800b09a:	f7ff ffa9 	bl	800aff0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	dd06      	ble.n	800b0b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800b0a2:	4404      	add	r4, r0
 800b0a4:	3503      	adds	r5, #3
 800b0a6:	4643      	mov	r3, r8
 800b0a8:	e7d1      	b.n	800b04e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800b0aa:	3502      	adds	r5, #2
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	e7ce      	b.n	800b04e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7ff ff76 	bl	800afa4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800b0b8:	7022      	strb	r2, [r4, #0]
 800b0ba:	1ba0      	subs	r0, r4, r6
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0c0 <abort>:
 800b0c0:	b508      	push	{r3, lr}
 800b0c2:	2006      	movs	r0, #6
 800b0c4:	f000 fce4 	bl	800ba90 <raise>
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f7ff fcdf 	bl	800aa8c <_exit>

0800b0ce <atexit>:
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 bd31 	b.w	800bb3c <__register_exitproc>
	...

0800b0dc <__errno>:
 800b0dc:	4b01      	ldr	r3, [pc, #4]	; (800b0e4 <__errno+0x8>)
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	20000034 	.word	0x20000034

0800b0e8 <__libc_init_array>:
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	4e0d      	ldr	r6, [pc, #52]	; (800b120 <__libc_init_array+0x38>)
 800b0ec:	4c0d      	ldr	r4, [pc, #52]	; (800b124 <__libc_init_array+0x3c>)
 800b0ee:	1ba4      	subs	r4, r4, r6
 800b0f0:	10a4      	asrs	r4, r4, #2
 800b0f2:	2500      	movs	r5, #0
 800b0f4:	42a5      	cmp	r5, r4
 800b0f6:	d109      	bne.n	800b10c <__libc_init_array+0x24>
 800b0f8:	4e0b      	ldr	r6, [pc, #44]	; (800b128 <__libc_init_array+0x40>)
 800b0fa:	4c0c      	ldr	r4, [pc, #48]	; (800b12c <__libc_init_array+0x44>)
 800b0fc:	f002 f91a 	bl	800d334 <_init>
 800b100:	1ba4      	subs	r4, r4, r6
 800b102:	10a4      	asrs	r4, r4, #2
 800b104:	2500      	movs	r5, #0
 800b106:	42a5      	cmp	r5, r4
 800b108:	d105      	bne.n	800b116 <__libc_init_array+0x2e>
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b110:	4798      	blx	r3
 800b112:	3501      	adds	r5, #1
 800b114:	e7ee      	b.n	800b0f4 <__libc_init_array+0xc>
 800b116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b11a:	4798      	blx	r3
 800b11c:	3501      	adds	r5, #1
 800b11e:	e7f2      	b.n	800b106 <__libc_init_array+0x1e>
 800b120:	0800d8e0 	.word	0x0800d8e0
 800b124:	0800d8e0 	.word	0x0800d8e0
 800b128:	0800d8e0 	.word	0x0800d8e0
 800b12c:	0800d8e8 	.word	0x0800d8e8

0800b130 <memcpy>:
 800b130:	b510      	push	{r4, lr}
 800b132:	1e43      	subs	r3, r0, #1
 800b134:	440a      	add	r2, r1
 800b136:	4291      	cmp	r1, r2
 800b138:	d100      	bne.n	800b13c <memcpy+0xc>
 800b13a:	bd10      	pop	{r4, pc}
 800b13c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b140:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b144:	e7f7      	b.n	800b136 <memcpy+0x6>

0800b146 <memmove>:
 800b146:	4288      	cmp	r0, r1
 800b148:	b510      	push	{r4, lr}
 800b14a:	eb01 0302 	add.w	r3, r1, r2
 800b14e:	d807      	bhi.n	800b160 <memmove+0x1a>
 800b150:	1e42      	subs	r2, r0, #1
 800b152:	4299      	cmp	r1, r3
 800b154:	d00a      	beq.n	800b16c <memmove+0x26>
 800b156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b15e:	e7f8      	b.n	800b152 <memmove+0xc>
 800b160:	4283      	cmp	r3, r0
 800b162:	d9f5      	bls.n	800b150 <memmove+0xa>
 800b164:	1881      	adds	r1, r0, r2
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	42d3      	cmn	r3, r2
 800b16a:	d100      	bne.n	800b16e <memmove+0x28>
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b172:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b176:	e7f7      	b.n	800b168 <memmove+0x22>

0800b178 <memset>:
 800b178:	4402      	add	r2, r0
 800b17a:	4603      	mov	r3, r0
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d100      	bne.n	800b182 <memset+0xa>
 800b180:	4770      	bx	lr
 800b182:	f803 1b01 	strb.w	r1, [r3], #1
 800b186:	e7f9      	b.n	800b17c <memset+0x4>

0800b188 <__cvt>:
 800b188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b18c:	ec55 4b10 	vmov	r4, r5, d0
 800b190:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b192:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b196:	2d00      	cmp	r5, #0
 800b198:	460e      	mov	r6, r1
 800b19a:	4691      	mov	r9, r2
 800b19c:	4619      	mov	r1, r3
 800b19e:	bfb8      	it	lt
 800b1a0:	4622      	movlt	r2, r4
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f027 0720 	bic.w	r7, r7, #32
 800b1a8:	bfbb      	ittet	lt
 800b1aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1ae:	461d      	movlt	r5, r3
 800b1b0:	2300      	movge	r3, #0
 800b1b2:	232d      	movlt	r3, #45	; 0x2d
 800b1b4:	bfb8      	it	lt
 800b1b6:	4614      	movlt	r4, r2
 800b1b8:	2f46      	cmp	r7, #70	; 0x46
 800b1ba:	700b      	strb	r3, [r1, #0]
 800b1bc:	d004      	beq.n	800b1c8 <__cvt+0x40>
 800b1be:	2f45      	cmp	r7, #69	; 0x45
 800b1c0:	d100      	bne.n	800b1c4 <__cvt+0x3c>
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	2102      	movs	r1, #2
 800b1c6:	e000      	b.n	800b1ca <__cvt+0x42>
 800b1c8:	2103      	movs	r1, #3
 800b1ca:	ab03      	add	r3, sp, #12
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	ab02      	add	r3, sp, #8
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	4653      	mov	r3, sl
 800b1d6:	ec45 4b10 	vmov	d0, r4, r5
 800b1da:	f000 fda1 	bl	800bd20 <_dtoa_r>
 800b1de:	2f47      	cmp	r7, #71	; 0x47
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	d102      	bne.n	800b1ea <__cvt+0x62>
 800b1e4:	f019 0f01 	tst.w	r9, #1
 800b1e8:	d026      	beq.n	800b238 <__cvt+0xb0>
 800b1ea:	2f46      	cmp	r7, #70	; 0x46
 800b1ec:	eb08 0906 	add.w	r9, r8, r6
 800b1f0:	d111      	bne.n	800b216 <__cvt+0x8e>
 800b1f2:	f898 3000 	ldrb.w	r3, [r8]
 800b1f6:	2b30      	cmp	r3, #48	; 0x30
 800b1f8:	d10a      	bne.n	800b210 <__cvt+0x88>
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4620      	mov	r0, r4
 800b200:	4629      	mov	r1, r5
 800b202:	f7f5 fc69 	bl	8000ad8 <__aeabi_dcmpeq>
 800b206:	b918      	cbnz	r0, 800b210 <__cvt+0x88>
 800b208:	f1c6 0601 	rsb	r6, r6, #1
 800b20c:	f8ca 6000 	str.w	r6, [sl]
 800b210:	f8da 3000 	ldr.w	r3, [sl]
 800b214:	4499      	add	r9, r3
 800b216:	2200      	movs	r2, #0
 800b218:	2300      	movs	r3, #0
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b222:	b938      	cbnz	r0, 800b234 <__cvt+0xac>
 800b224:	2230      	movs	r2, #48	; 0x30
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	454b      	cmp	r3, r9
 800b22a:	d205      	bcs.n	800b238 <__cvt+0xb0>
 800b22c:	1c59      	adds	r1, r3, #1
 800b22e:	9103      	str	r1, [sp, #12]
 800b230:	701a      	strb	r2, [r3, #0]
 800b232:	e7f8      	b.n	800b226 <__cvt+0x9e>
 800b234:	f8cd 900c 	str.w	r9, [sp, #12]
 800b238:	9b03      	ldr	r3, [sp, #12]
 800b23a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b23c:	eba3 0308 	sub.w	r3, r3, r8
 800b240:	4640      	mov	r0, r8
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	b004      	add	sp, #16
 800b246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b24a <__exponent>:
 800b24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b24c:	2900      	cmp	r1, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	bfba      	itte	lt
 800b252:	4249      	neglt	r1, r1
 800b254:	232d      	movlt	r3, #45	; 0x2d
 800b256:	232b      	movge	r3, #43	; 0x2b
 800b258:	2909      	cmp	r1, #9
 800b25a:	f804 2b02 	strb.w	r2, [r4], #2
 800b25e:	7043      	strb	r3, [r0, #1]
 800b260:	dd20      	ble.n	800b2a4 <__exponent+0x5a>
 800b262:	f10d 0307 	add.w	r3, sp, #7
 800b266:	461f      	mov	r7, r3
 800b268:	260a      	movs	r6, #10
 800b26a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b26e:	fb06 1115 	mls	r1, r6, r5, r1
 800b272:	3130      	adds	r1, #48	; 0x30
 800b274:	2d09      	cmp	r5, #9
 800b276:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b27a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b27e:	4629      	mov	r1, r5
 800b280:	dc09      	bgt.n	800b296 <__exponent+0x4c>
 800b282:	3130      	adds	r1, #48	; 0x30
 800b284:	3b02      	subs	r3, #2
 800b286:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b28a:	42bb      	cmp	r3, r7
 800b28c:	4622      	mov	r2, r4
 800b28e:	d304      	bcc.n	800b29a <__exponent+0x50>
 800b290:	1a10      	subs	r0, r2, r0
 800b292:	b003      	add	sp, #12
 800b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b296:	4613      	mov	r3, r2
 800b298:	e7e7      	b.n	800b26a <__exponent+0x20>
 800b29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b29e:	f804 2b01 	strb.w	r2, [r4], #1
 800b2a2:	e7f2      	b.n	800b28a <__exponent+0x40>
 800b2a4:	2330      	movs	r3, #48	; 0x30
 800b2a6:	4419      	add	r1, r3
 800b2a8:	7083      	strb	r3, [r0, #2]
 800b2aa:	1d02      	adds	r2, r0, #4
 800b2ac:	70c1      	strb	r1, [r0, #3]
 800b2ae:	e7ef      	b.n	800b290 <__exponent+0x46>

0800b2b0 <_printf_float>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	b08d      	sub	sp, #52	; 0x34
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b2bc:	4616      	mov	r6, r2
 800b2be:	461f      	mov	r7, r3
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	f001 fae5 	bl	800c890 <_localeconv_r>
 800b2c6:	6803      	ldr	r3, [r0, #0]
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f4 ffd8 	bl	8000280 <strlen>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d8:	9005      	str	r0, [sp, #20]
 800b2da:	3307      	adds	r3, #7
 800b2dc:	f023 0307 	bic.w	r3, r3, #7
 800b2e0:	f103 0208 	add.w	r2, r3, #8
 800b2e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2e8:	f8d4 b000 	ldr.w	fp, [r4]
 800b2ec:	f8c8 2000 	str.w	r2, [r8]
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b2f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b2fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b300:	9307      	str	r3, [sp, #28]
 800b302:	f8cd 8018 	str.w	r8, [sp, #24]
 800b306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b30a:	4ba7      	ldr	r3, [pc, #668]	; (800b5a8 <_printf_float+0x2f8>)
 800b30c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b310:	f7f5 fc14 	bl	8000b3c <__aeabi_dcmpun>
 800b314:	bb70      	cbnz	r0, 800b374 <_printf_float+0xc4>
 800b316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b31a:	4ba3      	ldr	r3, [pc, #652]	; (800b5a8 <_printf_float+0x2f8>)
 800b31c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b320:	f7f5 fbee 	bl	8000b00 <__aeabi_dcmple>
 800b324:	bb30      	cbnz	r0, 800b374 <_printf_float+0xc4>
 800b326:	2200      	movs	r2, #0
 800b328:	2300      	movs	r3, #0
 800b32a:	4640      	mov	r0, r8
 800b32c:	4649      	mov	r1, r9
 800b32e:	f7f5 fbdd 	bl	8000aec <__aeabi_dcmplt>
 800b332:	b110      	cbz	r0, 800b33a <_printf_float+0x8a>
 800b334:	232d      	movs	r3, #45	; 0x2d
 800b336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b33a:	4a9c      	ldr	r2, [pc, #624]	; (800b5ac <_printf_float+0x2fc>)
 800b33c:	4b9c      	ldr	r3, [pc, #624]	; (800b5b0 <_printf_float+0x300>)
 800b33e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b342:	bf8c      	ite	hi
 800b344:	4690      	movhi	r8, r2
 800b346:	4698      	movls	r8, r3
 800b348:	2303      	movs	r3, #3
 800b34a:	f02b 0204 	bic.w	r2, fp, #4
 800b34e:	6123      	str	r3, [r4, #16]
 800b350:	6022      	str	r2, [r4, #0]
 800b352:	f04f 0900 	mov.w	r9, #0
 800b356:	9700      	str	r7, [sp, #0]
 800b358:	4633      	mov	r3, r6
 800b35a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b35c:	4621      	mov	r1, r4
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 f9e6 	bl	800b730 <_printf_common>
 800b364:	3001      	adds	r0, #1
 800b366:	f040 808d 	bne.w	800b484 <_printf_float+0x1d4>
 800b36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b36e:	b00d      	add	sp, #52	; 0x34
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	4642      	mov	r2, r8
 800b376:	464b      	mov	r3, r9
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f7f5 fbde 	bl	8000b3c <__aeabi_dcmpun>
 800b380:	b110      	cbz	r0, 800b388 <_printf_float+0xd8>
 800b382:	4a8c      	ldr	r2, [pc, #560]	; (800b5b4 <_printf_float+0x304>)
 800b384:	4b8c      	ldr	r3, [pc, #560]	; (800b5b8 <_printf_float+0x308>)
 800b386:	e7da      	b.n	800b33e <_printf_float+0x8e>
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	1c4b      	adds	r3, r1, #1
 800b38c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b390:	a80a      	add	r0, sp, #40	; 0x28
 800b392:	d13e      	bne.n	800b412 <_printf_float+0x162>
 800b394:	2306      	movs	r3, #6
 800b396:	6063      	str	r3, [r4, #4]
 800b398:	2300      	movs	r3, #0
 800b39a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b39e:	ab09      	add	r3, sp, #36	; 0x24
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	ec49 8b10 	vmov	d0, r8, r9
 800b3a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b3aa:	6022      	str	r2, [r4, #0]
 800b3ac:	f8cd a004 	str.w	sl, [sp, #4]
 800b3b0:	6861      	ldr	r1, [r4, #4]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7ff fee8 	bl	800b188 <__cvt>
 800b3b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b3bc:	2b47      	cmp	r3, #71	; 0x47
 800b3be:	4680      	mov	r8, r0
 800b3c0:	d109      	bne.n	800b3d6 <_printf_float+0x126>
 800b3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c4:	1cd8      	adds	r0, r3, #3
 800b3c6:	db02      	blt.n	800b3ce <_printf_float+0x11e>
 800b3c8:	6862      	ldr	r2, [r4, #4]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	dd47      	ble.n	800b45e <_printf_float+0x1ae>
 800b3ce:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3d2:	fa5f fa8a 	uxtb.w	sl, sl
 800b3d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b3da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3dc:	d824      	bhi.n	800b428 <_printf_float+0x178>
 800b3de:	3901      	subs	r1, #1
 800b3e0:	4652      	mov	r2, sl
 800b3e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3e6:	9109      	str	r1, [sp, #36]	; 0x24
 800b3e8:	f7ff ff2f 	bl	800b24a <__exponent>
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ee:	1813      	adds	r3, r2, r0
 800b3f0:	2a01      	cmp	r2, #1
 800b3f2:	4681      	mov	r9, r0
 800b3f4:	6123      	str	r3, [r4, #16]
 800b3f6:	dc02      	bgt.n	800b3fe <_printf_float+0x14e>
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	07d1      	lsls	r1, r2, #31
 800b3fc:	d501      	bpl.n	800b402 <_printf_float+0x152>
 800b3fe:	3301      	adds	r3, #1
 800b400:	6123      	str	r3, [r4, #16]
 800b402:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0a5      	beq.n	800b356 <_printf_float+0xa6>
 800b40a:	232d      	movs	r3, #45	; 0x2d
 800b40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b410:	e7a1      	b.n	800b356 <_printf_float+0xa6>
 800b412:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b416:	f000 8177 	beq.w	800b708 <_printf_float+0x458>
 800b41a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b41e:	d1bb      	bne.n	800b398 <_printf_float+0xe8>
 800b420:	2900      	cmp	r1, #0
 800b422:	d1b9      	bne.n	800b398 <_printf_float+0xe8>
 800b424:	2301      	movs	r3, #1
 800b426:	e7b6      	b.n	800b396 <_printf_float+0xe6>
 800b428:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b42c:	d119      	bne.n	800b462 <_printf_float+0x1b2>
 800b42e:	2900      	cmp	r1, #0
 800b430:	6863      	ldr	r3, [r4, #4]
 800b432:	dd0c      	ble.n	800b44e <_printf_float+0x19e>
 800b434:	6121      	str	r1, [r4, #16]
 800b436:	b913      	cbnz	r3, 800b43e <_printf_float+0x18e>
 800b438:	6822      	ldr	r2, [r4, #0]
 800b43a:	07d2      	lsls	r2, r2, #31
 800b43c:	d502      	bpl.n	800b444 <_printf_float+0x194>
 800b43e:	3301      	adds	r3, #1
 800b440:	440b      	add	r3, r1
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b446:	65a3      	str	r3, [r4, #88]	; 0x58
 800b448:	f04f 0900 	mov.w	r9, #0
 800b44c:	e7d9      	b.n	800b402 <_printf_float+0x152>
 800b44e:	b913      	cbnz	r3, 800b456 <_printf_float+0x1a6>
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	07d0      	lsls	r0, r2, #31
 800b454:	d501      	bpl.n	800b45a <_printf_float+0x1aa>
 800b456:	3302      	adds	r3, #2
 800b458:	e7f3      	b.n	800b442 <_printf_float+0x192>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e7f1      	b.n	800b442 <_printf_float+0x192>
 800b45e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b462:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b466:	4293      	cmp	r3, r2
 800b468:	db05      	blt.n	800b476 <_printf_float+0x1c6>
 800b46a:	6822      	ldr	r2, [r4, #0]
 800b46c:	6123      	str	r3, [r4, #16]
 800b46e:	07d1      	lsls	r1, r2, #31
 800b470:	d5e8      	bpl.n	800b444 <_printf_float+0x194>
 800b472:	3301      	adds	r3, #1
 800b474:	e7e5      	b.n	800b442 <_printf_float+0x192>
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfd4      	ite	le
 800b47a:	f1c3 0302 	rsble	r3, r3, #2
 800b47e:	2301      	movgt	r3, #1
 800b480:	4413      	add	r3, r2
 800b482:	e7de      	b.n	800b442 <_printf_float+0x192>
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	055a      	lsls	r2, r3, #21
 800b488:	d407      	bmi.n	800b49a <_printf_float+0x1ea>
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	4642      	mov	r2, r8
 800b48e:	4631      	mov	r1, r6
 800b490:	4628      	mov	r0, r5
 800b492:	47b8      	blx	r7
 800b494:	3001      	adds	r0, #1
 800b496:	d12b      	bne.n	800b4f0 <_printf_float+0x240>
 800b498:	e767      	b.n	800b36a <_printf_float+0xba>
 800b49a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b49e:	f240 80dc 	bls.w	800b65a <_printf_float+0x3aa>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4aa:	f7f5 fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d033      	beq.n	800b51a <_printf_float+0x26a>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4a41      	ldr	r2, [pc, #260]	; (800b5bc <_printf_float+0x30c>)
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f af54 	beq.w	800b36a <_printf_float+0xba>
 800b4c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	db02      	blt.n	800b4d0 <_printf_float+0x220>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	07d8      	lsls	r0, r3, #31
 800b4ce:	d50f      	bpl.n	800b4f0 <_printf_float+0x240>
 800b4d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	f43f af45 	beq.w	800b36a <_printf_float+0xba>
 800b4e0:	f04f 0800 	mov.w	r8, #0
 800b4e4:	f104 091a 	add.w	r9, r4, #26
 800b4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	4543      	cmp	r3, r8
 800b4ee:	dc09      	bgt.n	800b504 <_printf_float+0x254>
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	079b      	lsls	r3, r3, #30
 800b4f4:	f100 8103 	bmi.w	800b6fe <_printf_float+0x44e>
 800b4f8:	68e0      	ldr	r0, [r4, #12]
 800b4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fc:	4298      	cmp	r0, r3
 800b4fe:	bfb8      	it	lt
 800b500:	4618      	movlt	r0, r3
 800b502:	e734      	b.n	800b36e <_printf_float+0xbe>
 800b504:	2301      	movs	r3, #1
 800b506:	464a      	mov	r2, r9
 800b508:	4631      	mov	r1, r6
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b8      	blx	r7
 800b50e:	3001      	adds	r0, #1
 800b510:	f43f af2b 	beq.w	800b36a <_printf_float+0xba>
 800b514:	f108 0801 	add.w	r8, r8, #1
 800b518:	e7e6      	b.n	800b4e8 <_printf_float+0x238>
 800b51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	dc2b      	bgt.n	800b578 <_printf_float+0x2c8>
 800b520:	2301      	movs	r3, #1
 800b522:	4a26      	ldr	r2, [pc, #152]	; (800b5bc <_printf_float+0x30c>)
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f af1d 	beq.w	800b36a <_printf_float+0xba>
 800b530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b532:	b923      	cbnz	r3, 800b53e <_printf_float+0x28e>
 800b534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b536:	b913      	cbnz	r3, 800b53e <_printf_float+0x28e>
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	d5d8      	bpl.n	800b4f0 <_printf_float+0x240>
 800b53e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b542:	4631      	mov	r1, r6
 800b544:	4628      	mov	r0, r5
 800b546:	47b8      	blx	r7
 800b548:	3001      	adds	r0, #1
 800b54a:	f43f af0e 	beq.w	800b36a <_printf_float+0xba>
 800b54e:	f04f 0900 	mov.w	r9, #0
 800b552:	f104 0a1a 	add.w	sl, r4, #26
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	425b      	negs	r3, r3
 800b55a:	454b      	cmp	r3, r9
 800b55c:	dc01      	bgt.n	800b562 <_printf_float+0x2b2>
 800b55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b560:	e794      	b.n	800b48c <_printf_float+0x1dc>
 800b562:	2301      	movs	r3, #1
 800b564:	4652      	mov	r2, sl
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f aefc 	beq.w	800b36a <_printf_float+0xba>
 800b572:	f109 0901 	add.w	r9, r9, #1
 800b576:	e7ee      	b.n	800b556 <_printf_float+0x2a6>
 800b578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b57a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b57c:	429a      	cmp	r2, r3
 800b57e:	bfa8      	it	ge
 800b580:	461a      	movge	r2, r3
 800b582:	2a00      	cmp	r2, #0
 800b584:	4691      	mov	r9, r2
 800b586:	dd07      	ble.n	800b598 <_printf_float+0x2e8>
 800b588:	4613      	mov	r3, r2
 800b58a:	4631      	mov	r1, r6
 800b58c:	4642      	mov	r2, r8
 800b58e:	4628      	mov	r0, r5
 800b590:	47b8      	blx	r7
 800b592:	3001      	adds	r0, #1
 800b594:	f43f aee9 	beq.w	800b36a <_printf_float+0xba>
 800b598:	f104 031a 	add.w	r3, r4, #26
 800b59c:	f04f 0b00 	mov.w	fp, #0
 800b5a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5a4:	9306      	str	r3, [sp, #24]
 800b5a6:	e015      	b.n	800b5d4 <_printf_float+0x324>
 800b5a8:	7fefffff 	.word	0x7fefffff
 800b5ac:	0800d67f 	.word	0x0800d67f
 800b5b0:	0800d67b 	.word	0x0800d67b
 800b5b4:	0800d687 	.word	0x0800d687
 800b5b8:	0800d683 	.word	0x0800d683
 800b5bc:	0800d68b 	.word	0x0800d68b
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	9a06      	ldr	r2, [sp, #24]
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	47b8      	blx	r7
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	f43f aecd 	beq.w	800b36a <_printf_float+0xba>
 800b5d0:	f10b 0b01 	add.w	fp, fp, #1
 800b5d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b5d8:	ebaa 0309 	sub.w	r3, sl, r9
 800b5dc:	455b      	cmp	r3, fp
 800b5de:	dcef      	bgt.n	800b5c0 <_printf_float+0x310>
 800b5e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	44d0      	add	r8, sl
 800b5e8:	db15      	blt.n	800b616 <_printf_float+0x366>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	07da      	lsls	r2, r3, #31
 800b5ee:	d412      	bmi.n	800b616 <_printf_float+0x366>
 800b5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5f4:	eba3 020a 	sub.w	r2, r3, sl
 800b5f8:	eba3 0a01 	sub.w	sl, r3, r1
 800b5fc:	4592      	cmp	sl, r2
 800b5fe:	bfa8      	it	ge
 800b600:	4692      	movge	sl, r2
 800b602:	f1ba 0f00 	cmp.w	sl, #0
 800b606:	dc0e      	bgt.n	800b626 <_printf_float+0x376>
 800b608:	f04f 0800 	mov.w	r8, #0
 800b60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b610:	f104 091a 	add.w	r9, r4, #26
 800b614:	e019      	b.n	800b64a <_printf_float+0x39a>
 800b616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b61a:	4631      	mov	r1, r6
 800b61c:	4628      	mov	r0, r5
 800b61e:	47b8      	blx	r7
 800b620:	3001      	adds	r0, #1
 800b622:	d1e5      	bne.n	800b5f0 <_printf_float+0x340>
 800b624:	e6a1      	b.n	800b36a <_printf_float+0xba>
 800b626:	4653      	mov	r3, sl
 800b628:	4642      	mov	r2, r8
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	d1e9      	bne.n	800b608 <_printf_float+0x358>
 800b634:	e699      	b.n	800b36a <_printf_float+0xba>
 800b636:	2301      	movs	r3, #1
 800b638:	464a      	mov	r2, r9
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	f43f ae92 	beq.w	800b36a <_printf_float+0xba>
 800b646:	f108 0801 	add.w	r8, r8, #1
 800b64a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b64e:	1a9b      	subs	r3, r3, r2
 800b650:	eba3 030a 	sub.w	r3, r3, sl
 800b654:	4543      	cmp	r3, r8
 800b656:	dcee      	bgt.n	800b636 <_printf_float+0x386>
 800b658:	e74a      	b.n	800b4f0 <_printf_float+0x240>
 800b65a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b65c:	2a01      	cmp	r2, #1
 800b65e:	dc01      	bgt.n	800b664 <_printf_float+0x3b4>
 800b660:	07db      	lsls	r3, r3, #31
 800b662:	d53a      	bpl.n	800b6da <_printf_float+0x42a>
 800b664:	2301      	movs	r3, #1
 800b666:	4642      	mov	r2, r8
 800b668:	4631      	mov	r1, r6
 800b66a:	4628      	mov	r0, r5
 800b66c:	47b8      	blx	r7
 800b66e:	3001      	adds	r0, #1
 800b670:	f43f ae7b 	beq.w	800b36a <_printf_float+0xba>
 800b674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b678:	4631      	mov	r1, r6
 800b67a:	4628      	mov	r0, r5
 800b67c:	47b8      	blx	r7
 800b67e:	3001      	adds	r0, #1
 800b680:	f108 0801 	add.w	r8, r8, #1
 800b684:	f43f ae71 	beq.w	800b36a <_printf_float+0xba>
 800b688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b68a:	2200      	movs	r2, #0
 800b68c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b690:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b694:	2300      	movs	r3, #0
 800b696:	f7f5 fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b69a:	b9c8      	cbnz	r0, 800b6d0 <_printf_float+0x420>
 800b69c:	4653      	mov	r3, sl
 800b69e:	4642      	mov	r2, r8
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b8      	blx	r7
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d10e      	bne.n	800b6c8 <_printf_float+0x418>
 800b6aa:	e65e      	b.n	800b36a <_printf_float+0xba>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4652      	mov	r2, sl
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f43f ae57 	beq.w	800b36a <_printf_float+0xba>
 800b6bc:	f108 0801 	add.w	r8, r8, #1
 800b6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	4543      	cmp	r3, r8
 800b6c6:	dcf1      	bgt.n	800b6ac <_printf_float+0x3fc>
 800b6c8:	464b      	mov	r3, r9
 800b6ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6ce:	e6de      	b.n	800b48e <_printf_float+0x1de>
 800b6d0:	f04f 0800 	mov.w	r8, #0
 800b6d4:	f104 0a1a 	add.w	sl, r4, #26
 800b6d8:	e7f2      	b.n	800b6c0 <_printf_float+0x410>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e7df      	b.n	800b69e <_printf_float+0x3ee>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	464a      	mov	r2, r9
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	f43f ae3e 	beq.w	800b36a <_printf_float+0xba>
 800b6ee:	f108 0801 	add.w	r8, r8, #1
 800b6f2:	68e3      	ldr	r3, [r4, #12]
 800b6f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	4543      	cmp	r3, r8
 800b6fa:	dcf0      	bgt.n	800b6de <_printf_float+0x42e>
 800b6fc:	e6fc      	b.n	800b4f8 <_printf_float+0x248>
 800b6fe:	f04f 0800 	mov.w	r8, #0
 800b702:	f104 0919 	add.w	r9, r4, #25
 800b706:	e7f4      	b.n	800b6f2 <_printf_float+0x442>
 800b708:	2900      	cmp	r1, #0
 800b70a:	f43f ae8b 	beq.w	800b424 <_printf_float+0x174>
 800b70e:	2300      	movs	r3, #0
 800b710:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b714:	ab09      	add	r3, sp, #36	; 0x24
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	ec49 8b10 	vmov	d0, r8, r9
 800b71c:	6022      	str	r2, [r4, #0]
 800b71e:	f8cd a004 	str.w	sl, [sp, #4]
 800b722:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b726:	4628      	mov	r0, r5
 800b728:	f7ff fd2e 	bl	800b188 <__cvt>
 800b72c:	4680      	mov	r8, r0
 800b72e:	e648      	b.n	800b3c2 <_printf_float+0x112>

0800b730 <_printf_common>:
 800b730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b734:	4691      	mov	r9, r2
 800b736:	461f      	mov	r7, r3
 800b738:	688a      	ldr	r2, [r1, #8]
 800b73a:	690b      	ldr	r3, [r1, #16]
 800b73c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b740:	4293      	cmp	r3, r2
 800b742:	bfb8      	it	lt
 800b744:	4613      	movlt	r3, r2
 800b746:	f8c9 3000 	str.w	r3, [r9]
 800b74a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b74e:	4606      	mov	r6, r0
 800b750:	460c      	mov	r4, r1
 800b752:	b112      	cbz	r2, 800b75a <_printf_common+0x2a>
 800b754:	3301      	adds	r3, #1
 800b756:	f8c9 3000 	str.w	r3, [r9]
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	0699      	lsls	r1, r3, #26
 800b75e:	bf42      	ittt	mi
 800b760:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b764:	3302      	addmi	r3, #2
 800b766:	f8c9 3000 	strmi.w	r3, [r9]
 800b76a:	6825      	ldr	r5, [r4, #0]
 800b76c:	f015 0506 	ands.w	r5, r5, #6
 800b770:	d107      	bne.n	800b782 <_printf_common+0x52>
 800b772:	f104 0a19 	add.w	sl, r4, #25
 800b776:	68e3      	ldr	r3, [r4, #12]
 800b778:	f8d9 2000 	ldr.w	r2, [r9]
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	42ab      	cmp	r3, r5
 800b780:	dc28      	bgt.n	800b7d4 <_printf_common+0xa4>
 800b782:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	3300      	adds	r3, #0
 800b78a:	bf18      	it	ne
 800b78c:	2301      	movne	r3, #1
 800b78e:	0692      	lsls	r2, r2, #26
 800b790:	d42d      	bmi.n	800b7ee <_printf_common+0xbe>
 800b792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b796:	4639      	mov	r1, r7
 800b798:	4630      	mov	r0, r6
 800b79a:	47c0      	blx	r8
 800b79c:	3001      	adds	r0, #1
 800b79e:	d020      	beq.n	800b7e2 <_printf_common+0xb2>
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	68e5      	ldr	r5, [r4, #12]
 800b7a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b7a8:	f003 0306 	and.w	r3, r3, #6
 800b7ac:	2b04      	cmp	r3, #4
 800b7ae:	bf08      	it	eq
 800b7b0:	1aad      	subeq	r5, r5, r2
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	6922      	ldr	r2, [r4, #16]
 800b7b6:	bf0c      	ite	eq
 800b7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7bc:	2500      	movne	r5, #0
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bfc4      	itt	gt
 800b7c2:	1a9b      	subgt	r3, r3, r2
 800b7c4:	18ed      	addgt	r5, r5, r3
 800b7c6:	f04f 0900 	mov.w	r9, #0
 800b7ca:	341a      	adds	r4, #26
 800b7cc:	454d      	cmp	r5, r9
 800b7ce:	d11a      	bne.n	800b806 <_printf_common+0xd6>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e008      	b.n	800b7e6 <_printf_common+0xb6>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	4652      	mov	r2, sl
 800b7d8:	4639      	mov	r1, r7
 800b7da:	4630      	mov	r0, r6
 800b7dc:	47c0      	blx	r8
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d103      	bne.n	800b7ea <_printf_common+0xba>
 800b7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	3501      	adds	r5, #1
 800b7ec:	e7c3      	b.n	800b776 <_printf_common+0x46>
 800b7ee:	18e1      	adds	r1, r4, r3
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	2030      	movs	r0, #48	; 0x30
 800b7f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7f8:	4422      	add	r2, r4
 800b7fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b802:	3302      	adds	r3, #2
 800b804:	e7c5      	b.n	800b792 <_printf_common+0x62>
 800b806:	2301      	movs	r3, #1
 800b808:	4622      	mov	r2, r4
 800b80a:	4639      	mov	r1, r7
 800b80c:	4630      	mov	r0, r6
 800b80e:	47c0      	blx	r8
 800b810:	3001      	adds	r0, #1
 800b812:	d0e6      	beq.n	800b7e2 <_printf_common+0xb2>
 800b814:	f109 0901 	add.w	r9, r9, #1
 800b818:	e7d8      	b.n	800b7cc <_printf_common+0x9c>
	...

0800b81c <_printf_i>:
 800b81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b820:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b824:	460c      	mov	r4, r1
 800b826:	7e09      	ldrb	r1, [r1, #24]
 800b828:	b085      	sub	sp, #20
 800b82a:	296e      	cmp	r1, #110	; 0x6e
 800b82c:	4617      	mov	r7, r2
 800b82e:	4606      	mov	r6, r0
 800b830:	4698      	mov	r8, r3
 800b832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b834:	f000 80b3 	beq.w	800b99e <_printf_i+0x182>
 800b838:	d822      	bhi.n	800b880 <_printf_i+0x64>
 800b83a:	2963      	cmp	r1, #99	; 0x63
 800b83c:	d036      	beq.n	800b8ac <_printf_i+0x90>
 800b83e:	d80a      	bhi.n	800b856 <_printf_i+0x3a>
 800b840:	2900      	cmp	r1, #0
 800b842:	f000 80b9 	beq.w	800b9b8 <_printf_i+0x19c>
 800b846:	2958      	cmp	r1, #88	; 0x58
 800b848:	f000 8083 	beq.w	800b952 <_printf_i+0x136>
 800b84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b850:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b854:	e032      	b.n	800b8bc <_printf_i+0xa0>
 800b856:	2964      	cmp	r1, #100	; 0x64
 800b858:	d001      	beq.n	800b85e <_printf_i+0x42>
 800b85a:	2969      	cmp	r1, #105	; 0x69
 800b85c:	d1f6      	bne.n	800b84c <_printf_i+0x30>
 800b85e:	6820      	ldr	r0, [r4, #0]
 800b860:	6813      	ldr	r3, [r2, #0]
 800b862:	0605      	lsls	r5, r0, #24
 800b864:	f103 0104 	add.w	r1, r3, #4
 800b868:	d52a      	bpl.n	800b8c0 <_printf_i+0xa4>
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6011      	str	r1, [r2, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	da03      	bge.n	800b87a <_printf_i+0x5e>
 800b872:	222d      	movs	r2, #45	; 0x2d
 800b874:	425b      	negs	r3, r3
 800b876:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b87a:	486f      	ldr	r0, [pc, #444]	; (800ba38 <_printf_i+0x21c>)
 800b87c:	220a      	movs	r2, #10
 800b87e:	e039      	b.n	800b8f4 <_printf_i+0xd8>
 800b880:	2973      	cmp	r1, #115	; 0x73
 800b882:	f000 809d 	beq.w	800b9c0 <_printf_i+0x1a4>
 800b886:	d808      	bhi.n	800b89a <_printf_i+0x7e>
 800b888:	296f      	cmp	r1, #111	; 0x6f
 800b88a:	d020      	beq.n	800b8ce <_printf_i+0xb2>
 800b88c:	2970      	cmp	r1, #112	; 0x70
 800b88e:	d1dd      	bne.n	800b84c <_printf_i+0x30>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	f043 0320 	orr.w	r3, r3, #32
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	e003      	b.n	800b8a2 <_printf_i+0x86>
 800b89a:	2975      	cmp	r1, #117	; 0x75
 800b89c:	d017      	beq.n	800b8ce <_printf_i+0xb2>
 800b89e:	2978      	cmp	r1, #120	; 0x78
 800b8a0:	d1d4      	bne.n	800b84c <_printf_i+0x30>
 800b8a2:	2378      	movs	r3, #120	; 0x78
 800b8a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8a8:	4864      	ldr	r0, [pc, #400]	; (800ba3c <_printf_i+0x220>)
 800b8aa:	e055      	b.n	800b958 <_printf_i+0x13c>
 800b8ac:	6813      	ldr	r3, [r2, #0]
 800b8ae:	1d19      	adds	r1, r3, #4
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6011      	str	r1, [r2, #0]
 800b8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e08c      	b.n	800b9da <_printf_i+0x1be>
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6011      	str	r1, [r2, #0]
 800b8c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8c8:	bf18      	it	ne
 800b8ca:	b21b      	sxthne	r3, r3
 800b8cc:	e7cf      	b.n	800b86e <_printf_i+0x52>
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	6825      	ldr	r5, [r4, #0]
 800b8d2:	1d18      	adds	r0, r3, #4
 800b8d4:	6010      	str	r0, [r2, #0]
 800b8d6:	0628      	lsls	r0, r5, #24
 800b8d8:	d501      	bpl.n	800b8de <_printf_i+0xc2>
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	e002      	b.n	800b8e4 <_printf_i+0xc8>
 800b8de:	0668      	lsls	r0, r5, #25
 800b8e0:	d5fb      	bpl.n	800b8da <_printf_i+0xbe>
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	4854      	ldr	r0, [pc, #336]	; (800ba38 <_printf_i+0x21c>)
 800b8e6:	296f      	cmp	r1, #111	; 0x6f
 800b8e8:	bf14      	ite	ne
 800b8ea:	220a      	movne	r2, #10
 800b8ec:	2208      	moveq	r2, #8
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8f4:	6865      	ldr	r5, [r4, #4]
 800b8f6:	60a5      	str	r5, [r4, #8]
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	f2c0 8095 	blt.w	800ba28 <_printf_i+0x20c>
 800b8fe:	6821      	ldr	r1, [r4, #0]
 800b900:	f021 0104 	bic.w	r1, r1, #4
 800b904:	6021      	str	r1, [r4, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d13d      	bne.n	800b986 <_printf_i+0x16a>
 800b90a:	2d00      	cmp	r5, #0
 800b90c:	f040 808e 	bne.w	800ba2c <_printf_i+0x210>
 800b910:	4665      	mov	r5, ip
 800b912:	2a08      	cmp	r2, #8
 800b914:	d10b      	bne.n	800b92e <_printf_i+0x112>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	07db      	lsls	r3, r3, #31
 800b91a:	d508      	bpl.n	800b92e <_printf_i+0x112>
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	6862      	ldr	r2, [r4, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	bfde      	ittt	le
 800b924:	2330      	movle	r3, #48	; 0x30
 800b926:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b92a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b92e:	ebac 0305 	sub.w	r3, ip, r5
 800b932:	6123      	str	r3, [r4, #16]
 800b934:	f8cd 8000 	str.w	r8, [sp]
 800b938:	463b      	mov	r3, r7
 800b93a:	aa03      	add	r2, sp, #12
 800b93c:	4621      	mov	r1, r4
 800b93e:	4630      	mov	r0, r6
 800b940:	f7ff fef6 	bl	800b730 <_printf_common>
 800b944:	3001      	adds	r0, #1
 800b946:	d14d      	bne.n	800b9e4 <_printf_i+0x1c8>
 800b948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b94c:	b005      	add	sp, #20
 800b94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b952:	4839      	ldr	r0, [pc, #228]	; (800ba38 <_printf_i+0x21c>)
 800b954:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b958:	6813      	ldr	r3, [r2, #0]
 800b95a:	6821      	ldr	r1, [r4, #0]
 800b95c:	1d1d      	adds	r5, r3, #4
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6015      	str	r5, [r2, #0]
 800b962:	060a      	lsls	r2, r1, #24
 800b964:	d50b      	bpl.n	800b97e <_printf_i+0x162>
 800b966:	07ca      	lsls	r2, r1, #31
 800b968:	bf44      	itt	mi
 800b96a:	f041 0120 	orrmi.w	r1, r1, #32
 800b96e:	6021      	strmi	r1, [r4, #0]
 800b970:	b91b      	cbnz	r3, 800b97a <_printf_i+0x15e>
 800b972:	6822      	ldr	r2, [r4, #0]
 800b974:	f022 0220 	bic.w	r2, r2, #32
 800b978:	6022      	str	r2, [r4, #0]
 800b97a:	2210      	movs	r2, #16
 800b97c:	e7b7      	b.n	800b8ee <_printf_i+0xd2>
 800b97e:	064d      	lsls	r5, r1, #25
 800b980:	bf48      	it	mi
 800b982:	b29b      	uxthmi	r3, r3
 800b984:	e7ef      	b.n	800b966 <_printf_i+0x14a>
 800b986:	4665      	mov	r5, ip
 800b988:	fbb3 f1f2 	udiv	r1, r3, r2
 800b98c:	fb02 3311 	mls	r3, r2, r1, r3
 800b990:	5cc3      	ldrb	r3, [r0, r3]
 800b992:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b996:	460b      	mov	r3, r1
 800b998:	2900      	cmp	r1, #0
 800b99a:	d1f5      	bne.n	800b988 <_printf_i+0x16c>
 800b99c:	e7b9      	b.n	800b912 <_printf_i+0xf6>
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	6825      	ldr	r5, [r4, #0]
 800b9a2:	6961      	ldr	r1, [r4, #20]
 800b9a4:	1d18      	adds	r0, r3, #4
 800b9a6:	6010      	str	r0, [r2, #0]
 800b9a8:	0628      	lsls	r0, r5, #24
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	d501      	bpl.n	800b9b2 <_printf_i+0x196>
 800b9ae:	6019      	str	r1, [r3, #0]
 800b9b0:	e002      	b.n	800b9b8 <_printf_i+0x19c>
 800b9b2:	066a      	lsls	r2, r5, #25
 800b9b4:	d5fb      	bpl.n	800b9ae <_printf_i+0x192>
 800b9b6:	8019      	strh	r1, [r3, #0]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	6123      	str	r3, [r4, #16]
 800b9bc:	4665      	mov	r5, ip
 800b9be:	e7b9      	b.n	800b934 <_printf_i+0x118>
 800b9c0:	6813      	ldr	r3, [r2, #0]
 800b9c2:	1d19      	adds	r1, r3, #4
 800b9c4:	6011      	str	r1, [r2, #0]
 800b9c6:	681d      	ldr	r5, [r3, #0]
 800b9c8:	6862      	ldr	r2, [r4, #4]
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	f7f4 fc07 	bl	80001e0 <memchr>
 800b9d2:	b108      	cbz	r0, 800b9d8 <_printf_i+0x1bc>
 800b9d4:	1b40      	subs	r0, r0, r5
 800b9d6:	6060      	str	r0, [r4, #4]
 800b9d8:	6863      	ldr	r3, [r4, #4]
 800b9da:	6123      	str	r3, [r4, #16]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9e2:	e7a7      	b.n	800b934 <_printf_i+0x118>
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	462a      	mov	r2, r5
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	47c0      	blx	r8
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d0aa      	beq.n	800b948 <_printf_i+0x12c>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	079b      	lsls	r3, r3, #30
 800b9f6:	d413      	bmi.n	800ba20 <_printf_i+0x204>
 800b9f8:	68e0      	ldr	r0, [r4, #12]
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	4298      	cmp	r0, r3
 800b9fe:	bfb8      	it	lt
 800ba00:	4618      	movlt	r0, r3
 800ba02:	e7a3      	b.n	800b94c <_printf_i+0x130>
 800ba04:	2301      	movs	r3, #1
 800ba06:	464a      	mov	r2, r9
 800ba08:	4639      	mov	r1, r7
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	47c0      	blx	r8
 800ba0e:	3001      	adds	r0, #1
 800ba10:	d09a      	beq.n	800b948 <_printf_i+0x12c>
 800ba12:	3501      	adds	r5, #1
 800ba14:	68e3      	ldr	r3, [r4, #12]
 800ba16:	9a03      	ldr	r2, [sp, #12]
 800ba18:	1a9b      	subs	r3, r3, r2
 800ba1a:	42ab      	cmp	r3, r5
 800ba1c:	dcf2      	bgt.n	800ba04 <_printf_i+0x1e8>
 800ba1e:	e7eb      	b.n	800b9f8 <_printf_i+0x1dc>
 800ba20:	2500      	movs	r5, #0
 800ba22:	f104 0919 	add.w	r9, r4, #25
 800ba26:	e7f5      	b.n	800ba14 <_printf_i+0x1f8>
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1ac      	bne.n	800b986 <_printf_i+0x16a>
 800ba2c:	7803      	ldrb	r3, [r0, #0]
 800ba2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba36:	e76c      	b.n	800b912 <_printf_i+0xf6>
 800ba38:	0800d68d 	.word	0x0800d68d
 800ba3c:	0800d69e 	.word	0x0800d69e

0800ba40 <_raise_r>:
 800ba40:	291f      	cmp	r1, #31
 800ba42:	b538      	push	{r3, r4, r5, lr}
 800ba44:	4604      	mov	r4, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	d904      	bls.n	800ba54 <_raise_r+0x14>
 800ba4a:	2316      	movs	r3, #22
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba56:	b112      	cbz	r2, 800ba5e <_raise_r+0x1e>
 800ba58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba5c:	b94b      	cbnz	r3, 800ba72 <_raise_r+0x32>
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 f830 	bl	800bac4 <_getpid_r>
 800ba64:	462a      	mov	r2, r5
 800ba66:	4601      	mov	r1, r0
 800ba68:	4620      	mov	r0, r4
 800ba6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba6e:	f000 b817 	b.w	800baa0 <_kill_r>
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d00a      	beq.n	800ba8c <_raise_r+0x4c>
 800ba76:	1c59      	adds	r1, r3, #1
 800ba78:	d103      	bne.n	800ba82 <_raise_r+0x42>
 800ba7a:	2316      	movs	r3, #22
 800ba7c:	6003      	str	r3, [r0, #0]
 800ba7e:	2001      	movs	r0, #1
 800ba80:	e7e7      	b.n	800ba52 <_raise_r+0x12>
 800ba82:	2400      	movs	r4, #0
 800ba84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba88:	4628      	mov	r0, r5
 800ba8a:	4798      	blx	r3
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e7e0      	b.n	800ba52 <_raise_r+0x12>

0800ba90 <raise>:
 800ba90:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <raise+0xc>)
 800ba92:	4601      	mov	r1, r0
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	f7ff bfd3 	b.w	800ba40 <_raise_r>
 800ba9a:	bf00      	nop
 800ba9c:	20000034 	.word	0x20000034

0800baa0 <_kill_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4c07      	ldr	r4, [pc, #28]	; (800bac0 <_kill_r+0x20>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4605      	mov	r5, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	4611      	mov	r1, r2
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	f7fe ffdd 	bl	800aa6c <_kill>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	d102      	bne.n	800babc <_kill_r+0x1c>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	b103      	cbz	r3, 800babc <_kill_r+0x1c>
 800baba:	602b      	str	r3, [r5, #0]
 800babc:	bd38      	pop	{r3, r4, r5, pc}
 800babe:	bf00      	nop
 800bac0:	20004524 	.word	0x20004524

0800bac4 <_getpid_r>:
 800bac4:	f7fe bfca 	b.w	800aa5c <_getpid>

0800bac8 <_vsniprintf_r>:
 800bac8:	b530      	push	{r4, r5, lr}
 800baca:	1e14      	subs	r4, r2, #0
 800bacc:	4605      	mov	r5, r0
 800bace:	b09b      	sub	sp, #108	; 0x6c
 800bad0:	4618      	mov	r0, r3
 800bad2:	da05      	bge.n	800bae0 <_vsniprintf_r+0x18>
 800bad4:	238b      	movs	r3, #139	; 0x8b
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800badc:	b01b      	add	sp, #108	; 0x6c
 800bade:	bd30      	pop	{r4, r5, pc}
 800bae0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bae4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bae8:	bf14      	ite	ne
 800baea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800baee:	4623      	moveq	r3, r4
 800baf0:	9302      	str	r3, [sp, #8]
 800baf2:	9305      	str	r3, [sp, #20]
 800baf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baf8:	9100      	str	r1, [sp, #0]
 800bafa:	9104      	str	r1, [sp, #16]
 800bafc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bb00:	4602      	mov	r2, r0
 800bb02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bb04:	4669      	mov	r1, sp
 800bb06:	4628      	mov	r0, r5
 800bb08:	f001 fa6e 	bl	800cfe8 <_svfiprintf_r>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	bfbc      	itt	lt
 800bb10:	238b      	movlt	r3, #139	; 0x8b
 800bb12:	602b      	strlt	r3, [r5, #0]
 800bb14:	2c00      	cmp	r4, #0
 800bb16:	d0e1      	beq.n	800badc <_vsniprintf_r+0x14>
 800bb18:	9b00      	ldr	r3, [sp, #0]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	701a      	strb	r2, [r3, #0]
 800bb1e:	e7dd      	b.n	800badc <_vsniprintf_r+0x14>

0800bb20 <vsniprintf>:
 800bb20:	b507      	push	{r0, r1, r2, lr}
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	4613      	mov	r3, r2
 800bb26:	460a      	mov	r2, r1
 800bb28:	4601      	mov	r1, r0
 800bb2a:	4803      	ldr	r0, [pc, #12]	; (800bb38 <vsniprintf+0x18>)
 800bb2c:	6800      	ldr	r0, [r0, #0]
 800bb2e:	f7ff ffcb 	bl	800bac8 <_vsniprintf_r>
 800bb32:	b003      	add	sp, #12
 800bb34:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb38:	20000034 	.word	0x20000034

0800bb3c <__register_exitproc>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	4d2c      	ldr	r5, [pc, #176]	; (800bbf4 <__register_exitproc+0xb8>)
 800bb42:	682c      	ldr	r4, [r5, #0]
 800bb44:	4607      	mov	r7, r0
 800bb46:	460e      	mov	r6, r1
 800bb48:	4691      	mov	r9, r2
 800bb4a:	4698      	mov	r8, r3
 800bb4c:	b934      	cbnz	r4, 800bb5c <__register_exitproc+0x20>
 800bb4e:	4b2a      	ldr	r3, [pc, #168]	; (800bbf8 <__register_exitproc+0xbc>)
 800bb50:	4c2a      	ldr	r4, [pc, #168]	; (800bbfc <__register_exitproc+0xc0>)
 800bb52:	602c      	str	r4, [r5, #0]
 800bb54:	b113      	cbz	r3, 800bb5c <__register_exitproc+0x20>
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800bb5c:	6863      	ldr	r3, [r4, #4]
 800bb5e:	2b1f      	cmp	r3, #31
 800bb60:	dd3d      	ble.n	800bbde <__register_exitproc+0xa2>
 800bb62:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <__register_exitproc+0xc4>)
 800bb64:	b91b      	cbnz	r3, 800bb6e <__register_exitproc+0x32>
 800bb66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	208c      	movs	r0, #140	; 0x8c
 800bb70:	f7fd fda8 	bl	80096c4 <malloc>
 800bb74:	4604      	mov	r4, r0
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d0f5      	beq.n	800bb66 <__register_exitproc+0x2a>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	682a      	ldr	r2, [r5, #0]
 800bb7e:	6002      	str	r2, [r0, #0]
 800bb80:	6043      	str	r3, [r0, #4]
 800bb82:	6028      	str	r0, [r5, #0]
 800bb84:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800bb88:	b30f      	cbz	r7, 800bbce <__register_exitproc+0x92>
 800bb8a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800bb8e:	f7fd fd99 	bl	80096c4 <malloc>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d0e7      	beq.n	800bb66 <__register_exitproc+0x2a>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800bb9c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800bba0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800bba4:	6862      	ldr	r2, [r4, #4]
 800bba6:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4093      	lsls	r3, r2
 800bbae:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800bbb2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	2f02      	cmp	r7, #2
 800bbba:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800bbbe:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800bbc2:	bf02      	ittt	eq
 800bbc4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800bbc8:	4313      	orreq	r3, r2
 800bbca:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800bbce:	6863      	ldr	r3, [r4, #4]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	3302      	adds	r3, #2
 800bbd4:	6062      	str	r2, [r4, #4]
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800bbdc:	e7c5      	b.n	800bb6a <__register_exitproc+0x2e>
 800bbde:	2f00      	cmp	r7, #0
 800bbe0:	d0f5      	beq.n	800bbce <__register_exitproc+0x92>
 800bbe2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d1dc      	bne.n	800bba4 <__register_exitproc+0x68>
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <__register_exitproc+0xc4>)
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0ba      	beq.n	800bb66 <__register_exitproc+0x2a>
 800bbf0:	e7cb      	b.n	800bb8a <__register_exitproc+0x4e>
 800bbf2:	bf00      	nop
 800bbf4:	20004378 	.word	0x20004378
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	200042ec 	.word	0x200042ec
 800bc00:	080096c5 	.word	0x080096c5

0800bc04 <quorem>:
 800bc04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	6903      	ldr	r3, [r0, #16]
 800bc0a:	690c      	ldr	r4, [r1, #16]
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	4680      	mov	r8, r0
 800bc10:	f2c0 8082 	blt.w	800bd18 <quorem+0x114>
 800bc14:	3c01      	subs	r4, #1
 800bc16:	f101 0714 	add.w	r7, r1, #20
 800bc1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bc1e:	f100 0614 	add.w	r6, r0, #20
 800bc22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bc26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bc2a:	eb06 030c 	add.w	r3, r6, ip
 800bc2e:	3501      	adds	r5, #1
 800bc30:	eb07 090c 	add.w	r9, r7, ip
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	fbb0 f5f5 	udiv	r5, r0, r5
 800bc3a:	b395      	cbz	r5, 800bca2 <quorem+0x9e>
 800bc3c:	f04f 0a00 	mov.w	sl, #0
 800bc40:	4638      	mov	r0, r7
 800bc42:	46b6      	mov	lr, r6
 800bc44:	46d3      	mov	fp, sl
 800bc46:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc4a:	b293      	uxth	r3, r2
 800bc4c:	fb05 a303 	mla	r3, r5, r3, sl
 800bc50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	ebab 0303 	sub.w	r3, fp, r3
 800bc5a:	0c12      	lsrs	r2, r2, #16
 800bc5c:	f8de b000 	ldr.w	fp, [lr]
 800bc60:	fb05 a202 	mla	r2, r5, r2, sl
 800bc64:	fa13 f38b 	uxtah	r3, r3, fp
 800bc68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc6c:	fa1f fb82 	uxth.w	fp, r2
 800bc70:	f8de 2000 	ldr.w	r2, [lr]
 800bc74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc82:	4581      	cmp	r9, r0
 800bc84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc88:	f84e 3b04 	str.w	r3, [lr], #4
 800bc8c:	d2db      	bcs.n	800bc46 <quorem+0x42>
 800bc8e:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc92:	b933      	cbnz	r3, 800bca2 <quorem+0x9e>
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	3b04      	subs	r3, #4
 800bc98:	429e      	cmp	r6, r3
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	d330      	bcc.n	800bd00 <quorem+0xfc>
 800bc9e:	f8c8 4010 	str.w	r4, [r8, #16]
 800bca2:	4640      	mov	r0, r8
 800bca4:	f001 f818 	bl	800ccd8 <__mcmp>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	db25      	blt.n	800bcf8 <quorem+0xf4>
 800bcac:	3501      	adds	r5, #1
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f04f 0c00 	mov.w	ip, #0
 800bcb4:	f857 2b04 	ldr.w	r2, [r7], #4
 800bcb8:	f8d0 e000 	ldr.w	lr, [r0]
 800bcbc:	b293      	uxth	r3, r2
 800bcbe:	ebac 0303 	sub.w	r3, ip, r3
 800bcc2:	0c12      	lsrs	r2, r2, #16
 800bcc4:	fa13 f38e 	uxtah	r3, r3, lr
 800bcc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd6:	45b9      	cmp	r9, r7
 800bcd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcdc:	f840 3b04 	str.w	r3, [r0], #4
 800bce0:	d2e8      	bcs.n	800bcb4 <quorem+0xb0>
 800bce2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bce6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bcea:	b92a      	cbnz	r2, 800bcf8 <quorem+0xf4>
 800bcec:	3b04      	subs	r3, #4
 800bcee:	429e      	cmp	r6, r3
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	d30b      	bcc.n	800bd0c <quorem+0x108>
 800bcf4:	f8c8 4010 	str.w	r4, [r8, #16]
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	b003      	add	sp, #12
 800bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	3b04      	subs	r3, #4
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	d1ca      	bne.n	800bc9e <quorem+0x9a>
 800bd08:	3c01      	subs	r4, #1
 800bd0a:	e7c5      	b.n	800bc98 <quorem+0x94>
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	3b04      	subs	r3, #4
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	d1ef      	bne.n	800bcf4 <quorem+0xf0>
 800bd14:	3c01      	subs	r4, #1
 800bd16:	e7ea      	b.n	800bcee <quorem+0xea>
 800bd18:	2000      	movs	r0, #0
 800bd1a:	e7ee      	b.n	800bcfa <quorem+0xf6>
 800bd1c:	0000      	movs	r0, r0
	...

0800bd20 <_dtoa_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	ec57 6b10 	vmov	r6, r7, d0
 800bd28:	b097      	sub	sp, #92	; 0x5c
 800bd2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd2c:	9106      	str	r1, [sp, #24]
 800bd2e:	4604      	mov	r4, r0
 800bd30:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd32:	9312      	str	r3, [sp, #72]	; 0x48
 800bd34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd38:	e9cd 6700 	strd	r6, r7, [sp]
 800bd3c:	b93d      	cbnz	r5, 800bd4e <_dtoa_r+0x2e>
 800bd3e:	2010      	movs	r0, #16
 800bd40:	f7fd fcc0 	bl	80096c4 <malloc>
 800bd44:	6260      	str	r0, [r4, #36]	; 0x24
 800bd46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd4a:	6005      	str	r5, [r0, #0]
 800bd4c:	60c5      	str	r5, [r0, #12]
 800bd4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd50:	6819      	ldr	r1, [r3, #0]
 800bd52:	b151      	cbz	r1, 800bd6a <_dtoa_r+0x4a>
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	604a      	str	r2, [r1, #4]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	4093      	lsls	r3, r2
 800bd5c:	608b      	str	r3, [r1, #8]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f000 fdd8 	bl	800c914 <_Bfree>
 800bd64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	1e3b      	subs	r3, r7, #0
 800bd6c:	bfbb      	ittet	lt
 800bd6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd72:	9301      	strlt	r3, [sp, #4]
 800bd74:	2300      	movge	r3, #0
 800bd76:	2201      	movlt	r2, #1
 800bd78:	bfac      	ite	ge
 800bd7a:	f8c8 3000 	strge.w	r3, [r8]
 800bd7e:	f8c8 2000 	strlt.w	r2, [r8]
 800bd82:	4baf      	ldr	r3, [pc, #700]	; (800c040 <_dtoa_r+0x320>)
 800bd84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd88:	ea33 0308 	bics.w	r3, r3, r8
 800bd8c:	d114      	bne.n	800bdb8 <_dtoa_r+0x98>
 800bd8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd90:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	9b00      	ldr	r3, [sp, #0]
 800bd98:	b923      	cbnz	r3, 800bda4 <_dtoa_r+0x84>
 800bd9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f000 8542 	beq.w	800c828 <_dtoa_r+0xb08>
 800bda4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bda6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c054 <_dtoa_r+0x334>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 8544 	beq.w	800c838 <_dtoa_r+0xb18>
 800bdb0:	f10b 0303 	add.w	r3, fp, #3
 800bdb4:	f000 bd3e 	b.w	800c834 <_dtoa_r+0xb14>
 800bdb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	f7f4 fe88 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdc8:	4681      	mov	r9, r0
 800bdca:	b168      	cbz	r0, 800bde8 <_dtoa_r+0xc8>
 800bdcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdce:	2301      	movs	r3, #1
 800bdd0:	6013      	str	r3, [r2, #0]
 800bdd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8524 	beq.w	800c822 <_dtoa_r+0xb02>
 800bdda:	4b9a      	ldr	r3, [pc, #616]	; (800c044 <_dtoa_r+0x324>)
 800bddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdde:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	f000 bd28 	b.w	800c838 <_dtoa_r+0xb18>
 800bde8:	aa14      	add	r2, sp, #80	; 0x50
 800bdea:	a915      	add	r1, sp, #84	; 0x54
 800bdec:	ec47 6b10 	vmov	d0, r6, r7
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f000 ffe8 	bl	800cdc6 <__d2b>
 800bdf6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bdfa:	9004      	str	r0, [sp, #16]
 800bdfc:	2d00      	cmp	r5, #0
 800bdfe:	d07c      	beq.n	800befa <_dtoa_r+0x1da>
 800be00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800be08:	46b2      	mov	sl, r6
 800be0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800be0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800be16:	2200      	movs	r2, #0
 800be18:	4b8b      	ldr	r3, [pc, #556]	; (800c048 <_dtoa_r+0x328>)
 800be1a:	4650      	mov	r0, sl
 800be1c:	4659      	mov	r1, fp
 800be1e:	f7f4 fa3b 	bl	8000298 <__aeabi_dsub>
 800be22:	a381      	add	r3, pc, #516	; (adr r3, 800c028 <_dtoa_r+0x308>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 fbee 	bl	8000608 <__aeabi_dmul>
 800be2c:	a380      	add	r3, pc, #512	; (adr r3, 800c030 <_dtoa_r+0x310>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fa33 	bl	800029c <__adddf3>
 800be36:	4606      	mov	r6, r0
 800be38:	4628      	mov	r0, r5
 800be3a:	460f      	mov	r7, r1
 800be3c:	f7f4 fb7a 	bl	8000534 <__aeabi_i2d>
 800be40:	a37d      	add	r3, pc, #500	; (adr r3, 800c038 <_dtoa_r+0x318>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fbdf 	bl	8000608 <__aeabi_dmul>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4630      	mov	r0, r6
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 fa23 	bl	800029c <__adddf3>
 800be56:	4606      	mov	r6, r0
 800be58:	460f      	mov	r7, r1
 800be5a:	f7f4 fe85 	bl	8000b68 <__aeabi_d2iz>
 800be5e:	2200      	movs	r2, #0
 800be60:	4682      	mov	sl, r0
 800be62:	2300      	movs	r3, #0
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f7f4 fe40 	bl	8000aec <__aeabi_dcmplt>
 800be6c:	b148      	cbz	r0, 800be82 <_dtoa_r+0x162>
 800be6e:	4650      	mov	r0, sl
 800be70:	f7f4 fb60 	bl	8000534 <__aeabi_i2d>
 800be74:	4632      	mov	r2, r6
 800be76:	463b      	mov	r3, r7
 800be78:	f7f4 fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800be7c:	b908      	cbnz	r0, 800be82 <_dtoa_r+0x162>
 800be7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800be82:	f1ba 0f16 	cmp.w	sl, #22
 800be86:	d859      	bhi.n	800bf3c <_dtoa_r+0x21c>
 800be88:	4970      	ldr	r1, [pc, #448]	; (800c04c <_dtoa_r+0x32c>)
 800be8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be96:	f7f4 fe47 	bl	8000b28 <__aeabi_dcmpgt>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d050      	beq.n	800bf40 <_dtoa_r+0x220>
 800be9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bea2:	2300      	movs	r3, #0
 800bea4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bea8:	1b5d      	subs	r5, r3, r5
 800beaa:	f1b5 0801 	subs.w	r8, r5, #1
 800beae:	bf49      	itett	mi
 800beb0:	f1c5 0301 	rsbmi	r3, r5, #1
 800beb4:	2300      	movpl	r3, #0
 800beb6:	9305      	strmi	r3, [sp, #20]
 800beb8:	f04f 0800 	movmi.w	r8, #0
 800bebc:	bf58      	it	pl
 800bebe:	9305      	strpl	r3, [sp, #20]
 800bec0:	f1ba 0f00 	cmp.w	sl, #0
 800bec4:	db3e      	blt.n	800bf44 <_dtoa_r+0x224>
 800bec6:	2300      	movs	r3, #0
 800bec8:	44d0      	add	r8, sl
 800beca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bece:	9307      	str	r3, [sp, #28]
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	2b09      	cmp	r3, #9
 800bed4:	f200 8090 	bhi.w	800bff8 <_dtoa_r+0x2d8>
 800bed8:	2b05      	cmp	r3, #5
 800beda:	bfc4      	itt	gt
 800bedc:	3b04      	subgt	r3, #4
 800bede:	9306      	strgt	r3, [sp, #24]
 800bee0:	9b06      	ldr	r3, [sp, #24]
 800bee2:	f1a3 0302 	sub.w	r3, r3, #2
 800bee6:	bfcc      	ite	gt
 800bee8:	2500      	movgt	r5, #0
 800beea:	2501      	movle	r5, #1
 800beec:	2b03      	cmp	r3, #3
 800beee:	f200 808f 	bhi.w	800c010 <_dtoa_r+0x2f0>
 800bef2:	e8df f003 	tbb	[pc, r3]
 800bef6:	7f7d      	.short	0x7f7d
 800bef8:	7131      	.short	0x7131
 800befa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800befe:	441d      	add	r5, r3
 800bf00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bf04:	2820      	cmp	r0, #32
 800bf06:	dd13      	ble.n	800bf30 <_dtoa_r+0x210>
 800bf08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bf0c:	9b00      	ldr	r3, [sp, #0]
 800bf0e:	fa08 f800 	lsl.w	r8, r8, r0
 800bf12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bf16:	fa23 f000 	lsr.w	r0, r3, r0
 800bf1a:	ea48 0000 	orr.w	r0, r8, r0
 800bf1e:	f7f4 faf9 	bl	8000514 <__aeabi_ui2d>
 800bf22:	2301      	movs	r3, #1
 800bf24:	4682      	mov	sl, r0
 800bf26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bf2a:	3d01      	subs	r5, #1
 800bf2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf2e:	e772      	b.n	800be16 <_dtoa_r+0xf6>
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	f1c0 0020 	rsb	r0, r0, #32
 800bf36:	fa03 f000 	lsl.w	r0, r3, r0
 800bf3a:	e7f0      	b.n	800bf1e <_dtoa_r+0x1fe>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e7b1      	b.n	800bea4 <_dtoa_r+0x184>
 800bf40:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf42:	e7b0      	b.n	800bea6 <_dtoa_r+0x186>
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	eba3 030a 	sub.w	r3, r3, sl
 800bf4a:	9305      	str	r3, [sp, #20]
 800bf4c:	f1ca 0300 	rsb	r3, sl, #0
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	2300      	movs	r3, #0
 800bf54:	930e      	str	r3, [sp, #56]	; 0x38
 800bf56:	e7bb      	b.n	800bed0 <_dtoa_r+0x1b0>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dd59      	ble.n	800c016 <_dtoa_r+0x2f6>
 800bf62:	9302      	str	r3, [sp, #8]
 800bf64:	4699      	mov	r9, r3
 800bf66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf68:	2200      	movs	r2, #0
 800bf6a:	6072      	str	r2, [r6, #4]
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	f102 0014 	add.w	r0, r2, #20
 800bf72:	4298      	cmp	r0, r3
 800bf74:	6871      	ldr	r1, [r6, #4]
 800bf76:	d953      	bls.n	800c020 <_dtoa_r+0x300>
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fc97 	bl	800c8ac <_Balloc>
 800bf7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf80:	6030      	str	r0, [r6, #0]
 800bf82:	f1b9 0f0e 	cmp.w	r9, #14
 800bf86:	f8d3 b000 	ldr.w	fp, [r3]
 800bf8a:	f200 80e6 	bhi.w	800c15a <_dtoa_r+0x43a>
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	f000 80e3 	beq.w	800c15a <_dtoa_r+0x43a>
 800bf94:	ed9d 7b00 	vldr	d7, [sp]
 800bf98:	f1ba 0f00 	cmp.w	sl, #0
 800bf9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bfa0:	dd74      	ble.n	800c08c <_dtoa_r+0x36c>
 800bfa2:	4a2a      	ldr	r2, [pc, #168]	; (800c04c <_dtoa_r+0x32c>)
 800bfa4:	f00a 030f 	and.w	r3, sl, #15
 800bfa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfac:	ed93 7b00 	vldr	d7, [r3]
 800bfb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bfb4:	06f0      	lsls	r0, r6, #27
 800bfb6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bfba:	d565      	bpl.n	800c088 <_dtoa_r+0x368>
 800bfbc:	4b24      	ldr	r3, [pc, #144]	; (800c050 <_dtoa_r+0x330>)
 800bfbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfc6:	f7f4 fc49 	bl	800085c <__aeabi_ddiv>
 800bfca:	e9cd 0100 	strd	r0, r1, [sp]
 800bfce:	f006 060f 	and.w	r6, r6, #15
 800bfd2:	2503      	movs	r5, #3
 800bfd4:	4f1e      	ldr	r7, [pc, #120]	; (800c050 <_dtoa_r+0x330>)
 800bfd6:	e04c      	b.n	800c072 <_dtoa_r+0x352>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	930a      	str	r3, [sp, #40]	; 0x28
 800bfdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfde:	4453      	add	r3, sl
 800bfe0:	f103 0901 	add.w	r9, r3, #1
 800bfe4:	9302      	str	r3, [sp, #8]
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	bfb8      	it	lt
 800bfec:	2301      	movlt	r3, #1
 800bfee:	e7ba      	b.n	800bf66 <_dtoa_r+0x246>
 800bff0:	2300      	movs	r3, #0
 800bff2:	e7b2      	b.n	800bf5a <_dtoa_r+0x23a>
 800bff4:	2300      	movs	r3, #0
 800bff6:	e7f0      	b.n	800bfda <_dtoa_r+0x2ba>
 800bff8:	2501      	movs	r5, #1
 800bffa:	2300      	movs	r3, #0
 800bffc:	9306      	str	r3, [sp, #24]
 800bffe:	950a      	str	r5, [sp, #40]	; 0x28
 800c000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c004:	9302      	str	r3, [sp, #8]
 800c006:	4699      	mov	r9, r3
 800c008:	2200      	movs	r2, #0
 800c00a:	2312      	movs	r3, #18
 800c00c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c00e:	e7aa      	b.n	800bf66 <_dtoa_r+0x246>
 800c010:	2301      	movs	r3, #1
 800c012:	930a      	str	r3, [sp, #40]	; 0x28
 800c014:	e7f4      	b.n	800c000 <_dtoa_r+0x2e0>
 800c016:	2301      	movs	r3, #1
 800c018:	9302      	str	r3, [sp, #8]
 800c01a:	4699      	mov	r9, r3
 800c01c:	461a      	mov	r2, r3
 800c01e:	e7f5      	b.n	800c00c <_dtoa_r+0x2ec>
 800c020:	3101      	adds	r1, #1
 800c022:	6071      	str	r1, [r6, #4]
 800c024:	0052      	lsls	r2, r2, #1
 800c026:	e7a2      	b.n	800bf6e <_dtoa_r+0x24e>
 800c028:	636f4361 	.word	0x636f4361
 800c02c:	3fd287a7 	.word	0x3fd287a7
 800c030:	8b60c8b3 	.word	0x8b60c8b3
 800c034:	3fc68a28 	.word	0x3fc68a28
 800c038:	509f79fb 	.word	0x509f79fb
 800c03c:	3fd34413 	.word	0x3fd34413
 800c040:	7ff00000 	.word	0x7ff00000
 800c044:	0800d68c 	.word	0x0800d68c
 800c048:	3ff80000 	.word	0x3ff80000
 800c04c:	0800d6e8 	.word	0x0800d6e8
 800c050:	0800d6c0 	.word	0x0800d6c0
 800c054:	0800d6b8 	.word	0x0800d6b8
 800c058:	07f1      	lsls	r1, r6, #31
 800c05a:	d508      	bpl.n	800c06e <_dtoa_r+0x34e>
 800c05c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c064:	f7f4 fad0 	bl	8000608 <__aeabi_dmul>
 800c068:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c06c:	3501      	adds	r5, #1
 800c06e:	1076      	asrs	r6, r6, #1
 800c070:	3708      	adds	r7, #8
 800c072:	2e00      	cmp	r6, #0
 800c074:	d1f0      	bne.n	800c058 <_dtoa_r+0x338>
 800c076:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c07a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c07e:	f7f4 fbed 	bl	800085c <__aeabi_ddiv>
 800c082:	e9cd 0100 	strd	r0, r1, [sp]
 800c086:	e01a      	b.n	800c0be <_dtoa_r+0x39e>
 800c088:	2502      	movs	r5, #2
 800c08a:	e7a3      	b.n	800bfd4 <_dtoa_r+0x2b4>
 800c08c:	f000 80a0 	beq.w	800c1d0 <_dtoa_r+0x4b0>
 800c090:	f1ca 0600 	rsb	r6, sl, #0
 800c094:	4b9f      	ldr	r3, [pc, #636]	; (800c314 <_dtoa_r+0x5f4>)
 800c096:	4fa0      	ldr	r7, [pc, #640]	; (800c318 <_dtoa_r+0x5f8>)
 800c098:	f006 020f 	and.w	r2, r6, #15
 800c09c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0a8:	f7f4 faae 	bl	8000608 <__aeabi_dmul>
 800c0ac:	e9cd 0100 	strd	r0, r1, [sp]
 800c0b0:	1136      	asrs	r6, r6, #4
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	2502      	movs	r5, #2
 800c0b6:	2e00      	cmp	r6, #0
 800c0b8:	d17f      	bne.n	800c1ba <_dtoa_r+0x49a>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e1      	bne.n	800c082 <_dtoa_r+0x362>
 800c0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 8087 	beq.w	800c1d4 <_dtoa_r+0x4b4>
 800c0c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4b93      	ldr	r3, [pc, #588]	; (800c31c <_dtoa_r+0x5fc>)
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 fd0b 	bl	8000aec <__aeabi_dcmplt>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d07c      	beq.n	800c1d4 <_dtoa_r+0x4b4>
 800c0da:	f1b9 0f00 	cmp.w	r9, #0
 800c0de:	d079      	beq.n	800c1d4 <_dtoa_r+0x4b4>
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	dd35      	ble.n	800c152 <_dtoa_r+0x432>
 800c0e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c0ea:	9308      	str	r3, [sp, #32]
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	4b8b      	ldr	r3, [pc, #556]	; (800c320 <_dtoa_r+0x600>)
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7f4 fa88 	bl	8000608 <__aeabi_dmul>
 800c0f8:	e9cd 0100 	strd	r0, r1, [sp]
 800c0fc:	9f02      	ldr	r7, [sp, #8]
 800c0fe:	3501      	adds	r5, #1
 800c100:	4628      	mov	r0, r5
 800c102:	f7f4 fa17 	bl	8000534 <__aeabi_i2d>
 800c106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c10a:	f7f4 fa7d 	bl	8000608 <__aeabi_dmul>
 800c10e:	2200      	movs	r2, #0
 800c110:	4b84      	ldr	r3, [pc, #528]	; (800c324 <_dtoa_r+0x604>)
 800c112:	f7f4 f8c3 	bl	800029c <__adddf3>
 800c116:	4605      	mov	r5, r0
 800c118:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c11c:	2f00      	cmp	r7, #0
 800c11e:	d15d      	bne.n	800c1dc <_dtoa_r+0x4bc>
 800c120:	2200      	movs	r2, #0
 800c122:	4b81      	ldr	r3, [pc, #516]	; (800c328 <_dtoa_r+0x608>)
 800c124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c128:	f7f4 f8b6 	bl	8000298 <__aeabi_dsub>
 800c12c:	462a      	mov	r2, r5
 800c12e:	4633      	mov	r3, r6
 800c130:	e9cd 0100 	strd	r0, r1, [sp]
 800c134:	f7f4 fcf8 	bl	8000b28 <__aeabi_dcmpgt>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f040 8288 	bne.w	800c64e <_dtoa_r+0x92e>
 800c13e:	462a      	mov	r2, r5
 800c140:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c144:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c148:	f7f4 fcd0 	bl	8000aec <__aeabi_dcmplt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f040 827c 	bne.w	800c64a <_dtoa_r+0x92a>
 800c152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c156:	e9cd 2300 	strd	r2, r3, [sp]
 800c15a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f2c0 8150 	blt.w	800c402 <_dtoa_r+0x6e2>
 800c162:	f1ba 0f0e 	cmp.w	sl, #14
 800c166:	f300 814c 	bgt.w	800c402 <_dtoa_r+0x6e2>
 800c16a:	4b6a      	ldr	r3, [pc, #424]	; (800c314 <_dtoa_r+0x5f4>)
 800c16c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c170:	ed93 7b00 	vldr	d7, [r3]
 800c174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c176:	2b00      	cmp	r3, #0
 800c178:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c17c:	f280 80d8 	bge.w	800c330 <_dtoa_r+0x610>
 800c180:	f1b9 0f00 	cmp.w	r9, #0
 800c184:	f300 80d4 	bgt.w	800c330 <_dtoa_r+0x610>
 800c188:	f040 825e 	bne.w	800c648 <_dtoa_r+0x928>
 800c18c:	2200      	movs	r2, #0
 800c18e:	4b66      	ldr	r3, [pc, #408]	; (800c328 <_dtoa_r+0x608>)
 800c190:	ec51 0b17 	vmov	r0, r1, d7
 800c194:	f7f4 fa38 	bl	8000608 <__aeabi_dmul>
 800c198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c19c:	f7f4 fcba 	bl	8000b14 <__aeabi_dcmpge>
 800c1a0:	464f      	mov	r7, r9
 800c1a2:	464e      	mov	r6, r9
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	f040 8234 	bne.w	800c612 <_dtoa_r+0x8f2>
 800c1aa:	2331      	movs	r3, #49	; 0x31
 800c1ac:	f10b 0501 	add.w	r5, fp, #1
 800c1b0:	f88b 3000 	strb.w	r3, [fp]
 800c1b4:	f10a 0a01 	add.w	sl, sl, #1
 800c1b8:	e22f      	b.n	800c61a <_dtoa_r+0x8fa>
 800c1ba:	07f2      	lsls	r2, r6, #31
 800c1bc:	d505      	bpl.n	800c1ca <_dtoa_r+0x4aa>
 800c1be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1c2:	f7f4 fa21 	bl	8000608 <__aeabi_dmul>
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	1076      	asrs	r6, r6, #1
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	e772      	b.n	800c0b6 <_dtoa_r+0x396>
 800c1d0:	2502      	movs	r5, #2
 800c1d2:	e774      	b.n	800c0be <_dtoa_r+0x39e>
 800c1d4:	f8cd a020 	str.w	sl, [sp, #32]
 800c1d8:	464f      	mov	r7, r9
 800c1da:	e791      	b.n	800c100 <_dtoa_r+0x3e0>
 800c1dc:	4b4d      	ldr	r3, [pc, #308]	; (800c314 <_dtoa_r+0x5f4>)
 800c1de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d047      	beq.n	800c27c <_dtoa_r+0x55c>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	494e      	ldr	r1, [pc, #312]	; (800c32c <_dtoa_r+0x60c>)
 800c1f4:	f7f4 fb32 	bl	800085c <__aeabi_ddiv>
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4633      	mov	r3, r6
 800c1fc:	f7f4 f84c 	bl	8000298 <__aeabi_dsub>
 800c200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c204:	465d      	mov	r5, fp
 800c206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20a:	f7f4 fcad 	bl	8000b68 <__aeabi_d2iz>
 800c20e:	4606      	mov	r6, r0
 800c210:	f7f4 f990 	bl	8000534 <__aeabi_i2d>
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c21c:	f7f4 f83c 	bl	8000298 <__aeabi_dsub>
 800c220:	3630      	adds	r6, #48	; 0x30
 800c222:	f805 6b01 	strb.w	r6, [r5], #1
 800c226:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c22a:	e9cd 0100 	strd	r0, r1, [sp]
 800c22e:	f7f4 fc5d 	bl	8000aec <__aeabi_dcmplt>
 800c232:	2800      	cmp	r0, #0
 800c234:	d163      	bne.n	800c2fe <_dtoa_r+0x5de>
 800c236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c23a:	2000      	movs	r0, #0
 800c23c:	4937      	ldr	r1, [pc, #220]	; (800c31c <_dtoa_r+0x5fc>)
 800c23e:	f7f4 f82b 	bl	8000298 <__aeabi_dsub>
 800c242:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c246:	f7f4 fc51 	bl	8000aec <__aeabi_dcmplt>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f040 80b7 	bne.w	800c3be <_dtoa_r+0x69e>
 800c250:	eba5 030b 	sub.w	r3, r5, fp
 800c254:	429f      	cmp	r7, r3
 800c256:	f77f af7c 	ble.w	800c152 <_dtoa_r+0x432>
 800c25a:	2200      	movs	r2, #0
 800c25c:	4b30      	ldr	r3, [pc, #192]	; (800c320 <_dtoa_r+0x600>)
 800c25e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c262:	f7f4 f9d1 	bl	8000608 <__aeabi_dmul>
 800c266:	2200      	movs	r2, #0
 800c268:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c26c:	4b2c      	ldr	r3, [pc, #176]	; (800c320 <_dtoa_r+0x600>)
 800c26e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c272:	f7f4 f9c9 	bl	8000608 <__aeabi_dmul>
 800c276:	e9cd 0100 	strd	r0, r1, [sp]
 800c27a:	e7c4      	b.n	800c206 <_dtoa_r+0x4e6>
 800c27c:	462a      	mov	r2, r5
 800c27e:	4633      	mov	r3, r6
 800c280:	f7f4 f9c2 	bl	8000608 <__aeabi_dmul>
 800c284:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c288:	eb0b 0507 	add.w	r5, fp, r7
 800c28c:	465e      	mov	r6, fp
 800c28e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c292:	f7f4 fc69 	bl	8000b68 <__aeabi_d2iz>
 800c296:	4607      	mov	r7, r0
 800c298:	f7f4 f94c 	bl	8000534 <__aeabi_i2d>
 800c29c:	3730      	adds	r7, #48	; 0x30
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2a6:	f7f3 fff7 	bl	8000298 <__aeabi_dsub>
 800c2aa:	f806 7b01 	strb.w	r7, [r6], #1
 800c2ae:	42ae      	cmp	r6, r5
 800c2b0:	e9cd 0100 	strd	r0, r1, [sp]
 800c2b4:	f04f 0200 	mov.w	r2, #0
 800c2b8:	d126      	bne.n	800c308 <_dtoa_r+0x5e8>
 800c2ba:	4b1c      	ldr	r3, [pc, #112]	; (800c32c <_dtoa_r+0x60c>)
 800c2bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2c0:	f7f3 ffec 	bl	800029c <__adddf3>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2cc:	f7f4 fc2c 	bl	8000b28 <__aeabi_dcmpgt>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d174      	bne.n	800c3be <_dtoa_r+0x69e>
 800c2d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c2d8:	2000      	movs	r0, #0
 800c2da:	4914      	ldr	r1, [pc, #80]	; (800c32c <_dtoa_r+0x60c>)
 800c2dc:	f7f3 ffdc 	bl	8000298 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2e8:	f7f4 fc00 	bl	8000aec <__aeabi_dcmplt>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	f43f af30 	beq.w	800c152 <_dtoa_r+0x432>
 800c2f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2f6:	2b30      	cmp	r3, #48	; 0x30
 800c2f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c2fc:	d002      	beq.n	800c304 <_dtoa_r+0x5e4>
 800c2fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c302:	e04a      	b.n	800c39a <_dtoa_r+0x67a>
 800c304:	4615      	mov	r5, r2
 800c306:	e7f4      	b.n	800c2f2 <_dtoa_r+0x5d2>
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <_dtoa_r+0x600>)
 800c30a:	f7f4 f97d 	bl	8000608 <__aeabi_dmul>
 800c30e:	e9cd 0100 	strd	r0, r1, [sp]
 800c312:	e7bc      	b.n	800c28e <_dtoa_r+0x56e>
 800c314:	0800d6e8 	.word	0x0800d6e8
 800c318:	0800d6c0 	.word	0x0800d6c0
 800c31c:	3ff00000 	.word	0x3ff00000
 800c320:	40240000 	.word	0x40240000
 800c324:	401c0000 	.word	0x401c0000
 800c328:	40140000 	.word	0x40140000
 800c32c:	3fe00000 	.word	0x3fe00000
 800c330:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c334:	465d      	mov	r5, fp
 800c336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c33a:	4630      	mov	r0, r6
 800c33c:	4639      	mov	r1, r7
 800c33e:	f7f4 fa8d 	bl	800085c <__aeabi_ddiv>
 800c342:	f7f4 fc11 	bl	8000b68 <__aeabi_d2iz>
 800c346:	4680      	mov	r8, r0
 800c348:	f7f4 f8f4 	bl	8000534 <__aeabi_i2d>
 800c34c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c350:	f7f4 f95a 	bl	8000608 <__aeabi_dmul>
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	4630      	mov	r0, r6
 800c35a:	4639      	mov	r1, r7
 800c35c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c360:	f7f3 ff9a 	bl	8000298 <__aeabi_dsub>
 800c364:	f805 6b01 	strb.w	r6, [r5], #1
 800c368:	eba5 060b 	sub.w	r6, r5, fp
 800c36c:	45b1      	cmp	r9, r6
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	d139      	bne.n	800c3e8 <_dtoa_r+0x6c8>
 800c374:	f7f3 ff92 	bl	800029c <__adddf3>
 800c378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c37c:	4606      	mov	r6, r0
 800c37e:	460f      	mov	r7, r1
 800c380:	f7f4 fbd2 	bl	8000b28 <__aeabi_dcmpgt>
 800c384:	b9c8      	cbnz	r0, 800c3ba <_dtoa_r+0x69a>
 800c386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f4 fba3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c392:	b110      	cbz	r0, 800c39a <_dtoa_r+0x67a>
 800c394:	f018 0f01 	tst.w	r8, #1
 800c398:	d10f      	bne.n	800c3ba <_dtoa_r+0x69a>
 800c39a:	9904      	ldr	r1, [sp, #16]
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 fab9 	bl	800c914 <_Bfree>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3a6:	702b      	strb	r3, [r5, #0]
 800c3a8:	f10a 0301 	add.w	r3, sl, #1
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 8241 	beq.w	800c838 <_dtoa_r+0xb18>
 800c3b6:	601d      	str	r5, [r3, #0]
 800c3b8:	e23e      	b.n	800c838 <_dtoa_r+0xb18>
 800c3ba:	f8cd a020 	str.w	sl, [sp, #32]
 800c3be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3c2:	2a39      	cmp	r2, #57	; 0x39
 800c3c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c3c8:	d108      	bne.n	800c3dc <_dtoa_r+0x6bc>
 800c3ca:	459b      	cmp	fp, r3
 800c3cc:	d10a      	bne.n	800c3e4 <_dtoa_r+0x6c4>
 800c3ce:	9b08      	ldr	r3, [sp, #32]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	9308      	str	r3, [sp, #32]
 800c3d4:	2330      	movs	r3, #48	; 0x30
 800c3d6:	f88b 3000 	strb.w	r3, [fp]
 800c3da:	465b      	mov	r3, fp
 800c3dc:	781a      	ldrb	r2, [r3, #0]
 800c3de:	3201      	adds	r2, #1
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e78c      	b.n	800c2fe <_dtoa_r+0x5de>
 800c3e4:	461d      	mov	r5, r3
 800c3e6:	e7ea      	b.n	800c3be <_dtoa_r+0x69e>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4b9b      	ldr	r3, [pc, #620]	; (800c658 <_dtoa_r+0x938>)
 800c3ec:	f7f4 f90c 	bl	8000608 <__aeabi_dmul>
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	460f      	mov	r7, r1
 800c3f8:	f7f4 fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d09a      	beq.n	800c336 <_dtoa_r+0x616>
 800c400:	e7cb      	b.n	800c39a <_dtoa_r+0x67a>
 800c402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c404:	2a00      	cmp	r2, #0
 800c406:	f000 808b 	beq.w	800c520 <_dtoa_r+0x800>
 800c40a:	9a06      	ldr	r2, [sp, #24]
 800c40c:	2a01      	cmp	r2, #1
 800c40e:	dc6e      	bgt.n	800c4ee <_dtoa_r+0x7ce>
 800c410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c412:	2a00      	cmp	r2, #0
 800c414:	d067      	beq.n	800c4e6 <_dtoa_r+0x7c6>
 800c416:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c41a:	9f07      	ldr	r7, [sp, #28]
 800c41c:	9d05      	ldr	r5, [sp, #20]
 800c41e:	9a05      	ldr	r2, [sp, #20]
 800c420:	2101      	movs	r1, #1
 800c422:	441a      	add	r2, r3
 800c424:	4620      	mov	r0, r4
 800c426:	9205      	str	r2, [sp, #20]
 800c428:	4498      	add	r8, r3
 800c42a:	f000 fb13 	bl	800ca54 <__i2b>
 800c42e:	4606      	mov	r6, r0
 800c430:	2d00      	cmp	r5, #0
 800c432:	dd0c      	ble.n	800c44e <_dtoa_r+0x72e>
 800c434:	f1b8 0f00 	cmp.w	r8, #0
 800c438:	dd09      	ble.n	800c44e <_dtoa_r+0x72e>
 800c43a:	4545      	cmp	r5, r8
 800c43c:	9a05      	ldr	r2, [sp, #20]
 800c43e:	462b      	mov	r3, r5
 800c440:	bfa8      	it	ge
 800c442:	4643      	movge	r3, r8
 800c444:	1ad2      	subs	r2, r2, r3
 800c446:	9205      	str	r2, [sp, #20]
 800c448:	1aed      	subs	r5, r5, r3
 800c44a:	eba8 0803 	sub.w	r8, r8, r3
 800c44e:	9b07      	ldr	r3, [sp, #28]
 800c450:	b1eb      	cbz	r3, 800c48e <_dtoa_r+0x76e>
 800c452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c454:	2b00      	cmp	r3, #0
 800c456:	d067      	beq.n	800c528 <_dtoa_r+0x808>
 800c458:	b18f      	cbz	r7, 800c47e <_dtoa_r+0x75e>
 800c45a:	4631      	mov	r1, r6
 800c45c:	463a      	mov	r2, r7
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 fb98 	bl	800cb94 <__pow5mult>
 800c464:	9a04      	ldr	r2, [sp, #16]
 800c466:	4601      	mov	r1, r0
 800c468:	4606      	mov	r6, r0
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 fafb 	bl	800ca66 <__multiply>
 800c470:	9904      	ldr	r1, [sp, #16]
 800c472:	9008      	str	r0, [sp, #32]
 800c474:	4620      	mov	r0, r4
 800c476:	f000 fa4d 	bl	800c914 <_Bfree>
 800c47a:	9b08      	ldr	r3, [sp, #32]
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	9b07      	ldr	r3, [sp, #28]
 800c480:	1bda      	subs	r2, r3, r7
 800c482:	d004      	beq.n	800c48e <_dtoa_r+0x76e>
 800c484:	9904      	ldr	r1, [sp, #16]
 800c486:	4620      	mov	r0, r4
 800c488:	f000 fb84 	bl	800cb94 <__pow5mult>
 800c48c:	9004      	str	r0, [sp, #16]
 800c48e:	2101      	movs	r1, #1
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fadf 	bl	800ca54 <__i2b>
 800c496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c498:	4607      	mov	r7, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 81d0 	beq.w	800c840 <_dtoa_r+0xb20>
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 fb75 	bl	800cb94 <__pow5mult>
 800c4aa:	9b06      	ldr	r3, [sp, #24]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	dc40      	bgt.n	800c534 <_dtoa_r+0x814>
 800c4b2:	9b00      	ldr	r3, [sp, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d139      	bne.n	800c52c <_dtoa_r+0x80c>
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d136      	bne.n	800c530 <_dtoa_r+0x810>
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4c8:	0d1b      	lsrs	r3, r3, #20
 800c4ca:	051b      	lsls	r3, r3, #20
 800c4cc:	b12b      	cbz	r3, 800c4da <_dtoa_r+0x7ba>
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	9305      	str	r3, [sp, #20]
 800c4d4:	f108 0801 	add.w	r8, r8, #1
 800c4d8:	2301      	movs	r3, #1
 800c4da:	9307      	str	r3, [sp, #28]
 800c4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d12a      	bne.n	800c538 <_dtoa_r+0x818>
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	e030      	b.n	800c548 <_dtoa_r+0x828>
 800c4e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4ec:	e795      	b.n	800c41a <_dtoa_r+0x6fa>
 800c4ee:	9b07      	ldr	r3, [sp, #28]
 800c4f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c4f4:	42bb      	cmp	r3, r7
 800c4f6:	bfbf      	itttt	lt
 800c4f8:	9b07      	ldrlt	r3, [sp, #28]
 800c4fa:	9707      	strlt	r7, [sp, #28]
 800c4fc:	1afa      	sublt	r2, r7, r3
 800c4fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c500:	bfbb      	ittet	lt
 800c502:	189b      	addlt	r3, r3, r2
 800c504:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c506:	1bdf      	subge	r7, r3, r7
 800c508:	2700      	movlt	r7, #0
 800c50a:	f1b9 0f00 	cmp.w	r9, #0
 800c50e:	bfb5      	itete	lt
 800c510:	9b05      	ldrlt	r3, [sp, #20]
 800c512:	9d05      	ldrge	r5, [sp, #20]
 800c514:	eba3 0509 	sublt.w	r5, r3, r9
 800c518:	464b      	movge	r3, r9
 800c51a:	bfb8      	it	lt
 800c51c:	2300      	movlt	r3, #0
 800c51e:	e77e      	b.n	800c41e <_dtoa_r+0x6fe>
 800c520:	9f07      	ldr	r7, [sp, #28]
 800c522:	9d05      	ldr	r5, [sp, #20]
 800c524:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c526:	e783      	b.n	800c430 <_dtoa_r+0x710>
 800c528:	9a07      	ldr	r2, [sp, #28]
 800c52a:	e7ab      	b.n	800c484 <_dtoa_r+0x764>
 800c52c:	2300      	movs	r3, #0
 800c52e:	e7d4      	b.n	800c4da <_dtoa_r+0x7ba>
 800c530:	9b00      	ldr	r3, [sp, #0]
 800c532:	e7d2      	b.n	800c4da <_dtoa_r+0x7ba>
 800c534:	2300      	movs	r3, #0
 800c536:	9307      	str	r3, [sp, #28]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c53e:	6918      	ldr	r0, [r3, #16]
 800c540:	f000 fa3a 	bl	800c9b8 <__hi0bits>
 800c544:	f1c0 0020 	rsb	r0, r0, #32
 800c548:	4440      	add	r0, r8
 800c54a:	f010 001f 	ands.w	r0, r0, #31
 800c54e:	d047      	beq.n	800c5e0 <_dtoa_r+0x8c0>
 800c550:	f1c0 0320 	rsb	r3, r0, #32
 800c554:	2b04      	cmp	r3, #4
 800c556:	dd3b      	ble.n	800c5d0 <_dtoa_r+0x8b0>
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	f1c0 001c 	rsb	r0, r0, #28
 800c55e:	4403      	add	r3, r0
 800c560:	9305      	str	r3, [sp, #20]
 800c562:	4405      	add	r5, r0
 800c564:	4480      	add	r8, r0
 800c566:	9b05      	ldr	r3, [sp, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	dd05      	ble.n	800c578 <_dtoa_r+0x858>
 800c56c:	461a      	mov	r2, r3
 800c56e:	9904      	ldr	r1, [sp, #16]
 800c570:	4620      	mov	r0, r4
 800c572:	f000 fb5d 	bl	800cc30 <__lshift>
 800c576:	9004      	str	r0, [sp, #16]
 800c578:	f1b8 0f00 	cmp.w	r8, #0
 800c57c:	dd05      	ble.n	800c58a <_dtoa_r+0x86a>
 800c57e:	4639      	mov	r1, r7
 800c580:	4642      	mov	r2, r8
 800c582:	4620      	mov	r0, r4
 800c584:	f000 fb54 	bl	800cc30 <__lshift>
 800c588:	4607      	mov	r7, r0
 800c58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c58c:	b353      	cbz	r3, 800c5e4 <_dtoa_r+0x8c4>
 800c58e:	4639      	mov	r1, r7
 800c590:	9804      	ldr	r0, [sp, #16]
 800c592:	f000 fba1 	bl	800ccd8 <__mcmp>
 800c596:	2800      	cmp	r0, #0
 800c598:	da24      	bge.n	800c5e4 <_dtoa_r+0x8c4>
 800c59a:	2300      	movs	r3, #0
 800c59c:	220a      	movs	r2, #10
 800c59e:	9904      	ldr	r1, [sp, #16]
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f000 f9ce 	bl	800c942 <__multadd>
 800c5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5a8:	9004      	str	r0, [sp, #16]
 800c5aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 814d 	beq.w	800c84e <_dtoa_r+0xb2e>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 f9c1 	bl	800c942 <__multadd>
 800c5c0:	9b02      	ldr	r3, [sp, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	dc4f      	bgt.n	800c668 <_dtoa_r+0x948>
 800c5c8:	9b06      	ldr	r3, [sp, #24]
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	dd4c      	ble.n	800c668 <_dtoa_r+0x948>
 800c5ce:	e011      	b.n	800c5f4 <_dtoa_r+0x8d4>
 800c5d0:	d0c9      	beq.n	800c566 <_dtoa_r+0x846>
 800c5d2:	9a05      	ldr	r2, [sp, #20]
 800c5d4:	331c      	adds	r3, #28
 800c5d6:	441a      	add	r2, r3
 800c5d8:	9205      	str	r2, [sp, #20]
 800c5da:	441d      	add	r5, r3
 800c5dc:	4498      	add	r8, r3
 800c5de:	e7c2      	b.n	800c566 <_dtoa_r+0x846>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	e7f6      	b.n	800c5d2 <_dtoa_r+0x8b2>
 800c5e4:	f1b9 0f00 	cmp.w	r9, #0
 800c5e8:	dc38      	bgt.n	800c65c <_dtoa_r+0x93c>
 800c5ea:	9b06      	ldr	r3, [sp, #24]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	dd35      	ble.n	800c65c <_dtoa_r+0x93c>
 800c5f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5f4:	9b02      	ldr	r3, [sp, #8]
 800c5f6:	b963      	cbnz	r3, 800c612 <_dtoa_r+0x8f2>
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	2205      	movs	r2, #5
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 f9a0 	bl	800c942 <__multadd>
 800c602:	4601      	mov	r1, r0
 800c604:	4607      	mov	r7, r0
 800c606:	9804      	ldr	r0, [sp, #16]
 800c608:	f000 fb66 	bl	800ccd8 <__mcmp>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f73f adcc 	bgt.w	800c1aa <_dtoa_r+0x48a>
 800c612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c614:	465d      	mov	r5, fp
 800c616:	ea6f 0a03 	mvn.w	sl, r3
 800c61a:	f04f 0900 	mov.w	r9, #0
 800c61e:	4639      	mov	r1, r7
 800c620:	4620      	mov	r0, r4
 800c622:	f000 f977 	bl	800c914 <_Bfree>
 800c626:	2e00      	cmp	r6, #0
 800c628:	f43f aeb7 	beq.w	800c39a <_dtoa_r+0x67a>
 800c62c:	f1b9 0f00 	cmp.w	r9, #0
 800c630:	d005      	beq.n	800c63e <_dtoa_r+0x91e>
 800c632:	45b1      	cmp	r9, r6
 800c634:	d003      	beq.n	800c63e <_dtoa_r+0x91e>
 800c636:	4649      	mov	r1, r9
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 f96b 	bl	800c914 <_Bfree>
 800c63e:	4631      	mov	r1, r6
 800c640:	4620      	mov	r0, r4
 800c642:	f000 f967 	bl	800c914 <_Bfree>
 800c646:	e6a8      	b.n	800c39a <_dtoa_r+0x67a>
 800c648:	2700      	movs	r7, #0
 800c64a:	463e      	mov	r6, r7
 800c64c:	e7e1      	b.n	800c612 <_dtoa_r+0x8f2>
 800c64e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c652:	463e      	mov	r6, r7
 800c654:	e5a9      	b.n	800c1aa <_dtoa_r+0x48a>
 800c656:	bf00      	nop
 800c658:	40240000 	.word	0x40240000
 800c65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 80fa 	beq.w	800c85c <_dtoa_r+0xb3c>
 800c668:	2d00      	cmp	r5, #0
 800c66a:	dd05      	ble.n	800c678 <_dtoa_r+0x958>
 800c66c:	4631      	mov	r1, r6
 800c66e:	462a      	mov	r2, r5
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fadd 	bl	800cc30 <__lshift>
 800c676:	4606      	mov	r6, r0
 800c678:	9b07      	ldr	r3, [sp, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d04c      	beq.n	800c718 <_dtoa_r+0x9f8>
 800c67e:	6871      	ldr	r1, [r6, #4]
 800c680:	4620      	mov	r0, r4
 800c682:	f000 f913 	bl	800c8ac <_Balloc>
 800c686:	6932      	ldr	r2, [r6, #16]
 800c688:	3202      	adds	r2, #2
 800c68a:	4605      	mov	r5, r0
 800c68c:	0092      	lsls	r2, r2, #2
 800c68e:	f106 010c 	add.w	r1, r6, #12
 800c692:	300c      	adds	r0, #12
 800c694:	f7fe fd4c 	bl	800b130 <memcpy>
 800c698:	2201      	movs	r2, #1
 800c69a:	4629      	mov	r1, r5
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 fac7 	bl	800cc30 <__lshift>
 800c6a2:	9b00      	ldr	r3, [sp, #0]
 800c6a4:	f8cd b014 	str.w	fp, [sp, #20]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	46b1      	mov	r9, r6
 800c6ae:	9307      	str	r3, [sp, #28]
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	9804      	ldr	r0, [sp, #16]
 800c6b6:	f7ff faa5 	bl	800bc04 <quorem>
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	4605      	mov	r5, r0
 800c6be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c6c2:	9804      	ldr	r0, [sp, #16]
 800c6c4:	f000 fb08 	bl	800ccd8 <__mcmp>
 800c6c8:	4632      	mov	r2, r6
 800c6ca:	9000      	str	r0, [sp, #0]
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f000 fb1c 	bl	800cd0c <__mdiff>
 800c6d4:	68c3      	ldr	r3, [r0, #12]
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	bb03      	cbnz	r3, 800c71c <_dtoa_r+0x9fc>
 800c6da:	4601      	mov	r1, r0
 800c6dc:	9008      	str	r0, [sp, #32]
 800c6de:	9804      	ldr	r0, [sp, #16]
 800c6e0:	f000 fafa 	bl	800ccd8 <__mcmp>
 800c6e4:	9a08      	ldr	r2, [sp, #32]
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	9308      	str	r3, [sp, #32]
 800c6ee:	f000 f911 	bl	800c914 <_Bfree>
 800c6f2:	9b08      	ldr	r3, [sp, #32]
 800c6f4:	b9a3      	cbnz	r3, 800c720 <_dtoa_r+0xa00>
 800c6f6:	9a06      	ldr	r2, [sp, #24]
 800c6f8:	b992      	cbnz	r2, 800c720 <_dtoa_r+0xa00>
 800c6fa:	9a07      	ldr	r2, [sp, #28]
 800c6fc:	b982      	cbnz	r2, 800c720 <_dtoa_r+0xa00>
 800c6fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c702:	d029      	beq.n	800c758 <_dtoa_r+0xa38>
 800c704:	9b00      	ldr	r3, [sp, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	dd01      	ble.n	800c70e <_dtoa_r+0x9ee>
 800c70a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c70e:	9b05      	ldr	r3, [sp, #20]
 800c710:	1c5d      	adds	r5, r3, #1
 800c712:	f883 8000 	strb.w	r8, [r3]
 800c716:	e782      	b.n	800c61e <_dtoa_r+0x8fe>
 800c718:	4630      	mov	r0, r6
 800c71a:	e7c2      	b.n	800c6a2 <_dtoa_r+0x982>
 800c71c:	2301      	movs	r3, #1
 800c71e:	e7e3      	b.n	800c6e8 <_dtoa_r+0x9c8>
 800c720:	9a00      	ldr	r2, [sp, #0]
 800c722:	2a00      	cmp	r2, #0
 800c724:	db04      	blt.n	800c730 <_dtoa_r+0xa10>
 800c726:	d125      	bne.n	800c774 <_dtoa_r+0xa54>
 800c728:	9a06      	ldr	r2, [sp, #24]
 800c72a:	bb1a      	cbnz	r2, 800c774 <_dtoa_r+0xa54>
 800c72c:	9a07      	ldr	r2, [sp, #28]
 800c72e:	bb0a      	cbnz	r2, 800c774 <_dtoa_r+0xa54>
 800c730:	2b00      	cmp	r3, #0
 800c732:	ddec      	ble.n	800c70e <_dtoa_r+0x9ee>
 800c734:	2201      	movs	r2, #1
 800c736:	9904      	ldr	r1, [sp, #16]
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 fa79 	bl	800cc30 <__lshift>
 800c73e:	4639      	mov	r1, r7
 800c740:	9004      	str	r0, [sp, #16]
 800c742:	f000 fac9 	bl	800ccd8 <__mcmp>
 800c746:	2800      	cmp	r0, #0
 800c748:	dc03      	bgt.n	800c752 <_dtoa_r+0xa32>
 800c74a:	d1e0      	bne.n	800c70e <_dtoa_r+0x9ee>
 800c74c:	f018 0f01 	tst.w	r8, #1
 800c750:	d0dd      	beq.n	800c70e <_dtoa_r+0x9ee>
 800c752:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c756:	d1d8      	bne.n	800c70a <_dtoa_r+0x9ea>
 800c758:	9b05      	ldr	r3, [sp, #20]
 800c75a:	9a05      	ldr	r2, [sp, #20]
 800c75c:	1c5d      	adds	r5, r3, #1
 800c75e:	2339      	movs	r3, #57	; 0x39
 800c760:	7013      	strb	r3, [r2, #0]
 800c762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c766:	2b39      	cmp	r3, #57	; 0x39
 800c768:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c76c:	d04f      	beq.n	800c80e <_dtoa_r+0xaee>
 800c76e:	3301      	adds	r3, #1
 800c770:	7013      	strb	r3, [r2, #0]
 800c772:	e754      	b.n	800c61e <_dtoa_r+0x8fe>
 800c774:	9a05      	ldr	r2, [sp, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	f102 0501 	add.w	r5, r2, #1
 800c77c:	dd06      	ble.n	800c78c <_dtoa_r+0xa6c>
 800c77e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c782:	d0e9      	beq.n	800c758 <_dtoa_r+0xa38>
 800c784:	f108 0801 	add.w	r8, r8, #1
 800c788:	9b05      	ldr	r3, [sp, #20]
 800c78a:	e7c2      	b.n	800c712 <_dtoa_r+0x9f2>
 800c78c:	9a02      	ldr	r2, [sp, #8]
 800c78e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c792:	eba5 030b 	sub.w	r3, r5, fp
 800c796:	4293      	cmp	r3, r2
 800c798:	d021      	beq.n	800c7de <_dtoa_r+0xabe>
 800c79a:	2300      	movs	r3, #0
 800c79c:	220a      	movs	r2, #10
 800c79e:	9904      	ldr	r1, [sp, #16]
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f000 f8ce 	bl	800c942 <__multadd>
 800c7a6:	45b1      	cmp	r9, r6
 800c7a8:	9004      	str	r0, [sp, #16]
 800c7aa:	f04f 0300 	mov.w	r3, #0
 800c7ae:	f04f 020a 	mov.w	r2, #10
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	d105      	bne.n	800c7c4 <_dtoa_r+0xaa4>
 800c7b8:	f000 f8c3 	bl	800c942 <__multadd>
 800c7bc:	4681      	mov	r9, r0
 800c7be:	4606      	mov	r6, r0
 800c7c0:	9505      	str	r5, [sp, #20]
 800c7c2:	e776      	b.n	800c6b2 <_dtoa_r+0x992>
 800c7c4:	f000 f8bd 	bl	800c942 <__multadd>
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4681      	mov	r9, r0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	220a      	movs	r2, #10
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 f8b6 	bl	800c942 <__multadd>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	e7f2      	b.n	800c7c0 <_dtoa_r+0xaa0>
 800c7da:	f04f 0900 	mov.w	r9, #0
 800c7de:	2201      	movs	r2, #1
 800c7e0:	9904      	ldr	r1, [sp, #16]
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fa24 	bl	800cc30 <__lshift>
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	9004      	str	r0, [sp, #16]
 800c7ec:	f000 fa74 	bl	800ccd8 <__mcmp>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	dcb6      	bgt.n	800c762 <_dtoa_r+0xa42>
 800c7f4:	d102      	bne.n	800c7fc <_dtoa_r+0xadc>
 800c7f6:	f018 0f01 	tst.w	r8, #1
 800c7fa:	d1b2      	bne.n	800c762 <_dtoa_r+0xa42>
 800c7fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c800:	2b30      	cmp	r3, #48	; 0x30
 800c802:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c806:	f47f af0a 	bne.w	800c61e <_dtoa_r+0x8fe>
 800c80a:	4615      	mov	r5, r2
 800c80c:	e7f6      	b.n	800c7fc <_dtoa_r+0xadc>
 800c80e:	4593      	cmp	fp, r2
 800c810:	d105      	bne.n	800c81e <_dtoa_r+0xafe>
 800c812:	2331      	movs	r3, #49	; 0x31
 800c814:	f10a 0a01 	add.w	sl, sl, #1
 800c818:	f88b 3000 	strb.w	r3, [fp]
 800c81c:	e6ff      	b.n	800c61e <_dtoa_r+0x8fe>
 800c81e:	4615      	mov	r5, r2
 800c820:	e79f      	b.n	800c762 <_dtoa_r+0xa42>
 800c822:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c888 <_dtoa_r+0xb68>
 800c826:	e007      	b.n	800c838 <_dtoa_r+0xb18>
 800c828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c82a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c88c <_dtoa_r+0xb6c>
 800c82e:	b11b      	cbz	r3, 800c838 <_dtoa_r+0xb18>
 800c830:	f10b 0308 	add.w	r3, fp, #8
 800c834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	4658      	mov	r0, fp
 800c83a:	b017      	add	sp, #92	; 0x5c
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	9b06      	ldr	r3, [sp, #24]
 800c842:	2b01      	cmp	r3, #1
 800c844:	f77f ae35 	ble.w	800c4b2 <_dtoa_r+0x792>
 800c848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c84a:	9307      	str	r3, [sp, #28]
 800c84c:	e649      	b.n	800c4e2 <_dtoa_r+0x7c2>
 800c84e:	9b02      	ldr	r3, [sp, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	dc03      	bgt.n	800c85c <_dtoa_r+0xb3c>
 800c854:	9b06      	ldr	r3, [sp, #24]
 800c856:	2b02      	cmp	r3, #2
 800c858:	f73f aecc 	bgt.w	800c5f4 <_dtoa_r+0x8d4>
 800c85c:	465d      	mov	r5, fp
 800c85e:	4639      	mov	r1, r7
 800c860:	9804      	ldr	r0, [sp, #16]
 800c862:	f7ff f9cf 	bl	800bc04 <quorem>
 800c866:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c86a:	f805 8b01 	strb.w	r8, [r5], #1
 800c86e:	9a02      	ldr	r2, [sp, #8]
 800c870:	eba5 030b 	sub.w	r3, r5, fp
 800c874:	429a      	cmp	r2, r3
 800c876:	ddb0      	ble.n	800c7da <_dtoa_r+0xaba>
 800c878:	2300      	movs	r3, #0
 800c87a:	220a      	movs	r2, #10
 800c87c:	9904      	ldr	r1, [sp, #16]
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 f85f 	bl	800c942 <__multadd>
 800c884:	9004      	str	r0, [sp, #16]
 800c886:	e7ea      	b.n	800c85e <_dtoa_r+0xb3e>
 800c888:	0800d68b 	.word	0x0800d68b
 800c88c:	0800d6af 	.word	0x0800d6af

0800c890 <_localeconv_r>:
 800c890:	4b04      	ldr	r3, [pc, #16]	; (800c8a4 <_localeconv_r+0x14>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6a18      	ldr	r0, [r3, #32]
 800c896:	4b04      	ldr	r3, [pc, #16]	; (800c8a8 <_localeconv_r+0x18>)
 800c898:	2800      	cmp	r0, #0
 800c89a:	bf08      	it	eq
 800c89c:	4618      	moveq	r0, r3
 800c89e:	30f0      	adds	r0, #240	; 0xf0
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000034 	.word	0x20000034
 800c8a8:	20000098 	.word	0x20000098

0800c8ac <_Balloc>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	460e      	mov	r6, r1
 800c8b4:	b93d      	cbnz	r5, 800c8c6 <_Balloc+0x1a>
 800c8b6:	2010      	movs	r0, #16
 800c8b8:	f7fc ff04 	bl	80096c4 <malloc>
 800c8bc:	6260      	str	r0, [r4, #36]	; 0x24
 800c8be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8c2:	6005      	str	r5, [r0, #0]
 800c8c4:	60c5      	str	r5, [r0, #12]
 800c8c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c8c8:	68eb      	ldr	r3, [r5, #12]
 800c8ca:	b183      	cbz	r3, 800c8ee <_Balloc+0x42>
 800c8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c8d4:	b9b8      	cbnz	r0, 800c906 <_Balloc+0x5a>
 800c8d6:	2101      	movs	r1, #1
 800c8d8:	fa01 f506 	lsl.w	r5, r1, r6
 800c8dc:	1d6a      	adds	r2, r5, #5
 800c8de:	0092      	lsls	r2, r2, #2
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fabf 	bl	800ce64 <_calloc_r>
 800c8e6:	b160      	cbz	r0, 800c902 <_Balloc+0x56>
 800c8e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c8ec:	e00e      	b.n	800c90c <_Balloc+0x60>
 800c8ee:	2221      	movs	r2, #33	; 0x21
 800c8f0:	2104      	movs	r1, #4
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fab6 	bl	800ce64 <_calloc_r>
 800c8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8fa:	60e8      	str	r0, [r5, #12]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1e4      	bne.n	800c8cc <_Balloc+0x20>
 800c902:	2000      	movs	r0, #0
 800c904:	bd70      	pop	{r4, r5, r6, pc}
 800c906:	6802      	ldr	r2, [r0, #0]
 800c908:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c90c:	2300      	movs	r3, #0
 800c90e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c912:	e7f7      	b.n	800c904 <_Balloc+0x58>

0800c914 <_Bfree>:
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c918:	4606      	mov	r6, r0
 800c91a:	460d      	mov	r5, r1
 800c91c:	b93c      	cbnz	r4, 800c92e <_Bfree+0x1a>
 800c91e:	2010      	movs	r0, #16
 800c920:	f7fc fed0 	bl	80096c4 <malloc>
 800c924:	6270      	str	r0, [r6, #36]	; 0x24
 800c926:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c92a:	6004      	str	r4, [r0, #0]
 800c92c:	60c4      	str	r4, [r0, #12]
 800c92e:	b13d      	cbz	r5, 800c940 <_Bfree+0x2c>
 800c930:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c932:	686a      	ldr	r2, [r5, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c93a:	6029      	str	r1, [r5, #0]
 800c93c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c940:	bd70      	pop	{r4, r5, r6, pc}

0800c942 <__multadd>:
 800c942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c946:	690d      	ldr	r5, [r1, #16]
 800c948:	461f      	mov	r7, r3
 800c94a:	4606      	mov	r6, r0
 800c94c:	460c      	mov	r4, r1
 800c94e:	f101 0c14 	add.w	ip, r1, #20
 800c952:	2300      	movs	r3, #0
 800c954:	f8dc 0000 	ldr.w	r0, [ip]
 800c958:	b281      	uxth	r1, r0
 800c95a:	fb02 7101 	mla	r1, r2, r1, r7
 800c95e:	0c0f      	lsrs	r7, r1, #16
 800c960:	0c00      	lsrs	r0, r0, #16
 800c962:	fb02 7000 	mla	r0, r2, r0, r7
 800c966:	b289      	uxth	r1, r1
 800c968:	3301      	adds	r3, #1
 800c96a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c96e:	429d      	cmp	r5, r3
 800c970:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c974:	f84c 1b04 	str.w	r1, [ip], #4
 800c978:	dcec      	bgt.n	800c954 <__multadd+0x12>
 800c97a:	b1d7      	cbz	r7, 800c9b2 <__multadd+0x70>
 800c97c:	68a3      	ldr	r3, [r4, #8]
 800c97e:	42ab      	cmp	r3, r5
 800c980:	dc12      	bgt.n	800c9a8 <__multadd+0x66>
 800c982:	6861      	ldr	r1, [r4, #4]
 800c984:	4630      	mov	r0, r6
 800c986:	3101      	adds	r1, #1
 800c988:	f7ff ff90 	bl	800c8ac <_Balloc>
 800c98c:	6922      	ldr	r2, [r4, #16]
 800c98e:	3202      	adds	r2, #2
 800c990:	f104 010c 	add.w	r1, r4, #12
 800c994:	4680      	mov	r8, r0
 800c996:	0092      	lsls	r2, r2, #2
 800c998:	300c      	adds	r0, #12
 800c99a:	f7fe fbc9 	bl	800b130 <memcpy>
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7ff ffb7 	bl	800c914 <_Bfree>
 800c9a6:	4644      	mov	r4, r8
 800c9a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9ac:	3501      	adds	r5, #1
 800c9ae:	615f      	str	r7, [r3, #20]
 800c9b0:	6125      	str	r5, [r4, #16]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c9b8 <__hi0bits>:
 800c9b8:	0c02      	lsrs	r2, r0, #16
 800c9ba:	0412      	lsls	r2, r2, #16
 800c9bc:	4603      	mov	r3, r0
 800c9be:	b9b2      	cbnz	r2, 800c9ee <__hi0bits+0x36>
 800c9c0:	0403      	lsls	r3, r0, #16
 800c9c2:	2010      	movs	r0, #16
 800c9c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c9c8:	bf04      	itt	eq
 800c9ca:	021b      	lsleq	r3, r3, #8
 800c9cc:	3008      	addeq	r0, #8
 800c9ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c9d2:	bf04      	itt	eq
 800c9d4:	011b      	lsleq	r3, r3, #4
 800c9d6:	3004      	addeq	r0, #4
 800c9d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c9dc:	bf04      	itt	eq
 800c9de:	009b      	lsleq	r3, r3, #2
 800c9e0:	3002      	addeq	r0, #2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	db06      	blt.n	800c9f4 <__hi0bits+0x3c>
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	d503      	bpl.n	800c9f2 <__hi0bits+0x3a>
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	4770      	bx	lr
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	e7e8      	b.n	800c9c4 <__hi0bits+0xc>
 800c9f2:	2020      	movs	r0, #32
 800c9f4:	4770      	bx	lr

0800c9f6 <__lo0bits>:
 800c9f6:	6803      	ldr	r3, [r0, #0]
 800c9f8:	f013 0207 	ands.w	r2, r3, #7
 800c9fc:	4601      	mov	r1, r0
 800c9fe:	d00b      	beq.n	800ca18 <__lo0bits+0x22>
 800ca00:	07da      	lsls	r2, r3, #31
 800ca02:	d423      	bmi.n	800ca4c <__lo0bits+0x56>
 800ca04:	0798      	lsls	r0, r3, #30
 800ca06:	bf49      	itett	mi
 800ca08:	085b      	lsrmi	r3, r3, #1
 800ca0a:	089b      	lsrpl	r3, r3, #2
 800ca0c:	2001      	movmi	r0, #1
 800ca0e:	600b      	strmi	r3, [r1, #0]
 800ca10:	bf5c      	itt	pl
 800ca12:	600b      	strpl	r3, [r1, #0]
 800ca14:	2002      	movpl	r0, #2
 800ca16:	4770      	bx	lr
 800ca18:	b298      	uxth	r0, r3
 800ca1a:	b9a8      	cbnz	r0, 800ca48 <__lo0bits+0x52>
 800ca1c:	0c1b      	lsrs	r3, r3, #16
 800ca1e:	2010      	movs	r0, #16
 800ca20:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca24:	bf04      	itt	eq
 800ca26:	0a1b      	lsreq	r3, r3, #8
 800ca28:	3008      	addeq	r0, #8
 800ca2a:	071a      	lsls	r2, r3, #28
 800ca2c:	bf04      	itt	eq
 800ca2e:	091b      	lsreq	r3, r3, #4
 800ca30:	3004      	addeq	r0, #4
 800ca32:	079a      	lsls	r2, r3, #30
 800ca34:	bf04      	itt	eq
 800ca36:	089b      	lsreq	r3, r3, #2
 800ca38:	3002      	addeq	r0, #2
 800ca3a:	07da      	lsls	r2, r3, #31
 800ca3c:	d402      	bmi.n	800ca44 <__lo0bits+0x4e>
 800ca3e:	085b      	lsrs	r3, r3, #1
 800ca40:	d006      	beq.n	800ca50 <__lo0bits+0x5a>
 800ca42:	3001      	adds	r0, #1
 800ca44:	600b      	str	r3, [r1, #0]
 800ca46:	4770      	bx	lr
 800ca48:	4610      	mov	r0, r2
 800ca4a:	e7e9      	b.n	800ca20 <__lo0bits+0x2a>
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	4770      	bx	lr
 800ca50:	2020      	movs	r0, #32
 800ca52:	4770      	bx	lr

0800ca54 <__i2b>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	460c      	mov	r4, r1
 800ca58:	2101      	movs	r1, #1
 800ca5a:	f7ff ff27 	bl	800c8ac <_Balloc>
 800ca5e:	2201      	movs	r2, #1
 800ca60:	6144      	str	r4, [r0, #20]
 800ca62:	6102      	str	r2, [r0, #16]
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <__multiply>:
 800ca66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	4614      	mov	r4, r2
 800ca6c:	690a      	ldr	r2, [r1, #16]
 800ca6e:	6923      	ldr	r3, [r4, #16]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	bfb8      	it	lt
 800ca74:	460b      	movlt	r3, r1
 800ca76:	4688      	mov	r8, r1
 800ca78:	bfbc      	itt	lt
 800ca7a:	46a0      	movlt	r8, r4
 800ca7c:	461c      	movlt	r4, r3
 800ca7e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca82:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca8e:	eb07 0609 	add.w	r6, r7, r9
 800ca92:	42b3      	cmp	r3, r6
 800ca94:	bfb8      	it	lt
 800ca96:	3101      	addlt	r1, #1
 800ca98:	f7ff ff08 	bl	800c8ac <_Balloc>
 800ca9c:	f100 0514 	add.w	r5, r0, #20
 800caa0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800caa4:	462b      	mov	r3, r5
 800caa6:	2200      	movs	r2, #0
 800caa8:	4573      	cmp	r3, lr
 800caaa:	d316      	bcc.n	800cada <__multiply+0x74>
 800caac:	f104 0214 	add.w	r2, r4, #20
 800cab0:	f108 0114 	add.w	r1, r8, #20
 800cab4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cab8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	9b00      	ldr	r3, [sp, #0]
 800cac0:	9201      	str	r2, [sp, #4]
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d80c      	bhi.n	800cae0 <__multiply+0x7a>
 800cac6:	2e00      	cmp	r6, #0
 800cac8:	dd03      	ble.n	800cad2 <__multiply+0x6c>
 800caca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d05d      	beq.n	800cb8e <__multiply+0x128>
 800cad2:	6106      	str	r6, [r0, #16]
 800cad4:	b003      	add	sp, #12
 800cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cada:	f843 2b04 	str.w	r2, [r3], #4
 800cade:	e7e3      	b.n	800caa8 <__multiply+0x42>
 800cae0:	f8b2 b000 	ldrh.w	fp, [r2]
 800cae4:	f1bb 0f00 	cmp.w	fp, #0
 800cae8:	d023      	beq.n	800cb32 <__multiply+0xcc>
 800caea:	4689      	mov	r9, r1
 800caec:	46ac      	mov	ip, r5
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	f859 4b04 	ldr.w	r4, [r9], #4
 800caf6:	f8dc a000 	ldr.w	sl, [ip]
 800cafa:	b2a3      	uxth	r3, r4
 800cafc:	fa1f fa8a 	uxth.w	sl, sl
 800cb00:	fb0b a303 	mla	r3, fp, r3, sl
 800cb04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cb08:	f8dc 4000 	ldr.w	r4, [ip]
 800cb0c:	4443      	add	r3, r8
 800cb0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cb12:	fb0b 840a 	mla	r4, fp, sl, r8
 800cb16:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cb1a:	46e2      	mov	sl, ip
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cb22:	454f      	cmp	r7, r9
 800cb24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cb28:	f84a 3b04 	str.w	r3, [sl], #4
 800cb2c:	d82b      	bhi.n	800cb86 <__multiply+0x120>
 800cb2e:	f8cc 8004 	str.w	r8, [ip, #4]
 800cb32:	9b01      	ldr	r3, [sp, #4]
 800cb34:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cb38:	3204      	adds	r2, #4
 800cb3a:	f1ba 0f00 	cmp.w	sl, #0
 800cb3e:	d020      	beq.n	800cb82 <__multiply+0x11c>
 800cb40:	682b      	ldr	r3, [r5, #0]
 800cb42:	4689      	mov	r9, r1
 800cb44:	46a8      	mov	r8, r5
 800cb46:	f04f 0b00 	mov.w	fp, #0
 800cb4a:	f8b9 c000 	ldrh.w	ip, [r9]
 800cb4e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cb52:	fb0a 440c 	mla	r4, sl, ip, r4
 800cb56:	445c      	add	r4, fp
 800cb58:	46c4      	mov	ip, r8
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cb60:	f84c 3b04 	str.w	r3, [ip], #4
 800cb64:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb68:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	fb0a b303 	mla	r3, sl, r3, fp
 800cb72:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cb76:	454f      	cmp	r7, r9
 800cb78:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cb7c:	d805      	bhi.n	800cb8a <__multiply+0x124>
 800cb7e:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb82:	3504      	adds	r5, #4
 800cb84:	e79b      	b.n	800cabe <__multiply+0x58>
 800cb86:	46d4      	mov	ip, sl
 800cb88:	e7b3      	b.n	800caf2 <__multiply+0x8c>
 800cb8a:	46e0      	mov	r8, ip
 800cb8c:	e7dd      	b.n	800cb4a <__multiply+0xe4>
 800cb8e:	3e01      	subs	r6, #1
 800cb90:	e799      	b.n	800cac6 <__multiply+0x60>
	...

0800cb94 <__pow5mult>:
 800cb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb98:	4615      	mov	r5, r2
 800cb9a:	f012 0203 	ands.w	r2, r2, #3
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	d007      	beq.n	800cbb4 <__pow5mult+0x20>
 800cba4:	3a01      	subs	r2, #1
 800cba6:	4c21      	ldr	r4, [pc, #132]	; (800cc2c <__pow5mult+0x98>)
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbae:	f7ff fec8 	bl	800c942 <__multadd>
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	10ad      	asrs	r5, r5, #2
 800cbb6:	d035      	beq.n	800cc24 <__pow5mult+0x90>
 800cbb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cbba:	b93c      	cbnz	r4, 800cbcc <__pow5mult+0x38>
 800cbbc:	2010      	movs	r0, #16
 800cbbe:	f7fc fd81 	bl	80096c4 <malloc>
 800cbc2:	6270      	str	r0, [r6, #36]	; 0x24
 800cbc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbc8:	6004      	str	r4, [r0, #0]
 800cbca:	60c4      	str	r4, [r0, #12]
 800cbcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cbd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbd4:	b94c      	cbnz	r4, 800cbea <__pow5mult+0x56>
 800cbd6:	f240 2171 	movw	r1, #625	; 0x271
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f7ff ff3a 	bl	800ca54 <__i2b>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	6003      	str	r3, [r0, #0]
 800cbea:	f04f 0800 	mov.w	r8, #0
 800cbee:	07eb      	lsls	r3, r5, #31
 800cbf0:	d50a      	bpl.n	800cc08 <__pow5mult+0x74>
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	4622      	mov	r2, r4
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ff35 	bl	800ca66 <__multiply>
 800cbfc:	4639      	mov	r1, r7
 800cbfe:	4681      	mov	r9, r0
 800cc00:	4630      	mov	r0, r6
 800cc02:	f7ff fe87 	bl	800c914 <_Bfree>
 800cc06:	464f      	mov	r7, r9
 800cc08:	106d      	asrs	r5, r5, #1
 800cc0a:	d00b      	beq.n	800cc24 <__pow5mult+0x90>
 800cc0c:	6820      	ldr	r0, [r4, #0]
 800cc0e:	b938      	cbnz	r0, 800cc20 <__pow5mult+0x8c>
 800cc10:	4622      	mov	r2, r4
 800cc12:	4621      	mov	r1, r4
 800cc14:	4630      	mov	r0, r6
 800cc16:	f7ff ff26 	bl	800ca66 <__multiply>
 800cc1a:	6020      	str	r0, [r4, #0]
 800cc1c:	f8c0 8000 	str.w	r8, [r0]
 800cc20:	4604      	mov	r4, r0
 800cc22:	e7e4      	b.n	800cbee <__pow5mult+0x5a>
 800cc24:	4638      	mov	r0, r7
 800cc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0800d7b0 	.word	0x0800d7b0

0800cc30 <__lshift>:
 800cc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc34:	460c      	mov	r4, r1
 800cc36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc3a:	6923      	ldr	r3, [r4, #16]
 800cc3c:	6849      	ldr	r1, [r1, #4]
 800cc3e:	eb0a 0903 	add.w	r9, sl, r3
 800cc42:	68a3      	ldr	r3, [r4, #8]
 800cc44:	4607      	mov	r7, r0
 800cc46:	4616      	mov	r6, r2
 800cc48:	f109 0501 	add.w	r5, r9, #1
 800cc4c:	42ab      	cmp	r3, r5
 800cc4e:	db32      	blt.n	800ccb6 <__lshift+0x86>
 800cc50:	4638      	mov	r0, r7
 800cc52:	f7ff fe2b 	bl	800c8ac <_Balloc>
 800cc56:	2300      	movs	r3, #0
 800cc58:	4680      	mov	r8, r0
 800cc5a:	f100 0114 	add.w	r1, r0, #20
 800cc5e:	461a      	mov	r2, r3
 800cc60:	4553      	cmp	r3, sl
 800cc62:	db2b      	blt.n	800ccbc <__lshift+0x8c>
 800cc64:	6920      	ldr	r0, [r4, #16]
 800cc66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc6a:	f104 0314 	add.w	r3, r4, #20
 800cc6e:	f016 021f 	ands.w	r2, r6, #31
 800cc72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc7a:	d025      	beq.n	800ccc8 <__lshift+0x98>
 800cc7c:	f1c2 0e20 	rsb	lr, r2, #32
 800cc80:	2000      	movs	r0, #0
 800cc82:	681e      	ldr	r6, [r3, #0]
 800cc84:	468a      	mov	sl, r1
 800cc86:	4096      	lsls	r6, r2
 800cc88:	4330      	orrs	r0, r6
 800cc8a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc8e:	f853 0b04 	ldr.w	r0, [r3], #4
 800cc92:	459c      	cmp	ip, r3
 800cc94:	fa20 f00e 	lsr.w	r0, r0, lr
 800cc98:	d814      	bhi.n	800ccc4 <__lshift+0x94>
 800cc9a:	6048      	str	r0, [r1, #4]
 800cc9c:	b108      	cbz	r0, 800cca2 <__lshift+0x72>
 800cc9e:	f109 0502 	add.w	r5, r9, #2
 800cca2:	3d01      	subs	r5, #1
 800cca4:	4638      	mov	r0, r7
 800cca6:	f8c8 5010 	str.w	r5, [r8, #16]
 800ccaa:	4621      	mov	r1, r4
 800ccac:	f7ff fe32 	bl	800c914 <_Bfree>
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb6:	3101      	adds	r1, #1
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	e7c7      	b.n	800cc4c <__lshift+0x1c>
 800ccbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	e7cd      	b.n	800cc60 <__lshift+0x30>
 800ccc4:	4651      	mov	r1, sl
 800ccc6:	e7dc      	b.n	800cc82 <__lshift+0x52>
 800ccc8:	3904      	subs	r1, #4
 800ccca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccce:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccd2:	459c      	cmp	ip, r3
 800ccd4:	d8f9      	bhi.n	800ccca <__lshift+0x9a>
 800ccd6:	e7e4      	b.n	800cca2 <__lshift+0x72>

0800ccd8 <__mcmp>:
 800ccd8:	6903      	ldr	r3, [r0, #16]
 800ccda:	690a      	ldr	r2, [r1, #16]
 800ccdc:	1a9b      	subs	r3, r3, r2
 800ccde:	b530      	push	{r4, r5, lr}
 800cce0:	d10c      	bne.n	800ccfc <__mcmp+0x24>
 800cce2:	0092      	lsls	r2, r2, #2
 800cce4:	3014      	adds	r0, #20
 800cce6:	3114      	adds	r1, #20
 800cce8:	1884      	adds	r4, r0, r2
 800ccea:	4411      	add	r1, r2
 800ccec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ccf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ccf4:	4295      	cmp	r5, r2
 800ccf6:	d003      	beq.n	800cd00 <__mcmp+0x28>
 800ccf8:	d305      	bcc.n	800cd06 <__mcmp+0x2e>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	bd30      	pop	{r4, r5, pc}
 800cd00:	42a0      	cmp	r0, r4
 800cd02:	d3f3      	bcc.n	800ccec <__mcmp+0x14>
 800cd04:	e7fa      	b.n	800ccfc <__mcmp+0x24>
 800cd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd0a:	e7f7      	b.n	800ccfc <__mcmp+0x24>

0800cd0c <__mdiff>:
 800cd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd10:	460d      	mov	r5, r1
 800cd12:	4607      	mov	r7, r0
 800cd14:	4611      	mov	r1, r2
 800cd16:	4628      	mov	r0, r5
 800cd18:	4614      	mov	r4, r2
 800cd1a:	f7ff ffdd 	bl	800ccd8 <__mcmp>
 800cd1e:	1e06      	subs	r6, r0, #0
 800cd20:	d108      	bne.n	800cd34 <__mdiff+0x28>
 800cd22:	4631      	mov	r1, r6
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7ff fdc1 	bl	800c8ac <_Balloc>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd34:	bfa4      	itt	ge
 800cd36:	4623      	movge	r3, r4
 800cd38:	462c      	movge	r4, r5
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	6861      	ldr	r1, [r4, #4]
 800cd3e:	bfa6      	itte	ge
 800cd40:	461d      	movge	r5, r3
 800cd42:	2600      	movge	r6, #0
 800cd44:	2601      	movlt	r6, #1
 800cd46:	f7ff fdb1 	bl	800c8ac <_Balloc>
 800cd4a:	692b      	ldr	r3, [r5, #16]
 800cd4c:	60c6      	str	r6, [r0, #12]
 800cd4e:	6926      	ldr	r6, [r4, #16]
 800cd50:	f105 0914 	add.w	r9, r5, #20
 800cd54:	f104 0214 	add.w	r2, r4, #20
 800cd58:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cd5c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cd60:	f100 0514 	add.w	r5, r0, #20
 800cd64:	f04f 0e00 	mov.w	lr, #0
 800cd68:	f852 ab04 	ldr.w	sl, [r2], #4
 800cd6c:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd70:	fa1e f18a 	uxtah	r1, lr, sl
 800cd74:	b2a3      	uxth	r3, r4
 800cd76:	1ac9      	subs	r1, r1, r3
 800cd78:	0c23      	lsrs	r3, r4, #16
 800cd7a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cd7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cd82:	b289      	uxth	r1, r1
 800cd84:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cd88:	45c8      	cmp	r8, r9
 800cd8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cd8e:	4694      	mov	ip, r2
 800cd90:	f845 3b04 	str.w	r3, [r5], #4
 800cd94:	d8e8      	bhi.n	800cd68 <__mdiff+0x5c>
 800cd96:	45bc      	cmp	ip, r7
 800cd98:	d304      	bcc.n	800cda4 <__mdiff+0x98>
 800cd9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cd9e:	b183      	cbz	r3, 800cdc2 <__mdiff+0xb6>
 800cda0:	6106      	str	r6, [r0, #16]
 800cda2:	e7c5      	b.n	800cd30 <__mdiff+0x24>
 800cda4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cda8:	fa1e f381 	uxtah	r3, lr, r1
 800cdac:	141a      	asrs	r2, r3, #16
 800cdae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdb8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cdbc:	f845 3b04 	str.w	r3, [r5], #4
 800cdc0:	e7e9      	b.n	800cd96 <__mdiff+0x8a>
 800cdc2:	3e01      	subs	r6, #1
 800cdc4:	e7e9      	b.n	800cd9a <__mdiff+0x8e>

0800cdc6 <__d2b>:
 800cdc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdca:	460e      	mov	r6, r1
 800cdcc:	2101      	movs	r1, #1
 800cdce:	ec59 8b10 	vmov	r8, r9, d0
 800cdd2:	4615      	mov	r5, r2
 800cdd4:	f7ff fd6a 	bl	800c8ac <_Balloc>
 800cdd8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cddc:	4607      	mov	r7, r0
 800cdde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cde2:	bb34      	cbnz	r4, 800ce32 <__d2b+0x6c>
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	f1b8 0300 	subs.w	r3, r8, #0
 800cdea:	d027      	beq.n	800ce3c <__d2b+0x76>
 800cdec:	a802      	add	r0, sp, #8
 800cdee:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cdf2:	f7ff fe00 	bl	800c9f6 <__lo0bits>
 800cdf6:	9900      	ldr	r1, [sp, #0]
 800cdf8:	b1f0      	cbz	r0, 800ce38 <__d2b+0x72>
 800cdfa:	9a01      	ldr	r2, [sp, #4]
 800cdfc:	f1c0 0320 	rsb	r3, r0, #32
 800ce00:	fa02 f303 	lsl.w	r3, r2, r3
 800ce04:	430b      	orrs	r3, r1
 800ce06:	40c2      	lsrs	r2, r0
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	9201      	str	r2, [sp, #4]
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	61bb      	str	r3, [r7, #24]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	bf14      	ite	ne
 800ce14:	2102      	movne	r1, #2
 800ce16:	2101      	moveq	r1, #1
 800ce18:	6139      	str	r1, [r7, #16]
 800ce1a:	b1c4      	cbz	r4, 800ce4e <__d2b+0x88>
 800ce1c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ce20:	4404      	add	r4, r0
 800ce22:	6034      	str	r4, [r6, #0]
 800ce24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce28:	6028      	str	r0, [r5, #0]
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	b003      	add	sp, #12
 800ce2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce36:	e7d5      	b.n	800cde4 <__d2b+0x1e>
 800ce38:	6179      	str	r1, [r7, #20]
 800ce3a:	e7e7      	b.n	800ce0c <__d2b+0x46>
 800ce3c:	a801      	add	r0, sp, #4
 800ce3e:	f7ff fdda 	bl	800c9f6 <__lo0bits>
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	2101      	movs	r1, #1
 800ce48:	6139      	str	r1, [r7, #16]
 800ce4a:	3020      	adds	r0, #32
 800ce4c:	e7e5      	b.n	800ce1a <__d2b+0x54>
 800ce4e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ce52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce56:	6030      	str	r0, [r6, #0]
 800ce58:	6918      	ldr	r0, [r3, #16]
 800ce5a:	f7ff fdad 	bl	800c9b8 <__hi0bits>
 800ce5e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ce62:	e7e1      	b.n	800ce28 <__d2b+0x62>

0800ce64 <_calloc_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	fb02 f401 	mul.w	r4, r2, r1
 800ce6a:	4621      	mov	r1, r4
 800ce6c:	f000 f808 	bl	800ce80 <_malloc_r>
 800ce70:	4605      	mov	r5, r0
 800ce72:	b118      	cbz	r0, 800ce7c <_calloc_r+0x18>
 800ce74:	4622      	mov	r2, r4
 800ce76:	2100      	movs	r1, #0
 800ce78:	f7fe f97e 	bl	800b178 <memset>
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}

0800ce80 <_malloc_r>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	1ccd      	adds	r5, r1, #3
 800ce84:	f025 0503 	bic.w	r5, r5, #3
 800ce88:	3508      	adds	r5, #8
 800ce8a:	2d0c      	cmp	r5, #12
 800ce8c:	bf38      	it	cc
 800ce8e:	250c      	movcc	r5, #12
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	4606      	mov	r6, r0
 800ce94:	db01      	blt.n	800ce9a <_malloc_r+0x1a>
 800ce96:	42a9      	cmp	r1, r5
 800ce98:	d903      	bls.n	800cea2 <_malloc_r+0x22>
 800ce9a:	230c      	movs	r3, #12
 800ce9c:	6033      	str	r3, [r6, #0]
 800ce9e:	2000      	movs	r0, #0
 800cea0:	bd70      	pop	{r4, r5, r6, pc}
 800cea2:	f000 f9bb 	bl	800d21c <__malloc_lock>
 800cea6:	4a21      	ldr	r2, [pc, #132]	; (800cf2c <_malloc_r+0xac>)
 800cea8:	6814      	ldr	r4, [r2, #0]
 800ceaa:	4621      	mov	r1, r4
 800ceac:	b991      	cbnz	r1, 800ced4 <_malloc_r+0x54>
 800ceae:	4c20      	ldr	r4, [pc, #128]	; (800cf30 <_malloc_r+0xb0>)
 800ceb0:	6823      	ldr	r3, [r4, #0]
 800ceb2:	b91b      	cbnz	r3, 800cebc <_malloc_r+0x3c>
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 f98f 	bl	800d1d8 <_sbrk_r>
 800ceba:	6020      	str	r0, [r4, #0]
 800cebc:	4629      	mov	r1, r5
 800cebe:	4630      	mov	r0, r6
 800cec0:	f000 f98a 	bl	800d1d8 <_sbrk_r>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d124      	bne.n	800cf12 <_malloc_r+0x92>
 800cec8:	230c      	movs	r3, #12
 800ceca:	6033      	str	r3, [r6, #0]
 800cecc:	4630      	mov	r0, r6
 800cece:	f000 f9a6 	bl	800d21e <__malloc_unlock>
 800ced2:	e7e4      	b.n	800ce9e <_malloc_r+0x1e>
 800ced4:	680b      	ldr	r3, [r1, #0]
 800ced6:	1b5b      	subs	r3, r3, r5
 800ced8:	d418      	bmi.n	800cf0c <_malloc_r+0x8c>
 800ceda:	2b0b      	cmp	r3, #11
 800cedc:	d90f      	bls.n	800cefe <_malloc_r+0x7e>
 800cede:	600b      	str	r3, [r1, #0]
 800cee0:	50cd      	str	r5, [r1, r3]
 800cee2:	18cc      	adds	r4, r1, r3
 800cee4:	4630      	mov	r0, r6
 800cee6:	f000 f99a 	bl	800d21e <__malloc_unlock>
 800ceea:	f104 000b 	add.w	r0, r4, #11
 800ceee:	1d23      	adds	r3, r4, #4
 800cef0:	f020 0007 	bic.w	r0, r0, #7
 800cef4:	1ac3      	subs	r3, r0, r3
 800cef6:	d0d3      	beq.n	800cea0 <_malloc_r+0x20>
 800cef8:	425a      	negs	r2, r3
 800cefa:	50e2      	str	r2, [r4, r3]
 800cefc:	e7d0      	b.n	800cea0 <_malloc_r+0x20>
 800cefe:	428c      	cmp	r4, r1
 800cf00:	684b      	ldr	r3, [r1, #4]
 800cf02:	bf16      	itet	ne
 800cf04:	6063      	strne	r3, [r4, #4]
 800cf06:	6013      	streq	r3, [r2, #0]
 800cf08:	460c      	movne	r4, r1
 800cf0a:	e7eb      	b.n	800cee4 <_malloc_r+0x64>
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	6849      	ldr	r1, [r1, #4]
 800cf10:	e7cc      	b.n	800ceac <_malloc_r+0x2c>
 800cf12:	1cc4      	adds	r4, r0, #3
 800cf14:	f024 0403 	bic.w	r4, r4, #3
 800cf18:	42a0      	cmp	r0, r4
 800cf1a:	d005      	beq.n	800cf28 <_malloc_r+0xa8>
 800cf1c:	1a21      	subs	r1, r4, r0
 800cf1e:	4630      	mov	r0, r6
 800cf20:	f000 f95a 	bl	800d1d8 <_sbrk_r>
 800cf24:	3001      	adds	r0, #1
 800cf26:	d0cf      	beq.n	800cec8 <_malloc_r+0x48>
 800cf28:	6025      	str	r5, [r4, #0]
 800cf2a:	e7db      	b.n	800cee4 <_malloc_r+0x64>
 800cf2c:	2000437c 	.word	0x2000437c
 800cf30:	20004380 	.word	0x20004380

0800cf34 <__ssputs_r>:
 800cf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf38:	688e      	ldr	r6, [r1, #8]
 800cf3a:	429e      	cmp	r6, r3
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	460c      	mov	r4, r1
 800cf40:	4690      	mov	r8, r2
 800cf42:	4699      	mov	r9, r3
 800cf44:	d837      	bhi.n	800cfb6 <__ssputs_r+0x82>
 800cf46:	898a      	ldrh	r2, [r1, #12]
 800cf48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf4c:	d031      	beq.n	800cfb2 <__ssputs_r+0x7e>
 800cf4e:	6825      	ldr	r5, [r4, #0]
 800cf50:	6909      	ldr	r1, [r1, #16]
 800cf52:	1a6f      	subs	r7, r5, r1
 800cf54:	6965      	ldr	r5, [r4, #20]
 800cf56:	2302      	movs	r3, #2
 800cf58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf5c:	fb95 f5f3 	sdiv	r5, r5, r3
 800cf60:	f109 0301 	add.w	r3, r9, #1
 800cf64:	443b      	add	r3, r7
 800cf66:	429d      	cmp	r5, r3
 800cf68:	bf38      	it	cc
 800cf6a:	461d      	movcc	r5, r3
 800cf6c:	0553      	lsls	r3, r2, #21
 800cf6e:	d530      	bpl.n	800cfd2 <__ssputs_r+0x9e>
 800cf70:	4629      	mov	r1, r5
 800cf72:	f7ff ff85 	bl	800ce80 <_malloc_r>
 800cf76:	4606      	mov	r6, r0
 800cf78:	b950      	cbnz	r0, 800cf90 <__ssputs_r+0x5c>
 800cf7a:	230c      	movs	r3, #12
 800cf7c:	f8ca 3000 	str.w	r3, [sl]
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf86:	81a3      	strh	r3, [r4, #12]
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf90:	463a      	mov	r2, r7
 800cf92:	6921      	ldr	r1, [r4, #16]
 800cf94:	f7fe f8cc 	bl	800b130 <memcpy>
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa2:	81a3      	strh	r3, [r4, #12]
 800cfa4:	6126      	str	r6, [r4, #16]
 800cfa6:	6165      	str	r5, [r4, #20]
 800cfa8:	443e      	add	r6, r7
 800cfaa:	1bed      	subs	r5, r5, r7
 800cfac:	6026      	str	r6, [r4, #0]
 800cfae:	60a5      	str	r5, [r4, #8]
 800cfb0:	464e      	mov	r6, r9
 800cfb2:	454e      	cmp	r6, r9
 800cfb4:	d900      	bls.n	800cfb8 <__ssputs_r+0x84>
 800cfb6:	464e      	mov	r6, r9
 800cfb8:	4632      	mov	r2, r6
 800cfba:	4641      	mov	r1, r8
 800cfbc:	6820      	ldr	r0, [r4, #0]
 800cfbe:	f7fe f8c2 	bl	800b146 <memmove>
 800cfc2:	68a3      	ldr	r3, [r4, #8]
 800cfc4:	1b9b      	subs	r3, r3, r6
 800cfc6:	60a3      	str	r3, [r4, #8]
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	441e      	add	r6, r3
 800cfcc:	6026      	str	r6, [r4, #0]
 800cfce:	2000      	movs	r0, #0
 800cfd0:	e7dc      	b.n	800cf8c <__ssputs_r+0x58>
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	f000 f972 	bl	800d2bc <_realloc_r>
 800cfd8:	4606      	mov	r6, r0
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d1e2      	bne.n	800cfa4 <__ssputs_r+0x70>
 800cfde:	6921      	ldr	r1, [r4, #16]
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	f000 f91d 	bl	800d220 <_free_r>
 800cfe6:	e7c8      	b.n	800cf7a <__ssputs_r+0x46>

0800cfe8 <_svfiprintf_r>:
 800cfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	461d      	mov	r5, r3
 800cfee:	898b      	ldrh	r3, [r1, #12]
 800cff0:	061f      	lsls	r7, r3, #24
 800cff2:	b09d      	sub	sp, #116	; 0x74
 800cff4:	4680      	mov	r8, r0
 800cff6:	460c      	mov	r4, r1
 800cff8:	4616      	mov	r6, r2
 800cffa:	d50f      	bpl.n	800d01c <_svfiprintf_r+0x34>
 800cffc:	690b      	ldr	r3, [r1, #16]
 800cffe:	b96b      	cbnz	r3, 800d01c <_svfiprintf_r+0x34>
 800d000:	2140      	movs	r1, #64	; 0x40
 800d002:	f7ff ff3d 	bl	800ce80 <_malloc_r>
 800d006:	6020      	str	r0, [r4, #0]
 800d008:	6120      	str	r0, [r4, #16]
 800d00a:	b928      	cbnz	r0, 800d018 <_svfiprintf_r+0x30>
 800d00c:	230c      	movs	r3, #12
 800d00e:	f8c8 3000 	str.w	r3, [r8]
 800d012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d016:	e0c8      	b.n	800d1aa <_svfiprintf_r+0x1c2>
 800d018:	2340      	movs	r3, #64	; 0x40
 800d01a:	6163      	str	r3, [r4, #20]
 800d01c:	2300      	movs	r3, #0
 800d01e:	9309      	str	r3, [sp, #36]	; 0x24
 800d020:	2320      	movs	r3, #32
 800d022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d026:	2330      	movs	r3, #48	; 0x30
 800d028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d02c:	9503      	str	r5, [sp, #12]
 800d02e:	f04f 0b01 	mov.w	fp, #1
 800d032:	4637      	mov	r7, r6
 800d034:	463d      	mov	r5, r7
 800d036:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d03a:	b10b      	cbz	r3, 800d040 <_svfiprintf_r+0x58>
 800d03c:	2b25      	cmp	r3, #37	; 0x25
 800d03e:	d13e      	bne.n	800d0be <_svfiprintf_r+0xd6>
 800d040:	ebb7 0a06 	subs.w	sl, r7, r6
 800d044:	d00b      	beq.n	800d05e <_svfiprintf_r+0x76>
 800d046:	4653      	mov	r3, sl
 800d048:	4632      	mov	r2, r6
 800d04a:	4621      	mov	r1, r4
 800d04c:	4640      	mov	r0, r8
 800d04e:	f7ff ff71 	bl	800cf34 <__ssputs_r>
 800d052:	3001      	adds	r0, #1
 800d054:	f000 80a4 	beq.w	800d1a0 <_svfiprintf_r+0x1b8>
 800d058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d05a:	4453      	add	r3, sl
 800d05c:	9309      	str	r3, [sp, #36]	; 0x24
 800d05e:	783b      	ldrb	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 809d 	beq.w	800d1a0 <_svfiprintf_r+0x1b8>
 800d066:	2300      	movs	r3, #0
 800d068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d070:	9304      	str	r3, [sp, #16]
 800d072:	9307      	str	r3, [sp, #28]
 800d074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d078:	931a      	str	r3, [sp, #104]	; 0x68
 800d07a:	462f      	mov	r7, r5
 800d07c:	2205      	movs	r2, #5
 800d07e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d082:	4850      	ldr	r0, [pc, #320]	; (800d1c4 <_svfiprintf_r+0x1dc>)
 800d084:	f7f3 f8ac 	bl	80001e0 <memchr>
 800d088:	9b04      	ldr	r3, [sp, #16]
 800d08a:	b9d0      	cbnz	r0, 800d0c2 <_svfiprintf_r+0xda>
 800d08c:	06d9      	lsls	r1, r3, #27
 800d08e:	bf44      	itt	mi
 800d090:	2220      	movmi	r2, #32
 800d092:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d096:	071a      	lsls	r2, r3, #28
 800d098:	bf44      	itt	mi
 800d09a:	222b      	movmi	r2, #43	; 0x2b
 800d09c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0a0:	782a      	ldrb	r2, [r5, #0]
 800d0a2:	2a2a      	cmp	r2, #42	; 0x2a
 800d0a4:	d015      	beq.n	800d0d2 <_svfiprintf_r+0xea>
 800d0a6:	9a07      	ldr	r2, [sp, #28]
 800d0a8:	462f      	mov	r7, r5
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	250a      	movs	r5, #10
 800d0ae:	4639      	mov	r1, r7
 800d0b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b4:	3b30      	subs	r3, #48	; 0x30
 800d0b6:	2b09      	cmp	r3, #9
 800d0b8:	d94d      	bls.n	800d156 <_svfiprintf_r+0x16e>
 800d0ba:	b1b8      	cbz	r0, 800d0ec <_svfiprintf_r+0x104>
 800d0bc:	e00f      	b.n	800d0de <_svfiprintf_r+0xf6>
 800d0be:	462f      	mov	r7, r5
 800d0c0:	e7b8      	b.n	800d034 <_svfiprintf_r+0x4c>
 800d0c2:	4a40      	ldr	r2, [pc, #256]	; (800d1c4 <_svfiprintf_r+0x1dc>)
 800d0c4:	1a80      	subs	r0, r0, r2
 800d0c6:	fa0b f000 	lsl.w	r0, fp, r0
 800d0ca:	4318      	orrs	r0, r3
 800d0cc:	9004      	str	r0, [sp, #16]
 800d0ce:	463d      	mov	r5, r7
 800d0d0:	e7d3      	b.n	800d07a <_svfiprintf_r+0x92>
 800d0d2:	9a03      	ldr	r2, [sp, #12]
 800d0d4:	1d11      	adds	r1, r2, #4
 800d0d6:	6812      	ldr	r2, [r2, #0]
 800d0d8:	9103      	str	r1, [sp, #12]
 800d0da:	2a00      	cmp	r2, #0
 800d0dc:	db01      	blt.n	800d0e2 <_svfiprintf_r+0xfa>
 800d0de:	9207      	str	r2, [sp, #28]
 800d0e0:	e004      	b.n	800d0ec <_svfiprintf_r+0x104>
 800d0e2:	4252      	negs	r2, r2
 800d0e4:	f043 0302 	orr.w	r3, r3, #2
 800d0e8:	9207      	str	r2, [sp, #28]
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	783b      	ldrb	r3, [r7, #0]
 800d0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d0f0:	d10c      	bne.n	800d10c <_svfiprintf_r+0x124>
 800d0f2:	787b      	ldrb	r3, [r7, #1]
 800d0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f6:	d133      	bne.n	800d160 <_svfiprintf_r+0x178>
 800d0f8:	9b03      	ldr	r3, [sp, #12]
 800d0fa:	1d1a      	adds	r2, r3, #4
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	9203      	str	r2, [sp, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	bfb8      	it	lt
 800d104:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d108:	3702      	adds	r7, #2
 800d10a:	9305      	str	r3, [sp, #20]
 800d10c:	4d2e      	ldr	r5, [pc, #184]	; (800d1c8 <_svfiprintf_r+0x1e0>)
 800d10e:	7839      	ldrb	r1, [r7, #0]
 800d110:	2203      	movs	r2, #3
 800d112:	4628      	mov	r0, r5
 800d114:	f7f3 f864 	bl	80001e0 <memchr>
 800d118:	b138      	cbz	r0, 800d12a <_svfiprintf_r+0x142>
 800d11a:	2340      	movs	r3, #64	; 0x40
 800d11c:	1b40      	subs	r0, r0, r5
 800d11e:	fa03 f000 	lsl.w	r0, r3, r0
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	4303      	orrs	r3, r0
 800d126:	3701      	adds	r7, #1
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	7839      	ldrb	r1, [r7, #0]
 800d12c:	4827      	ldr	r0, [pc, #156]	; (800d1cc <_svfiprintf_r+0x1e4>)
 800d12e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d132:	2206      	movs	r2, #6
 800d134:	1c7e      	adds	r6, r7, #1
 800d136:	f7f3 f853 	bl	80001e0 <memchr>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d038      	beq.n	800d1b0 <_svfiprintf_r+0x1c8>
 800d13e:	4b24      	ldr	r3, [pc, #144]	; (800d1d0 <_svfiprintf_r+0x1e8>)
 800d140:	bb13      	cbnz	r3, 800d188 <_svfiprintf_r+0x1a0>
 800d142:	9b03      	ldr	r3, [sp, #12]
 800d144:	3307      	adds	r3, #7
 800d146:	f023 0307 	bic.w	r3, r3, #7
 800d14a:	3308      	adds	r3, #8
 800d14c:	9303      	str	r3, [sp, #12]
 800d14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d150:	444b      	add	r3, r9
 800d152:	9309      	str	r3, [sp, #36]	; 0x24
 800d154:	e76d      	b.n	800d032 <_svfiprintf_r+0x4a>
 800d156:	fb05 3202 	mla	r2, r5, r2, r3
 800d15a:	2001      	movs	r0, #1
 800d15c:	460f      	mov	r7, r1
 800d15e:	e7a6      	b.n	800d0ae <_svfiprintf_r+0xc6>
 800d160:	2300      	movs	r3, #0
 800d162:	3701      	adds	r7, #1
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	4619      	mov	r1, r3
 800d168:	250a      	movs	r5, #10
 800d16a:	4638      	mov	r0, r7
 800d16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d170:	3a30      	subs	r2, #48	; 0x30
 800d172:	2a09      	cmp	r2, #9
 800d174:	d903      	bls.n	800d17e <_svfiprintf_r+0x196>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0c8      	beq.n	800d10c <_svfiprintf_r+0x124>
 800d17a:	9105      	str	r1, [sp, #20]
 800d17c:	e7c6      	b.n	800d10c <_svfiprintf_r+0x124>
 800d17e:	fb05 2101 	mla	r1, r5, r1, r2
 800d182:	2301      	movs	r3, #1
 800d184:	4607      	mov	r7, r0
 800d186:	e7f0      	b.n	800d16a <_svfiprintf_r+0x182>
 800d188:	ab03      	add	r3, sp, #12
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	4622      	mov	r2, r4
 800d18e:	4b11      	ldr	r3, [pc, #68]	; (800d1d4 <_svfiprintf_r+0x1ec>)
 800d190:	a904      	add	r1, sp, #16
 800d192:	4640      	mov	r0, r8
 800d194:	f7fe f88c 	bl	800b2b0 <_printf_float>
 800d198:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d19c:	4681      	mov	r9, r0
 800d19e:	d1d6      	bne.n	800d14e <_svfiprintf_r+0x166>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	065b      	lsls	r3, r3, #25
 800d1a4:	f53f af35 	bmi.w	800d012 <_svfiprintf_r+0x2a>
 800d1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1aa:	b01d      	add	sp, #116	; 0x74
 800d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	4b07      	ldr	r3, [pc, #28]	; (800d1d4 <_svfiprintf_r+0x1ec>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	f7fe fb2e 	bl	800b81c <_printf_i>
 800d1c0:	e7ea      	b.n	800d198 <_svfiprintf_r+0x1b0>
 800d1c2:	bf00      	nop
 800d1c4:	0800d7bc 	.word	0x0800d7bc
 800d1c8:	0800d7c2 	.word	0x0800d7c2
 800d1cc:	0800d7c6 	.word	0x0800d7c6
 800d1d0:	0800b2b1 	.word	0x0800b2b1
 800d1d4:	0800cf35 	.word	0x0800cf35

0800d1d8 <_sbrk_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4c06      	ldr	r4, [pc, #24]	; (800d1f4 <_sbrk_r+0x1c>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4605      	mov	r5, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	f7fd fc5c 	bl	800aaa0 <_sbrk>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_sbrk_r+0x1a>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_sbrk_r+0x1a>
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	20004524 	.word	0x20004524

0800d1f8 <__ascii_mbtowc>:
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	b901      	cbnz	r1, 800d1fe <__ascii_mbtowc+0x6>
 800d1fc:	a901      	add	r1, sp, #4
 800d1fe:	b142      	cbz	r2, 800d212 <__ascii_mbtowc+0x1a>
 800d200:	b14b      	cbz	r3, 800d216 <__ascii_mbtowc+0x1e>
 800d202:	7813      	ldrb	r3, [r2, #0]
 800d204:	600b      	str	r3, [r1, #0]
 800d206:	7812      	ldrb	r2, [r2, #0]
 800d208:	1c10      	adds	r0, r2, #0
 800d20a:	bf18      	it	ne
 800d20c:	2001      	movne	r0, #1
 800d20e:	b002      	add	sp, #8
 800d210:	4770      	bx	lr
 800d212:	4610      	mov	r0, r2
 800d214:	e7fb      	b.n	800d20e <__ascii_mbtowc+0x16>
 800d216:	f06f 0001 	mvn.w	r0, #1
 800d21a:	e7f8      	b.n	800d20e <__ascii_mbtowc+0x16>

0800d21c <__malloc_lock>:
 800d21c:	4770      	bx	lr

0800d21e <__malloc_unlock>:
 800d21e:	4770      	bx	lr

0800d220 <_free_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4605      	mov	r5, r0
 800d224:	2900      	cmp	r1, #0
 800d226:	d045      	beq.n	800d2b4 <_free_r+0x94>
 800d228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d22c:	1f0c      	subs	r4, r1, #4
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bfb8      	it	lt
 800d232:	18e4      	addlt	r4, r4, r3
 800d234:	f7ff fff2 	bl	800d21c <__malloc_lock>
 800d238:	4a1f      	ldr	r2, [pc, #124]	; (800d2b8 <_free_r+0x98>)
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	4610      	mov	r0, r2
 800d23e:	b933      	cbnz	r3, 800d24e <_free_r+0x2e>
 800d240:	6063      	str	r3, [r4, #4]
 800d242:	6014      	str	r4, [r2, #0]
 800d244:	4628      	mov	r0, r5
 800d246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d24a:	f7ff bfe8 	b.w	800d21e <__malloc_unlock>
 800d24e:	42a3      	cmp	r3, r4
 800d250:	d90c      	bls.n	800d26c <_free_r+0x4c>
 800d252:	6821      	ldr	r1, [r4, #0]
 800d254:	1862      	adds	r2, r4, r1
 800d256:	4293      	cmp	r3, r2
 800d258:	bf04      	itt	eq
 800d25a:	681a      	ldreq	r2, [r3, #0]
 800d25c:	685b      	ldreq	r3, [r3, #4]
 800d25e:	6063      	str	r3, [r4, #4]
 800d260:	bf04      	itt	eq
 800d262:	1852      	addeq	r2, r2, r1
 800d264:	6022      	streq	r2, [r4, #0]
 800d266:	6004      	str	r4, [r0, #0]
 800d268:	e7ec      	b.n	800d244 <_free_r+0x24>
 800d26a:	4613      	mov	r3, r2
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	b10a      	cbz	r2, 800d274 <_free_r+0x54>
 800d270:	42a2      	cmp	r2, r4
 800d272:	d9fa      	bls.n	800d26a <_free_r+0x4a>
 800d274:	6819      	ldr	r1, [r3, #0]
 800d276:	1858      	adds	r0, r3, r1
 800d278:	42a0      	cmp	r0, r4
 800d27a:	d10b      	bne.n	800d294 <_free_r+0x74>
 800d27c:	6820      	ldr	r0, [r4, #0]
 800d27e:	4401      	add	r1, r0
 800d280:	1858      	adds	r0, r3, r1
 800d282:	4282      	cmp	r2, r0
 800d284:	6019      	str	r1, [r3, #0]
 800d286:	d1dd      	bne.n	800d244 <_free_r+0x24>
 800d288:	6810      	ldr	r0, [r2, #0]
 800d28a:	6852      	ldr	r2, [r2, #4]
 800d28c:	605a      	str	r2, [r3, #4]
 800d28e:	4401      	add	r1, r0
 800d290:	6019      	str	r1, [r3, #0]
 800d292:	e7d7      	b.n	800d244 <_free_r+0x24>
 800d294:	d902      	bls.n	800d29c <_free_r+0x7c>
 800d296:	230c      	movs	r3, #12
 800d298:	602b      	str	r3, [r5, #0]
 800d29a:	e7d3      	b.n	800d244 <_free_r+0x24>
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	1821      	adds	r1, r4, r0
 800d2a0:	428a      	cmp	r2, r1
 800d2a2:	bf04      	itt	eq
 800d2a4:	6811      	ldreq	r1, [r2, #0]
 800d2a6:	6852      	ldreq	r2, [r2, #4]
 800d2a8:	6062      	str	r2, [r4, #4]
 800d2aa:	bf04      	itt	eq
 800d2ac:	1809      	addeq	r1, r1, r0
 800d2ae:	6021      	streq	r1, [r4, #0]
 800d2b0:	605c      	str	r4, [r3, #4]
 800d2b2:	e7c7      	b.n	800d244 <_free_r+0x24>
 800d2b4:	bd38      	pop	{r3, r4, r5, pc}
 800d2b6:	bf00      	nop
 800d2b8:	2000437c 	.word	0x2000437c

0800d2bc <_realloc_r>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	4607      	mov	r7, r0
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	460e      	mov	r6, r1
 800d2c4:	b921      	cbnz	r1, 800d2d0 <_realloc_r+0x14>
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2cc:	f7ff bdd8 	b.w	800ce80 <_malloc_r>
 800d2d0:	b922      	cbnz	r2, 800d2dc <_realloc_r+0x20>
 800d2d2:	f7ff ffa5 	bl	800d220 <_free_r>
 800d2d6:	4625      	mov	r5, r4
 800d2d8:	4628      	mov	r0, r5
 800d2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2dc:	f000 f821 	bl	800d322 <_malloc_usable_size_r>
 800d2e0:	42a0      	cmp	r0, r4
 800d2e2:	d20f      	bcs.n	800d304 <_realloc_r+0x48>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	f7ff fdca 	bl	800ce80 <_malloc_r>
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d0f2      	beq.n	800d2d8 <_realloc_r+0x1c>
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	f7fd ff1b 	bl	800b130 <memcpy>
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f7ff ff8f 	bl	800d220 <_free_r>
 800d302:	e7e9      	b.n	800d2d8 <_realloc_r+0x1c>
 800d304:	4635      	mov	r5, r6
 800d306:	e7e7      	b.n	800d2d8 <_realloc_r+0x1c>

0800d308 <__ascii_wctomb>:
 800d308:	b149      	cbz	r1, 800d31e <__ascii_wctomb+0x16>
 800d30a:	2aff      	cmp	r2, #255	; 0xff
 800d30c:	bf85      	ittet	hi
 800d30e:	238a      	movhi	r3, #138	; 0x8a
 800d310:	6003      	strhi	r3, [r0, #0]
 800d312:	700a      	strbls	r2, [r1, #0]
 800d314:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d318:	bf98      	it	ls
 800d31a:	2001      	movls	r0, #1
 800d31c:	4770      	bx	lr
 800d31e:	4608      	mov	r0, r1
 800d320:	4770      	bx	lr

0800d322 <_malloc_usable_size_r>:
 800d322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d326:	1f18      	subs	r0, r3, #4
 800d328:	2b00      	cmp	r3, #0
 800d32a:	bfbc      	itt	lt
 800d32c:	580b      	ldrlt	r3, [r1, r0]
 800d32e:	18c0      	addlt	r0, r0, r3
 800d330:	4770      	bx	lr
	...

0800d334 <_init>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	bf00      	nop
 800d338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33a:	bc08      	pop	{r3}
 800d33c:	469e      	mov	lr, r3
 800d33e:	4770      	bx	lr

0800d340 <_fini>:
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d342:	bf00      	nop
 800d344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d346:	bc08      	pop	{r3}
 800d348:	469e      	mov	lr, r3
 800d34a:	4770      	bx	lr
