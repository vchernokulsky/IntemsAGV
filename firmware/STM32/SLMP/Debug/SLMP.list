
SLMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce8  08009ce8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce8  08009ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cf0  08009cf0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004338  20000098  08009d98  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043d0  08009d98  000243d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f8ce  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005acb  00000000  00000000  0004f996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bf8  00000000  00000000  00055468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a00  00000000  00000000  00057060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ee84  00000000  00000000  00058a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167ff  00000000  00000000  000778e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a51aa  00000000  00000000  0008e0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013328d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf4  00000000  00000000  00133308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a84 	.word	0x08009a84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08009a84 	.word	0x08009a84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f008 fc68 	bl	8008e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f008 fab4 	bl	8008b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	2000422c 	.word	0x2000422c

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000422c 	.word	0x2000422c

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800063a:	bf00      	nop
 800063c:	f7ff ffde 	bl	80005fc <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff4c 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff61 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff54 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e159      	b.n	8000aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000838:	2201      	movs	r2, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8148 	bne.w	8000ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x4a>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	69b9      	ldr	r1, [r7, #24]
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0203 	and.w	r2, r3, #3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00b      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	2b11      	cmp	r3, #17
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d130      	bne.n	8000964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80a2 	beq.w	8000ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009be:	4a51      	ldr	r2, [pc, #324]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2ec>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d019      	beq.n	8000a1e <HAL_GPIO_Init+0x202>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a47      	ldr	r2, [pc, #284]	; (8000b0c <HAL_GPIO_Init+0x2f0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x1fe>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_GPIO_Init+0x2f4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x1fa>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <HAL_GPIO_Init+0x2f8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x1f6>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <HAL_GPIO_Init+0x2fc>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x1f2>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x204>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a30:	4934      	ldr	r1, [pc, #208]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a62:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a8c:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	f67f aea2 	bls.w	8000838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b3c:	e003      	b.n	8000b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f806 	bl	8000b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e22d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d075      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bba:	4ba3      	ldr	r3, [pc, #652]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d00c      	beq.n	8000be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc6:	4ba0      	ldr	r3, [pc, #640]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d112      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bd2:	4b9d      	ldr	r3, [pc, #628]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bde:	d10b      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be0:	4b99      	ldr	r3, [pc, #612]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d05b      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x108>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d157      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e208      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d106      	bne.n	8000c10 <HAL_RCC_OscConfig+0x74>
 8000c02:	4b91      	ldr	r3, [pc, #580]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e01d      	b.n	8000c4c <HAL_RCC_OscConfig+0xb0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x98>
 8000c1a:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a8a      	ldr	r2, [pc, #552]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b88      	ldr	r3, [pc, #544]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a87      	ldr	r2, [pc, #540]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00b      	b.n	8000c4c <HAL_RCC_OscConfig+0xb0>
 8000c34:	4b84      	ldr	r3, [pc, #528]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a83      	ldr	r2, [pc, #524]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a80      	ldr	r2, [pc, #512]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fcd2 	bl	80005fc <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fcce 	bl	80005fc <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e1cd      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	4b76      	ldr	r3, [pc, #472]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0xc0>
 8000c7a:	e014      	b.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fcbe 	bl	80005fc <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fcba 	bl	80005fc <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	; 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1b9      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0xe8>
 8000ca2:	e000      	b.n	8000ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb2:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cbe:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cca:	4b5f      	ldr	r3, [pc, #380]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d116      	bne.n	8000d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x152>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e18d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4952      	ldr	r1, [pc, #328]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	e03a      	b.n	8000d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	4b4f      	ldr	r3, [pc, #316]	; (8000e4c <HAL_RCC_OscConfig+0x2b0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc73 	bl	80005fc <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc6f 	bl	80005fc <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e16e      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4940      	ldr	r1, [pc, #256]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <HAL_RCC_OscConfig+0x2b0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc52 	bl	80005fc <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc4e 	bl	80005fc <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e14d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d030      	beq.n	8000de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d016      	beq.n	8000dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_RCC_OscConfig+0x2b4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc32 	bl	80005fc <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc2e 	bl	80005fc <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e12d      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x200>
 8000dba:	e015      	b.n	8000de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_RCC_OscConfig+0x2b4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc1b 	bl	80005fc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dca:	f7ff fc17 	bl	80005fc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e116      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f0      	bne.n	8000dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a0 	beq.w	8000f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10f      	bne.n	8000e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_RCC_OscConfig+0x2ac>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d121      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_RCC_OscConfig+0x2b8>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbdd 	bl	80005fc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	e011      	b.n	8000e6a <HAL_RCC_OscConfig+0x2ce>
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000
 8000e50:	42470e80 	.word	0x42470e80
 8000e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e58:	f7ff fbd0 	bl	80005fc <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e0cf      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x478>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
 8000e7e:	4b66      	ldr	r3, [pc, #408]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8a:	e01c      	b.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x312>
 8000e94:	4b60      	ldr	r3, [pc, #384]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e98:	4a5f      	ldr	r2, [pc, #380]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea0:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea4:	4a5c      	ldr	r2, [pc, #368]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	4a59      	ldr	r2, [pc, #356]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb95 	bl	80005fc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb91 	bl	80005fc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e08e      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ee      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x33a>
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb7f 	bl	80005fc <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fb7b 	bl	80005fc <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e078      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ee      	bne.n	8000f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d105      	bne.n	8000f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d064      	beq.n	8001008 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d05c      	beq.n	8001004 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d141      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb50 	bl	80005fc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fb4c 	bl	80005fc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e04b      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	3b01      	subs	r3, #1
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	491d      	ldr	r1, [pc, #116]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb25 	bl	80005fc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fb21 	bl	80005fc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e020      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x41a>
 8000fd4:	e018      	b.n	8001008 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_RCC_OscConfig+0x480>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb0e 	bl	80005fc <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fb0a 	bl	80005fc <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e009      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_RCC_OscConfig+0x47c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x448>
 8001002:	e001      	b.n	8001008 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40007000 	.word	0x40007000
 8001018:	40023800 	.word	0x40023800
 800101c:	42470060 	.word	0x42470060

08001020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0ca      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001034:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d90c      	bls.n	800105c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0b6      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d020      	beq.n	80010aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001074:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800107a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800107e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800108c:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	494c      	ldr	r1, [pc, #304]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d044      	beq.n	8001140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d119      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e07d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e06d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e065      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f023 0203 	bic.w	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4933      	ldr	r1, [pc, #204]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001110:	f7ff fa74 	bl	80005fc <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	e00a      	b.n	800112e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff fa70 	bl	80005fc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f241 3288 	movw	r2, #5000	; 0x1388
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e04d      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 020c 	and.w	r2, r3, #12
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	429a      	cmp	r2, r3
 800113e:	d1eb      	bne.n	8001118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d20c      	bcs.n	8001168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e030      	b.n	80011ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	490d      	ldr	r1, [pc, #52]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f000 f81d 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 80011aa:	4601      	mov	r1, r0
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	fa21 f303 	lsr.w	r3, r1, r3
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f007 fe66 	bl	8008e94 <HAL_InitTick>

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	08009c9c 	.word	0x08009c9c
 80011e0:	20000030 	.word	0x20000030

080011e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d007      	beq.n	8001216 <HAL_RCC_GetSysClockFreq+0x32>
 8001206:	2b08      	cmp	r3, #8
 8001208:	d008      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x38>
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 80b4 	bne.w	8001378 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001212:	60bb      	str	r3, [r7, #8]
       break;
 8001214:	e0b3      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001218:	60bb      	str	r3, [r7, #8]
      break;
 800121a:	e0b0      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800121c:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001224:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001226:	4b58      	ldr	r3, [pc, #352]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04a      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001232:	4b55      	ldr	r3, [pc, #340]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	ea03 0501 	and.w	r5, r3, r1
 8001248:	ea04 0602 	and.w	r6, r4, r2
 800124c:	4629      	mov	r1, r5
 800124e:	4632      	mov	r2, r6
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	0154      	lsls	r4, r2, #5
 800125a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800125e:	014b      	lsls	r3, r1, #5
 8001260:	4619      	mov	r1, r3
 8001262:	4622      	mov	r2, r4
 8001264:	1b49      	subs	r1, r1, r5
 8001266:	eb62 0206 	sbc.w	r2, r2, r6
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	f04f 0400 	mov.w	r4, #0
 8001272:	0194      	lsls	r4, r2, #6
 8001274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001278:	018b      	lsls	r3, r1, #6
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	eb64 0402 	sbc.w	r4, r4, r2
 8001280:	f04f 0100 	mov.w	r1, #0
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	00e2      	lsls	r2, r4, #3
 800128a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800128e:	00d9      	lsls	r1, r3, #3
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	195b      	adds	r3, r3, r5
 8001296:	eb44 0406 	adc.w	r4, r4, r6
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	0262      	lsls	r2, r4, #9
 80012a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012a8:	0259      	lsls	r1, r3, #9
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7fe ffe8 	bl	8000290 <__aeabi_uldivmod>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e049      	b.n	800135c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	f04f 0400 	mov.w	r4, #0
 80012d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	ea03 0501 	and.w	r5, r3, r1
 80012de:	ea04 0602 	and.w	r6, r4, r2
 80012e2:	4629      	mov	r1, r5
 80012e4:	4632      	mov	r2, r6
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	f04f 0400 	mov.w	r4, #0
 80012ee:	0154      	lsls	r4, r2, #5
 80012f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f4:	014b      	lsls	r3, r1, #5
 80012f6:	4619      	mov	r1, r3
 80012f8:	4622      	mov	r2, r4
 80012fa:	1b49      	subs	r1, r1, r5
 80012fc:	eb62 0206 	sbc.w	r2, r2, r6
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f04f 0400 	mov.w	r4, #0
 8001308:	0194      	lsls	r4, r2, #6
 800130a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800130e:	018b      	lsls	r3, r1, #6
 8001310:	1a5b      	subs	r3, r3, r1
 8001312:	eb64 0402 	sbc.w	r4, r4, r2
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	00e2      	lsls	r2, r4, #3
 8001320:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001324:	00d9      	lsls	r1, r3, #3
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	195b      	adds	r3, r3, r5
 800132c:	eb44 0406 	adc.w	r4, r4, r6
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	02a2      	lsls	r2, r4, #10
 800133a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800133e:	0299      	lsls	r1, r3, #10
 8001340:	460b      	mov	r3, r1
 8001342:	4614      	mov	r4, r2
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f04f 0400 	mov.w	r4, #0
 800134e:	461a      	mov	r2, r3
 8001350:	4623      	mov	r3, r4
 8001352:	f7fe ff9d 	bl	8000290 <__aeabi_uldivmod>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	0c1b      	lsrs	r3, r3, #16
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	3301      	adds	r3, #1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	60bb      	str	r3, [r7, #8]
      break;
 8001376:	e002      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800137a:	60bb      	str	r3, [r7, #8]
      break;
 800137c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137e:	68bb      	ldr	r3, [r7, #8]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	00f42400 	.word	0x00f42400
 8001390:	007a1200 	.word	0x007a1200

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff0 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b4:	4601      	mov	r1, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0a9b      	lsrs	r3, r3, #10
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	08009cac 	.word	0x08009cac

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffdc 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013dc:	4601      	mov	r1, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0b5b      	lsrs	r3, r3, #13
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	08009cac 	.word	0x08009cac

080013fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	220f      	movs	r2, #15
 800140a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_RCC_GetClockConfig+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e056      	b.n	8001520 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f007 fb7b 	bl	8008b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2202      	movs	r2, #2
 8001496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	ea42 0103 	orr.w	r1, r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	f003 0104 	and.w	r1, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_SPI_Transmit+0x22>
 8001546:	2302      	movs	r3, #2
 8001548:	e11e      	b.n	8001788 <HAL_SPI_Transmit+0x260>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001552:	f7ff f853 	bl	80005fc <HAL_GetTick>
 8001556:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d002      	beq.n	800156e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800156c:	e103      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_SPI_Transmit+0x52>
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800157e:	e0fa      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c6:	d107      	bne.n	80015d8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	d007      	beq.n	80015f6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fe:	d14b      	bne.n	8001698 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_SPI_Transmit+0xe6>
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d13e      	bne.n	800168c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	1c9a      	adds	r2, r3, #2
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001632:	e02b      	b.n	800168c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d112      	bne.n	8001668 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	1c9a      	adds	r2, r3, #2
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165c:	b29b      	uxth	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	86da      	strh	r2, [r3, #54]	; 0x36
 8001666:	e011      	b.n	800168c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001668:	f7fe ffc8 	bl	80005fc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d803      	bhi.n	8001680 <HAL_SPI_Transmit+0x158>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167e:	d102      	bne.n	8001686 <HAL_SPI_Transmit+0x15e>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	77fb      	strb	r3, [r7, #31]
          goto error;
 800168a:	e074      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ce      	bne.n	8001634 <HAL_SPI_Transmit+0x10c>
 8001696:	e04c      	b.n	8001732 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_SPI_Transmit+0x17e>
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d140      	bne.n	8001728 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	330c      	adds	r3, #12
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80016cc:	e02c      	b.n	8001728 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d113      	bne.n	8001704 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	330c      	adds	r3, #12
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	86da      	strh	r2, [r3, #54]	; 0x36
 8001702:	e011      	b.n	8001728 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001704:	f7fe ff7a 	bl	80005fc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d803      	bhi.n	800171c <HAL_SPI_Transmit+0x1f4>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171a:	d102      	bne.n	8001722 <HAL_SPI_Transmit+0x1fa>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001726:	e026      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1cd      	bne.n	80016ce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fba4 	bl	8001e84 <SPI_EndRxTxTransaction>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2220      	movs	r2, #32
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e000      	b.n	8001776 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001774:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001786:	7ffb      	ldrb	r3, [r7, #31]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017ac:	d112      	bne.n	80017d4 <HAL_SPI_Receive+0x44>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2204      	movs	r2, #4
 80017ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f8e9 	bl	80019a2 <HAL_SPI_TransmitReceive>
 80017d0:	4603      	mov	r3, r0
 80017d2:	e0e2      	b.n	800199a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_SPI_Receive+0x52>
 80017de:	2302      	movs	r3, #2
 80017e0:	e0db      	b.n	800199a <HAL_SPI_Receive+0x20a>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017ea:	f7fe ff07 	bl	80005fc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d002      	beq.n	8001802 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
 80017fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001800:	e0c2      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_SPI_Receive+0x7e>
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001812:	e0b9      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2204      	movs	r2, #4
 8001818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	88fa      	ldrh	r2, [r7, #6]
 8001832:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185a:	d107      	bne.n	800186c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800186a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	2b40      	cmp	r3, #64	; 0x40
 8001878:	d007      	beq.n	800188a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d162      	bne.n	8001958 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001892:	e02e      	b.n	80018f2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d115      	bne.n	80018ce <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f103 020c 	add.w	r2, r3, #12
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80018cc:	e011      	b.n	80018f2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ce:	f7fe fe95 	bl	80005fc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d803      	bhi.n	80018e6 <HAL_SPI_Receive+0x156>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e4:	d102      	bne.n	80018ec <HAL_SPI_Receive+0x15c>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80018f0:	e04a      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1cb      	bne.n	8001894 <HAL_SPI_Receive+0x104>
 80018fc:	e031      	b.n	8001962 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d113      	bne.n	8001934 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	b292      	uxth	r2, r2
 8001918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	1c9a      	adds	r2, r3, #2
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001932:	e011      	b.n	8001958 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001934:	f7fe fe62 	bl	80005fc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d803      	bhi.n	800194c <HAL_SPI_Receive+0x1bc>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800194a:	d102      	bne.n	8001952 <HAL_SPI_Receive+0x1c2>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001956:	e017      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1cd      	bne.n	80018fe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa27 	bl	8001dba <SPI_EndRxTransaction>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2220      	movs	r2, #32
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e000      	b.n	8001988 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08c      	sub	sp, #48	; 0x30
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_SPI_TransmitReceive+0x26>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e18a      	b.n	8001cde <HAL_SPI_TransmitReceive+0x33c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019d0:	f7fe fe14 	bl	80005fc <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00f      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x70>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f8:	d107      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x68>
 8001a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a10:	e15b      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x82>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x82>
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a2a:	e14e      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d003      	beq.n	8001a40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2205      	movs	r2, #5
 8001a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d007      	beq.n	8001a94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a9c:	d178      	bne.n	8001b90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x10a>
 8001aa6:	8b7b      	ldrh	r3, [r7, #26]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d166      	bne.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	1c9a      	adds	r2, r3, #2
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ad0:	e053      	b.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d11b      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d113      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	1c9a      	adds	r2, r3, #2
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d119      	bne.n	8001b5a <HAL_SPI_TransmitReceive+0x1b8>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d014      	beq.n	8001b5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	1c9a      	adds	r2, r3, #2
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b5a:	f7fe fd4f 	bl	80005fc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d807      	bhi.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b70:	d003      	beq.n	8001b7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b78:	e0a7      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1a6      	bne.n	8001ad2 <HAL_SPI_TransmitReceive+0x130>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1a1      	bne.n	8001ad2 <HAL_SPI_TransmitReceive+0x130>
 8001b8e:	e07c      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x1fc>
 8001b98:	8b7b      	ldrh	r3, [r7, #26]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d16b      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bc4:	e057      	b.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d11c      	bne.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d114      	bne.n	8001c0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	330c      	adds	r3, #12
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <HAL_SPI_TransmitReceive+0x2ae>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d014      	beq.n	8001c50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c50:	f7fe fcd4 	bl	80005fc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d803      	bhi.n	8001c68 <HAL_SPI_TransmitReceive+0x2c6>
 8001c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c66:	d102      	bne.n	8001c6e <HAL_SPI_TransmitReceive+0x2cc>
 8001c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c74:	e029      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1a2      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x224>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d19d      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8f8 	bl	8001e84 <SPI_EndRxTxTransaction>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001ca6:	e010      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	e000      	b.n	8001cca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3730      	adds	r7, #48	; 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cf6:	e04c      	b.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfe:	d048      	beq.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d00:	f7fe fc7c 	bl	80005fc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d902      	bls.n	8001d16 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13d      	bne.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d2e:	d111      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d38:	d004      	beq.n	8001d44 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d107      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5c:	d10f      	bne.n	8001d7e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e00f      	b.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1a3      	bne.n	8001cf8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af02      	add	r7, sp, #8
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dce:	d111      	bne.n	8001df4 <SPI_EndRxTransaction+0x3a>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	d004      	beq.n	8001de4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d107      	bne.n	8001df4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dfc:	d12a      	bne.n	8001e54 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d012      	beq.n	8001e2e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff67 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02d      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e026      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff ff54 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01a      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e013      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff41 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e000      	b.n	8001e7c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <SPI_EndRxTxTransaction+0x7c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <SPI_EndRxTxTransaction+0x80>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0d5b      	lsrs	r3, r3, #21
 8001e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eae:	d112      	bne.n	8001ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff ff13 	bl	8001ce6 <SPI_WaitFlagStateUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d0f2      	beq.n	8001ed6 <SPI_EndRxTxTransaction+0x52>
 8001ef0:	e000      	b.n	8001ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8001ef2:	bf00      	nop
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000030 	.word	0x20000030
 8001f04:	165e9f81 	.word	0x165e9f81

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01d      	b.n	8001f56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f006 feec 	bl	8008d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 fba2 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e01d      	b.n	8001ff4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f815 	bl	8001ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f000 fb53 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e083      	b.n	800212c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f006 fded 	bl	8008c18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f000 fb13 	bl	8002690 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4313      	orrs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020b0:	f023 030c 	bic.w	r3, r3, #12
 80020b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	4313      	orrs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4313      	orrs	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0202 	mvn.w	r2, #2
 8002160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa6b 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa5d 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fa6e 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0204 	mvn.w	r2, #4
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa41 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa33 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa44 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa17 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa09 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa1a 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b10      	cmp	r3, #16
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2208      	movs	r2, #8
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9ed 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f9df 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9f0 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0201 	mvn.w	r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 fc16 	bl	8007ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fccb 	bl	8002c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9b5 	bl	800267a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d10e      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d107      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0220 	mvn.w	r2, #32
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fc95 	bl	8002c66 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e0b4      	b.n	80024c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	f200 809f 	bhi.w	80024b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080024b5 	.word	0x080024b5
 8002384:	080024b5 	.word	0x080024b5
 8002388:	080024b5 	.word	0x080024b5
 800238c:	080023f1 	.word	0x080023f1
 8002390:	080024b5 	.word	0x080024b5
 8002394:	080024b5 	.word	0x080024b5
 8002398:	080024b5 	.word	0x080024b5
 800239c:	08002433 	.word	0x08002433
 80023a0:	080024b5 	.word	0x080024b5
 80023a4:	080024b5 	.word	0x080024b5
 80023a8:	080024b5 	.word	0x080024b5
 80023ac:	08002473 	.word	0x08002473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f9ea 	bl	8002790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0208 	orr.w	r2, r2, #8
 80023ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	619a      	str	r2, [r3, #24]
      break;
 80023ee:	e062      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fa30 	bl	800285c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	021a      	lsls	r2, r3, #8
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]
      break;
 8002430:	e041      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa7b 	bl	8002934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0208 	orr.w	r2, r2, #8
 800244c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69d9      	ldr	r1, [r3, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
      break;
 8002470:	e021      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fac5 	bl	8002a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	61da      	str	r2, [r3, #28]
      break;
 80024b2:	e000      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80024b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_ConfigClockSource+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0a6      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x166>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d067      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0x120>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d80b      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x6c>
 8002524:	2b10      	cmp	r3, #16
 8002526:	d073      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d802      	bhi.n	8002532 <HAL_TIM_ConfigClockSource+0x62>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d06f      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002530:	e078      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002532:	2b20      	cmp	r3, #32
 8002534:	d06c      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d06a      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800253a:	e073      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d00d      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x8c>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d804      	bhi.n	800254e <HAL_TIM_ConfigClockSource+0x7e>
 8002544:	2b50      	cmp	r3, #80	; 0x50
 8002546:	d033      	beq.n	80025b0 <HAL_TIM_ConfigClockSource+0xe0>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d041      	beq.n	80025d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800254c:	e06a      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d066      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x152>
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d017      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800255a:	e063      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f000 fb16 	bl	8002b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800257e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
      break;
 8002588:	e04c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f000 faff 	bl	8002b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e039      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	461a      	mov	r2, r3
 80025be:	f000 fa73 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2150      	movs	r1, #80	; 0x50
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 facc 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80025ce:	e029      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	461a      	mov	r2, r3
 80025de:	f000 fa92 	bl	8002b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2160      	movs	r1, #96	; 0x60
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fabc 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 80025ee:	e019      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	461a      	mov	r2, r3
 80025fe:	f000 fa53 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	4618      	mov	r0, r3
 800260a:	f000 faac 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 800260e:	e009      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 faa3 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00f      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d00b      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a31      	ldr	r2, [pc, #196]	; (8002778 <TIM_Base_SetConfig+0xe8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a30      	ldr	r2, [pc, #192]	; (800277c <TIM_Base_SetConfig+0xec>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0x38>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <TIM_Base_SetConfig+0xf0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01b      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d017      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <TIM_Base_SetConfig+0xe8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <TIM_Base_SetConfig+0xec>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a20      	ldr	r2, [pc, #128]	; (8002780 <TIM_Base_SetConfig+0xf0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <TIM_Base_SetConfig+0xf4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <TIM_Base_SetConfig+0xf8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <TIM_Base_SetConfig+0xfc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <TIM_Base_SetConfig+0xe4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800

08002790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <TIM_OC1_SetConfig+0xc8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10c      	bne.n	8002806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0308 	bic.w	r3, r3, #8
 80027f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <TIM_OC1_SetConfig+0xc8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800281c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40010000 	.word	0x40010000

0800285c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0320 	bic.w	r3, r3, #32
 80028a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <TIM_OC2_SetConfig+0xd4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10d      	bne.n	80028d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <TIM_OC2_SetConfig+0xd4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d113      	bne.n	8002908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000

08002934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10d      	bne.n	80029ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40010000 	.word	0x40010000

08002a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	031b      	lsls	r3, r3, #12
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <TIM_OC4_SetConfig+0x9c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d109      	bne.n	8002a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 030a 	bic.w	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	031b      	lsls	r3, r3, #12
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e032      	b.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e03f      	b.n	8002d20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f006 f8a5 	bl	8008e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f90c 	bl	8002ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 8083 	bne.w	8002e50 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Transmit+0x2e>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07b      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x40>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e074      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd fc3d 	bl	80005fc <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d90:	e042      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d122      	bne.n	8002df0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f850 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e046      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3302      	adds	r3, #2
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	e017      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	e013      	b.n	8002e18 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f82d 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e023      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	60ba      	str	r2, [r7, #8]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1b7      	bne.n	8002d92 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f814 	bl	8002e5a <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e00a      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6a:	e02c      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e72:	d028      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	f7fd fbbf 	bl	80005fc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d21d      	bcs.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e00f      	b.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d0c3      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f30:	f023 030c 	bic.w	r3, r3, #12
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	f040 80e4 	bne.w	8003128 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aab      	ldr	r2, [pc, #684]	; (8003214 <UART_SetConfig+0x324>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <UART_SetConfig+0x84>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4aaa      	ldr	r2, [pc, #680]	; (8003218 <UART_SetConfig+0x328>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d16c      	bne.n	800304e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f74:	f7fe fa2e 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4aa3      	ldr	r2, [pc, #652]	; (800321c <UART_SetConfig+0x32c>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	011c      	lsls	r4, r3, #4
 8002f98:	f7fe fa1c 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fb2:	f7fe fa0f 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	4a93      	ldr	r2, [pc, #588]	; (800321c <UART_SetConfig+0x32c>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	; 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1aeb      	subs	r3, r5, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	3332      	adds	r3, #50	; 0x32
 8002fe0:	4a8e      	ldr	r2, [pc, #568]	; (800321c <UART_SetConfig+0x32c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fee:	441c      	add	r4, r3
 8002ff0:	f7fe f9f0 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb2 f5f3 	udiv	r5, r2, r3
 800300a:	f7fe f9e3 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 800300e:	4602      	mov	r2, r0
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009a      	lsls	r2, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	4a7d      	ldr	r2, [pc, #500]	; (800321c <UART_SetConfig+0x32c>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	1aeb      	subs	r3, r5, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	3332      	adds	r3, #50	; 0x32
 8003038:	4a78      	ldr	r2, [pc, #480]	; (800321c <UART_SetConfig+0x32c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	f003 0207 	and.w	r2, r3, #7
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e154      	b.n	80032f8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800304e:	f7fe f9ad 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003052:	4602      	mov	r2, r0
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	4a6c      	ldr	r2, [pc, #432]	; (800321c <UART_SetConfig+0x32c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	011c      	lsls	r4, r3, #4
 8003072:	f7fe f99b 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003076:	4602      	mov	r2, r0
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fbb2 f5f3 	udiv	r5, r2, r3
 800308c:	f7fe f98e 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003090:	4602      	mov	r2, r0
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a5d      	ldr	r2, [pc, #372]	; (800321c <UART_SetConfig+0x32c>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2264      	movs	r2, #100	; 0x64
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	1aeb      	subs	r3, r5, r3
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a58      	ldr	r2, [pc, #352]	; (800321c <UART_SetConfig+0x32c>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c8:	441c      	add	r4, r3
 80030ca:	f7fe f96f 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80030e4:	f7fe f962 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	4a47      	ldr	r2, [pc, #284]	; (800321c <UART_SetConfig+0x32c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2264      	movs	r2, #100	; 0x64
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	1aeb      	subs	r3, r5, r3
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a42      	ldr	r2, [pc, #264]	; (800321c <UART_SetConfig+0x32c>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4422      	add	r2, r4
 8003124:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003126:	e0e7      	b.n	80032f8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a39      	ldr	r2, [pc, #228]	; (8003214 <UART_SetConfig+0x324>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <UART_SetConfig+0x24c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a38      	ldr	r2, [pc, #224]	; (8003218 <UART_SetConfig+0x328>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d171      	bne.n	8003220 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800313c:	f7fe f94a 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8003140:	4602      	mov	r2, r0
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4a31      	ldr	r2, [pc, #196]	; (800321c <UART_SetConfig+0x32c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	011c      	lsls	r4, r3, #4
 8003160:	f7fe f938 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8003164:	4602      	mov	r2, r0
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fbb2 f5f3 	udiv	r5, r2, r3
 800317a:	f7fe f92b 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <UART_SetConfig+0x32c>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2264      	movs	r2, #100	; 0x64
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	1aeb      	subs	r3, r5, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <UART_SetConfig+0x32c>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	441c      	add	r4, r3
 80031b6:	f7fe f90d 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80031d0:	f7fe f900 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4a0c      	ldr	r2, [pc, #48]	; (800321c <UART_SetConfig+0x32c>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2264      	movs	r2, #100	; 0x64
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	1aeb      	subs	r3, r5, r3
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <UART_SetConfig+0x32c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4422      	add	r2, r4
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	e071      	b.n	80032f8 <UART_SetConfig+0x408>
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003220:	f7fe f8c4 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003224:	4602      	mov	r2, r0
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4a31      	ldr	r2, [pc, #196]	; (8003300 <UART_SetConfig+0x410>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	011c      	lsls	r4, r3, #4
 8003244:	f7fe f8b2 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003248:	4602      	mov	r2, r0
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fbb2 f5f3 	udiv	r5, r2, r3
 800325e:	f7fe f8a5 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8003262:	4602      	mov	r2, r0
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009a      	lsls	r2, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	4a21      	ldr	r2, [pc, #132]	; (8003300 <UART_SetConfig+0x410>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	; 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1aeb      	subs	r3, r5, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <UART_SetConfig+0x410>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	441c      	add	r4, r3
 800329a:	f7fe f887 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80032b4:	f7fe f87a 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <UART_SetConfig+0x410>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2264      	movs	r2, #100	; 0x64
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	1aeb      	subs	r3, r5, r3
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	3332      	adds	r3, #50	; 0x32
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <UART_SetConfig+0x410>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4422      	add	r2, r4
 80032f4:	609a      	str	r2, [r3, #8]
}
 80032f6:	e7ff      	b.n	80032f8 <UART_SetConfig+0x408>
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <_ZN10ValueField9putInDumpEPh>:
	std::vector<unsigned char> value;
	bool exist;
public:
	ValueField(std::vector<unsigned char> value): value(value) {}
	ValueField() {}
	void putInDump(unsigned char * begin) {std::copy(value.begin(), value.end(), begin);}
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f989 	bl	8003628 <_ZNSt6vectorIhSaIhEE5beginEv>
 8003316:	4604      	mov	r4, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f994 	bl	8003648 <_ZNSt6vectorIhSaIhEE3endEv>
 8003320:	4603      	mov	r3, r0
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	4620      	mov	r0, r4
 8003328:	f000 f99f 	bl	800366a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}

08003334 <_ZN10ValueField7getSizeEv>:
	void getFromDump(unsigned char * begin, unsigned content_len) {
		value.resize(content_len);
		std::copy(begin, begin + value.size(), value.begin());
	}
	void setValue(std::vector<unsigned char> value) {this->value = value;}
	unsigned short getSize() {return value.size();}
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f9ab 	bl	800369a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003344:	4603      	mov	r3, r0
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_Z12buildRequestP10SLMPPacketPh>:
// Created by data-scientist on 07->02->2020->
//

#include "SLMPRequestBuilder.h"

void buildRequest(SLMPPacket *packet, unsigned char *msg) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	unsigned char *slider = msg;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	60fb      	str	r3, [r7, #12]

	if (packet->is_serial_no.exist) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	78db      	ldrb	r3, [r3, #3]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <_Z12buildRequestP10SLMPPacketPh+0x26>
		packet->is_serial_no.putInDump(slider);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f9a5 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3302      	adds	r3, #2
 8003374:	60fb      	str	r3, [r7, #12]
	}
	if (packet->serial_no.exist) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	79db      	ldrb	r3, [r3, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <_Z12buildRequestP10SLMPPacketPh+0x40>
		packet->serial_no.putInDump(slider);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f998 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3302      	adds	r3, #2
 800338e:	60fb      	str	r3, [r7, #12]
	}
	if (packet->field_If_serial_no.exist) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7adb      	ldrb	r3, [r3, #11]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <_Z12buildRequestP10SLMPPacketPh+0x5a>
		packet->field_If_serial_no.putInDump(slider);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3308      	adds	r3, #8
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f98b 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3302      	adds	r3, #2
 80033a8:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_dest_net_no.exist) {
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7b9b      	ldrb	r3, [r3, #14]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <_Z12buildRequestP10SLMPPacketPh+0x74>
		packet->request_dest_net_no.putInDump(slider);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	330c      	adds	r3, #12
 80033b6:	68f9      	ldr	r1, [r7, #12]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f996 	bl	80036ea <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_dest_station_no.exist) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7c5b      	ldrb	r3, [r3, #17]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <_Z12buildRequestP10SLMPPacketPh+0x8e>
		packet->request_dest_station_no.putInDump(slider);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	330f      	adds	r3, #15
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f989 	bl	80036ea <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_processor.exist) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7d5b      	ldrb	r3, [r3, #21]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <_Z12buildRequestP10SLMPPacketPh+0xa8>
		packet->request_processor.putInDump(slider);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3312      	adds	r3, #18
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f964 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3302      	adds	r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
	}
	if (packet->request_reserved.exist) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e1b      	ldrb	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <_Z12buildRequestP10SLMPPacketPh+0xc2>
		packet->request_reserved.putInDump(slider);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3316      	adds	r3, #22
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f96f 	bl	80036ea <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
	}
	if (packet->data_length.exist) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7f5b      	ldrb	r3, [r3, #29]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <_Z12buildRequestP10SLMPPacketPh+0xdc>
		packet->data_length.putInDump(slider);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	331a      	adds	r3, #26
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f94a 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3302      	adds	r3, #2
 800342a:	60fb      	str	r3, [r7, #12]
	}
	if (packet->monitoring_time.exist) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <_Z12buildRequestP10SLMPPacketPh+0xf8>
		packet->monitoring_time.putInDump(slider);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	331e      	adds	r3, #30
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f93c 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3302      	adds	r3, #2
 8003446:	60fb      	str	r3, [r7, #12]
	}
	if (packet->command.exist) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <_Z12buildRequestP10SLMPPacketPh+0x114>
		packet->command.putInDump(slider);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3322      	adds	r3, #34	; 0x22
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f92e 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3302      	adds	r3, #2
 8003462:	60fb      	str	r3, [r7, #12]
	}
	if (packet->subcommand.exist) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <_Z12buildRequestP10SLMPPacketPh+0x130>
		packet->subcommand.putInDump(slider);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3326      	adds	r3, #38	; 0x26
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f920 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3302      	adds	r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
	}
	if (packet->head_device_no.exist) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <_Z12buildRequestP10SLMPPacketPh+0x14c>
		packet->head_device_no.putInDump(slider);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	332c      	adds	r3, #44	; 0x2c
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f942 	bl	800371a <_ZN5FieldIjLj3EE9putInDumpEPh>
		slider += 3;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3303      	adds	r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
	}
	if (packet->device_code.exist) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <_Z12buildRequestP10SLMPPacketPh+0x168>
		packet->device_code.putInDump(slider);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3334      	adds	r3, #52	; 0x34
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f91c 	bl	80036ea <_ZN5FieldIhLj1EE9putInDumpEPh>
		slider += 1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
	}
	if (packet->no_of_device_points.exist) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <_Z12buildRequestP10SLMPPacketPh+0x184>
		packet->no_of_device_points.putInDump(slider);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3338      	adds	r3, #56	; 0x38
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f8f6 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3302      	adds	r3, #2
 80034d2:	60fb      	str	r3, [r7, #12]
	}
	if (packet->end_code.exist) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <_Z12buildRequestP10SLMPPacketPh+0x1a0>
		packet->end_code.putInDump(slider);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	333c      	adds	r3, #60	; 0x3c
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f8e8 	bl	80036ba <_ZN5FieldItLj2EE9putInDumpEPh>
		slider += 2;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3302      	adds	r3, #2
 80034ee:	60fb      	str	r3, [r7, #12]
	}
	if (packet->value.exist) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <_Z12buildRequestP10SLMPPacketPh+0x1bc>
		packet->value.putInDump(slider);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3340      	adds	r3, #64	; 0x40
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff feff 	bl	8003304 <_ZN10ValueField9putInDumpEPh>
		slider += 2;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3302      	adds	r3, #2
 800350a:	60fb      	str	r3, [r7, #12]
	}
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_Z9getMsgLenP10SLMPPacket>:

unsigned short getMsgLen(SLMPPacket* packet) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	unsigned short len = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	81fb      	strh	r3, [r7, #14]

	if (packet->is_serial_no.exist) {len += 2;}
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <_Z9getMsgLenP10SLMPPacket+0x1a>
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	3302      	adds	r3, #2
 800352c:	81fb      	strh	r3, [r7, #14]
	if (packet->serial_no.exist) {len += 2;}
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	79db      	ldrb	r3, [r3, #7]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <_Z9getMsgLenP10SLMPPacket+0x28>
 8003536:	89fb      	ldrh	r3, [r7, #14]
 8003538:	3302      	adds	r3, #2
 800353a:	81fb      	strh	r3, [r7, #14]
	if (packet->field_If_serial_no.exist) {len += 2;}
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7adb      	ldrb	r3, [r3, #11]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <_Z9getMsgLenP10SLMPPacket+0x36>
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	3302      	adds	r3, #2
 8003548:	81fb      	strh	r3, [r7, #14]
	if (packet->request_dest_net_no.exist) {len += 1;}
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7b9b      	ldrb	r3, [r3, #14]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <_Z9getMsgLenP10SLMPPacket+0x44>
 8003552:	89fb      	ldrh	r3, [r7, #14]
 8003554:	3301      	adds	r3, #1
 8003556:	81fb      	strh	r3, [r7, #14]
	if (packet->request_dest_station_no.exist) {len += 1;}
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7c5b      	ldrb	r3, [r3, #17]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <_Z9getMsgLenP10SLMPPacket+0x52>
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	3301      	adds	r3, #1
 8003564:	81fb      	strh	r3, [r7, #14]
	if (packet->request_processor.exist) {len += 2;}
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7d5b      	ldrb	r3, [r3, #21]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <_Z9getMsgLenP10SLMPPacket+0x60>
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	3302      	adds	r3, #2
 8003572:	81fb      	strh	r3, [r7, #14]
	if (packet->request_reserved.exist) {len += 1;}
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <_Z9getMsgLenP10SLMPPacket+0x6e>
 800357c:	89fb      	ldrh	r3, [r7, #14]
 800357e:	3301      	adds	r3, #1
 8003580:	81fb      	strh	r3, [r7, #14]
	if (packet->data_length.exist) {len += 2;}
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7f5b      	ldrb	r3, [r3, #29]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <_Z9getMsgLenP10SLMPPacket+0x7c>
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	3302      	adds	r3, #2
 800358e:	81fb      	strh	r3, [r7, #14]
	if (packet->monitoring_time.exist) {len += 2;}
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <_Z9getMsgLenP10SLMPPacket+0x8c>
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	3302      	adds	r3, #2
 800359e:	81fb      	strh	r3, [r7, #14]
	if (packet->command.exist) {len += 2;}
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <_Z9getMsgLenP10SLMPPacket+0x9c>
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	3302      	adds	r3, #2
 80035ae:	81fb      	strh	r3, [r7, #14]
	if (packet->subcommand.exist) {len += 2;}
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <_Z9getMsgLenP10SLMPPacket+0xac>
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	3302      	adds	r3, #2
 80035be:	81fb      	strh	r3, [r7, #14]
	if (packet->head_device_no.exist) {len += 3;}
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <_Z9getMsgLenP10SLMPPacket+0xbc>
 80035ca:	89fb      	ldrh	r3, [r7, #14]
 80035cc:	3303      	adds	r3, #3
 80035ce:	81fb      	strh	r3, [r7, #14]
	if (packet->device_code.exist) {len += 1;}
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <_Z9getMsgLenP10SLMPPacket+0xcc>
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	3301      	adds	r3, #1
 80035de:	81fb      	strh	r3, [r7, #14]
	if (packet->no_of_device_points.exist) {len += 2;}
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <_Z9getMsgLenP10SLMPPacket+0xdc>
 80035ea:	89fb      	ldrh	r3, [r7, #14]
 80035ec:	3302      	adds	r3, #2
 80035ee:	81fb      	strh	r3, [r7, #14]
	if (packet->end_code.exist) {len += 2;}
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <_Z9getMsgLenP10SLMPPacket+0xec>
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	3302      	adds	r3, #2
 80035fe:	81fb      	strh	r3, [r7, #14]
	if (packet->value.exist) {len += packet->value.getSize();}
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <_Z9getMsgLenP10SLMPPacket+0x10a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3340      	adds	r3, #64	; 0x40
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fe90 	bl	8003334 <_ZN10ValueField7getSizeEv>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	4413      	add	r3, r2
 800361c:	81fb      	strh	r3, [r7, #14]

	return len;
 800361e:	89fb      	ldrh	r3, [r7, #14]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <_ZNSt6vectorIhSaIhEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f886 	bl	800374a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_ZNSt6vectorIhSaIhEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1d1a      	adds	r2, r3, #4
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f875 	bl	800374a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800366a:	b590      	push	{r4, r7, lr}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f877 	bl	800376a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 800367c:	4604      	mov	r4, r0
 800367e:	68b8      	ldr	r0, [r7, #8]
 8003680:	f000 f873 	bl	800376a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8003684:	4603      	mov	r3, r0
	       __result));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4619      	mov	r1, r3
 800368a:	4620      	mov	r0, r4
 800368c:	f000 f878 	bl	8003780 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>
 8003690:	4603      	mov	r3, r0
    }
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_ZN5FieldItLj2EE9putInDumpEPh>:
	void putInDump(unsigned char * begin) {std::copy(data.raw.begin(), data.raw.end(), begin);}
 80036ba:	b590      	push	{r4, r7, lr}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f899 	bl	80037fe <_ZNSt5arrayIhLj2EE5beginEv>
 80036cc:	4604      	mov	r4, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f8a0 	bl	8003816 <_ZNSt5arrayIhLj2EE3endEv>
 80036d6:	4603      	mov	r3, r0
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	4620      	mov	r0, r4
 80036de:	f000 f876 	bl	80037ce <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <_ZN5FieldIhLj1EE9putInDumpEPh>:
 80036ea:	b590      	push	{r4, r7, lr}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f89a 	bl	8003830 <_ZNSt5arrayIhLj1EE5beginEv>
 80036fc:	4604      	mov	r4, r0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f8a1 	bl	8003848 <_ZNSt5arrayIhLj1EE3endEv>
 8003706:	4603      	mov	r3, r0
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	4620      	mov	r0, r4
 800370e:	f000 f85e 	bl	80037ce <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}

0800371a <_ZN5FieldIjLj3EE9putInDumpEPh>:
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f89b 	bl	8003862 <_ZNSt5arrayIhLj3EE5beginEv>
 800372c:	4604      	mov	r4, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f8a2 	bl	800387a <_ZNSt5arrayIhLj3EE3endEv>
 8003736:	4603      	mov	r3, r0
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	4620      	mov	r0, r4
 800373e:	f000 f846 	bl	80037ce <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}

0800374a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f881 	bl	8003894 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8003792:	4604      	mov	r4, r0
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f000 f87d 	bl	8003894 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800379a:	4605      	mov	r5, r0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f887 	bl	80038b0 <_ZSt12__niter_baseIPhET_S1_>
 80037a2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80037a4:	461a      	mov	r2, r3
 80037a6:	4629      	mov	r1, r5
 80037a8:	4620      	mov	r0, r4
 80037aa:	f000 f88c 	bl	80038c6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80037ae:	4603      	mov	r3, r0
    }
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}

080037b8 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
    { return __it; }
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80037ce:	b590      	push	{r4, r7, lr}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ffec 	bl	80037b8 <_ZSt12__miter_baseIPhET_S1_>
 80037e0:	4604      	mov	r4, r0
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f7ff ffe8 	bl	80037b8 <_ZSt12__miter_baseIPhET_S1_>
 80037e8:	4603      	mov	r3, r0
	       __result));
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4619      	mov	r1, r3
 80037ee:	4620      	mov	r0, r4
 80037f0:	f000 f87b 	bl	80038ea <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80037f4:	4603      	mov	r3, r0
    }
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}

080037fe <_ZNSt5arrayIhLj2EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f88b 	bl	8003922 <_ZNSt5arrayIhLj2EE4dataEv>
 800380c:	4603      	mov	r3, r0
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_ZNSt5arrayIhLj2EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f87f 	bl	8003922 <_ZNSt5arrayIhLj2EE4dataEv>
 8003824:	4603      	mov	r3, r0
 8003826:	3302      	adds	r3, #2
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <_ZNSt5arrayIhLj1EE5beginEv>:
      begin() noexcept
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f87f 	bl	800393c <_ZNSt5arrayIhLj1EE4dataEv>
 800383e:	4603      	mov	r3, r0
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZNSt5arrayIhLj1EE3endEv>:
      end() noexcept
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f873 	bl	800393c <_ZNSt5arrayIhLj1EE4dataEv>
 8003856:	4603      	mov	r3, r0
 8003858:	3301      	adds	r3, #1
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <_ZNSt5arrayIhLj3EE5beginEv>:
      begin() noexcept
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f873 	bl	8003956 <_ZNSt5arrayIhLj3EE4dataEv>
 8003870:	4603      	mov	r3, r0
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <_ZNSt5arrayIhLj3EE3endEv>:
      end() noexcept
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f867 	bl	8003956 <_ZNSt5arrayIhLj3EE4dataEv>
 8003888:	4603      	mov	r3, r0
 800388a:	3303      	adds	r3, #3
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f866 	bl	8003970 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80038a4:	4603      	mov	r3, r0
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f853 	bl	8003986 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80038e0:	4603      	mov	r3, r0
    }
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80038ea:	b5b0      	push	{r4, r5, r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff ffda 	bl	80038b0 <_ZSt12__niter_baseIPhET_S1_>
 80038fc:	4604      	mov	r4, r0
 80038fe:	68b8      	ldr	r0, [r7, #8]
 8003900:	f7ff ffd6 	bl	80038b0 <_ZSt12__niter_baseIPhET_S1_>
 8003904:	4605      	mov	r5, r0
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffd2 	bl	80038b0 <_ZSt12__niter_baseIPhET_S1_>
 800390c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800390e:	461a      	mov	r2, r3
 8003910:	4629      	mov	r1, r5
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff ffd7 	bl	80038c6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003918:	4603      	mov	r3, r0
    }
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bdb0      	pop	{r4, r5, r7, pc}

08003922 <_ZNSt5arrayIhLj2EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f844 	bl	80039ba <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <_ZNSt5arrayIhLj1EE4dataEv>:
      data() noexcept
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f842 	bl	80039d0 <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>
 800394c:	4603      	mov	r3, r0
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZNSt5arrayIhLj3EE4dataEv>:
      data() noexcept
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f840 	bl	80039e6 <_ZNSt14__array_traitsIhLj3EE6_S_ptrERA3_Kh>
 8003966:	4603      	mov	r3, r0
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f005 fc0b 	bl	80091c2 <memmove>
	  return __result + _Num;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
	}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <_ZNSt14__array_traitsIhLj3EE6_S_ptrERA3_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZN10ValueFieldC1Ev>:
	ValueField() {}
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f85d 	bl	8003ac6 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_ZN10SLMPPacketC1Ev>:
#define SLMP_SLMPPACKET_H

#include "PacketFields.h"


struct SLMPPacket {
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f85d 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f858 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3308      	adds	r3, #8
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f853 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f85c 	bl	8003afc <_ZN5FieldIhLj1EEC1Ev>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	330f      	adds	r3, #15
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f857 	bl	8003afc <_ZN5FieldIhLj1EEC1Ev>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3312      	adds	r3, #18
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f844 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3316      	adds	r3, #22
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f84d 	bl	8003afc <_ZN5FieldIhLj1EEC1Ev>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	331a      	adds	r3, #26
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f83a 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	331e      	adds	r3, #30
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f835 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3322      	adds	r3, #34	; 0x22
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f830 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3326      	adds	r3, #38	; 0x26
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f82b 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	332c      	adds	r3, #44	; 0x2c
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f842 	bl	8003b18 <_ZN5FieldIjLj3EEC1Ev>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3334      	adds	r3, #52	; 0x34
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f82f 	bl	8003afc <_ZN5FieldIhLj1EEC1Ev>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3338      	adds	r3, #56	; 0x38
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f81c 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	333c      	adds	r3, #60	; 0x3c
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f817 	bl	8003ae0 <_ZN5FieldItLj2EEC1Ev>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3340      	adds	r3, #64	; 0x40
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ffa0 	bl	80039fc <_ZN10ValueFieldC1Ev>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f82f 	bl	8003b34 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZN5FieldItLj2EEC1Ev>:
	Field() {}
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	70da      	strb	r2, [r3, #3]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_ZN5FieldIhLj1EEC1Ev>:
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	709a      	strb	r2, [r3, #2]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZN5FieldIjLj3EEC1Ev>:
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	715a      	strb	r2, [r3, #5]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f805 	bl	8003b4e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f80e 	bl	8003b78 <_ZNSaIhEC1Ev>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
	{ }
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f805 	bl	8003b90 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003bb6:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <WIZCHIP_READ+0x24>
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d114      	bne.n	8003bf6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	0c12      	lsrs	r2, r2, #16
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	0a12      	lsrs	r2, r2, #8
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
 8003bf4:	e011      	b.n	8003c1a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f107 020c 	add.w	r2, r7, #12
 8003c14:	2103      	movs	r1, #3
 8003c16:	4610      	mov	r0, r2
 8003c18:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	4798      	blx	r3
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <WIZCHIP_READ+0x94>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4798      	blx	r3
   return ret;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000004 	.word	0x20000004

08003c40 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003c52:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d119      	bne.n	8003c9c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	0c12      	lsrs	r2, r2, #16
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	4610      	mov	r0, r2
 8003c74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	0a12      	lsrs	r2, r2, #8
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	4610      	mov	r0, r2
 8003c82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	4610      	mov	r0, r2
 8003c98:	4798      	blx	r3
 8003c9a:	e013      	b.n	8003cc4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f107 020c 	add.w	r2, r7, #12
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003cca:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <WIZCHIP_WRITE+0x98>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4798      	blx	r3
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000004 	.word	0x20000004

08003cdc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003cea:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003cf0:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003cf6:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <WIZCHIP_READ_BUF+0x2a>
 8003cfe:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d126      	bne.n	8003d54 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	0c12      	lsrs	r2, r2, #16
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	0a12      	lsrs	r2, r2, #8
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	82fb      	strh	r3, [r7, #22]
 8003d32:	e00a      	b.n	8003d4a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	8afa      	ldrh	r2, [r7, #22]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	188c      	adds	r4, r1, r2
 8003d3e:	4798      	blx	r3
 8003d40:	4603      	mov	r3, r0
 8003d42:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003d44:	8afb      	ldrh	r3, [r7, #22]
 8003d46:	3301      	adds	r3, #1
 8003d48:	82fb      	strh	r3, [r7, #22]
 8003d4a:	8afa      	ldrh	r2, [r7, #22]
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3f0      	bcc.n	8003d34 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003d52:	e017      	b.n	8003d84 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f107 0210 	add.w	r2, r7, #16
 8003d72:	2103      	movs	r1, #3
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	68b8      	ldr	r0, [r7, #8]
 8003d82:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003d8a:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <WIZCHIP_READ_BUF+0xbc>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4798      	blx	r3
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}
 8003d98:	20000004 	.word	0x20000004

08003d9c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d126      	bne.n	8003e14 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	0c12      	lsrs	r2, r2, #16
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	0a12      	lsrs	r2, r2, #8
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	4610      	mov	r0, r2
 8003de0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4610      	mov	r0, r2
 8003dec:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	82fb      	strh	r3, [r7, #22]
 8003df2:	e00a      	b.n	8003e0a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	8afa      	ldrh	r2, [r7, #22]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003e04:	8afb      	ldrh	r3, [r7, #22]
 8003e06:	3301      	adds	r3, #1
 8003e08:	82fb      	strh	r3, [r7, #22]
 8003e0a:	8afa      	ldrh	r2, [r7, #22]
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3f0      	bcc.n	8003df4 <WIZCHIP_WRITE_BUF+0x58>
 8003e12:	e017      	b.n	8003e44 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f107 0210 	add.w	r2, r7, #16
 8003e32:	2103      	movs	r1, #3
 8003e34:	4610      	mov	r0, r2
 8003e36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	68b8      	ldr	r0, [r7, #8]
 8003e42:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003e4a:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4798      	blx	r3
}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000004 	.word	0x20000004

08003e5c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	81fb      	strh	r3, [r7, #14]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	3301      	adds	r3, #1
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fe94 	bl	8003ba8 <WIZCHIP_READ>
 8003e80:	4603      	mov	r3, r0
 8003e82:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003e84:	89bb      	ldrh	r3, [r7, #12]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	b29c      	uxth	r4, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	3301      	adds	r3, #1
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fe86 	bl	8003ba8 <WIZCHIP_READ>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	4423      	add	r3, r4
 8003ea2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003ea4:	89bb      	ldrh	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01a      	beq.n	8003ee0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	3301      	adds	r3, #1
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fe76 	bl	8003ba8 <WIZCHIP_READ>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003ec0:	89fb      	ldrh	r3, [r7, #14]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b29c      	uxth	r4, r3
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3301      	adds	r3, #1
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fe68 	bl	8003ba8 <WIZCHIP_READ>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4423      	add	r3, r4
 8003ede:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003ee0:	89fa      	ldrh	r2, [r7, #14]
 8003ee2:	89bb      	ldrh	r3, [r7, #12]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1c2      	bne.n	8003e6e <getSn_TX_FSR+0x12>
   return val;
 8003ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}

08003ef2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003ef2:	b590      	push	{r4, r7, lr}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	81fb      	strh	r3, [r7, #14]
 8003f00:	2300      	movs	r3, #0
 8003f02:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	3301      	adds	r3, #1
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fe49 	bl	8003ba8 <WIZCHIP_READ>
 8003f16:	4603      	mov	r3, r0
 8003f18:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003f1a:	89bb      	ldrh	r3, [r7, #12]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	b29c      	uxth	r4, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3301      	adds	r3, #1
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe3b 	bl	8003ba8 <WIZCHIP_READ>
 8003f32:	4603      	mov	r3, r0
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	4423      	add	r3, r4
 8003f38:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003f3a:	89bb      	ldrh	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3301      	adds	r3, #1
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fe2b 	bl	8003ba8 <WIZCHIP_READ>
 8003f52:	4603      	mov	r3, r0
 8003f54:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003f56:	89fb      	ldrh	r3, [r7, #14]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	b29c      	uxth	r4, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	3301      	adds	r3, #1
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fe1d 	bl	8003ba8 <WIZCHIP_READ>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4423      	add	r3, r4
 8003f74:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003f76:	89fa      	ldrh	r2, [r7, #14]
 8003f78:	89bb      	ldrh	r3, [r7, #12]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d1c2      	bne.n	8003f04 <getSn_RX_RSR+0x12>
   return val;
 8003f7e:	89fb      	ldrh	r3, [r7, #14]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}

08003f88 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	71fb      	strb	r3, [r7, #7]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003fa0:	88bb      	ldrh	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d048      	beq.n	8004038 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3301      	adds	r3, #1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fdf8 	bl	8003ba8 <WIZCHIP_READ>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b29c      	uxth	r4, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fdeb 	bl	8003ba8 <WIZCHIP_READ>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4423      	add	r3, r4
 8003fd8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	79fa      	ldrb	r2, [r7, #7]
 8003fe0:	0092      	lsls	r2, r2, #2
 8003fe2:	3202      	adds	r2, #2
 8003fe4:	00d2      	lsls	r2, r2, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003fea:	88bb      	ldrh	r3, [r7, #4]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	68b8      	ldr	r0, [r7, #8]
 8003ff2:	f7ff fed3 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003ff6:	89fa      	ldrh	r2, [r7, #14]
 8003ff8:	88bb      	ldrh	r3, [r7, #4]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3301      	adds	r3, #1
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800400a:	461a      	mov	r2, r3
 800400c:	89fb      	ldrh	r3, [r7, #14]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7ff fe12 	bl	8003c40 <WIZCHIP_WRITE>
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	3301      	adds	r3, #1
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004028:	461a      	mov	r2, r3
 800402a:	89fb      	ldrh	r3, [r7, #14]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7ff fe05 	bl	8003c40 <WIZCHIP_WRITE>
 8004036:	e000      	b.n	800403a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004038:	bf00      	nop
}
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bd90      	pop	{r4, r7, pc}

08004040 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	6039      	str	r1, [r7, #0]
 800404a:	71fb      	strb	r3, [r7, #7]
 800404c:	4613      	mov	r3, r2
 800404e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004058:	88bb      	ldrh	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d048      	beq.n	80040f0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3301      	adds	r3, #1
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fd9c 	bl	8003ba8 <WIZCHIP_READ>
 8004070:	4603      	mov	r3, r0
 8004072:	b29b      	uxth	r3, r3
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	b29c      	uxth	r4, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3301      	adds	r3, #1
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fd8f 	bl	8003ba8 <WIZCHIP_READ>
 800408a:	4603      	mov	r3, r0
 800408c:	b29b      	uxth	r3, r3
 800408e:	4423      	add	r3, r4
 8004090:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004092:	89fb      	ldrh	r3, [r7, #14]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	79fa      	ldrb	r2, [r7, #7]
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	3203      	adds	r2, #3
 800409c:	00d2      	lsls	r2, r2, #3
 800409e:	4413      	add	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80040a2:	88bb      	ldrh	r3, [r7, #4]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	68b8      	ldr	r0, [r7, #8]
 80040aa:	f7ff fe17 	bl	8003cdc <WIZCHIP_READ_BUF>
   ptr += len;
 80040ae:	89fa      	ldrh	r2, [r7, #14]
 80040b0:	88bb      	ldrh	r3, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	3301      	adds	r3, #1
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80040c2:	461a      	mov	r2, r3
 80040c4:	89fb      	ldrh	r3, [r7, #14]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f7ff fdb6 	bl	8003c40 <WIZCHIP_WRITE>
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3301      	adds	r3, #1
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80040e0:	461a      	mov	r2, r3
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7ff fda9 	bl	8003c40 <WIZCHIP_WRITE>
 80040ee:	e000      	b.n	80040f2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80040f0:	bf00      	nop
}
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	460a      	mov	r2, r1
 8004102:	71fb      	strb	r3, [r7, #7]
 8004104:	4613      	mov	r3, r2
 8004106:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	3301      	adds	r3, #1
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fd45 	bl	8003ba8 <WIZCHIP_READ>
 800411e:	4603      	mov	r3, r0
 8004120:	b29b      	uxth	r3, r3
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	b29c      	uxth	r4, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	3301      	adds	r3, #1
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fd38 	bl	8003ba8 <WIZCHIP_READ>
 8004138:	4603      	mov	r3, r0
 800413a:	b29b      	uxth	r3, r3
 800413c:	4423      	add	r3, r4
 800413e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004140:	89fa      	ldrh	r2, [r7, #14]
 8004142:	88bb      	ldrh	r3, [r7, #4]
 8004144:	4413      	add	r3, r2
 8004146:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3301      	adds	r3, #1
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004154:	461a      	mov	r2, r3
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	b29b      	uxth	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7ff fd6d 	bl	8003c40 <WIZCHIP_WRITE>
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	3301      	adds	r3, #1
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004172:	461a      	mov	r2, r3
 8004174:	89fb      	ldrh	r3, [r7, #14]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7ff fd60 	bl	8003c40 <WIZCHIP_WRITE>
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bd90      	pop	{r4, r7, pc}

08004188 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	71fb      	strb	r3, [r7, #7]
 800419a:	4603      	mov	r3, r0
 800419c:	71bb      	strb	r3, [r7, #6]
 800419e:	460b      	mov	r3, r1
 80041a0:	80bb      	strh	r3, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d902      	bls.n	80041b2 <socket+0x2a>
 80041ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041b0:	e0f1      	b.n	8004396 <socket+0x20e>
	switch(protocol)
 80041b2:	79bb      	ldrb	r3, [r7, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d004      	beq.n	80041c2 <socket+0x3a>
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	db10      	blt.n	80041de <socket+0x56>
 80041bc:	2b04      	cmp	r3, #4
 80041be:	dc0e      	bgt.n	80041de <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80041c0:	e010      	b.n	80041e4 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	2204      	movs	r2, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80041ce:	f7ff fd85 	bl	8003cdc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <socket+0x5c>
 80041d8:	f06f 0302 	mvn.w	r3, #2
 80041dc:	e0db      	b.n	8004396 <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80041de:	f06f 0304 	mvn.w	r3, #4
 80041e2:	e0d8      	b.n	8004396 <socket+0x20e>
         break;
 80041e4:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <socket+0x6e>
 80041f0:	f06f 0305 	mvn.w	r3, #5
 80041f4:	e0cf      	b.n	8004396 <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d025      	beq.n	8004248 <socket+0xc0>
	{
   	switch(protocol)
 80041fc:	79bb      	ldrb	r3, [r7, #6]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d002      	beq.n	8004208 <socket+0x80>
 8004202:	2b02      	cmp	r3, #2
 8004204:	d008      	beq.n	8004218 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004206:	e024      	b.n	8004252 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11c      	bne.n	800424c <socket+0xc4>
 8004212:	f06f 0305 	mvn.w	r3, #5
 8004216:	e0be      	b.n	8004396 <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d006      	beq.n	8004230 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	db02      	blt.n	8004230 <socket+0xa8>
 800422a:	f06f 0305 	mvn.w	r3, #5
 800422e:	e0b2      	b.n	8004396 <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800423a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db06      	blt.n	8004250 <socket+0xc8>
 8004242:	f06f 0305 	mvn.w	r3, #5
 8004246:	e0a6      	b.n	8004396 <socket+0x20e>
   	}
   }
 8004248:	bf00      	nop
 800424a:	e002      	b.n	8004252 <socket+0xca>
   	      break;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <socket+0xca>
   	      break;
 8004250:	bf00      	nop
	close(sn);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f8ad 	bl	80043b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	3301      	adds	r3, #1
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4618      	mov	r0, r3
 8004264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004268:	f023 030f 	bic.w	r3, r3, #15
 800426c:	b25a      	sxtb	r2, r3
 800426e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004272:	4313      	orrs	r3, r2
 8004274:	b25b      	sxtb	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	f7ff fce1 	bl	8003c40 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800427e:	88bb      	ldrh	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d110      	bne.n	80042a6 <socket+0x11e>
	{
	   port = sock_any_port++;
 8004284:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <socket+0x218>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	b291      	uxth	r1, r2
 800428c:	4a44      	ldr	r2, [pc, #272]	; (80043a0 <socket+0x218>)
 800428e:	8011      	strh	r1, [r2, #0]
 8004290:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004292:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <socket+0x218>)
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800429a:	4293      	cmp	r3, r2
 800429c:	d103      	bne.n	80042a6 <socket+0x11e>
 800429e:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <socket+0x218>)
 80042a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80042a4:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3301      	adds	r3, #1
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b2:	461a      	mov	r2, r3
 80042b4:	88bb      	ldrh	r3, [r7, #4]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7ff fcbe 	bl	8003c40 <WIZCHIP_WRITE>
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	3301      	adds	r3, #1
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	461a      	mov	r2, r3
 80042d2:	88bb      	ldrh	r3, [r7, #4]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff fcb1 	bl	8003c40 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	3301      	adds	r3, #1
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fca7 	bl	8003c40 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80042f2:	bf00      	nop
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	3301      	adds	r3, #1
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fc51 	bl	8003ba8 <WIZCHIP_READ>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f3      	bne.n	80042f4 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	2201      	movs	r2, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	b21b      	sxth	r3, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	b21a      	sxth	r2, r3
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <socket+0x21c>)
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b21b      	sxth	r3, r3
 8004320:	4013      	ands	r3, r2
 8004322:	b21b      	sxth	r3, r3
 8004324:	b29a      	uxth	r2, r3
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <socket+0x21c>)
 8004328:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 0201 	and.w	r2, r3, #1
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	b21a      	sxth	r2, r3
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <socket+0x21c>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b21b      	sxth	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b21b      	sxth	r3, r3
 8004342:	b29a      	uxth	r2, r3
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <socket+0x21c>)
 8004346:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2201      	movs	r2, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	b21b      	sxth	r3, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	b21a      	sxth	r2, r3
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <socket+0x220>)
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b21b      	sxth	r3, r3
 800435c:	4013      	ands	r3, r2
 800435e:	b21b      	sxth	r3, r3
 8004360:	b29a      	uxth	r2, r3
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <socket+0x220>)
 8004364:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	4a10      	ldr	r2, [pc, #64]	; (80043ac <socket+0x224>)
 800436a:	2100      	movs	r1, #0
 800436c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <socket+0x228>)
 8004374:	2100      	movs	r1, #0
 8004376:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004378:	bf00      	nop
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	3301      	adds	r3, #1
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fc0e 	bl	8003ba8 <WIZCHIP_READ>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f3      	beq.n	800437a <socket+0x1f2>
   return (int8_t)sn;
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000002 	.word	0x20000002
 80043a4:	200000b4 	.word	0x200000b4
 80043a8:	200000b6 	.word	0x200000b6
 80043ac:	200000b8 	.word	0x200000b8
 80043b0:	200000c8 	.word	0x200000c8

080043b4 <close>:

int8_t close(uint8_t sn)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d902      	bls.n	80043ca <close+0x16>
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c8:	e055      	b.n	8004476 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3301      	adds	r3, #1
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80043d6:	2110      	movs	r1, #16
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fc31 	bl	8003c40 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80043de:	bf00      	nop
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3301      	adds	r3, #1
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fbdb 	bl	8003ba8 <WIZCHIP_READ>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f3      	bne.n	80043e0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3301      	adds	r3, #1
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004404:	211f      	movs	r1, #31
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fc1a 	bl	8003c40 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2201      	movs	r2, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	b21b      	sxth	r3, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	b21a      	sxth	r2, r3
 800441a:	4b19      	ldr	r3, [pc, #100]	; (8004480 <close+0xcc>)
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b21b      	sxth	r3, r3
 8004420:	4013      	ands	r3, r2
 8004422:	b21b      	sxth	r3, r3
 8004424:	b29a      	uxth	r2, r3
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <close+0xcc>)
 8004428:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	2201      	movs	r2, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	b21b      	sxth	r3, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	b21a      	sxth	r2, r3
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <close+0xd0>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b21b      	sxth	r3, r3
 800443e:	4013      	ands	r3, r2
 8004440:	b21b      	sxth	r3, r3
 8004442:	b29a      	uxth	r2, r3
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <close+0xd0>)
 8004446:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	4a0f      	ldr	r2, [pc, #60]	; (8004488 <close+0xd4>)
 800444c:	2100      	movs	r1, #0
 800444e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	4a0d      	ldr	r2, [pc, #52]	; (800448c <close+0xd8>)
 8004456:	2100      	movs	r1, #0
 8004458:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800445a:	bf00      	nop
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	3301      	adds	r3, #1
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fb9d 	bl	8003ba8 <WIZCHIP_READ>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f3      	bne.n	800445c <close+0xa8>
	return SOCK_OK;
 8004474:	2301      	movs	r3, #1
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200000b4 	.word	0x200000b4
 8004484:	200000b6 	.word	0x200000b6
 8004488:	200000b8 	.word	0x200000b8
 800448c:	200000c8 	.word	0x200000c8

08004490 <listen>:

int8_t listen(uint8_t sn)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d902      	bls.n	80044a6 <listen+0x16>
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a4:	e049      	b.n	800453a <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	3301      	adds	r3, #1
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fb7a 	bl	8003ba8 <WIZCHIP_READ>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d002      	beq.n	80044c4 <listen+0x34>
 80044be:	f06f 0304 	mvn.w	r3, #4
 80044c2:	e03a      	b.n	800453a <listen+0xaa>
	CHECK_SOCKINIT();
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	3301      	adds	r3, #1
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fb69 	bl	8003ba8 <WIZCHIP_READ>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b13      	cmp	r3, #19
 80044da:	d002      	beq.n	80044e2 <listen+0x52>
 80044dc:	f06f 0302 	mvn.w	r3, #2
 80044e0:	e02b      	b.n	800453a <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	3301      	adds	r3, #1
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fba5 	bl	8003c40 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80044f6:	bf00      	nop
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	3301      	adds	r3, #1
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fb4f 	bl	8003ba8 <WIZCHIP_READ>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f3      	bne.n	80044f8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004510:	e006      	b.n	8004520 <listen+0x90>
   {
         close(sn);
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff4d 	bl	80043b4 <close>
         return SOCKERR_SOCKCLOSED;
 800451a:	f06f 0303 	mvn.w	r3, #3
 800451e:	e00c      	b.n	800453a <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	3301      	adds	r3, #1
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fb3b 	bl	8003ba8 <WIZCHIP_READ>
 8004532:	4603      	mov	r3, r0
 8004534:	2b14      	cmp	r3, #20
 8004536:	d1ec      	bne.n	8004512 <listen+0x82>
   }
   return SOCK_OK;
 8004538:	2301      	movs	r3, #1
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	4613      	mov	r3, r2
 8004554:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d902      	bls.n	800456a <sendto+0x26>
 8004564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004568:	e11b      	b.n	80047a2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	3301      	adds	r3, #1
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fb18 	bl	8003ba8 <WIZCHIP_READ>
 8004578:	4603      	mov	r3, r0
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b02      	subs	r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d902      	bls.n	800458a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004584:	f06f 0304 	mvn.w	r3, #4
 8004588:	e10b      	b.n	80047a2 <sendto+0x25e>
         break;
 800458a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800458c:	89bb      	ldrh	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <sendto+0x54>
 8004592:	f06f 030d 	mvn.w	r3, #13
 8004596:	e104      	b.n	80047a2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	3201      	adds	r2, #1
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	3202      	adds	r2, #2
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	3203      	adds	r2, #3
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10e      	bne.n	80045ec <sendto+0xa8>
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	3301      	adds	r3, #1
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fae6 	bl	8003ba8 <WIZCHIP_READ>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d002      	beq.n	80045ec <sendto+0xa8>
 80045e6:	f06f 030b 	mvn.w	r3, #11
 80045ea:	e0da      	b.n	80047a2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80045ec:	8c3b      	ldrh	r3, [r7, #32]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <sendto+0xcc>
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	3301      	adds	r3, #1
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fad4 	bl	8003ba8 <WIZCHIP_READ>
 8004600:	4603      	mov	r3, r0
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d002      	beq.n	8004610 <sendto+0xcc>
 800460a:	f06f 030a 	mvn.w	r3, #10
 800460e:	e0c8      	b.n	80047a2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	3301      	adds	r3, #1
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fac3 	bl	8003ba8 <WIZCHIP_READ>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b42      	cmp	r3, #66	; 0x42
 800462a:	d008      	beq.n	800463e <sendto+0xfa>
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	2b22      	cmp	r3, #34	; 0x22
 8004630:	d005      	beq.n	800463e <sendto+0xfa>
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b32      	cmp	r3, #50	; 0x32
 8004636:	d002      	beq.n	800463e <sendto+0xfa>
 8004638:	f06f 0306 	mvn.w	r3, #6
 800463c:	e0b1      	b.n	80047a2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	3301      	adds	r3, #1
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800464a:	2204      	movs	r2, #4
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fba4 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	3301      	adds	r3, #1
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	461a      	mov	r2, r3
 8004662:	8c3b      	ldrh	r3, [r7, #32]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	b29b      	uxth	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7ff fae7 	bl	8003c40 <WIZCHIP_WRITE>
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	3301      	adds	r3, #1
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800467e:	461a      	mov	r2, r3
 8004680:	8c3b      	ldrh	r3, [r7, #32]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7ff fada 	bl	8003c40 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3301      	adds	r3, #1
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fa85 	bl	8003ba8 <WIZCHIP_READ>
 800469e:	4603      	mov	r3, r0
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80046a6:	89ba      	ldrh	r2, [r7, #12]
 80046a8:	8abb      	ldrh	r3, [r7, #20]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d901      	bls.n	80046b2 <sendto+0x16e>
 80046ae:	8abb      	ldrh	r3, [r7, #20]
 80046b0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fbd1 	bl	8003e5c <getSn_TX_FSR>
 80046ba:	4603      	mov	r3, r0
 80046bc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	3301      	adds	r3, #1
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fa6c 	bl	8003ba8 <WIZCHIP_READ>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <sendto+0x198>
 80046d6:	f06f 0303 	mvn.w	r3, #3
 80046da:	e062      	b.n	80047a2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80046dc:	4b33      	ldr	r3, [pc, #204]	; (80047ac <sendto+0x268>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	fa42 f303 	asr.w	r3, r2, r3
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <sendto+0x1b8>
 80046f0:	89ba      	ldrh	r2, [r7, #12]
 80046f2:	8abb      	ldrh	r3, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d901      	bls.n	80046fc <sendto+0x1b8>
 80046f8:	2300      	movs	r3, #0
 80046fa:	e052      	b.n	80047a2 <sendto+0x25e>
      if(len <= freesize) break;
 80046fc:	89ba      	ldrh	r2, [r7, #12]
 80046fe:	8abb      	ldrh	r3, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	d900      	bls.n	8004706 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8004704:	e7d5      	b.n	80046b2 <sendto+0x16e>
      if(len <= freesize) break;
 8004706:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004708:	89ba      	ldrh	r2, [r7, #12]
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fc3a 	bl	8003f88 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	3301      	adds	r3, #1
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004720:	2120      	movs	r1, #32
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fa8c 	bl	8003c40 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004728:	bf00      	nop
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	3301      	adds	r3, #1
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fa36 	bl	8003ba8 <WIZCHIP_READ>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f3      	bne.n	800472a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	3301      	adds	r3, #1
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fa2a 	bl	8003ba8 <WIZCHIP_READ>
 8004754:	4603      	mov	r3, r0
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3301      	adds	r3, #1
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004772:	2110      	movs	r1, #16
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fa63 	bl	8003c40 <WIZCHIP_WRITE>
         break;
 800477a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800477c:	89bb      	ldrh	r3, [r7, #12]
 800477e:	e010      	b.n	80047a2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0db      	beq.n	8004742 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	3301      	adds	r3, #1
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004796:	2108      	movs	r1, #8
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa51 	bl	8003c40 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800479e:	f06f 030c 	mvn.w	r3, #12
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200000b4 	.word	0x200000b4

080047b0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	4613      	mov	r3, r2
 80047c0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d902      	bls.n	80047d2 <recvfrom+0x22>
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d0:	e1d1      	b.n	8004b76 <recvfrom+0x3c6>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	3301      	adds	r3, #1
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f9e4 	bl	8003ba8 <WIZCHIP_READ>
 80047e0:	4603      	mov	r3, r0
 80047e2:	777b      	strb	r3, [r7, #29]
 80047e4:	7f7b      	ldrb	r3, [r7, #29]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	3b02      	subs	r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d902      	bls.n	80047f6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80047f0:	f06f 0304 	mvn.w	r3, #4
 80047f4:	e1bf      	b.n	8004b76 <recvfrom+0x3c6>
         break;
 80047f6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80047f8:	89bb      	ldrh	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <recvfrom+0x54>
 80047fe:	f06f 030d 	mvn.w	r3, #13
 8004802:	e1b8      	b.n	8004b76 <recvfrom+0x3c6>
   if(sock_remained_size[sn] == 0)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	4ab1      	ldr	r2, [pc, #708]	; (8004acc <recvfrom+0x31c>)
 8004808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d128      	bne.n	8004862 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fb6d 	bl	8003ef2 <getSn_RX_RSR>
 8004818:	4603      	mov	r3, r0
 800481a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	3301      	adds	r3, #1
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff f9bd 	bl	8003ba8 <WIZCHIP_READ>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <recvfrom+0x8a>
 8004834:	f06f 0303 	mvn.w	r3, #3
 8004838:	e19d      	b.n	8004b76 <recvfrom+0x3c6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800483a:	4ba5      	ldr	r3, [pc, #660]	; (8004ad0 <recvfrom+0x320>)
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	fa42 f303 	asr.w	r3, r2, r3
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <recvfrom+0xa8>
 800484e:	8bfb      	ldrh	r3, [r7, #30]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <recvfrom+0xa8>
 8004854:	2300      	movs	r3, #0
 8004856:	e18e      	b.n	8004b76 <recvfrom+0x3c6>
         if(pack_len != 0) break;
 8004858:	8bfb      	ldrh	r3, [r7, #30]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d100      	bne.n	8004860 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800485e:	e7d7      	b.n	8004810 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004860:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004862:	7f7b      	ldrb	r3, [r7, #29]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	2b03      	cmp	r3, #3
 800486a:	f000 80d9 	beq.w	8004a20 <recvfrom+0x270>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d073      	beq.n	800495a <recvfrom+0x1aa>
 8004872:	2b02      	cmp	r3, #2
 8004874:	f040 813c 	bne.w	8004af0 <recvfrom+0x340>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	4a94      	ldr	r2, [pc, #592]	; (8004acc <recvfrom+0x31c>)
 800487c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d152      	bne.n	800492a <recvfrom+0x17a>
	      {
   			wiz_recv_data(sn, head, 8);
 8004884:	f107 0114 	add.w	r1, r7, #20
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2208      	movs	r2, #8
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fbd7 	bl	8004040 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	3301      	adds	r3, #1
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800489e:	2140      	movs	r1, #64	; 0x40
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff f9cd 	bl	8003c40 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80048a6:	bf00      	nop
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	3301      	adds	r3, #1
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff f977 	bl	8003ba8 <WIZCHIP_READ>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f3      	bne.n	80048a8 <recvfrom+0xf8>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80048c0:	7d3a      	ldrb	r2, [r7, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3301      	adds	r3, #1
 80048ca:	7d7a      	ldrb	r2, [r7, #21]
 80048cc:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3302      	adds	r3, #2
 80048d2:	7dba      	ldrb	r2, [r7, #22]
 80048d4:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3303      	adds	r3, #3
 80048da:	7dfa      	ldrb	r2, [r7, #23]
 80048dc:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80048de:	7e3b      	ldrb	r3, [r7, #24]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	7e7b      	ldrb	r3, [r7, #25]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80048fa:	7eba      	ldrb	r2, [r7, #26]
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	b291      	uxth	r1, r2
 8004900:	4a72      	ldr	r2, [pc, #456]	; (8004acc <recvfrom+0x31c>)
 8004902:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	4a70      	ldr	r2, [pc, #448]	; (8004acc <recvfrom+0x31c>)
 800490a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	b299      	uxth	r1, r3
 8004912:	7efb      	ldrb	r3, [r7, #27]
 8004914:	b29a      	uxth	r2, r3
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	440a      	add	r2, r1
 800491a:	b291      	uxth	r1, r2
 800491c:	4a6b      	ldr	r2, [pc, #428]	; (8004acc <recvfrom+0x31c>)
 800491e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	4a6b      	ldr	r2, [pc, #428]	; (8004ad4 <recvfrom+0x324>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	4a67      	ldr	r2, [pc, #412]	; (8004acc <recvfrom+0x31c>)
 800492e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004932:	89ba      	ldrh	r2, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d202      	bcs.n	800493e <recvfrom+0x18e>
 8004938:	89bb      	ldrh	r3, [r7, #12]
 800493a:	83fb      	strh	r3, [r7, #30]
 800493c:	e004      	b.n	8004948 <recvfrom+0x198>
			else pack_len = sock_remained_size[sn];
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	4a62      	ldr	r2, [pc, #392]	; (8004acc <recvfrom+0x31c>)
 8004942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004946:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004948:	8bfb      	ldrh	r3, [r7, #30]
 800494a:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800494c:	8bfa      	ldrh	r2, [r7, #30]
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fb74 	bl	8004040 <wiz_recv_data>
			break;
 8004958:	e0d6      	b.n	8004b08 <recvfrom+0x358>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	4a5b      	ldr	r2, [pc, #364]	; (8004acc <recvfrom+0x31c>)
 800495e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d146      	bne.n	80049f4 <recvfrom+0x244>
	      {
   			wiz_recv_data(sn, head, 2);
 8004966:	f107 0114 	add.w	r1, r7, #20
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2202      	movs	r2, #2
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fb66 	bl	8004040 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3301      	adds	r3, #1
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004980:	2140      	movs	r1, #64	; 0x40
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff f95c 	bl	8003c40 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004988:	bf00      	nop
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3301      	adds	r3, #1
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff f906 	bl	8003ba8 <WIZCHIP_READ>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f3      	bne.n	800498a <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80049a2:	7d3a      	ldrb	r2, [r7, #20]
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	b291      	uxth	r1, r2
 80049a8:	4a48      	ldr	r2, [pc, #288]	; (8004acc <recvfrom+0x31c>)
 80049aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	4a46      	ldr	r2, [pc, #280]	; (8004acc <recvfrom+0x31c>)
 80049b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	7d7b      	ldrb	r3, [r7, #21]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4413      	add	r3, r2
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	3a02      	subs	r2, #2
 80049c6:	b291      	uxth	r1, r2
 80049c8:	4a40      	ldr	r2, [pc, #256]	; (8004acc <recvfrom+0x31c>)
 80049ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	4a3e      	ldr	r2, [pc, #248]	; (8004acc <recvfrom+0x31c>)
 80049d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d6:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80049da:	4293      	cmp	r3, r2
 80049dc:	d906      	bls.n	80049ec <recvfrom+0x23c>
   			{
   			   close(sn);
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fce7 	bl	80043b4 <close>
   			   return SOCKFATAL_PACKLEN;
 80049e6:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80049ea:	e0c4      	b.n	8004b76 <recvfrom+0x3c6>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <recvfrom+0x324>)
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	4a35      	ldr	r2, [pc, #212]	; (8004acc <recvfrom+0x31c>)
 80049f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049fc:	89ba      	ldrh	r2, [r7, #12]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d202      	bcs.n	8004a08 <recvfrom+0x258>
 8004a02:	89bb      	ldrh	r3, [r7, #12]
 8004a04:	83fb      	strh	r3, [r7, #30]
 8004a06:	e004      	b.n	8004a12 <recvfrom+0x262>
			else pack_len = sock_remained_size[sn];
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	4a30      	ldr	r2, [pc, #192]	; (8004acc <recvfrom+0x31c>)
 8004a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a10:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004a12:	8bfa      	ldrh	r2, [r7, #30]
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fb11 	bl	8004040 <wiz_recv_data>
		   break;
 8004a1e:	e073      	b.n	8004b08 <recvfrom+0x358>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <recvfrom+0x31c>)
 8004a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d144      	bne.n	8004ab6 <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 8004a2c:	f107 0114 	add.w	r1, r7, #20
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2206      	movs	r2, #6
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fb03 	bl	8004040 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3301      	adds	r3, #1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a46:	2140      	movs	r1, #64	; 0x40
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff f8f9 	bl	8003c40 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004a4e:	bf00      	nop
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	3301      	adds	r3, #1
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff f8a3 	bl	8003ba8 <WIZCHIP_READ>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f3      	bne.n	8004a50 <recvfrom+0x2a0>
   			addr[0] = head[0];
 8004a68:	7d3a      	ldrb	r2, [r7, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3301      	adds	r3, #1
 8004a72:	7d7a      	ldrb	r2, [r7, #21]
 8004a74:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	7dba      	ldrb	r2, [r7, #22]
 8004a7c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3303      	adds	r3, #3
 8004a82:	7dfa      	ldrb	r2, [r7, #23]
 8004a84:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004a86:	7e3a      	ldrb	r2, [r7, #24]
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	b291      	uxth	r1, r2
 8004a8c:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <recvfrom+0x31c>)
 8004a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <recvfrom+0x31c>)
 8004a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	b299      	uxth	r1, r3
 8004a9e:	7e7b      	ldrb	r3, [r7, #25]
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	b291      	uxth	r1, r2
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <recvfrom+0x31c>)
 8004aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <recvfrom+0x324>)
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <recvfrom+0x31c>)
 8004aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004abe:	89ba      	ldrh	r2, [r7, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d209      	bcs.n	8004ad8 <recvfrom+0x328>
 8004ac4:	89bb      	ldrh	r3, [r7, #12]
 8004ac6:	83fb      	strh	r3, [r7, #30]
 8004ac8:	e00b      	b.n	8004ae2 <recvfrom+0x332>
 8004aca:	bf00      	nop
 8004acc:	200000b8 	.word	0x200000b8
 8004ad0:	200000b4 	.word	0x200000b4
 8004ad4:	200000c8 	.word	0x200000c8
			else pack_len = sock_remained_size[sn];
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <recvfrom+0x3d0>)
 8004adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae0:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004ae2:	8bfa      	ldrh	r2, [r7, #30]
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff faa9 	bl	8004040 <wiz_recv_data>
			break;
 8004aee:	e00b      	b.n	8004b08 <recvfrom+0x358>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004af0:	8bfa      	ldrh	r2, [r7, #30]
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fafe 	bl	80040f8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	4920      	ldr	r1, [pc, #128]	; (8004b80 <recvfrom+0x3d0>)
 8004b00:	8bfa      	ldrh	r2, [r7, #30]
 8004b02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004b06:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f892 	bl	8003c40 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004b1c:	bf00      	nop
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	3301      	adds	r3, #1
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff f83c 	bl	8003ba8 <WIZCHIP_READ>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f3      	bne.n	8004b1e <recvfrom+0x36e>
	sock_remained_size[sn] -= pack_len;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <recvfrom+0x3d0>)
 8004b3a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	8bfa      	ldrh	r2, [r7, #30]
 8004b42:	1a8a      	subs	r2, r1, r2
 8004b44:	b291      	uxth	r1, r2
 8004b46:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <recvfrom+0x3d0>)
 8004b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <recvfrom+0x3d0>)
 8004b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <recvfrom+0x3bc>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <recvfrom+0x3d4>)
 8004b5c:	5cd2      	ldrb	r2, [r2, r3]
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	b2d1      	uxtb	r1, r2
 8004b66:	4a07      	ldr	r2, [pc, #28]	; (8004b84 <recvfrom+0x3d4>)
 8004b68:	54d1      	strb	r1, [r2, r3]
 8004b6a:	e003      	b.n	8004b74 <recvfrom+0x3c4>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <recvfrom+0x3d4>)
 8004b70:	2100      	movs	r1, #0
 8004b72:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004b74:	8bfb      	ldrh	r3, [r7, #30]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200000b8 	.word	0x200000b8
 8004b84:	200000c8 	.word	0x200000c8

08004b88 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	bf00      	nop
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70fb      	strb	r3, [r7, #3]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	807b      	strh	r3, [r7, #2]
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	807b      	strh	r3, [r7, #2]
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <reg_wizchip_cs_cbfunc+0x16>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <reg_wizchip_cs_cbfunc+0x3c>)
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <reg_wizchip_cs_cbfunc+0x40>)
 8004c6a:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <reg_wizchip_cs_cbfunc+0x3c>)
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <reg_wizchip_cs_cbfunc+0x44>)
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	e005      	b.n	8004c80 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004c74:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <reg_wizchip_cs_cbfunc+0x3c>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8004c7a:	4a04      	ldr	r2, [pc, #16]	; (8004c8c <reg_wizchip_cs_cbfunc+0x3c>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6153      	str	r3, [r2, #20]
   }
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20000004 	.word	0x20000004
 8004c90:	08004ba5 	.word	0x08004ba5
 8004c94:	08004bb3 	.word	0x08004bb3

08004c98 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004ca2:	bf00      	nop
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <reg_wizchip_spi_cbfunc+0x4c>)
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f9      	beq.n	8004ca4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <reg_wizchip_spi_cbfunc+0x24>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <reg_wizchip_spi_cbfunc+0x4c>)
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <reg_wizchip_spi_cbfunc+0x50>)
 8004cc0:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <reg_wizchip_spi_cbfunc+0x4c>)
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <reg_wizchip_spi_cbfunc+0x54>)
 8004cc6:	61da      	str	r2, [r3, #28]
 8004cc8:	e005      	b.n	8004cd6 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004cca:	4a06      	ldr	r2, [pc, #24]	; (8004ce4 <reg_wizchip_spi_cbfunc+0x4c>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <reg_wizchip_spi_cbfunc+0x4c>)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	61d3      	str	r3, [r2, #28]
   }
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	08004bf9 	.word	0x08004bf9
 8004cec:	08004c09 	.word	0x08004c09

08004cf0 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004cfa:	bf00      	nop
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f9      	beq.n	8004cfc <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <reg_wizchip_spiburst_cbfunc+0x24>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <reg_wizchip_spiburst_cbfunc+0x50>)
 8004d18:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d20:	e005      	b.n	8004d2e <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004d22:	4a06      	ldr	r2, [pc, #24]	; (8004d3c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	08004c1f 	.word	0x08004c1f
 8004d44:	08004c37 	.word	0x08004c37

08004d48 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	2206      	movs	r2, #6
 8004d52:	4619      	mov	r1, r3
 8004d54:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004d58:	f7fe ffc0 	bl	8003cdc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	2204      	movs	r2, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d68:	f7fe ffb8 	bl	8003cdc <WIZCHIP_READ_BUF>
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	2204      	movs	r2, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004d78:	f7fe ffb0 	bl	8003cdc <WIZCHIP_READ_BUF>
 8004d7c:	f107 030c 	add.w	r3, r7, #12
 8004d80:	2204      	movs	r2, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004d88:	f7fe ffa8 	bl	8003cdc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fe ff56 	bl	8003c40 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fe ff07 	bl	8003ba8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	2206      	movs	r2, #6
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004da4:	f7fe fffa 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	2204      	movs	r2, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004db4:	f7fe fff2 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004dc4:	f7fe ffea 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	2204      	movs	r2, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004dd4:	f7fe ffe2 	bl	8003d9c <WIZCHIP_WRITE_BUF>
}
 8004dd8:	bf00      	nop
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004dee:	f7ff ffab 	bl	8004d48 <wizchip_sw_reset>
   if(txsize)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d03b      	beq.n	8004e70 <wizchip_init+0x90>
   {
      tmp = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
 8004e00:	e015      	b.n	8004e2e <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8004e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	4413      	add	r3, r2
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	dd02      	ble.n	8004e22 <wizchip_init+0x42>
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e20:	e066      	b.n	8004ef0 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e32:	2b07      	cmp	r3, #7
 8004e34:	dde5      	ble.n	8004e02 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e015      	b.n	8004e68 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	3301      	adds	r3, #1
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4413      	add	r3, r2
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	f7fe fef2 	bl	8003c40 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3301      	adds	r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6c:	2b07      	cmp	r3, #7
 8004e6e:	dde5      	ble.n	8004e3c <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d03b      	beq.n	8004eee <wizchip_init+0x10e>
   {
      tmp = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	e015      	b.n	8004eac <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	4413      	add	r3, r2
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	dd02      	ble.n	8004ea0 <wizchip_init+0xc0>
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e9e:	e027      	b.n	8004ef0 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb0:	2b07      	cmp	r3, #7
 8004eb2:	dde5      	ble.n	8004e80 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	73fb      	strb	r3, [r7, #15]
 8004eb8:	e015      	b.n	8004ee6 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7fe feb3 	bl	8003c40 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eea:	2b07      	cmp	r3, #7
 8004eec:	dde5      	ble.n	8004eba <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2206      	movs	r2, #6
 8004f04:	4619      	mov	r1, r3
 8004f06:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004f0a:	f7fe ff47 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	330e      	adds	r3, #14
 8004f12:	2204      	movs	r2, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f1a:	f7fe ff3f 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	330a      	adds	r3, #10
 8004f22:	2204      	movs	r2, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004f2a:	f7fe ff37 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3306      	adds	r3, #6
 8004f32:	2204      	movs	r2, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004f3a:	f7fe ff2f 	bl	8003d9c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	7c9a      	ldrb	r2, [r3, #18]
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <wizchip_setnetinfo+0x78>)
 8004f44:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7cda      	ldrb	r2, [r3, #19]
 8004f4a:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <wizchip_setnetinfo+0x78>)
 8004f4c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	7d1a      	ldrb	r2, [r3, #20]
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <wizchip_setnetinfo+0x78>)
 8004f54:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	7d5a      	ldrb	r2, [r3, #21]
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <wizchip_setnetinfo+0x78>)
 8004f5c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7d9a      	ldrb	r2, [r3, #22]
 8004f62:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <wizchip_setnetinfo+0x7c>)
 8004f64:	701a      	strb	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200000d0 	.word	0x200000d0
 8004f74:	200000d4 	.word	0x200000d4

08004f78 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2206      	movs	r2, #6
 8004f84:	4619      	mov	r1, r3
 8004f86:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004f8a:	f7fe fea7 	bl	8003cdc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	330e      	adds	r3, #14
 8004f92:	2204      	movs	r2, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f9a:	f7fe fe9f 	bl	8003cdc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	330a      	adds	r3, #10
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004faa:	f7fe fe97 	bl	8003cdc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3306      	adds	r3, #6
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004fba:	f7fe fe8f 	bl	8003cdc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <wizchip_getnetinfo+0x78>)
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <wizchip_getnetinfo+0x78>)
 8004fc8:	785a      	ldrb	r2, [r3, #1]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <wizchip_getnetinfo+0x78>)
 8004fd0:	789a      	ldrb	r2, [r3, #2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <wizchip_getnetinfo+0x78>)
 8004fd8:	78da      	ldrb	r2, [r3, #3]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <wizchip_getnetinfo+0x7c>)
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	759a      	strb	r2, [r3, #22]
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200000d0 	.word	0x200000d0
 8004ff4:	200000d4 	.word	0x200000d4

08004ff8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800500a:	2b84      	cmp	r3, #132	; 0x84
 800500c:	d005      	beq.n	800501a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800500e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	3303      	adds	r3, #3
 8005018:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800502c:	f000 fe7c 	bl	8005d28 <vTaskStartScheduler>
  
  return osOK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	bd80      	pop	{r7, pc}

08005036 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005038:	b089      	sub	sp, #36	; 0x24
 800503a:	af04      	add	r7, sp, #16
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d020      	beq.n	800508a <osThreadCreate+0x54>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01c      	beq.n	800508a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685c      	ldr	r4, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681d      	ldr	r5, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691e      	ldr	r6, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ffc8 	bl	8004ff8 <makeFreeRtosPriority>
 8005068:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005072:	9202      	str	r2, [sp, #8]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	9100      	str	r1, [sp, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4632      	mov	r2, r6
 800507c:	4629      	mov	r1, r5
 800507e:	4620      	mov	r0, r4
 8005080:	f000 fc98 	bl	80059b4 <xTaskCreateStatic>
 8005084:	4603      	mov	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e01c      	b.n	80050c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685c      	ldr	r4, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005096:	b29e      	uxth	r6, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff ffaa 	bl	8004ff8 <makeFreeRtosPriority>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f107 030c 	add.w	r3, r7, #12
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	9200      	str	r2, [sp, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	4632      	mov	r2, r6
 80050b2:	4629      	mov	r1, r5
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 fcd6 	bl	8005a66 <xTaskCreate>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <osDelay+0x16>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	e000      	b.n	80050e6 <osDelay+0x18>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fdea 	bl	8005cc0 <vTaskDelay>
  
  return osOK;
 80050ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800510e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 0208 	add.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f103 0208 	add.w	r2, r3, #8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ae:	d103      	bne.n	80051b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e00c      	b.n	80051d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3308      	adds	r3, #8
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e002      	b.n	80051c6 <vListInsert+0x2e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d2f6      	bcs.n	80051c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6852      	ldr	r2, [r2, #4]
 800522a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d103      	bne.n	800523e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d109      	bne.n	8005288 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	e7fe      	b.n	8005286 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005288:	f001 fb78 	bl	800697c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	68f9      	ldr	r1, [r7, #12]
 8005296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	441a      	add	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	3b01      	subs	r3, #1
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	441a      	add	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	22ff      	movs	r2, #255	; 0xff
 80052cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	22ff      	movs	r2, #255	; 0xff
 80052d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d114      	bne.n	8005308 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01a      	beq.n	800531c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 ff5e 	bl	80061ac <xTaskRemoveFromEventList>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d012      	beq.n	800531c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052f6:	4b0d      	ldr	r3, [pc, #52]	; (800532c <xQueueGenericReset+0xcc>)
 80052f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	e009      	b.n	800531c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3310      	adds	r3, #16
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fef2 	bl	80050f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3324      	adds	r3, #36	; 0x24
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff feed 	bl	80050f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800531c:	f001 fb5c 	bl	80069d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005320:	2301      	movs	r3, #1
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	e000ed04 	.word	0xe000ed04

08005330 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <xQueueGenericCreate+0x28>
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e7fe      	b.n	8005356 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e004      	b.n	800536e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3348      	adds	r3, #72	; 0x48
 8005372:	4618      	mov	r0, r3
 8005374:	f001 fbde 	bl	8006b34 <pvPortMalloc>
 8005378:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	3348      	adds	r3, #72	; 0x48
 8005384:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800538e:	79fa      	ldrb	r2, [r7, #7]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f805 	bl	80053aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053a0:	69bb      	ldr	r3, [r7, #24]
	}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e002      	b.n	80053cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053d8:	2101      	movs	r1, #1
 80053da:	69b8      	ldr	r0, [r7, #24]
 80053dc:	f7ff ff40 	bl	8005260 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	; 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053f6:	2300      	movs	r3, #0
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <xQueueGenericSend+0x30>
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
 8005416:	e7fe      	b.n	8005416 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <xQueueGenericSend+0x3e>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueGenericSend+0x42>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericSend+0x44>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <xQueueGenericSend+0x5c>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	e7fe      	b.n	8005442 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d103      	bne.n	8005452 <xQueueGenericSend+0x6a>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <xQueueGenericSend+0x6e>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <xQueueGenericSend+0x70>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <xQueueGenericSend+0x88>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	e7fe      	b.n	800546e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005470:	f001 f858 	bl	8006524 <xTaskGetSchedulerState>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <xQueueGenericSend+0x98>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <xQueueGenericSend+0x9c>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <xQueueGenericSend+0x9e>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <xQueueGenericSend+0xb6>
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	e7fe      	b.n	800549c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800549e:	f001 fa6d 	bl	800697c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <xQueueGenericSend+0xcc>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d129      	bne.n	8005508 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ba:	f000 f96b 	bl	8005794 <prvCopyDataToQueue>
 80054be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fe6d 	bl	80061ac <xTaskRemoveFromEventList>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d013      	beq.n	8005500 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054d8:	4b3f      	ldr	r3, [pc, #252]	; (80055d8 <xQueueGenericSend+0x1f0>)
 80054da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	e00a      	b.n	8005500 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054f0:	4b39      	ldr	r3, [pc, #228]	; (80055d8 <xQueueGenericSend+0x1f0>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005500:	f001 fa6a 	bl	80069d8 <vPortExitCritical>
				return pdPASS;
 8005504:	2301      	movs	r3, #1
 8005506:	e063      	b.n	80055d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800550e:	f001 fa63 	bl	80069d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005512:	2300      	movs	r3, #0
 8005514:	e05c      	b.n	80055d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fea5 	bl	8006270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005526:	2301      	movs	r3, #1
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800552a:	f001 fa55 	bl	80069d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800552e:	f000 fc59 	bl	8005de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005532:	f001 fa23 	bl	800697c <vPortEnterCritical>
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800553c:	b25b      	sxtb	r3, r3
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005542:	d103      	bne.n	800554c <xQueueGenericSend+0x164>
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005552:	b25b      	sxtb	r3, r3
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005558:	d103      	bne.n	8005562 <xQueueGenericSend+0x17a>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005562:	f001 fa39 	bl	80069d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005566:	1d3a      	adds	r2, r7, #4
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fe94 	bl	800629c <xTaskCheckForTimeOut>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d124      	bne.n	80055c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800557a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800557c:	f000 fa02 	bl	8005984 <prvIsQueueFull>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d018      	beq.n	80055b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	3310      	adds	r3, #16
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fde8 	bl	8006164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005596:	f000 f98d 	bl	80058b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800559a:	f000 fc31 	bl	8005e00 <xTaskResumeAll>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f af7c 	bne.w	800549e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <xQueueGenericSend+0x1f0>)
 80055a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	e772      	b.n	800549e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ba:	f000 f97b 	bl	80058b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055be:	f000 fc1f 	bl	8005e00 <xTaskResumeAll>
 80055c2:	e76c      	b.n	800549e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c6:	f000 f975 	bl	80058b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ca:	f000 fc19 	bl	8005e00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055ce:	2300      	movs	r3, #0
		}
	}
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3738      	adds	r7, #56	; 0x38
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <xQueueReceive+0x2e>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	e7fe      	b.n	8005608 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <xQueueReceive+0x3c>
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <xQueueReceive+0x40>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <xQueueReceive+0x42>
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <xQueueReceive+0x5a>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e7fe      	b.n	8005634 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005636:	f000 ff75 	bl	8006524 <xTaskGetSchedulerState>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <xQueueReceive+0x6a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <xQueueReceive+0x6e>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <xQueueReceive+0x70>
 800564a:	2300      	movs	r3, #0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <xQueueReceive+0x88>
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e7fe      	b.n	8005662 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005664:	f001 f98a 	bl	800697c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01f      	beq.n	80056b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005678:	f000 f8f6 	bl	8005868 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	1e5a      	subs	r2, r3, #1
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00f      	beq.n	80056ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	3310      	adds	r3, #16
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fd8b 	bl	80061ac <xTaskRemoveFromEventList>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800569c:	4b3c      	ldr	r3, [pc, #240]	; (8005790 <xQueueReceive+0x1b4>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056ac:	f001 f994 	bl	80069d8 <vPortExitCritical>
				return pdPASS;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e069      	b.n	8005788 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056ba:	f001 f98d 	bl	80069d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056be:	2300      	movs	r3, #0
 80056c0:	e062      	b.n	8005788 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fdcf 	bl	8006270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056d2:	2301      	movs	r3, #1
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d6:	f001 f97f 	bl	80069d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056da:	f000 fb83 	bl	8005de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056de:	f001 f94d 	bl	800697c <vPortEnterCritical>
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ee:	d103      	bne.n	80056f8 <xQueueReceive+0x11c>
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056fe:	b25b      	sxtb	r3, r3
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005704:	d103      	bne.n	800570e <xQueueReceive+0x132>
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800570e:	f001 f963 	bl	80069d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005712:	1d3a      	adds	r2, r7, #4
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fdbe 	bl	800629c <xTaskCheckForTimeOut>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d123      	bne.n	800576e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005728:	f000 f916 	bl	8005958 <prvIsQueueEmpty>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d017      	beq.n	8005762 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	3324      	adds	r3, #36	; 0x24
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fd12 	bl	8006164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005742:	f000 f8b7 	bl	80058b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005746:	f000 fb5b 	bl	8005e00 <xTaskResumeAll>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d189      	bne.n	8005664 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <xQueueReceive+0x1b4>)
 8005752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	e780      	b.n	8005664 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005764:	f000 f8a6 	bl	80058b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005768:	f000 fb4a 	bl	8005e00 <xTaskResumeAll>
 800576c:	e77a      	b.n	8005664 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800576e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005770:	f000 f8a0 	bl	80058b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005774:	f000 fb44 	bl	8005e00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577a:	f000 f8ed 	bl	8005958 <prvIsQueueEmpty>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	f43f af6f 	beq.w	8005664 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005786:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005788:	4618      	mov	r0, r3
 800578a:	3730      	adds	r7, #48	; 0x30
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10d      	bne.n	80057ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d14d      	bne.n	8005856 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fece 	bl	8006560 <xTaskPriorityDisinherit>
 80057c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	e043      	b.n	8005856 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d119      	bne.n	8005808 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6898      	ldr	r0, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	461a      	mov	r2, r3
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	f003 fce4 	bl	80091ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	441a      	add	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d32b      	bcc.n	8005856 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	e026      	b.n	8005856 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68d8      	ldr	r0, [r3, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	461a      	mov	r2, r3
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	f003 fcca 	bl	80091ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	425b      	negs	r3, r3
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d207      	bcs.n	8005844 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	425b      	negs	r3, r3
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d105      	bne.n	8005856 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	3b01      	subs	r3, #1
 8005854:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d018      	beq.n	80058ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	441a      	add	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d303      	bcc.n	800589c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68d9      	ldr	r1, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	461a      	mov	r2, r3
 80058a6:	6838      	ldr	r0, [r7, #0]
 80058a8:	f003 fc80 	bl	80091ac <memcpy>
	}
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058bc:	f001 f85e 	bl	800697c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c8:	e011      	b.n	80058ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d012      	beq.n	80058f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3324      	adds	r3, #36	; 0x24
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fc68 	bl	80061ac <xTaskRemoveFromEventList>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058e2:	f000 fd3b 	bl	800635c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dce9      	bgt.n	80058ca <prvUnlockQueue+0x16>
 80058f6:	e000      	b.n	80058fa <prvUnlockQueue+0x46>
					break;
 80058f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	22ff      	movs	r2, #255	; 0xff
 80058fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005902:	f001 f869 	bl	80069d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005906:	f001 f839 	bl	800697c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005910:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005912:	e011      	b.n	8005938 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d012      	beq.n	8005942 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3310      	adds	r3, #16
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fc43 	bl	80061ac <xTaskRemoveFromEventList>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800592c:	f000 fd16 	bl	800635c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005930:	7bbb      	ldrb	r3, [r7, #14]
 8005932:	3b01      	subs	r3, #1
 8005934:	b2db      	uxtb	r3, r3
 8005936:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800593c:	2b00      	cmp	r3, #0
 800593e:	dce9      	bgt.n	8005914 <prvUnlockQueue+0x60>
 8005940:	e000      	b.n	8005944 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005942:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800594c:	f001 f844 	bl	80069d8 <vPortExitCritical>
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005960:	f001 f80c 	bl	800697c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e001      	b.n	8005976 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005976:	f001 f82f 	bl	80069d8 <vPortExitCritical>

	return xReturn;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800598c:	f000 fff6 	bl	800697c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	429a      	cmp	r2, r3
 800599a:	d102      	bne.n	80059a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e001      	b.n	80059a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059a6:	f001 f817 	bl	80069d8 <vPortExitCritical>

	return xReturn;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	; 0x38
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <xTaskCreateStatic+0x28>
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	e7fe      	b.n	80059da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <xTaskCreateStatic+0x42>
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	e7fe      	b.n	80059f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059f6:	2354      	movs	r3, #84	; 0x54
 80059f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b54      	cmp	r3, #84	; 0x54
 80059fe:	d009      	beq.n	8005a14 <xTaskCreateStatic+0x60>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e7fe      	b.n	8005a12 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01e      	beq.n	8005a58 <xTaskCreateStatic+0xa4>
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01b      	beq.n	8005a58 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a32:	2300      	movs	r3, #0
 8005a34:	9303      	str	r3, [sp, #12]
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f850 	bl	8005af0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a52:	f000 f8cb 	bl	8005bec <prvAddNewTaskToReadyList>
 8005a56:	e001      	b.n	8005a5c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a5c:	697b      	ldr	r3, [r7, #20]
	}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b08c      	sub	sp, #48	; 0x30
 8005a6a:	af04      	add	r7, sp, #16
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 f85a 	bl	8006b34 <pvPortMalloc>
 8005a80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a88:	2054      	movs	r0, #84	; 0x54
 8005a8a:	f001 f853 	bl	8006b34 <pvPortMalloc>
 8005a8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a9c:	e005      	b.n	8005aaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f001 f90a 	bl	8006cb8 <vPortFree>
 8005aa4:	e001      	b.n	8005aaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d017      	beq.n	8005ae0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9303      	str	r3, [sp, #12]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f80e 	bl	8005af0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ad4:	69f8      	ldr	r0, [r7, #28]
 8005ad6:	f000 f889 	bl	8005bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ada:	2301      	movs	r3, #1
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e002      	b.n	8005ae6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f023 0307 	bic.w	r3, r3, #7
 8005b16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <prvInitialiseNewTask+0x46>
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e7fe      	b.n	8005b34 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e012      	b.n	8005b62 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3334      	adds	r3, #52	; 0x34
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d9e9      	bls.n	8005b3c <prvInitialiseNewTask+0x4c>
 8005b68:	e000      	b.n	8005b6c <prvInitialiseNewTask+0x7c>
		{
			break;
 8005b6a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d901      	bls.n	8005b7e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b7a:	2306      	movs	r3, #6
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff face 	bl	8005136 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fac9 	bl	8005136 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	f1c3 0207 	rsb	r2, r3, #7
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	69b8      	ldr	r0, [r7, #24]
 8005bce:	f000 fdb1 	bl	8006734 <pxPortInitialiseStack>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be4:	bf00      	nop
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bf4:	f000 fec2 	bl	800697c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bf8:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <prvAddNewTaskToReadyList+0xb8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <prvAddNewTaskToReadyList+0xb8>)
 8005c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c02:	4b29      	ldr	r3, [pc, #164]	; (8005ca8 <prvAddNewTaskToReadyList+0xbc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c0a:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <prvAddNewTaskToReadyList+0xbc>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c10:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <prvAddNewTaskToReadyList+0xb8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d110      	bne.n	8005c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c18:	f000 fbc4 	bl	80063a4 <prvInitialiseTaskLists>
 8005c1c:	e00d      	b.n	8005c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c1e:	4b23      	ldr	r3, [pc, #140]	; (8005cac <prvAddNewTaskToReadyList+0xc0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <prvAddNewTaskToReadyList+0xbc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d802      	bhi.n	8005c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c34:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <prvAddNewTaskToReadyList+0xbc>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <prvAddNewTaskToReadyList+0xc4>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <prvAddNewTaskToReadyList+0xc4>)
 8005c42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	2201      	movs	r2, #1
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <prvAddNewTaskToReadyList+0xc8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <prvAddNewTaskToReadyList+0xc8>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <prvAddNewTaskToReadyList+0xcc>)
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7ff fa6f 	bl	8005150 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c72:	f000 feb1 	bl	80069d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <prvAddNewTaskToReadyList+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00e      	beq.n	8005c9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <prvAddNewTaskToReadyList+0xbc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d207      	bcs.n	8005c9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <prvAddNewTaskToReadyList+0xd0>)
 8005c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	200001d8 	.word	0x200001d8
 8005ca8:	200000d8 	.word	0x200000d8
 8005cac:	200001e4 	.word	0x200001e4
 8005cb0:	200001f4 	.word	0x200001f4
 8005cb4:	200001e0 	.word	0x200001e0
 8005cb8:	200000dc 	.word	0x200000dc
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cd2:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <vTaskDelay+0x60>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <vTaskDelay+0x2e>
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	e7fe      	b.n	8005cec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005cee:	f000 f879 	bl	8005de4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fcb7 	bl	8006668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cfa:	f000 f881 	bl	8005e00 <xTaskResumeAll>
 8005cfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d107      	bne.n	8005d16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <vTaskDelay+0x64>)
 8005d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000200 	.word	0x20000200
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d36:	463a      	mov	r2, r7
 8005d38:	1d39      	adds	r1, r7, #4
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fbae 	bl	80074a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	9202      	str	r2, [sp, #8]
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	460a      	mov	r2, r1
 8005d56:	491d      	ldr	r1, [pc, #116]	; (8005dcc <vTaskStartScheduler+0xa4>)
 8005d58:	481d      	ldr	r0, [pc, #116]	; (8005dd0 <vTaskStartScheduler+0xa8>)
 8005d5a:	f7ff fe2b 	bl	80059b4 <xTaskCreateStatic>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <vTaskStartScheduler+0xac>)
 8005d62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <vTaskStartScheduler+0xac>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e001      	b.n	8005d76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d115      	bne.n	8005da8 <vTaskStartScheduler+0x80>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d8e:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <vTaskStartScheduler+0xb0>)
 8005d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <vTaskStartScheduler+0xb4>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d9c:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <vTaskStartScheduler+0xb8>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005da2:	f000 fd4d 	bl	8006840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005da6:	e00d      	b.n	8005dc4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dae:	d109      	bne.n	8005dc4 <vTaskStartScheduler+0x9c>
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e7fe      	b.n	8005dc2 <vTaskStartScheduler+0x9a>
}
 8005dc4:	bf00      	nop
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	08009a9c 	.word	0x08009a9c
 8005dd0:	08006375 	.word	0x08006375
 8005dd4:	200001fc 	.word	0x200001fc
 8005dd8:	200001f8 	.word	0x200001f8
 8005ddc:	200001e4 	.word	0x200001e4
 8005de0:	200001dc 	.word	0x200001dc

08005de4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <vTaskSuspendAll+0x18>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	4a03      	ldr	r2, [pc, #12]	; (8005dfc <vTaskSuspendAll+0x18>)
 8005df0:	6013      	str	r3, [r2, #0]
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000200 	.word	0x20000200

08005e00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e0e:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <xTaskResumeAll+0x2a>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	e7fe      	b.n	8005e28 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e2a:	f000 fda7 	bl	800697c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e2e:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	4a37      	ldr	r2, [pc, #220]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e38:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d161      	bne.n	8005f04 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e40:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <xTaskResumeAll+0x118>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05d      	beq.n	8005f04 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e48:	e02e      	b.n	8005ea8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e4a:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <xTaskResumeAll+0x11c>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3318      	adds	r3, #24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff f9d7 	bl	800520a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff f9d2 	bl	800520a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	409a      	lsls	r2, r3
 8005e6e:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <xTaskResumeAll+0x120>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <xTaskResumeAll+0x120>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <xTaskResumeAll+0x124>)
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7ff f95e 	bl	8005150 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <xTaskResumeAll+0x128>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005ea2:	4b22      	ldr	r3, [pc, #136]	; (8005f2c <xTaskResumeAll+0x12c>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea8:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <xTaskResumeAll+0x11c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1cc      	bne.n	8005e4a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eb6:	f000 fb0f 	bl	80064d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <xTaskResumeAll+0x130>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d010      	beq.n	8005ee8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ec6:	f000 f837 	bl	8005f38 <xTaskIncrementTick>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005ed0:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <xTaskResumeAll+0x12c>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f1      	bne.n	8005ec6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <xTaskResumeAll+0x130>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <xTaskResumeAll+0x12c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <xTaskResumeAll+0x134>)
 8005ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f04:	f000 fd68 	bl	80069d8 <vPortExitCritical>

	return xAlreadyYielded;
 8005f08:	68bb      	ldr	r3, [r7, #8]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000200 	.word	0x20000200
 8005f18:	200001d8 	.word	0x200001d8
 8005f1c:	20000198 	.word	0x20000198
 8005f20:	200001e0 	.word	0x200001e0
 8005f24:	200000dc 	.word	0x200000dc
 8005f28:	200000d8 	.word	0x200000d8
 8005f2c:	200001ec 	.word	0x200001ec
 8005f30:	200001e8 	.word	0x200001e8
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f42:	4b50      	ldr	r3, [pc, #320]	; (8006084 <xTaskIncrementTick+0x14c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 808c 	bne.w	8006064 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f4c:	4b4e      	ldr	r3, [pc, #312]	; (8006088 <xTaskIncrementTick+0x150>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f54:	4a4c      	ldr	r2, [pc, #304]	; (8006088 <xTaskIncrementTick+0x150>)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11f      	bne.n	8005fa0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f60:	4b4a      	ldr	r3, [pc, #296]	; (800608c <xTaskIncrementTick+0x154>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <xTaskIncrementTick+0x46>
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	e7fe      	b.n	8005f7c <xTaskIncrementTick+0x44>
 8005f7e:	4b43      	ldr	r3, [pc, #268]	; (800608c <xTaskIncrementTick+0x154>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	4b42      	ldr	r3, [pc, #264]	; (8006090 <xTaskIncrementTick+0x158>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a40      	ldr	r2, [pc, #256]	; (800608c <xTaskIncrementTick+0x154>)
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	4a40      	ldr	r2, [pc, #256]	; (8006090 <xTaskIncrementTick+0x158>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4b40      	ldr	r3, [pc, #256]	; (8006094 <xTaskIncrementTick+0x15c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	4a3e      	ldr	r2, [pc, #248]	; (8006094 <xTaskIncrementTick+0x15c>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	f000 fa9c 	bl	80064d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fa0:	4b3d      	ldr	r3, [pc, #244]	; (8006098 <xTaskIncrementTick+0x160>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d34d      	bcc.n	8006046 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005faa:	4b38      	ldr	r3, [pc, #224]	; (800608c <xTaskIncrementTick+0x154>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <xTaskIncrementTick+0x80>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <xTaskIncrementTick+0x82>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <xTaskIncrementTick+0x160>)
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc4:	601a      	str	r2, [r3, #0]
					break;
 8005fc6:	e03e      	b.n	8006046 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fc8:	4b30      	ldr	r3, [pc, #192]	; (800608c <xTaskIncrementTick+0x154>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d203      	bcs.n	8005fe8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fe0:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <xTaskIncrementTick+0x160>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6013      	str	r3, [r2, #0]
						break;
 8005fe6:	e02e      	b.n	8006046 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff f90c 	bl	800520a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3318      	adds	r3, #24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff f903 	bl	800520a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	2201      	movs	r2, #1
 800600a:	409a      	lsls	r2, r3
 800600c:	4b23      	ldr	r3, [pc, #140]	; (800609c <xTaskIncrementTick+0x164>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	4a22      	ldr	r2, [pc, #136]	; (800609c <xTaskIncrementTick+0x164>)
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <xTaskIncrementTick+0x168>)
 8006024:	441a      	add	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7ff f88f 	bl	8005150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <xTaskIncrementTick+0x16c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	429a      	cmp	r2, r3
 800603e:	d3b4      	bcc.n	8005faa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006044:	e7b1      	b.n	8005faa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006046:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <xTaskIncrementTick+0x16c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4914      	ldr	r1, [pc, #80]	; (80060a0 <xTaskIncrementTick+0x168>)
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d907      	bls.n	800606e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e004      	b.n	800606e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <xTaskIncrementTick+0x170>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	4a0f      	ldr	r2, [pc, #60]	; (80060a8 <xTaskIncrementTick+0x170>)
 800606c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <xTaskIncrementTick+0x174>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800607a:	697b      	ldr	r3, [r7, #20]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20000200 	.word	0x20000200
 8006088:	200001dc 	.word	0x200001dc
 800608c:	20000190 	.word	0x20000190
 8006090:	20000194 	.word	0x20000194
 8006094:	200001f0 	.word	0x200001f0
 8006098:	200001f8 	.word	0x200001f8
 800609c:	200001e0 	.word	0x200001e0
 80060a0:	200000dc 	.word	0x200000dc
 80060a4:	200000d8 	.word	0x200000d8
 80060a8:	200001e8 	.word	0x200001e8
 80060ac:	200001ec 	.word	0x200001ec

080060b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060b6:	4b26      	ldr	r3, [pc, #152]	; (8006150 <vTaskSwitchContext+0xa0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060be:	4b25      	ldr	r3, [pc, #148]	; (8006154 <vTaskSwitchContext+0xa4>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060c4:	e03e      	b.n	8006144 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <vTaskSwitchContext+0xa4>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060cc:	4b22      	ldr	r3, [pc, #136]	; (8006158 <vTaskSwitchContext+0xa8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	fab3 f383 	clz	r3, r3
 80060d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	f1c3 031f 	rsb	r3, r3, #31
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	491e      	ldr	r1, [pc, #120]	; (800615c <vTaskSwitchContext+0xac>)
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <vTaskSwitchContext+0x5a>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	e7fe      	b.n	8006108 <vTaskSwitchContext+0x58>
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4a11      	ldr	r2, [pc, #68]	; (800615c <vTaskSwitchContext+0xac>)
 8006116:	4413      	add	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3308      	adds	r3, #8
 800612c:	429a      	cmp	r2, r3
 800612e:	d104      	bne.n	800613a <vTaskSwitchContext+0x8a>
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	605a      	str	r2, [r3, #4]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a07      	ldr	r2, [pc, #28]	; (8006160 <vTaskSwitchContext+0xb0>)
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000200 	.word	0x20000200
 8006154:	200001ec 	.word	0x200001ec
 8006158:	200001e0 	.word	0x200001e0
 800615c:	200000dc 	.word	0x200000dc
 8006160:	200000d8 	.word	0x200000d8

08006164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <vTaskPlaceOnEventList+0x24>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e7fe      	b.n	8006186 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <vTaskPlaceOnEventList+0x44>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3318      	adds	r3, #24
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff f801 	bl	8005198 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006196:	2101      	movs	r1, #1
 8006198:	6838      	ldr	r0, [r7, #0]
 800619a:	f000 fa65 	bl	8006668 <prvAddCurrentTaskToDelayedList>
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200000d8 	.word	0x200000d8

080061ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <xTaskRemoveFromEventList+0x2a>
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e7fe      	b.n	80061d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3318      	adds	r3, #24
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff f815 	bl	800520a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e0:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <xTaskRemoveFromEventList+0xac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11c      	bne.n	8006222 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff f80c 	bl	800520a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	2201      	movs	r2, #1
 80061f8:	409a      	lsls	r2, r3
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <xTaskRemoveFromEventList+0xb0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	4a16      	ldr	r2, [pc, #88]	; (800625c <xTaskRemoveFromEventList+0xb0>)
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4a13      	ldr	r2, [pc, #76]	; (8006260 <xTaskRemoveFromEventList+0xb4>)
 8006212:	441a      	add	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe ff98 	bl	8005150 <vListInsertEnd>
 8006220:	e005      	b.n	800622e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3318      	adds	r3, #24
 8006226:	4619      	mov	r1, r3
 8006228:	480e      	ldr	r0, [pc, #56]	; (8006264 <xTaskRemoveFromEventList+0xb8>)
 800622a:	f7fe ff91 	bl	8005150 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006232:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <xTaskRemoveFromEventList+0xbc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	429a      	cmp	r2, r3
 800623a:	d905      	bls.n	8006248 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <xTaskRemoveFromEventList+0xc0>)
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e001      	b.n	800624c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800624c:	697b      	ldr	r3, [r7, #20]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000200 	.word	0x20000200
 800625c:	200001e0 	.word	0x200001e0
 8006260:	200000dc 	.word	0x200000dc
 8006264:	20000198 	.word	0x20000198
 8006268:	200000d8 	.word	0x200000d8
 800626c:	200001ec 	.word	0x200001ec

08006270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <vTaskInternalSetTimeOutState+0x24>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <vTaskInternalSetTimeOutState+0x28>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	200001f0 	.word	0x200001f0
 8006298:	200001dc 	.word	0x200001dc

0800629c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <xTaskCheckForTimeOut+0x24>
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e7fe      	b.n	80062be <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <xTaskCheckForTimeOut+0x3e>
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e7fe      	b.n	80062d8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80062da:	f000 fb4f 	bl	800697c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <xTaskCheckForTimeOut+0xb8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f6:	d102      	bne.n	80062fe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e023      	b.n	8006346 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <xTaskCheckForTimeOut+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d007      	beq.n	800631a <xTaskCheckForTimeOut+0x7e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	429a      	cmp	r2, r3
 8006312:	d302      	bcc.n	800631a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e015      	b.n	8006346 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d20b      	bcs.n	800633c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff9d 	bl	8006270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e004      	b.n	8006346 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006346:	f000 fb47 	bl	80069d8 <vPortExitCritical>

	return xReturn;
 800634a:	69fb      	ldr	r3, [r7, #28]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200001dc 	.word	0x200001dc
 8006358:	200001f0 	.word	0x200001f0

0800635c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006360:	4b03      	ldr	r3, [pc, #12]	; (8006370 <vTaskMissedYield+0x14>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	200001ec 	.word	0x200001ec

08006374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800637c:	f000 f852 	bl	8006424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <prvIdleTask+0x28>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d9f9      	bls.n	800637c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <prvIdleTask+0x2c>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006398:	e7f0      	b.n	800637c <prvIdleTask+0x8>
 800639a:	bf00      	nop
 800639c:	200000dc 	.word	0x200000dc
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	e00c      	b.n	80063ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4a12      	ldr	r2, [pc, #72]	; (8006404 <prvInitialiseTaskLists+0x60>)
 80063bc:	4413      	add	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fe99 	bl	80050f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	d9ef      	bls.n	80063b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063d0:	480d      	ldr	r0, [pc, #52]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063d2:	f7fe fe90 	bl	80050f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063d6:	480d      	ldr	r0, [pc, #52]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063d8:	f7fe fe8d 	bl	80050f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063dc:	480c      	ldr	r0, [pc, #48]	; (8006410 <prvInitialiseTaskLists+0x6c>)
 80063de:	f7fe fe8a 	bl	80050f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063e2:	480c      	ldr	r0, [pc, #48]	; (8006414 <prvInitialiseTaskLists+0x70>)
 80063e4:	f7fe fe87 	bl	80050f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063e8:	480b      	ldr	r0, [pc, #44]	; (8006418 <prvInitialiseTaskLists+0x74>)
 80063ea:	f7fe fe84 	bl	80050f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvInitialiseTaskLists+0x78>)
 80063f0:	4a05      	ldr	r2, [pc, #20]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvInitialiseTaskLists+0x7c>)
 80063f6:	4a05      	ldr	r2, [pc, #20]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200000dc 	.word	0x200000dc
 8006408:	20000168 	.word	0x20000168
 800640c:	2000017c 	.word	0x2000017c
 8006410:	20000198 	.word	0x20000198
 8006414:	200001ac 	.word	0x200001ac
 8006418:	200001c4 	.word	0x200001c4
 800641c:	20000190 	.word	0x20000190
 8006420:	20000194 	.word	0x20000194

08006424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642a:	e019      	b.n	8006460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800642c:	f000 faa6 	bl	800697c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <prvCheckTasksWaitingTermination+0x4c>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fee4 	bl	800520a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3b01      	subs	r3, #1
 8006448:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 800644a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3b01      	subs	r3, #1
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006456:	f000 fabf 	bl	80069d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f80e 	bl	800647c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e1      	bne.n	800642c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200001ac 	.word	0x200001ac
 8006474:	200001d8 	.word	0x200001d8
 8006478:	200001c0 	.word	0x200001c0

0800647c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800648a:	2b00      	cmp	r3, #0
 800648c:	d108      	bne.n	80064a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fc10 	bl	8006cb8 <vPortFree>
				vPortFree( pxTCB );
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc0d 	bl	8006cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800649e:	e017      	b.n	80064d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d103      	bne.n	80064b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fc04 	bl	8006cb8 <vPortFree>
	}
 80064b0:	e00e      	b.n	80064d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d009      	beq.n	80064d0 <prvDeleteTCB+0x54>
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e7fe      	b.n	80064ce <prvDeleteTCB+0x52>
	}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <prvResetNextTaskUnblockTime+0x44>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <prvResetNextTaskUnblockTime+0x14>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <prvResetNextTaskUnblockTime+0x16>
 80064ec:	2300      	movs	r3, #0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <prvResetNextTaskUnblockTime+0x48>)
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064fa:	e008      	b.n	800650e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <prvResetNextTaskUnblockTime+0x44>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4a05      	ldr	r2, [pc, #20]	; (8006520 <prvResetNextTaskUnblockTime+0x48>)
 800650c:	6013      	str	r3, [r2, #0]
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000190 	.word	0x20000190
 8006520:	200001f8 	.word	0x200001f8

08006524 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <xTaskGetSchedulerState+0x34>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006532:	2301      	movs	r3, #1
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	e008      	b.n	800654a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006538:	4b08      	ldr	r3, [pc, #32]	; (800655c <xTaskGetSchedulerState+0x38>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006540:	2302      	movs	r3, #2
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	e001      	b.n	800654a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006546:	2300      	movs	r3, #0
 8006548:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800654a:	687b      	ldr	r3, [r7, #4]
	}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	200001e4 	.word	0x200001e4
 800655c:	20000200 	.word	0x20000200

08006560 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d06c      	beq.n	8006650 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <xTaskPriorityDisinherit+0xfc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d009      	beq.n	8006594 <xTaskPriorityDisinherit+0x34>
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e7fe      	b.n	8006592 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <xTaskPriorityDisinherit+0x50>
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	e7fe      	b.n	80065ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d044      	beq.n	8006650 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d140      	bne.n	8006650 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fe19 	bl	800520a <uxListRemove>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d115      	bne.n	800660a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	491f      	ldr	r1, [pc, #124]	; (8006660 <xTaskPriorityDisinherit+0x100>)
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xTaskPriorityDisinherit+0xaa>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	2201      	movs	r2, #1
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43da      	mvns	r2, r3
 8006600:	4b18      	ldr	r3, [pc, #96]	; (8006664 <xTaskPriorityDisinherit+0x104>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4013      	ands	r3, r2
 8006606:	4a17      	ldr	r2, [pc, #92]	; (8006664 <xTaskPriorityDisinherit+0x104>)
 8006608:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f1c3 0207 	rsb	r2, r3, #7
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	2201      	movs	r2, #1
 8006624:	409a      	lsls	r2, r3
 8006626:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <xTaskPriorityDisinherit+0x104>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4313      	orrs	r3, r2
 800662c:	4a0d      	ldr	r2, [pc, #52]	; (8006664 <xTaskPriorityDisinherit+0x104>)
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4a08      	ldr	r2, [pc, #32]	; (8006660 <xTaskPriorityDisinherit+0x100>)
 800663e:	441a      	add	r2, r3
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3304      	adds	r3, #4
 8006644:	4619      	mov	r1, r3
 8006646:	4610      	mov	r0, r2
 8006648:	f7fe fd82 	bl	8005150 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006650:	697b      	ldr	r3, [r7, #20]
	}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	200000d8 	.word	0x200000d8
 8006660:	200000dc 	.word	0x200000dc
 8006664:	200001e0 	.word	0x200001e0

08006668 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006672:	4b29      	ldr	r3, [pc, #164]	; (8006718 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <prvAddCurrentTaskToDelayedList+0xb4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3304      	adds	r3, #4
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fdc3 	bl	800520a <uxListRemove>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800668a:	4b24      	ldr	r3, [pc, #144]	; (800671c <prvAddCurrentTaskToDelayedList+0xb4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	2201      	movs	r2, #1
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	43da      	mvns	r2, r3
 8006698:	4b21      	ldr	r3, [pc, #132]	; (8006720 <prvAddCurrentTaskToDelayedList+0xb8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4013      	ands	r3, r2
 800669e:	4a20      	ldr	r2, [pc, #128]	; (8006720 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a8:	d10a      	bne.n	80066c0 <prvAddCurrentTaskToDelayedList+0x58>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b0:	4b1a      	ldr	r3, [pc, #104]	; (800671c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	481a      	ldr	r0, [pc, #104]	; (8006724 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066ba:	f7fe fd49 	bl	8005150 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066be:	e026      	b.n	800670e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066c8:	4b14      	ldr	r3, [pc, #80]	; (800671c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d209      	bcs.n	80066ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <prvAddCurrentTaskToDelayedList+0xc0>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3304      	adds	r3, #4
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f7fe fd57 	bl	8005198 <vListInsert>
}
 80066ea:	e010      	b.n	800670e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <prvAddCurrentTaskToDelayedList+0xc4>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe fd4d 	bl	8005198 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	d202      	bcs.n	800670e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <prvAddCurrentTaskToDelayedList+0xc8>)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6013      	str	r3, [r2, #0]
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200001dc 	.word	0x200001dc
 800671c:	200000d8 	.word	0x200000d8
 8006720:	200001e0 	.word	0x200001e0
 8006724:	200001c4 	.word	0x200001c4
 8006728:	20000194 	.word	0x20000194
 800672c:	20000190 	.word	0x20000190
 8006730:	200001f8 	.word	0x200001f8

08006734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3b04      	subs	r3, #4
 8006744:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800674c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b04      	subs	r3, #4
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3b04      	subs	r3, #4
 8006762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006764:	4a0c      	ldr	r2, [pc, #48]	; (8006798 <pxPortInitialiseStack+0x64>)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b14      	subs	r3, #20
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f06f 0202 	mvn.w	r2, #2
 8006782:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b20      	subs	r3, #32
 8006788:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	0800679d 	.word	0x0800679d

0800679c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <prvTaskExitError+0x50>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ae:	d009      	beq.n	80067c4 <prvTaskExitError+0x28>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	e7fe      	b.n	80067c2 <prvTaskExitError+0x26>
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067d6:	bf00      	nop
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0fc      	beq.n	80067d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	2000002c 	.word	0x2000002c

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	200000d8 	.word	0x200000d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006818:	4808      	ldr	r0, [pc, #32]	; (800683c <prvPortStartFirstTask+0x24>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8814 	msr	CONTROL, r0
 800682a:	b662      	cpsie	i
 800682c:	b661      	cpsie	f
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	df00      	svc	0
 8006838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800683a:	bf00      	nop
 800683c:	e000ed08 	.word	0xe000ed08

08006840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006846:	4b44      	ldr	r3, [pc, #272]	; (8006958 <xPortStartScheduler+0x118>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a44      	ldr	r2, [pc, #272]	; (800695c <xPortStartScheduler+0x11c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d109      	bne.n	8006864 <xPortStartScheduler+0x24>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	e7fe      	b.n	8006862 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006864:	4b3c      	ldr	r3, [pc, #240]	; (8006958 <xPortStartScheduler+0x118>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a3d      	ldr	r2, [pc, #244]	; (8006960 <xPortStartScheduler+0x120>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d109      	bne.n	8006882 <xPortStartScheduler+0x42>
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e7fe      	b.n	8006880 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006882:	4b38      	ldr	r3, [pc, #224]	; (8006964 <xPortStartScheduler+0x124>)
 8006884:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	4b30      	ldr	r3, [pc, #192]	; (8006968 <xPortStartScheduler+0x128>)
 80068a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <xPortStartScheduler+0x12c>)
 80068ac:	2207      	movs	r2, #7
 80068ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b0:	e009      	b.n	80068c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80068b2:	4b2e      	ldr	r3, [pc, #184]	; (800696c <xPortStartScheduler+0x12c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4a2c      	ldr	r2, [pc, #176]	; (800696c <xPortStartScheduler+0x12c>)
 80068ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d0ef      	beq.n	80068b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068d2:	4b26      	ldr	r3, [pc, #152]	; (800696c <xPortStartScheduler+0x12c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1c3 0307 	rsb	r3, r3, #7
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d009      	beq.n	80068f2 <xPortStartScheduler+0xb2>
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60bb      	str	r3, [r7, #8]
 80068f0:	e7fe      	b.n	80068f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <xPortStartScheduler+0x12c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	4a1c      	ldr	r2, [pc, #112]	; (800696c <xPortStartScheduler+0x12c>)
 80068fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068fc:	4b1b      	ldr	r3, [pc, #108]	; (800696c <xPortStartScheduler+0x12c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006904:	4a19      	ldr	r2, [pc, #100]	; (800696c <xPortStartScheduler+0x12c>)
 8006906:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006910:	4b17      	ldr	r3, [pc, #92]	; (8006970 <xPortStartScheduler+0x130>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a16      	ldr	r2, [pc, #88]	; (8006970 <xPortStartScheduler+0x130>)
 8006916:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800691a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800691c:	4b14      	ldr	r3, [pc, #80]	; (8006970 <xPortStartScheduler+0x130>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a13      	ldr	r2, [pc, #76]	; (8006970 <xPortStartScheduler+0x130>)
 8006922:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006926:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006928:	f000 f8d6 	bl	8006ad8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <xPortStartScheduler+0x134>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006932:	f000 f8f5 	bl	8006b20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <xPortStartScheduler+0x138>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a0f      	ldr	r2, [pc, #60]	; (8006978 <xPortStartScheduler+0x138>)
 800693c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006940:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006942:	f7ff ff69 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006946:	f7ff fbb3 	bl	80060b0 <vTaskSwitchContext>
	prvTaskExitError();
 800694a:	f7ff ff27 	bl	800679c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed00 	.word	0xe000ed00
 800695c:	410fc271 	.word	0x410fc271
 8006960:	410fc270 	.word	0x410fc270
 8006964:	e000e400 	.word	0xe000e400
 8006968:	20000204 	.word	0x20000204
 800696c:	20000208 	.word	0x20000208
 8006970:	e000ed20 	.word	0xe000ed20
 8006974:	2000002c 	.word	0x2000002c
 8006978:	e000ef34 	.word	0xe000ef34

0800697c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <vPortEnterCritical+0x54>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <vPortEnterCritical+0x54>)
 800699c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <vPortEnterCritical+0x54>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d10e      	bne.n	80069c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <vPortEnterCritical+0x58>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <vPortEnterCritical+0x48>
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	e7fe      	b.n	80069c2 <vPortEnterCritical+0x46>
	}
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	2000002c 	.word	0x2000002c
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <vPortExitCritical+0x4c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <vPortExitCritical+0x22>
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	607b      	str	r3, [r7, #4]
 80069f8:	e7fe      	b.n	80069f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80069fa:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <vPortExitCritical+0x4c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <vPortExitCritical+0x4c>)
 8006a02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <vPortExitCritical+0x4c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <vPortExitCritical+0x3e>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	2000002c 	.word	0x2000002c
	...

08006a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a30:	f3ef 8009 	mrs	r0, PSP
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <pxCurrentTCBConst>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f01e 0f10 	tst.w	lr, #16
 8006a40:	bf08      	it	eq
 8006a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	6010      	str	r0, [r2, #0]
 8006a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a54:	f380 8811 	msr	BASEPRI, r0
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f7ff fb26 	bl	80060b0 <vTaskSwitchContext>
 8006a64:	f04f 0000 	mov.w	r0, #0
 8006a68:	f380 8811 	msr	BASEPRI, r0
 8006a6c:	bc09      	pop	{r0, r3}
 8006a6e:	6819      	ldr	r1, [r3, #0]
 8006a70:	6808      	ldr	r0, [r1, #0]
 8006a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a76:	f01e 0f10 	tst.w	lr, #16
 8006a7a:	bf08      	it	eq
 8006a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a80:	f380 8809 	msr	PSP, r0
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	f3af 8000 	nop.w

08006a90 <pxCurrentTCBConst>:
 8006a90:	200000d8 	.word	0x200000d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab0:	f7ff fa42 	bl	8005f38 <xTaskIncrementTick>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <SysTick_Handler+0x3c>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <vPortSetupTimerInterrupt+0x34>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <vPortSetupTimerInterrupt+0x38>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <vPortSetupTimerInterrupt+0x3c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <vPortSetupTimerInterrupt+0x40>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <vPortSetupTimerInterrupt+0x44>)
 8006af6:	3b01      	subs	r3, #1
 8006af8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006afa:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <vPortSetupTimerInterrupt+0x34>)
 8006afc:	2207      	movs	r2, #7
 8006afe:	601a      	str	r2, [r3, #0]
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	e000e010 	.word	0xe000e010
 8006b10:	e000e018 	.word	0xe000e018
 8006b14:	20000030 	.word	0x20000030
 8006b18:	10624dd3 	.word	0x10624dd3
 8006b1c:	e000e014 	.word	0xe000e014

08006b20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b30 <vPortEnableVFP+0x10>
 8006b24:	6801      	ldr	r1, [r0, #0]
 8006b26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b2a:	6001      	str	r1, [r0, #0]
 8006b2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b2e:	bf00      	nop
 8006b30:	e000ed88 	.word	0xe000ed88

08006b34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b40:	f7ff f950 	bl	8005de4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b44:	4b57      	ldr	r3, [pc, #348]	; (8006ca4 <pvPortMalloc+0x170>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b4c:	f000 f90c 	bl	8006d68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b50:	4b55      	ldr	r3, [pc, #340]	; (8006ca8 <pvPortMalloc+0x174>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 808c 	bne.w	8006c76 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01c      	beq.n	8006b9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006b64:	2208      	movs	r2, #8
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d013      	beq.n	8006b9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f023 0307 	bic.w	r3, r3, #7
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <pvPortMalloc+0x6a>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e7fe      	b.n	8006b9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d068      	beq.n	8006c76 <pvPortMalloc+0x142>
 8006ba4:	4b41      	ldr	r3, [pc, #260]	; (8006cac <pvPortMalloc+0x178>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d863      	bhi.n	8006c76 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bae:	4b40      	ldr	r3, [pc, #256]	; (8006cb0 <pvPortMalloc+0x17c>)
 8006bb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bb2:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <pvPortMalloc+0x17c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb8:	e004      	b.n	8006bc4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d903      	bls.n	8006bd6 <pvPortMalloc+0xa2>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f1      	bne.n	8006bba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bd6:	4b33      	ldr	r3, [pc, #204]	; (8006ca4 <pvPortMalloc+0x170>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d04a      	beq.n	8006c76 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2208      	movs	r2, #8
 8006be6:	4413      	add	r3, r2
 8006be8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d91e      	bls.n	8006c40 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <pvPortMalloc+0xf4>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	e7fe      	b.n	8006c26 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c3a:	69b8      	ldr	r0, [r7, #24]
 8006c3c:	f000 f8f6 	bl	8006e2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <pvPortMalloc+0x178>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	4a18      	ldr	r2, [pc, #96]	; (8006cac <pvPortMalloc+0x178>)
 8006c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <pvPortMalloc+0x178>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <pvPortMalloc+0x180>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d203      	bcs.n	8006c62 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <pvPortMalloc+0x178>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <pvPortMalloc+0x180>)
 8006c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <pvPortMalloc+0x174>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c76:	f7ff f8c3 	bl	8005e00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <pvPortMalloc+0x164>
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e7fe      	b.n	8006c96 <pvPortMalloc+0x162>
	return pvReturn;
 8006c98:	69fb      	ldr	r3, [r7, #28]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3728      	adds	r7, #40	; 0x28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20003e14 	.word	0x20003e14
 8006ca8:	20003e20 	.word	0x20003e20
 8006cac:	20003e18 	.word	0x20003e18
 8006cb0:	20003e0c 	.word	0x20003e0c
 8006cb4:	20003e1c 	.word	0x20003e1c

08006cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d046      	beq.n	8006d58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cca:	2308      	movs	r3, #8
 8006ccc:	425b      	negs	r3, r3
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <vPortFree+0xa8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <vPortFree+0x42>
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e7fe      	b.n	8006cf8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <vPortFree+0x5e>
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	e7fe      	b.n	8006d14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <vPortFree+0xa8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d019      	beq.n	8006d58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d115      	bne.n	8006d58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <vPortFree+0xa8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	401a      	ands	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d3c:	f7ff f852 	bl	8005de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <vPortFree+0xac>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4413      	add	r3, r2
 8006d4a:	4a06      	ldr	r2, [pc, #24]	; (8006d64 <vPortFree+0xac>)
 8006d4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d4e:	6938      	ldr	r0, [r7, #16]
 8006d50:	f000 f86c 	bl	8006e2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d54:	f7ff f854 	bl	8005e00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d58:	bf00      	nop
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20003e20 	.word	0x20003e20
 8006d64:	20003e18 	.word	0x20003e18

08006d68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <prvHeapInit+0xac>)
 8006d76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3307      	adds	r3, #7
 8006d86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0307 	bic.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <prvHeapInit+0xac>)
 8006d98:	4413      	add	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006da0:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <prvHeapInit+0xb0>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006da6:	4b1c      	ldr	r3, [pc, #112]	; (8006e18 <prvHeapInit+0xb0>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4413      	add	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006db4:	2208      	movs	r2, #8
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0307 	bic.w	r3, r3, #7
 8006dc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <prvHeapInit+0xb4>)
 8006dc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <prvHeapInit+0xb4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dd2:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <prvHeapInit+0xb4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	1ad2      	subs	r2, r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <prvHeapInit+0xb4>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <prvHeapInit+0xb8>)
 8006df6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <prvHeapInit+0xbc>)
 8006dfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e00:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <prvHeapInit+0xc0>)
 8006e02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e06:	601a      	str	r2, [r3, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	2000020c 	.word	0x2000020c
 8006e18:	20003e0c 	.word	0x20003e0c
 8006e1c:	20003e14 	.word	0x20003e14
 8006e20:	20003e1c 	.word	0x20003e1c
 8006e24:	20003e18 	.word	0x20003e18
 8006e28:	20003e20 	.word	0x20003e20

08006e2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e34:	4b28      	ldr	r3, [pc, #160]	; (8006ed8 <prvInsertBlockIntoFreeList+0xac>)
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e002      	b.n	8006e40 <prvInsertBlockIntoFreeList+0x14>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d8f7      	bhi.n	8006e3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	4413      	add	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d108      	bne.n	8006e6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d118      	bne.n	8006eb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	4b15      	ldr	r3, [pc, #84]	; (8006edc <prvInsertBlockIntoFreeList+0xb0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d00d      	beq.n	8006eaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	441a      	add	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e008      	b.n	8006ebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <prvInsertBlockIntoFreeList+0xb0>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e003      	b.n	8006ebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d002      	beq.n	8006eca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	20003e0c 	.word	0x20003e0c
 8006edc:	20003e14 	.word	0x20003e14

08006ee0 <_ZN12SocketClientC1Ev>:
#include "SocketClient.h"

SPI_HandleTypeDef *W5500Chip::hspi;

SocketClient::SocketClient() {}
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <_ZN12SocketClientC1Ev+0x30>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <_ZN12SocketClientC1Ev+0x34>)
 8006ef2:	330d      	adds	r3, #13
 8006ef4:	6810      	ldr	r0, [r2, #0]
 8006ef6:	6018      	str	r0, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f241 328c 	movw	r2, #5004	; 0x138c
 8006efe:	825a      	strh	r2, [r3, #18]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	08009c80 	.word	0x08009c80
 8006f14:	08009aa4 	.word	0x08009aa4

08006f18 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>:

void SocketClient::init(SPI_HandleTypeDef *main_hspi1, UartHelper *main_uart_helper) {
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
	uart_helper = main_uart_helper;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	609a      	str	r2, [r3, #8]
	W5500Chip::hspi = main_hspi1;
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x68>)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6013      	str	r3, [r2, #0]
	chip = new CHIP();
 8006f30:	2001      	movs	r0, #1
 8006f32:	f002 f8dc 	bl	80090ee <_Znwj>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461c      	mov	r4, r3
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f9ca 	bl	80072d4 <_ZN9W5500ChipC1Ev>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	615c      	str	r4, [r3, #20]

	 HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8006f44:	2200      	movs	r2, #0
 8006f46:	2140      	movs	r1, #64	; 0x40
 8006f48:	480e      	ldr	r0, [pc, #56]	; (8006f84 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x6c>)
 8006f4a:	f7f9 fde9 	bl	8000b20 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006f4e:	2064      	movs	r0, #100	; 0x64
 8006f50:	f7f9 fb60 	bl	8000614 <HAL_Delay>
	 HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8006f54:	2201      	movs	r2, #1
 8006f56:	2140      	movs	r1, #64	; 0x40
 8006f58:	480a      	ldr	r0, [pc, #40]	; (8006f84 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x6c>)
 8006f5a:	f7f9 fde1 	bl	8000b20 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8006f5e:	2064      	movs	r0, #100	; 0x64
 8006f60:	f7f9 fb58 	bl	8000614 <HAL_Delay>

	SocketClient::socket_init();
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f8ef 	bl	8007148 <_ZN12SocketClient11socket_initEv>
	(*uart_helper).printf("socket inited\r\n");
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	4906      	ldr	r1, [pc, #24]	; (8006f88 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper+0x70>)
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f95d 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd90      	pop	{r4, r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20003e24 	.word	0x20003e24
 8006f84:	40020400 	.word	0x40020400
 8006f88:	08009aa8 	.word	0x08009aa8

08006f8c <_ZN12SocketClientD1Ev>:

SocketClient::~SocketClient() {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <_ZN12SocketClientD1Ev+0x2c>)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	601a      	str	r2, [r3, #0]
	(*uart_helper).printf("\r\ndestructor\r\n");
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	4907      	ldr	r1, [pc, #28]	; (8006fbc <_ZN12SocketClientD1Ev+0x30>)
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f945 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
	SocketClient::socket_close();
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8b8 	bl	800711c <_ZN12SocketClient12socket_closeEv>
}
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08009c80 	.word	0x08009c80
 8006fbc:	08009ab8 	.word	0x08009ab8

08006fc0 <_ZN12SocketClientD0Ev>:
SocketClient::~SocketClient() {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
}
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ffdf 	bl	8006f8c <_ZN12SocketClientD1Ev>
 8006fce:	2118      	movs	r1, #24
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f002 f88a 	bl	80090ea <_ZdlPvj>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <_ZN12SocketClient14socket_connectEv>:
void SocketClient::socket_connect(){
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	//uint8_t code = connect(http_socket, addr, port);
	uint8_t code = listen(http_socket);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	791b      	ldrb	r3, [r3, #4]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd fa4f 	bl	8004490 <listen>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73fb      	strb	r3, [r7, #15]
	if(code < 0) {
    	(*uart_helper).printf("connect() failed, code = %d\r\n", code);
        close(http_socket);
        return;
    }
    (*uart_helper).printf("socket connected\r\n");
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4903      	ldr	r1, [pc, #12]	; (8007008 <_ZN12SocketClient14socket_connectEv+0x28>)
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f917 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
}
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	08009ac8 	.word	0x08009ac8

0800700c <_ZN12SocketClient11socket_sendEPht>:

void SocketClient::socket_send(uint8_t *pData, uint16_t len){
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]

    while(len > 0) {
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d02a      	beq.n	8007076 <_ZN12SocketClient11socket_sendEPht+0x6a>
        //int32_t nbytes = send(http_socket, pData, len);
    	int32_t nbytes = sendto(http_socket, pData, len, addr, port);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	7918      	ldrb	r0, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f103 010d 	add.w	r1, r3, #13
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8a5b      	ldrh	r3, [r3, #18]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	460b      	mov	r3, r1
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	f7fd fa85 	bl	8004544 <sendto>
 800703a:	6178      	str	r0, [r7, #20]

    	if(nbytes <= 0) {
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc0c      	bgt.n	800705c <_ZN12SocketClient11socket_sendEPht+0x50>
        	(*uart_helper).printf("send() failed, %d returned\r\n", nbytes);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	490c      	ldr	r1, [pc, #48]	; (800707c <_ZN12SocketClient11socket_sendEPht+0x70>)
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f8f0 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
            close(http_socket);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	791b      	ldrb	r3, [r3, #4]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd f9ad 	bl	80043b4 <close>
            return;
 800705a:	e00c      	b.n	8007076 <_ZN12SocketClient11socket_sendEPht+0x6a>
        	HAL_Delay(50);
        } else{
			(*uart_helper).printf("%d bytes sent!\r\n", nbytes);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4907      	ldr	r1, [pc, #28]	; (8007080 <_ZN12SocketClient11socket_sendEPht+0x74>)
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f8e3 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
			len -= nbytes;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	b29b      	uxth	r3, r3
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	80fb      	strh	r3, [r7, #6]
    while(len > 0) {
 8007074:	e7d1      	b.n	800701a <_ZN12SocketClient11socket_sendEPht+0xe>
        }
    }
}
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	08009adc 	.word	0x08009adc
 8007080:	08009afc 	.word	0x08009afc

08007084 <_ZN12SocketClient14socket_receiveEPhtPm>:
			len -= nbytes;
        }
    }
}

void SocketClient::socket_receive(uint8_t *pData, uint16_t Size, uint32_t* rdmaInd){
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
		int32_t nbytes = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
		uint16_t recvsize = getSn_RX_RSR(http_socket);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	791b      	ldrb	r3, [r3, #4]
 800709c:	4618      	mov	r0, r3
 800709e:	f7fc ff28 	bl	8003ef2 <getSn_RX_RSR>
 80070a2:	4603      	mov	r3, r0
 80070a4:	827b      	strh	r3, [r7, #18]
		if (recvsize > 0){
 80070a6:	8a7b      	ldrh	r3, [r7, #18]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00d      	beq.n	80070c8 <_ZN12SocketClient14socket_receiveEPhtPm+0x44>
			//nbytes = recv(http_socket, pData, Size);
			nbytes = recvfrom(http_socket, pData, Size, addr, &port);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	7918      	ldrb	r0, [r3, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f103 010d 	add.w	r1, r3, #13
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3312      	adds	r3, #18
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	460b      	mov	r3, r1
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	f7fd fb75 	bl	80047b0 <recvfrom>
 80070c6:	6178      	str	r0, [r7, #20]
		}
		*rdmaInd = nbytes;
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	601a      	str	r2, [r3, #0]


		if(nbytes < 0) {
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da07      	bge.n	80070e4 <_ZN12SocketClient14socket_receiveEPhtPm+0x60>
			(*uart_helper).printf("\r\nrecv() failed, %d returned\r\n", nbytes);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	490d      	ldr	r1, [pc, #52]	; (8007110 <_ZN12SocketClient14socket_receiveEPhtPm+0x8c>)
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 f8a7 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
			return;
 80070e2:	e011      	b.n	8007108 <_ZN12SocketClient14socket_receiveEPhtPm+0x84>
		}
		if (nbytes > 0){
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd07      	ble.n	80070fa <_ZN12SocketClient14socket_receiveEPhtPm+0x76>
			(*uart_helper).printf("\r\nrecv() %d returned\r\n", nbytes);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4908      	ldr	r1, [pc, #32]	; (8007114 <_ZN12SocketClient14socket_receiveEPhtPm+0x90>)
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f89c 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
			return;
 80070f8:	e006      	b.n	8007108 <_ZN12SocketClient14socket_receiveEPhtPm+0x84>
		} else {
			(*uart_helper).printf("\r\nrecv() socket busy\r\n");
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4906      	ldr	r1, [pc, #24]	; (8007118 <_ZN12SocketClient14socket_receiveEPhtPm+0x94>)
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f895 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
			return;
 8007106:	bf00      	nop
		}
}
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	08009b10 	.word	0x08009b10
 8007114:	08009b30 	.word	0x08009b30
 8007118:	08009b48 	.word	0x08009b48

0800711c <_ZN12SocketClient12socket_closeEv>:


void SocketClient::socket_close(){
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	  close(http_socket);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	791b      	ldrb	r3, [r3, #4]
 8007128:	4618      	mov	r0, r3
 800712a:	f7fd f943 	bl	80043b4 <close>
	  (*uart_helper).printf("Closing socket.\r\n");
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	4904      	ldr	r1, [pc, #16]	; (8007144 <_ZN12SocketClient12socket_closeEv+0x28>)
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f87b 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08009b60 	.word	0x08009b60

08007148 <_ZN12SocketClient11socket_initEv>:

void SocketClient::socket_init(){
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	chip->initChip();
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 f8c9 	bl	80072ec <_ZN9W5500Chip8initChipEv>

    SocketClient::http_socket = HTTP_SOCKET;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	711a      	strb	r2, [r3, #4]
    //uint8_t code = socket(SocketClient::http_socket, Sn_MR_TCP, 10888, SF_IO_NONBLOCK );
    uint8_t code = socket(SocketClient::http_socket, Sn_MR_UDP, 10888, SF_IO_NONBLOCK );
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7918      	ldrb	r0, [r3, #4]
 8007164:	2301      	movs	r3, #1
 8007166:	f642 2288 	movw	r2, #10888	; 0x2a88
 800716a:	2102      	movs	r1, #2
 800716c:	f7fd f80c 	bl	8004188 <socket>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]

    if(code != SocketClient::http_socket) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	429a      	cmp	r2, r3
 800717c:	d007      	beq.n	800718e <_ZN12SocketClient11socket_initEv+0x46>
    	(*uart_helper).printf("socket() failed, code = %d\r\n", code);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	7bfa      	ldrb	r2, [r7, #15]
 8007184:	4906      	ldr	r1, [pc, #24]	; (80071a0 <_ZN12SocketClient11socket_initEv+0x58>)
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f852 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
        return;
 800718c:	e005      	b.n	800719a <_ZN12SocketClient11socket_initEv+0x52>
    }

    (*uart_helper).printf("Socket created, connecting...\r\n");
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4904      	ldr	r1, [pc, #16]	; (80071a4 <_ZN12SocketClient11socket_initEv+0x5c>)
 8007194:	4618      	mov	r0, r3
 8007196:	f000 f84b 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
}
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	08009b74 	.word	0x08009b74
 80071a4:	08009b94 	.word	0x08009b94

080071a8 <_ZN10UartHelperC1Ev>:
 */

#include <stdlib.h>
#include "UartHelper.h"

UartHelper::UartHelper() {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	4a07      	ldr	r2, [pc, #28]	; (80071d0 <_ZN10UartHelperC1Ev+0x28>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	char buff[20];
	uart_queue = xQueueCreate( 8, sizeof( buff ) );
 80071b6:	2200      	movs	r2, #0
 80071b8:	2114      	movs	r1, #20
 80071ba:	2008      	movs	r0, #8
 80071bc:	f7fe f8b8 	bl	8005330 <xQueueGenericCreate>
 80071c0:	4602      	mov	r2, r0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	605a      	str	r2, [r3, #4]
}
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	08009c90 	.word	0x08009c90

080071d4 <_ZN10UartHelperD1Ev>:

UartHelper::~UartHelper() {
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <_ZN10UartHelperD1Ev+0x1c>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	08009c90 	.word	0x08009c90

080071f4 <_ZN10UartHelperD0Ev>:
UartHelper::~UartHelper() {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
}
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff ffe9 	bl	80071d4 <_ZN10UartHelperD1Ev>
 8007202:	210c      	movs	r1, #12
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 ff70 	bl	80090ea <_ZdlPvj>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>:

void UartHelper::init(UART_HandleTypeDef *main_huart){
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	huart = main_huart;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	609a      	str	r2, [r3, #8]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <_ZN10UartHelper6printfEPKcz>:

void UartHelper::printf(const char* fmt, ...) {
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b580      	push	{r7, lr}
 8007234:	b089      	sub	sp, #36	; 0x24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
	char buff[20];
    //int len = strlen(fmt);
    //void* buff = calloc(len+1, sizeof(char));
    va_list args;
    va_start(args, fmt);
 800723a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800723e:	60bb      	str	r3, [r7, #8]
    vsnprintf((char*)buff, sizeof(buff), fmt, args);
 8007240:	f107 000c 	add.w	r0, r7, #12
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007248:	2114      	movs	r1, #20
 800724a:	f002 f903 	bl	8009454 <vsniprintf>
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6858      	ldr	r0, [r3, #4]
 8007252:	f107 010c 	add.w	r1, r7, #12
 8007256:	2300      	movs	r3, #0
 8007258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800725c:	f7fe f8c4 	bl	80053e8 <xQueueGenericSend>
    va_end(args);
}
 8007260:	bf00      	nop
 8007262:	3724      	adds	r7, #36	; 0x24
 8007264:	46bd      	mov	sp, r7
 8007266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800726a:	b003      	add	sp, #12
 800726c:	4770      	bx	lr

0800726e <_ZN10UartHelper6printfEPKh>:
void UartHelper::printf(const uint8_t* buff) {
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
//	uint8_t buff[20];
//    va_list args;
//    va_start(args, fmt);
//    vsnprintf(buff, sizeof(buff), fmt, args);
    xQueueSend( uart_queue, ( void * ) &buff, portMAX_DELAY  );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6858      	ldr	r0, [r3, #4]
 800727c:	4639      	mov	r1, r7
 800727e:	2300      	movs	r3, #0
 8007280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007284:	f7fe f8b0 	bl	80053e8 <xQueueGenericSend>
//    va_end(args);
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZN10UartHelper8UARTTaskEv>:

void UartHelper::UARTTask()
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  char buff[20];
	  xQueueReceive( uart_queue, &( buff ), portMAX_DELAY );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe f999 	bl	80055dc <xQueueReceive>
	  int len = strlen(buff);
 80072aa:	f107 0308 	add.w	r3, r7, #8
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7f8 ff96 	bl	80001e0 <strlen>
 80072b4:	4603      	mov	r3, r0
 80072b6:	61fb      	str	r3, [r7, #28]
	  HAL_UART_Transmit(huart, (uint8_t*)buff, len, HAL_MAX_DELAY);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6898      	ldr	r0, [r3, #8]
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f107 0108 	add.w	r1, r7, #8
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072c8:	f7fb fd2e 	bl	8002d28 <HAL_UART_Transmit>
	  osDelay(50);
 80072cc:	2032      	movs	r0, #50	; 0x32
 80072ce:	f7fd fefe 	bl	80050ce <osDelay>
  }
 80072d2:	e7e1      	b.n	8007298 <_ZN10UartHelper8UARTTaskEv+0x8>

080072d4 <_ZN9W5500ChipC1Ev>:
#include "W5500_chip.h"

W5500Chip::W5500Chip() {}
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <_ZN9W5500Chip8initChipEv>:

void W5500Chip::initChip(void) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80072f4:	4927      	ldr	r1, [pc, #156]	; (8007394 <_ZN9W5500Chip8initChipEv+0xa8>)
 80072f6:	4828      	ldr	r0, [pc, #160]	; (8007398 <_ZN9W5500Chip8initChipEv+0xac>)
 80072f8:	f7fd fcaa 	bl	8004c50 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80072fc:	4927      	ldr	r1, [pc, #156]	; (800739c <_ZN9W5500Chip8initChipEv+0xb0>)
 80072fe:	4828      	ldr	r0, [pc, #160]	; (80073a0 <_ZN9W5500Chip8initChipEv+0xb4>)
 8007300:	f7fd fcca 	bl	8004c98 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8007304:	4927      	ldr	r1, [pc, #156]	; (80073a4 <_ZN9W5500Chip8initChipEv+0xb8>)
 8007306:	4828      	ldr	r0, [pc, #160]	; (80073a8 <_ZN9W5500Chip8initChipEv+0xbc>)
 8007308:	f7fd fcf2 	bl	8004cf0 <reg_wizchip_spiburst_cbfunc>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2};
 800730c:	4b27      	ldr	r3, [pc, #156]	; (80073ac <_ZN9W5500Chip8initChipEv+0xc0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8007312:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7fd fd5f 	bl	8004de0 <wizchip_init>
    wiz_NetInfo net_info = {
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	605a      	str	r2, [r3, #4]
 800732c:	609a      	str	r2, [r3, #8]
 800732e:	60da      	str	r2, [r3, #12]
 8007330:	611a      	str	r2, [r3, #16]
 8007332:	f8c3 2013 	str.w	r2, [r3, #19]
 8007336:	2308      	movs	r3, #8
 8007338:	737b      	strb	r3, [r7, #13]
 800733a:	23dc      	movs	r3, #220	; 0xdc
 800733c:	73bb      	strb	r3, [r7, #14]
 800733e:	23ab      	movs	r3, #171	; 0xab
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	231d      	movs	r3, #29
 8007344:	743b      	strb	r3, [r7, #16]
 8007346:	23e8      	movs	r3, #232	; 0xe8
 8007348:	747b      	strb	r3, [r7, #17]
 800734a:	23c0      	movs	r3, #192	; 0xc0
 800734c:	74bb      	strb	r3, [r7, #18]
 800734e:	23a8      	movs	r3, #168	; 0xa8
 8007350:	74fb      	strb	r3, [r7, #19]
 8007352:	2337      	movs	r3, #55	; 0x37
 8007354:	753b      	strb	r3, [r7, #20]
 8007356:	2372      	movs	r3, #114	; 0x72
 8007358:	757b      	strb	r3, [r7, #21]
 800735a:	23ff      	movs	r3, #255	; 0xff
 800735c:	75bb      	strb	r3, [r7, #22]
 800735e:	23ff      	movs	r3, #255	; 0xff
 8007360:	75fb      	strb	r3, [r7, #23]
 8007362:	23ff      	movs	r3, #255	; 0xff
 8007364:	763b      	strb	r3, [r7, #24]
 8007366:	23c0      	movs	r3, #192	; 0xc0
 8007368:	76bb      	strb	r3, [r7, #26]
 800736a:	23a8      	movs	r3, #168	; 0xa8
 800736c:	76fb      	strb	r3, [r7, #27]
 800736e:	2337      	movs	r3, #55	; 0x37
 8007370:	773b      	strb	r3, [r7, #28]
 8007372:	2301      	movs	r3, #1
 8007374:	777b      	strb	r3, [r7, #29]
    	.mac = {0x00, 0x08, 0xdc, 0xab, 0x1d, 0xe8},
        .ip = {192, 168, 55, 114},
        .sn = {255, 255, 255, 0},
        .gw = {192, 168,55, 1}};
    wizchip_setnetinfo(&net_info);
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fdbc 	bl	8004ef8 <wizchip_setnetinfo>
    wizchip_getnetinfo(&net_info);
 8007380:	f107 030c 	add.w	r3, r7, #12
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd fdf7 	bl	8004f78 <wizchip_getnetinfo>
}
 800738a:	bf00      	nop
 800738c:	3728      	adds	r7, #40	; 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	080073c9 	.word	0x080073c9
 8007398:	080073b1 	.word	0x080073b1
 800739c:	08007483 	.word	0x08007483
 80073a0:	08007469 	.word	0x08007469
 80073a4:	08007425 	.word	0x08007425
 80073a8:	080073e1 	.word	0x080073e1
 80073ac:	08009bb4 	.word	0x08009bb4

080073b0 <_ZN9W5500Chip12W5500_SelectEv>:

void W5500Chip::W5500_Select(void) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 80073b4:	2200      	movs	r2, #0
 80073b6:	2104      	movs	r1, #4
 80073b8:	4802      	ldr	r0, [pc, #8]	; (80073c4 <_ZN9W5500Chip12W5500_SelectEv+0x14>)
 80073ba:	f7f9 fbb1 	bl	8000b20 <HAL_GPIO_WritePin>
}
 80073be:	bf00      	nop
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40020400 	.word	0x40020400

080073c8 <_ZN9W5500Chip14W5500_UnselectEv>:

void W5500Chip::W5500_Unselect(void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80073cc:	2201      	movs	r2, #1
 80073ce:	2104      	movs	r1, #4
 80073d0:	4802      	ldr	r0, [pc, #8]	; (80073dc <_ZN9W5500Chip14W5500_UnselectEv+0x14>)
 80073d2:	f7f9 fba5 	bl	8000b20 <HAL_GPIO_WritePin>
}
 80073d6:	bf00      	nop
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40020400 	.word	0x40020400

080073e0 <_ZN9W5500Chip14W5500_ReadBuffEPht>:

void W5500Chip::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	807b      	strh	r3, [r7, #2]
	uint32_t begin = HAL_GetTick();
 80073ec:	f7f9 f906 	bl	80005fc <HAL_GetTick>
 80073f0:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Receive(hspi, buff, len, 100);
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <_ZN9W5500Chip14W5500_ReadBuffEPht+0x40>)
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	887a      	ldrh	r2, [r7, #2]
 80073f8:	2364      	movs	r3, #100	; 0x64
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	f7fa f9c8 	bl	8001790 <HAL_SPI_Receive>
	uint32_t end = HAL_GetTick();
 8007400:	f7f9 f8fc 	bl	80005fc <HAL_GetTick>
 8007404:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b6e      	cmp	r3, #110	; 0x6e
 800740e:	d902      	bls.n	8007416 <_ZN9W5500Chip14W5500_ReadBuffEPht+0x36>
		HAL_Delay(50);
 8007410:	2032      	movs	r0, #50	; 0x32
 8007412:	f7f9 f8ff 	bl	8000614 <HAL_Delay>
	}
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20003e24 	.word	0x20003e24

08007424 <_ZN9W5500Chip15W5500_WriteBuffEPht>:

void W5500Chip::W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	807b      	strh	r3, [r7, #2]
	uint32_t begin = HAL_GetTick();
 8007430:	f7f9 f8e4 	bl	80005fc <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Transmit(hspi, buff, len, 100);
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <_ZN9W5500Chip15W5500_WriteBuffEPht+0x40>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	887a      	ldrh	r2, [r7, #2]
 800743c:	2364      	movs	r3, #100	; 0x64
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	f7fa f872 	bl	8001528 <HAL_SPI_Transmit>
	uint32_t end = HAL_GetTick();
 8007444:	f7f9 f8da 	bl	80005fc <HAL_GetTick>
 8007448:	60b8      	str	r0, [r7, #8]
	if(end - begin > 110) {
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b6e      	cmp	r3, #110	; 0x6e
 8007452:	d902      	bls.n	800745a <_ZN9W5500Chip15W5500_WriteBuffEPht+0x36>
		HAL_Delay(50);
 8007454:	2032      	movs	r0, #50	; 0x32
 8007456:	f7f9 f8dd 	bl	8000614 <HAL_Delay>
	}
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20003e24 	.word	0x20003e24

08007468 <_ZN9W5500Chip14W5500_ReadByteEv>:

uint8_t W5500Chip::W5500_ReadByte(void) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff ffb4 	bl	80073e0 <_ZN9W5500Chip14W5500_ReadBuffEPht>
    return byte;
 8007478:	79fb      	ldrb	r3, [r7, #7]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <_ZN9W5500Chip15W5500_WriteByteEh>:

void W5500Chip::W5500_WriteByte(uint8_t byte) {
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	4603      	mov	r3, r0
 800748a:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 800748c:	1dfb      	adds	r3, r7, #7
 800748e:	2101      	movs	r1, #1
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff ffc7 	bl	8007424 <_ZN9W5500Chip15W5500_WriteBuffEPht>
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a07      	ldr	r2, [pc, #28]	; (80074cc <vApplicationGetIdleTaskMemory+0x2c>)
 80074b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4a06      	ldr	r2, [pc, #24]	; (80074d0 <vApplicationGetIdleTaskMemory+0x30>)
 80074b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	22c8      	movs	r2, #200	; 0xc8
 80074bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20003e28 	.word	0x20003e28
 80074d0:	20003e7c 	.word	0x20003e7c

080074d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074d4:	b5b0      	push	{r4, r5, r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074da:	f7f9 f859 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074de:	f000 f839 	bl	8007554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074e2:	f000 fa45 	bl	8007970 <MX_GPIO_Init>
  MX_SPI1_Init();
 80074e6:	f000 f89f 	bl	8007628 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80074ea:	f000 fa17 	bl	800791c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80074ee:	f000 f929 	bl	8007744 <MX_TIM2_Init>
  MX_TIM3_Init();
 80074f2:	f000 f97b 	bl	80077ec <MX_TIM3_Init>
  MX_TIM1_Init();
 80074f6:	f000 f8cd 	bl	8007694 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80074fa:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <main+0x64>)
 80074fc:	1d3c      	adds	r4, r7, #4
 80074fe:	461d      	mov	r5, r3
 8007500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f7fd fd90 	bl	8005036 <osThreadCreate>
 8007516:	4602      	mov	r2, r0
 8007518:	4b08      	ldr	r3, [pc, #32]	; (800753c <main+0x68>)
 800751a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  setup(&huart2, &hspi1, &htim3, &htim3, &htim2, &htim1);
 800751c:	4b08      	ldr	r3, [pc, #32]	; (8007540 <main+0x6c>)
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <main+0x70>)
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	4b08      	ldr	r3, [pc, #32]	; (8007548 <main+0x74>)
 8007526:	4a08      	ldr	r2, [pc, #32]	; (8007548 <main+0x74>)
 8007528:	4908      	ldr	r1, [pc, #32]	; (800754c <main+0x78>)
 800752a:	4809      	ldr	r0, [pc, #36]	; (8007550 <main+0x7c>)
 800752c:	f000 fc20 	bl	8007d70 <setup>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007530:	f7fd fd7a 	bl	8005028 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007534:	e7fe      	b.n	8007534 <main+0x60>
 8007536:	bf00      	nop
 8007538:	08009bc4 	.word	0x08009bc4
 800753c:	20004230 	.word	0x20004230
 8007540:	20004274 	.word	0x20004274
 8007544:	2000430c 	.word	0x2000430c
 8007548:	20004234 	.word	0x20004234
 800754c:	200042b4 	.word	0x200042b4
 8007550:	2000434c 	.word	0x2000434c

08007554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b094      	sub	sp, #80	; 0x50
 8007558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800755a:	f107 0320 	add.w	r3, r7, #32
 800755e:	2230      	movs	r2, #48	; 0x30
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fe46 	bl	80091f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007578:	2300      	movs	r3, #0
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	4b28      	ldr	r3, [pc, #160]	; (8007620 <SystemClock_Config+0xcc>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	4a27      	ldr	r2, [pc, #156]	; (8007620 <SystemClock_Config+0xcc>)
 8007582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007586:	6413      	str	r3, [r2, #64]	; 0x40
 8007588:	4b25      	ldr	r3, [pc, #148]	; (8007620 <SystemClock_Config+0xcc>)
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007594:	2300      	movs	r3, #0
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	4b22      	ldr	r3, [pc, #136]	; (8007624 <SystemClock_Config+0xd0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80075a0:	4a20      	ldr	r2, [pc, #128]	; (8007624 <SystemClock_Config+0xd0>)
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <SystemClock_Config+0xd0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80075b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075be:	2302      	movs	r3, #2
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80075c8:	2304      	movs	r3, #4
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80075cc:	2348      	movs	r3, #72	; 0x48
 80075ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80075d0:	2302      	movs	r3, #2
 80075d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80075d4:	2307      	movs	r3, #7
 80075d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075d8:	f107 0320 	add.w	r3, r7, #32
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f9 fadd 	bl	8000b9c <HAL_RCC_OscConfig>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80075e8:	f000 fa8e 	bl	8007b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075ec:	230f      	movs	r3, #15
 80075ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075f0:	2302      	movs	r3, #2
 80075f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007602:	f107 030c 	add.w	r3, r7, #12
 8007606:	2102      	movs	r1, #2
 8007608:	4618      	mov	r0, r3
 800760a:	f7f9 fd09 	bl	8001020 <HAL_RCC_ClockConfig>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007614:	f000 fa78 	bl	8007b08 <Error_Handler>
  }
}
 8007618:	bf00      	nop
 800761a:	3750      	adds	r7, #80	; 0x50
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000

08007628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800762c:	4b17      	ldr	r3, [pc, #92]	; (800768c <MX_SPI1_Init+0x64>)
 800762e:	4a18      	ldr	r2, [pc, #96]	; (8007690 <MX_SPI1_Init+0x68>)
 8007630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007632:	4b16      	ldr	r3, [pc, #88]	; (800768c <MX_SPI1_Init+0x64>)
 8007634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800763a:	4b14      	ldr	r3, [pc, #80]	; (800768c <MX_SPI1_Init+0x64>)
 800763c:	2200      	movs	r2, #0
 800763e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <MX_SPI1_Init+0x64>)
 8007642:	2200      	movs	r2, #0
 8007644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007646:	4b11      	ldr	r3, [pc, #68]	; (800768c <MX_SPI1_Init+0x64>)
 8007648:	2200      	movs	r2, #0
 800764a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <MX_SPI1_Init+0x64>)
 800764e:	2200      	movs	r2, #0
 8007650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007652:	4b0e      	ldr	r3, [pc, #56]	; (800768c <MX_SPI1_Init+0x64>)
 8007654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <MX_SPI1_Init+0x64>)
 800765c:	2200      	movs	r2, #0
 800765e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <MX_SPI1_Init+0x64>)
 8007662:	2200      	movs	r2, #0
 8007664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007666:	4b09      	ldr	r3, [pc, #36]	; (800768c <MX_SPI1_Init+0x64>)
 8007668:	2200      	movs	r2, #0
 800766a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800766c:	4b07      	ldr	r3, [pc, #28]	; (800768c <MX_SPI1_Init+0x64>)
 800766e:	2200      	movs	r2, #0
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007672:	4b06      	ldr	r3, [pc, #24]	; (800768c <MX_SPI1_Init+0x64>)
 8007674:	220a      	movs	r2, #10
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007678:	4804      	ldr	r0, [pc, #16]	; (800768c <MX_SPI1_Init+0x64>)
 800767a:	f7f9 fef1 	bl	8001460 <HAL_SPI_Init>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007684:	f000 fa40 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007688:	bf00      	nop
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200042b4 	.word	0x200042b4
 8007690:	40013000 	.word	0x40013000

08007694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	2224      	movs	r2, #36	; 0x24
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fda6 	bl	80091f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076a8:	1d3b      	adds	r3, r7, #4
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80076b0:	4b22      	ldr	r3, [pc, #136]	; (800773c <MX_TIM1_Init+0xa8>)
 80076b2:	4a23      	ldr	r2, [pc, #140]	; (8007740 <MX_TIM1_Init+0xac>)
 80076b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <MX_TIM1_Init+0xa8>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076bc:	4b1f      	ldr	r3, [pc, #124]	; (800773c <MX_TIM1_Init+0xa8>)
 80076be:	2200      	movs	r2, #0
 80076c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	; (800773c <MX_TIM1_Init+0xa8>)
 80076c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076ca:	4b1c      	ldr	r3, [pc, #112]	; (800773c <MX_TIM1_Init+0xa8>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <MX_TIM1_Init+0xa8>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076d6:	4b19      	ldr	r3, [pc, #100]	; (800773c <MX_TIM1_Init+0xa8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80076dc:	2303      	movs	r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80076f0:	2302      	movs	r3, #2
 80076f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80076f4:	2301      	movs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80076f8:	2300      	movs	r3, #0
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4619      	mov	r1, r3
 8007706:	480d      	ldr	r0, [pc, #52]	; (800773c <MX_TIM1_Init+0xa8>)
 8007708:	f7fa fc82 	bl	8002010 <HAL_TIM_Encoder_Init>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8007712:	f000 f9f9 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4806      	ldr	r0, [pc, #24]	; (800773c <MX_TIM1_Init+0xa8>)
 8007724:	f7fb fa5a 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800772e:	f000 f9eb 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007732:	bf00      	nop
 8007734:	3730      	adds	r7, #48	; 0x30
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20004274 	.word	0x20004274
 8007740:	40010000 	.word	0x40010000

08007744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800774a:	f107 030c 	add.w	r3, r7, #12
 800774e:	2224      	movs	r2, #36	; 0x24
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fd4e 	bl	80091f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <MX_TIM2_Init+0xa4>)
 8007762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007768:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <MX_TIM2_Init+0xa4>)
 800776a:	2200      	movs	r2, #0
 800776c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800776e:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <MX_TIM2_Init+0xa4>)
 8007770:	2200      	movs	r2, #0
 8007772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007774:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <MX_TIM2_Init+0xa4>)
 8007776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800777a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <MX_TIM2_Init+0xa4>)
 800777e:	2200      	movs	r2, #0
 8007780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007782:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <MX_TIM2_Init+0xa4>)
 8007784:	2200      	movs	r2, #0
 8007786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007788:	2303      	movs	r3, #3
 800778a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007794:	2300      	movs	r3, #0
 8007796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800779c:	2302      	movs	r3, #2
 800779e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80077a0:	2301      	movs	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80077ac:	f107 030c 	add.w	r3, r7, #12
 80077b0:	4619      	mov	r1, r3
 80077b2:	480d      	ldr	r0, [pc, #52]	; (80077e8 <MX_TIM2_Init+0xa4>)
 80077b4:	f7fa fc2c 	bl	8002010 <HAL_TIM_Encoder_Init>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80077be:	f000 f9a3 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077c2:	2300      	movs	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4806      	ldr	r0, [pc, #24]	; (80077e8 <MX_TIM2_Init+0xa4>)
 80077d0:	f7fb fa04 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80077da:	f000 f995 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80077de:	bf00      	nop
 80077e0:	3730      	adds	r7, #48	; 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	2000430c 	.word	0x2000430c

080077ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	605a      	str	r2, [r3, #4]
 80077fc:	609a      	str	r2, [r3, #8]
 80077fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007800:	f107 0320 	add.w	r3, r7, #32
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800780a:	1d3b      	adds	r3, r7, #4
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	60da      	str	r2, [r3, #12]
 8007816:	611a      	str	r2, [r3, #16]
 8007818:	615a      	str	r2, [r3, #20]
 800781a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800781c:	4b3d      	ldr	r3, [pc, #244]	; (8007914 <MX_TIM3_Init+0x128>)
 800781e:	4a3e      	ldr	r2, [pc, #248]	; (8007918 <MX_TIM3_Init+0x12c>)
 8007820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 8007822:	4b3c      	ldr	r3, [pc, #240]	; (8007914 <MX_TIM3_Init+0x128>)
 8007824:	2228      	movs	r2, #40	; 0x28
 8007826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007828:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <MX_TIM3_Init+0x128>)
 800782a:	2200      	movs	r2, #0
 800782c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256;
 800782e:	4b39      	ldr	r3, [pc, #228]	; (8007914 <MX_TIM3_Init+0x128>)
 8007830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007836:	4b37      	ldr	r3, [pc, #220]	; (8007914 <MX_TIM3_Init+0x128>)
 8007838:	2200      	movs	r2, #0
 800783a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800783c:	4b35      	ldr	r3, [pc, #212]	; (8007914 <MX_TIM3_Init+0x128>)
 800783e:	2200      	movs	r2, #0
 8007840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007842:	4834      	ldr	r0, [pc, #208]	; (8007914 <MX_TIM3_Init+0x128>)
 8007844:	f7fa fb60 	bl	8001f08 <HAL_TIM_Base_Init>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800784e:	f000 f95b 	bl	8007b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800785c:	4619      	mov	r1, r3
 800785e:	482d      	ldr	r0, [pc, #180]	; (8007914 <MX_TIM3_Init+0x128>)
 8007860:	f7fa fe36 	bl	80024d0 <HAL_TIM_ConfigClockSource>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800786a:	f000 f94d 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800786e:	4829      	ldr	r0, [pc, #164]	; (8007914 <MX_TIM3_Init+0x128>)
 8007870:	f7fa fb99 	bl	8001fa6 <HAL_TIM_PWM_Init>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800787a:	f000 f945 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800787e:	2300      	movs	r3, #0
 8007880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007882:	2300      	movs	r3, #0
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007886:	f107 0320 	add.w	r3, r7, #32
 800788a:	4619      	mov	r1, r3
 800788c:	4821      	ldr	r0, [pc, #132]	; (8007914 <MX_TIM3_Init+0x128>)
 800788e:	f7fb f9a5 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007898:	f000 f936 	bl	8007b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800789c:	2360      	movs	r3, #96	; 0x60
 800789e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80078ac:	1d3b      	adds	r3, r7, #4
 80078ae:	2200      	movs	r2, #0
 80078b0:	4619      	mov	r1, r3
 80078b2:	4818      	ldr	r0, [pc, #96]	; (8007914 <MX_TIM3_Init+0x128>)
 80078b4:	f7fa fd46 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80078be:	f000 f923 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80078c2:	1d3b      	adds	r3, r7, #4
 80078c4:	2204      	movs	r2, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4812      	ldr	r0, [pc, #72]	; (8007914 <MX_TIM3_Init+0x128>)
 80078ca:	f7fa fd3b 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80078d4:	f000 f918 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80078d8:	1d3b      	adds	r3, r7, #4
 80078da:	2208      	movs	r2, #8
 80078dc:	4619      	mov	r1, r3
 80078de:	480d      	ldr	r0, [pc, #52]	; (8007914 <MX_TIM3_Init+0x128>)
 80078e0:	f7fa fd30 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80078ea:	f000 f90d 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	220c      	movs	r2, #12
 80078f2:	4619      	mov	r1, r3
 80078f4:	4807      	ldr	r0, [pc, #28]	; (8007914 <MX_TIM3_Init+0x128>)
 80078f6:	f7fa fd25 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8007900:	f000 f902 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007904:	4803      	ldr	r0, [pc, #12]	; (8007914 <MX_TIM3_Init+0x128>)
 8007906:	f001 fa23 	bl	8008d50 <HAL_TIM_MspPostInit>

}
 800790a:	bf00      	nop
 800790c:	3738      	adds	r7, #56	; 0x38
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20004234 	.word	0x20004234
 8007918:	40000400 	.word	0x40000400

0800791c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007920:	4b11      	ldr	r3, [pc, #68]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007922:	4a12      	ldr	r2, [pc, #72]	; (800796c <MX_USART2_UART_Init+0x50>)
 8007924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007928:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800792c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007930:	2200      	movs	r2, #0
 8007932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007934:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007936:	2200      	movs	r2, #0
 8007938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 800793c:	2200      	movs	r2, #0
 800793e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007940:	4b09      	ldr	r3, [pc, #36]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007942:	220c      	movs	r2, #12
 8007944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007946:	4b08      	ldr	r3, [pc, #32]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007948:	2200      	movs	r2, #0
 800794a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 800794e:	2200      	movs	r2, #0
 8007950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007952:	4805      	ldr	r0, [pc, #20]	; (8007968 <MX_USART2_UART_Init+0x4c>)
 8007954:	f7fb f99b 	bl	8002c8e <HAL_UART_Init>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800795e:	f000 f8d3 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007962:	bf00      	nop
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	2000434c 	.word	0x2000434c
 800796c:	40004400 	.word	0x40004400

08007970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007976:	f107 0314 	add.w	r3, r7, #20
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	605a      	str	r2, [r3, #4]
 8007980:	609a      	str	r2, [r3, #8]
 8007982:	60da      	str	r2, [r3, #12]
 8007984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	4b4d      	ldr	r3, [pc, #308]	; (8007ac0 <MX_GPIO_Init+0x150>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	4a4c      	ldr	r2, [pc, #304]	; (8007ac0 <MX_GPIO_Init+0x150>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6313      	str	r3, [r2, #48]	; 0x30
 8007996:	4b4a      	ldr	r3, [pc, #296]	; (8007ac0 <MX_GPIO_Init+0x150>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	4b46      	ldr	r3, [pc, #280]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	4a45      	ldr	r2, [pc, #276]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b0:	6313      	str	r3, [r2, #48]	; 0x30
 80079b2:	4b43      	ldr	r3, [pc, #268]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	4b3f      	ldr	r3, [pc, #252]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	4a3e      	ldr	r2, [pc, #248]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	6313      	str	r3, [r2, #48]	; 0x30
 80079ce:	4b3c      	ldr	r3, [pc, #240]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	4a37      	ldr	r2, [pc, #220]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079e4:	f043 0302 	orr.w	r3, r3, #2
 80079e8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ea:	4b35      	ldr	r3, [pc, #212]	; (8007ac0 <MX_GPIO_Init+0x150>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80079f6:	2200      	movs	r2, #0
 80079f8:	2110      	movs	r1, #16
 80079fa:	4832      	ldr	r0, [pc, #200]	; (8007ac4 <MX_GPIO_Init+0x154>)
 80079fc:	f7f9 f890 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8007a00:	2200      	movs	r2, #0
 8007a02:	f247 4145 	movw	r1, #29765	; 0x7445
 8007a06:	4830      	ldr	r0, [pc, #192]	; (8007ac8 <MX_GPIO_Init+0x158>)
 8007a08:	f7f9 f88a 	bl	8000b20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	21c0      	movs	r1, #192	; 0xc0
 8007a10:	482e      	ldr	r0, [pc, #184]	; (8007acc <MX_GPIO_Init+0x15c>)
 8007a12:	f7f9 f885 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_12;
 8007a16:	f241 430c 	movw	r3, #5132	; 0x140c
 8007a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	; (8007ad0 <MX_GPIO_Init+0x160>)
 8007a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a24:	f107 0314 	add.w	r3, r7, #20
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4828      	ldr	r0, [pc, #160]	; (8007acc <MX_GPIO_Init+0x15c>)
 8007a2c:	f7f8 fef6 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007a30:	2310      	movs	r3, #16
 8007a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a34:	2301      	movs	r3, #1
 8007a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	4619      	mov	r1, r3
 8007a46:	481f      	ldr	r0, [pc, #124]	; (8007ac4 <MX_GPIO_Init+0x154>)
 8007a48:	f7f8 fee8 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12 
                           PB13 PB14 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8007a4c:	f247 4345 	movw	r3, #29765	; 0x7445
 8007a50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a52:	2301      	movs	r3, #1
 8007a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a5e:	f107 0314 	add.w	r3, r7, #20
 8007a62:	4619      	mov	r1, r3
 8007a64:	4818      	ldr	r0, [pc, #96]	; (8007ac8 <MX_GPIO_Init+0x158>)
 8007a66:	f7f8 fed9 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a6a:	23c0      	movs	r3, #192	; 0xc0
 8007a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a76:	2300      	movs	r3, #0
 8007a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a7a:	f107 0314 	add.w	r3, r7, #20
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4812      	ldr	r0, [pc, #72]	; (8007acc <MX_GPIO_Init+0x15c>)
 8007a82:	f7f8 fecb 	bl	800081c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2105      	movs	r1, #5
 8007a8a:	2008      	movs	r0, #8
 8007a8c:	f7f8 fe9c 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007a90:	2008      	movs	r0, #8
 8007a92:	f7f8 feb5 	bl	8000800 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8007a96:	2200      	movs	r2, #0
 8007a98:	2105      	movs	r1, #5
 8007a9a:	2009      	movs	r0, #9
 8007a9c:	f7f8 fe94 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007aa0:	2009      	movs	r0, #9
 8007aa2:	f7f8 fead 	bl	8000800 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2105      	movs	r1, #5
 8007aaa:	2028      	movs	r0, #40	; 0x28
 8007aac:	f7f8 fe8c 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007ab0:	2028      	movs	r0, #40	; 0x28
 8007ab2:	f7f8 fea5 	bl	8000800 <HAL_NVIC_EnableIRQ>

}
 8007ab6:	bf00      	nop
 8007ab8:	3728      	adds	r7, #40	; 0x28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40020000 	.word	0x40020000
 8007ac8:	40020400 	.word	0x40020400
 8007acc:	40020800 	.word	0x40020800
 8007ad0:	10310000 	.word	0x10310000

08007ad4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
//		__HAL_TIM_SetCompare(htim, CHANNEL_REV1, speed * (-1));
//	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007adc:	2001      	movs	r0, #1
 8007ade:	f7fd faf6 	bl	80050ce <osDelay>
 8007ae2:	e7fb      	b.n	8007adc <StartDefaultTask+0x8>

08007ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a04      	ldr	r2, [pc, #16]	; (8007b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d101      	bne.n	8007afa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007af6:	f7f8 fd6d 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	40000800 	.word	0x40000800

08007b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007b0c:	bf00      	nop
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <_ZN10ValueFieldC1ESt6vectorIhSaIhEE>:

struct ValueField {
	std::vector<unsigned char> value;
	bool exist;
public:
	ValueField(std::vector<unsigned char> value): value(value) {}
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fac1 	bl	80080ac <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_ZN10ValueFieldD1Ev>:
struct ValueField {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 faf1 	bl	8008126 <_ZNSt6vectorIhSaIhEED1Ev>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <_Z15StartSecondTaskPKv>:
SocketClient socket_client;
SLMPPacket packet;
unsigned int msg_len = 0;

void StartSecondTask(void const * argument)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  uart_helper.printf("!!!!!!!!!!!!!!!!\n\0");
 8007b58:	4904      	ldr	r1, [pc, #16]	; (8007b6c <_Z15StartSecondTaskPKv+0x1c>)
 8007b5a:	4805      	ldr	r0, [pc, #20]	; (8007b70 <_Z15StartSecondTaskPKv+0x20>)
 8007b5c:	f7ff fb68 	bl	8007230 <_ZN10UartHelper6printfEPKcz>
	  osDelay(500);
 8007b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b64:	f7fd fab3 	bl	80050ce <osDelay>
	  uart_helper.printf("!!!!!!!!!!!!!!!!\n\0");
 8007b68:	e7f6      	b.n	8007b58 <_Z15StartSecondTaskPKv+0x8>
 8007b6a:	bf00      	nop
 8007b6c:	08009be0 	.word	0x08009be0
 8007b70:	200041a4 	.word	0x200041a4

08007b74 <_Z13StartUARTTaskPKv>:
  }
}


void StartUARTTask(void const * argument)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	uart_helper.UARTTask();
 8007b7c:	4803      	ldr	r0, [pc, #12]	; (8007b8c <_Z13StartUARTTaskPKv+0x18>)
 8007b7e:	f7ff fb87 	bl	8007290 <_ZN10UartHelper8UARTTaskEv>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	200041a4 	.word	0x200041a4

08007b90 <_Z19StartSocketSendTaskPKv>:

void StartSocketSendTask(void const * argument)
{
 8007b90:	b590      	push	{r4, r7, lr}
 8007b92:	b0a7      	sub	sp, #156	; 0x9c
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
			unsigned char msg[msg_len];
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <_Z19StartSocketSendTaskPKv+0xa8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	1e58      	subs	r0, r3, #1
 8007b9e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	f04f 0400 	mov.w	r4, #0
 8007bb4:	00d4      	lsls	r4, r2, #3
 8007bb6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007bba:	00cb      	lsls	r3, r1, #3
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	f04f 0400 	mov.w	r4, #0
 8007bce:	00d4      	lsls	r4, r2, #3
 8007bd0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007bd4:	00cb      	lsls	r3, r1, #3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	3301      	adds	r3, #1
 8007bda:	3307      	adds	r3, #7
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	ebad 0d03 	sub.w	sp, sp, r3
 8007be4:	466b      	mov	r3, sp
 8007be6:	3300      	adds	r3, #0
 8007be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			buildRequest(&packet, msg);
 8007bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4812      	ldr	r0, [pc, #72]	; (8007c3c <_Z19StartSocketSendTaskPKv+0xac>)
 8007bf4:	f7fb fbac 	bl	8003350 <_Z12buildRequestP10SLMPPacketPh>

			const static uint16_t rbuflen = 128;
			uint8_t rbuf[rbuflen];
			uint16_t Size = 5;
 8007bf8:	2305      	movs	r3, #5
 8007bfa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			uint32_t* rdmaInd;
			  for(;;)
			  {
				  socket_client.socket_receive(rbuf, Size, rdmaInd);
 8007bfe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007c02:	f107 0108 	add.w	r1, r7, #8
 8007c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c0a:	480d      	ldr	r0, [pc, #52]	; (8007c40 <_Z19StartSocketSendTaskPKv+0xb0>)
 8007c0c:	f7ff fa3a 	bl	8007084 <_ZN12SocketClient14socket_receiveEPhtPm>
				  uart_helper.printf(rbuf);
 8007c10:	f107 0308 	add.w	r3, r7, #8
 8007c14:	4619      	mov	r1, r3
 8007c16:	480b      	ldr	r0, [pc, #44]	; (8007c44 <_Z19StartSocketSendTaskPKv+0xb4>)
 8007c18:	f7ff fb29 	bl	800726e <_ZN10UartHelper6printfEPKh>
				  socket_client.socket_send(msg, msg_len);
 8007c1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <_Z19StartSocketSendTaskPKv+0xa8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	4805      	ldr	r0, [pc, #20]	; (8007c40 <_Z19StartSocketSendTaskPKv+0xb0>)
 8007c2a:	f7ff f9ef 	bl	800700c <_ZN12SocketClient11socket_sendEPht>
				  osDelay(100);
 8007c2e:	2064      	movs	r0, #100	; 0x64
 8007c30:	f7fd fa4d 	bl	80050ce <osDelay>
				  socket_client.socket_receive(rbuf, Size, rdmaInd);
 8007c34:	e7e3      	b.n	8007bfe <_Z19StartSocketSendTaskPKv+0x6e>
 8007c36:	bf00      	nop
 8007c38:	20004218 	.word	0x20004218
 8007c3c:	200041c8 	.word	0x200041c8
 8007c40:	200041b0 	.word	0x200041b0
 8007c44:	200041a4 	.word	0x200041a4

08007c48 <_ZN10SLMPPacketD1Ev>:
#define SLMP_SLMPPACKET_H

#include "PacketFields.h"


struct SLMPPacket {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3340      	adds	r3, #64	; 0x40
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff ff6d 	bl	8007b34 <_ZN10ValueFieldD1Ev>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <_ZN10ValueFieldaSEOS_>:
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fa7c 	bl	8008172 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	7b1a      	ldrb	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	731a      	strb	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZN10SLMPPacketaSEOS_>:
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	6852      	ldr	r2, [r2, #4]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	6892      	ldr	r2, [r2, #8]
 8007cac:	609a      	str	r2, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	320c      	adds	r2, #12
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	8019      	strh	r1, [r3, #0]
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	0c12      	lsrs	r2, r2, #16
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	330f      	adds	r3, #15
 8007cc8:	320f      	adds	r2, #15
 8007cca:	8811      	ldrh	r1, [r2, #0]
 8007ccc:	7892      	ldrb	r2, [r2, #2]
 8007cce:	8019      	strh	r1, [r3, #0]
 8007cd0:	709a      	strb	r2, [r3, #2]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	3312      	adds	r3, #18
 8007cd8:	3212      	adds	r2, #18
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	3316      	adds	r3, #22
 8007ce4:	3216      	adds	r2, #22
 8007ce6:	8811      	ldrh	r1, [r2, #0]
 8007ce8:	7892      	ldrb	r2, [r2, #2]
 8007cea:	8019      	strh	r1, [r3, #0]
 8007cec:	709a      	strb	r2, [r3, #2]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	331a      	adds	r3, #26
 8007cf4:	321a      	adds	r2, #26
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	331e      	adds	r3, #30
 8007d00:	321e      	adds	r2, #30
 8007d02:	6812      	ldr	r2, [r2, #0]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	3322      	adds	r3, #34	; 0x22
 8007d0c:	3222      	adds	r2, #34	; 0x22
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	3326      	adds	r3, #38	; 0x26
 8007d18:	3226      	adds	r2, #38	; 0x26
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	332c      	adds	r3, #44	; 0x2c
 8007d24:	322c      	adds	r2, #44	; 0x2c
 8007d26:	6811      	ldr	r1, [r2, #0]
 8007d28:	6019      	str	r1, [r3, #0]
 8007d2a:	8892      	ldrh	r2, [r2, #4]
 8007d2c:	809a      	strh	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	3334      	adds	r3, #52	; 0x34
 8007d34:	3234      	adds	r2, #52	; 0x34
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	8019      	strh	r1, [r3, #0]
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	0c12      	lsrs	r2, r2, #16
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d50:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3340      	adds	r3, #64	; 0x40
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7ff ff80 	bl	8007c64 <_ZN10ValueFieldaSEOS_>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <setup>:
}

void setup(UART_HandleTypeDef *main_huart, SPI_HandleTypeDef *main_hspi1,
		TIM_HandleTypeDef *main_htim, TIM_HandleTypeDef *main_htim2,
		TIM_HandleTypeDef *main_encoder_htim1, TIM_HandleTypeDef *main_encoder_htim2)
{
 8007d70:	b5b0      	push	{r4, r5, r7, lr}
 8007d72:	b0c4      	sub	sp, #272	; 0x110
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	f107 040c 	add.w	r4, r7, #12
 8007d7a:	6020      	str	r0, [r4, #0]
 8007d7c:	f107 0008 	add.w	r0, r7, #8
 8007d80:	6001      	str	r1, [r0, #0]
 8007d82:	1d39      	adds	r1, r7, #4
 8007d84:	600a      	str	r2, [r1, #0]
 8007d86:	463a      	mov	r2, r7
 8007d88:	6013      	str	r3, [r2, #0]

	  huart = main_huart;
 8007d8a:	4abd      	ldr	r2, [pc, #756]	; (8008080 <setup+0x310>)
 8007d8c:	f107 030c 	add.w	r3, r7, #12
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6013      	str	r3, [r2, #0]
	  hspi = main_hspi1;
 8007d94:	4abb      	ldr	r2, [pc, #748]	; (8008084 <setup+0x314>)
 8007d96:	f107 0308 	add.w	r3, r7, #8
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6013      	str	r3, [r2, #0]
	  uart_helper.init(huart);
 8007d9e:	4bb8      	ldr	r3, [pc, #736]	; (8008080 <setup+0x310>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4619      	mov	r1, r3
 8007da4:	48b8      	ldr	r0, [pc, #736]	; (8008088 <setup+0x318>)
 8007da6:	f7ff fa35 	bl	8007214 <_ZN10UartHelper4initEP20__UART_HandleTypeDef>

	  socket_client.init(hspi, &uart_helper);
 8007daa:	4bb6      	ldr	r3, [pc, #728]	; (8008084 <setup+0x314>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4ab6      	ldr	r2, [pc, #728]	; (8008088 <setup+0x318>)
 8007db0:	4619      	mov	r1, r3
 8007db2:	48b6      	ldr	r0, [pc, #728]	; (800808c <setup+0x31c>)
 8007db4:	f7ff f8b0 	bl	8006f18 <_ZN12SocketClient4initEP19__SPI_HandleTypeDefP10UartHelper>
	  HAL_Delay(1000 * 2);
 8007db8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007dbc:	f7f8 fc2a 	bl	8000614 <HAL_Delay>
	  socket_client.socket_connect();
 8007dc0:	48b2      	ldr	r0, [pc, #712]	; (800808c <setup+0x31c>)
 8007dc2:	f7ff f90d 	bl	8006fe0 <_ZN12SocketClient14socket_connectEv>

	  packet = SLMPPacket();
 8007dc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007dca:	2250      	movs	r2, #80	; 0x50
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 fa10 	bl	80091f4 <memset>
 8007dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fb fe1c 	bl	8003a16 <_ZN10SLMPPacketC1Ev>
 8007dde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007de2:	4619      	mov	r1, r3
 8007de4:	48aa      	ldr	r0, [pc, #680]	; (8008090 <setup+0x320>)
 8007de6:	f7ff ff51 	bl	8007c8c <_ZN10SLMPPacketaSEOS_>
 8007dea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff ff2a 	bl	8007c48 <_ZN10SLMPPacketD1Ev>

	  packet.is_serial_no = Field<unsigned short, 2>(0x0050, true);
 8007df4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007df8:	2201      	movs	r2, #1
 8007dfa:	2150      	movs	r1, #80	; 0x50
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f9cd 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007e02:	4aa3      	ldr	r2, [pc, #652]	; (8008090 <setup+0x320>)
 8007e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e08:	6013      	str	r3, [r2, #0]
	  packet.is_serial_no.exist = true;
 8007e0a:	4ba1      	ldr	r3, [pc, #644]	; (8008090 <setup+0x320>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	70da      	strb	r2, [r3, #3]

	  packet.request_dest_net_no = Field<unsigned char, 1>(0, true);
 8007e10:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007e14:	2201      	movs	r2, #1
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f9d7 	bl	80081cc <_ZN5FieldIhLj1EEC1Ehb>
 8007e1e:	4b9c      	ldr	r3, [pc, #624]	; (8008090 <setup+0x320>)
 8007e20:	330c      	adds	r3, #12
 8007e22:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	4611      	mov	r1, r2
 8007e2a:	8019      	strh	r1, [r3, #0]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	0c12      	lsrs	r2, r2, #16
 8007e30:	701a      	strb	r2, [r3, #0]
	  packet.request_dest_net_no.exist = true;
 8007e32:	4b97      	ldr	r3, [pc, #604]	; (8008090 <setup+0x320>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	739a      	strb	r2, [r3, #14]

	  packet.request_dest_station_no = Field<unsigned char, 1>(0xff, true);
 8007e38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	21ff      	movs	r1, #255	; 0xff
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 f9c3 	bl	80081cc <_ZN5FieldIhLj1EEC1Ehb>
 8007e46:	4b92      	ldr	r3, [pc, #584]	; (8008090 <setup+0x320>)
 8007e48:	330f      	adds	r3, #15
 8007e4a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8007e4e:	8811      	ldrh	r1, [r2, #0]
 8007e50:	7892      	ldrb	r2, [r2, #2]
 8007e52:	8019      	strh	r1, [r3, #0]
 8007e54:	709a      	strb	r2, [r3, #2]
	  packet.request_dest_station_no.exist = true;
 8007e56:	4b8e      	ldr	r3, [pc, #568]	; (8008090 <setup+0x320>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	745a      	strb	r2, [r3, #17]

	  packet.request_processor = Field<unsigned short, 2>(0x3ff, true);
 8007e5c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007e60:	2201      	movs	r2, #1
 8007e62:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f998 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007e6c:	4b88      	ldr	r3, [pc, #544]	; (8008090 <setup+0x320>)
 8007e6e:	3312      	adds	r3, #18
 8007e70:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8007e74:	6810      	ldr	r0, [r2, #0]
 8007e76:	6018      	str	r0, [r3, #0]
	  packet.request_processor.exist = true;
 8007e78:	4b85      	ldr	r3, [pc, #532]	; (8008090 <setup+0x320>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	755a      	strb	r2, [r3, #21]

	  packet.request_reserved = Field<unsigned char, 1>(0x0, true);
 8007e7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007e82:	2201      	movs	r2, #1
 8007e84:	2100      	movs	r1, #0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f9a0 	bl	80081cc <_ZN5FieldIhLj1EEC1Ehb>
 8007e8c:	4b80      	ldr	r3, [pc, #512]	; (8008090 <setup+0x320>)
 8007e8e:	3316      	adds	r3, #22
 8007e90:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8007e94:	8811      	ldrh	r1, [r2, #0]
 8007e96:	7892      	ldrb	r2, [r2, #2]
 8007e98:	8019      	strh	r1, [r3, #0]
 8007e9a:	709a      	strb	r2, [r3, #2]
	  packet.request_reserved.exist = true;
 8007e9c:	4b7c      	ldr	r3, [pc, #496]	; (8008090 <setup+0x320>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	761a      	strb	r2, [r3, #24]

	  packet.data_length = Field<unsigned short, 2>(16, true);
 8007ea2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	2110      	movs	r1, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f976 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007eb0:	4b77      	ldr	r3, [pc, #476]	; (8008090 <setup+0x320>)
 8007eb2:	331a      	adds	r3, #26
 8007eb4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8007eb8:	6810      	ldr	r0, [r2, #0]
 8007eba:	6018      	str	r0, [r3, #0]
	  packet.data_length.exist = true;
 8007ebc:	4b74      	ldr	r3, [pc, #464]	; (8008090 <setup+0x320>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	775a      	strb	r2, [r3, #29]

	  packet.monitoring_time = Field<unsigned short, 2>(1, true);
 8007ec2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	2101      	movs	r1, #1
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 f966 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007ed0:	4b6f      	ldr	r3, [pc, #444]	; (8008090 <setup+0x320>)
 8007ed2:	331e      	adds	r3, #30
 8007ed4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8007ed8:	6810      	ldr	r0, [r2, #0]
 8007eda:	6018      	str	r0, [r3, #0]
	  packet.monitoring_time.exist = true;
 8007edc:	4b6c      	ldr	r3, [pc, #432]	; (8008090 <setup+0x320>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	  packet.command = Field<unsigned short, 2>(0x1401, true);
 8007ee4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f241 4101 	movw	r1, #5121	; 0x1401
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f954 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007ef4:	4b66      	ldr	r3, [pc, #408]	; (8008090 <setup+0x320>)
 8007ef6:	3322      	adds	r3, #34	; 0x22
 8007ef8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8007efc:	6810      	ldr	r0, [r2, #0]
 8007efe:	6018      	str	r0, [r3, #0]
	  packet.command.exist = true;
 8007f00:	4b63      	ldr	r3, [pc, #396]	; (8008090 <setup+0x320>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	  packet.subcommand = Field<unsigned short, 2>(0, true);
 8007f08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 f943 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007f16:	4b5e      	ldr	r3, [pc, #376]	; (8008090 <setup+0x320>)
 8007f18:	3326      	adds	r3, #38	; 0x26
 8007f1a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8007f1e:	6810      	ldr	r0, [r2, #0]
 8007f20:	6018      	str	r0, [r3, #0]
	  packet.subcommand.exist = true;
 8007f22:	4b5b      	ldr	r3, [pc, #364]	; (8008090 <setup+0x320>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	  packet.head_device_no = Field<unsigned int, 3>(100, true);
 8007f2a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007f2e:	2201      	movs	r2, #1
 8007f30:	2164      	movs	r1, #100	; 0x64
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f962 	bl	80081fc <_ZN5FieldIjLj3EEC1Ejb>
 8007f38:	4b55      	ldr	r3, [pc, #340]	; (8008090 <setup+0x320>)
 8007f3a:	332c      	adds	r3, #44	; 0x2c
 8007f3c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8007f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f44:	6018      	str	r0, [r3, #0]
 8007f46:	3304      	adds	r3, #4
 8007f48:	8019      	strh	r1, [r3, #0]
	  packet.head_device_no.exist = true;
 8007f4a:	4b51      	ldr	r3, [pc, #324]	; (8008090 <setup+0x320>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	  packet.device_code = Field<unsigned char, 1>(0xa8, true);
 8007f52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007f56:	2201      	movs	r2, #1
 8007f58:	21a8      	movs	r1, #168	; 0xa8
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f936 	bl	80081cc <_ZN5FieldIhLj1EEC1Ehb>
 8007f60:	4b4b      	ldr	r3, [pc, #300]	; (8008090 <setup+0x320>)
 8007f62:	3334      	adds	r3, #52	; 0x34
 8007f64:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8007f68:	6812      	ldr	r2, [r2, #0]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	8019      	strh	r1, [r3, #0]
 8007f6e:	3302      	adds	r3, #2
 8007f70:	0c12      	lsrs	r2, r2, #16
 8007f72:	701a      	strb	r2, [r3, #0]
	  packet.device_code.exist = true;
 8007f74:	4b46      	ldr	r3, [pc, #280]	; (8008090 <setup+0x320>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	  packet.no_of_device_points = Field<unsigned short, 2>(0x2, true);
 8007f7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007f80:	2201      	movs	r2, #1
 8007f82:	2102      	movs	r1, #2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f909 	bl	800819c <_ZN5FieldItLj2EEC1Etb>
 8007f8a:	4a41      	ldr	r2, [pc, #260]	; (8008090 <setup+0x320>)
 8007f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f90:	6393      	str	r3, [r2, #56]	; 0x38
	  packet.no_of_device_points.exist = true;
 8007f92:	4b3f      	ldr	r3, [pc, #252]	; (8008090 <setup+0x320>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	  packet.value = ValueField({5, '\x00', 3, '\x00'});
 8007f9a:	4a3e      	ldr	r2, [pc, #248]	; (8008094 <setup+0x324>)
 8007f9c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8007fa8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fb fde3 	bl	8003b78 <_ZNSaIhEC1Ev>
 8007fb2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007fb6:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8007fba:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8007fbe:	ca06      	ldmia	r2, {r1, r2}
 8007fc0:	f000 f95c 	bl	800827c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8007fc4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007fc8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fda1 	bl	8007b16 <_ZN10ValueFieldC1ESt6vectorIhSaIhEE>
 8007fd4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007fd8:	4619      	mov	r1, r3
 8007fda:	482f      	ldr	r0, [pc, #188]	; (8008098 <setup+0x328>)
 8007fdc:	f7ff fe42 	bl	8007c64 <_ZN10ValueFieldaSEOS_>
 8007fe0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff fda5 	bl	8007b34 <_ZN10ValueFieldD1Ev>
 8007fea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f899 	bl	8008126 <_ZNSt6vectorIhSaIhEED1Ev>
 8007ff4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f916 	bl	800822a <_ZNSaIhED1Ev>
	  packet.value.exist = true;
 8007ffe:	4b24      	ldr	r3, [pc, #144]	; (8008090 <setup+0x320>)
 8008000:	2201      	movs	r2, #1
 8008002:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	  msg_len = getMsgLen(&packet);
 8008006:	4822      	ldr	r0, [pc, #136]	; (8008090 <setup+0x320>)
 8008008:	f7fb fa84 	bl	8003514 <_Z9getMsgLenP10SLMPPacket>
 800800c:	4603      	mov	r3, r0
 800800e:	461a      	mov	r2, r3
 8008010:	4b22      	ldr	r3, [pc, #136]	; (800809c <setup+0x32c>)
 8008012:	601a      	str	r2, [r3, #0]

	  //****** UART **********
	  osThreadDef(UartTask, StartUARTTask, osPriorityNormal, 1, 256);
 8008014:	4b22      	ldr	r3, [pc, #136]	; (80080a0 <setup+0x330>)
 8008016:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800801a:	461d      	mov	r5, r3
 800801c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800801e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008020:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008024:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(UartTask), NULL);
 8008028:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f7fd f801 	bl	8005036 <osThreadCreate>

	  //========== ROS ===============
//

	  //****** UART Test ***************
	  osThreadDef(SecondTask, StartSecondTask, osPriorityNormal, 1, 256);
 8008034:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <setup+0x334>)
 8008036:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800803a:	461d      	mov	r5, r3
 800803c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800803e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008040:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008044:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(SecondTask), NULL);
 8008048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f7fc fff1 	bl	8005036 <osThreadCreate>

	  //******* Socket Test *************
	  osThreadDef(SocketSendTask, StartSocketSendTask, osPriorityNormal, 1, 256);
 8008054:	f107 0310 	add.w	r3, r7, #16
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <setup+0x338>)
 800805a:	461c      	mov	r4, r3
 800805c:	4615      	mov	r5, r2
 800805e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008062:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008066:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(SocketSendTask), NULL);
 800806a:	f107 0310 	add.w	r3, r7, #16
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f7fc ffe0 	bl	8005036 <osThreadCreate>

}
 8008076:	bf00      	nop
 8008078:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800807c:	46bd      	mov	sp, r7
 800807e:	bdb0      	pop	{r4, r5, r7, pc}
 8008080:	2000419c 	.word	0x2000419c
 8008084:	200041a0 	.word	0x200041a0
 8008088:	200041a4 	.word	0x200041a4
 800808c:	200041b0 	.word	0x200041b0
 8008090:	200041c8 	.word	0x200041c8
 8008094:	08009bf4 	.word	0x08009bf4
 8008098:	20004208 	.word	0x20004208
 800809c:	20004218 	.word	0x20004218
 80080a0:	08009c08 	.word	0x08009c08
 80080a4:	08009c30 	.word	0x08009c30
 80080a8:	08009c5c 	.word	0x08009c5c

080080ac <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 80080ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80080b6:	687c      	ldr	r4, [r7, #4]
 80080b8:	6838      	ldr	r0, [r7, #0]
 80080ba:	f7fb faee 	bl	800369a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80080be:	4605      	mov	r5, r0
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f909 	bl	80082da <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80080c8:	4602      	mov	r2, r0
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f8f4 	bl	80082be <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>
 80080d6:	f107 030c 	add.w	r3, r7, #12
 80080da:	461a      	mov	r2, r3
 80080dc:	4629      	mov	r1, r5
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f912 	bl	8008308 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f89e 	bl	800822a <_ZNSaIhED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80080ee:	6838      	ldr	r0, [r7, #0]
 80080f0:	f000 f937 	bl	8008362 <_ZNKSt6vectorIhSaIhEE5beginEv>
 80080f4:	4605      	mov	r5, r0
 80080f6:	6838      	ldr	r0, [r7, #0]
 80080f8:	f000 f947 	bl	800838a <_ZNKSt6vectorIhSaIhEE3endEv>
 80080fc:	4606      	mov	r6, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f954 	bl	80083b2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800810a:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800810c:	4622      	mov	r2, r4
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	f000 f959 	bl	80083c8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 8008116:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	605a      	str	r2, [r3, #4]
      }
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008126 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008126:	b5b0      	push	{r4, r5, r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681c      	ldr	r4, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f93a 	bl	80083b2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800813e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008140:	461a      	mov	r2, r3
 8008142:	4629      	mov	r1, r5
 8008144:	4620      	mov	r0, r4
 8008146:	f000 f950 	bl	80083ea <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8ef 	bl	8008330 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bdb0      	pop	{r4, r5, r7, pc}

0800815c <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8008172:	b590      	push	{r4, r7, lr}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8008180:	6838      	ldr	r0, [r7, #0]
 8008182:	f7ff ffeb 	bl	800815c <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8008186:	4603      	mov	r3, r0
 8008188:	4622      	mov	r2, r4
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f94d 	bl	800842c <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8008192:	687b      	ldr	r3, [r7, #4]
      }
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	bd90      	pop	{r4, r7, pc}

0800819c <_ZN5FieldItLj2EEC1Etb>:
	Field(ValueType value, bool endian) {
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	807b      	strh	r3, [r7, #2]
 80081a8:	4613      	mov	r3, r2
 80081aa:	707b      	strb	r3, [r7, #1]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	70da      	strb	r2, [r3, #3]
		data.value = value;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	887a      	ldrh	r2, [r7, #2]
 80081b6:	801a      	strh	r2, [r3, #0]
		this->endian = endian;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	787a      	ldrb	r2, [r7, #1]
 80081bc:	709a      	strb	r2, [r3, #2]
	}
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <_ZN5FieldIhLj1EEC1Ehb>:
	Field(ValueType value, bool endian) {
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
 80081d8:	4613      	mov	r3, r2
 80081da:	70bb      	strb	r3, [r7, #2]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	709a      	strb	r2, [r3, #2]
		data.value = value;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	701a      	strb	r2, [r3, #0]
		this->endian = endian;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	78ba      	ldrb	r2, [r7, #2]
 80081ec:	705a      	strb	r2, [r3, #1]
	}
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <_ZN5FieldIjLj3EEC1Ejb>:
	Field(ValueType value, bool endian) {
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	4613      	mov	r3, r2
 8008208:	71fb      	strb	r3, [r7, #7]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	715a      	strb	r2, [r3, #5]
		data.value = value;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	601a      	str	r2, [r3, #0]
		this->endian = endian;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	79fa      	ldrb	r2, [r7, #7]
 800821a:	711a      	strb	r2, [r3, #4]
	}
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f938 	bl	80084a8 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800825a:	b590      	push	{r4, r7, lr}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff ffed 	bl	8008242 <_ZNKSt16initializer_listIhE5beginEv>
 8008268:	4604      	mov	r4, r0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f936 	bl	80084dc <_ZNKSt16initializer_listIhE4sizeEv>
 8008270:	4603      	mov	r3, r0
 8008272:	4423      	add	r3, r4
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	bd90      	pop	{r4, r7, pc}

0800827c <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 800827c:	b5b0      	push	{r4, r5, r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	1d38      	adds	r0, r7, #4
 8008286:	e880 0006 	stmia.w	r0, {r1, r2}
 800828a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f000 f914 	bl	80084be <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff ffd2 	bl	8008242 <_ZNKSt16initializer_listIhE5beginEv>
 800829e:	4604      	mov	r4, r0
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff ffd9 	bl	800825a <_ZNKSt16initializer_listIhE3endEv>
 80082a8:	4602      	mov	r2, r0
 80082aa:	462b      	mov	r3, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 f920 	bl	80084f4 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
      }
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bdb0      	pop	{r4, r5, r7, pc}

080082be <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f93f 	bl	8008550 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff ff96 	bl	800822a <_ZNSaIhED1Ev>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f934 	bl	8008586 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f947 	bl	80085b4 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6819      	ldr	r1, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8008340:	461a      	mov	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008348:	461a      	mov	r2, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f85b 	bl	8008406 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff ffcc 	bl	80082f0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	f107 020c 	add.w	r2, r7, #12
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f934 	bl	80085e8 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	f107 020c 	add.w	r2, r7, #12
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f920 	bl	80085e8 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f914 	bl	8008608 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80083e0:	4603      	mov	r3, r0
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 f917 	bl	800862c <_ZSt8_DestroyIPhEvT_S1_>
    }
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
	if (__p)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f925 	bl	800866e <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	f107 031c 	add.w	r3, r7, #28
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f92e 	bl	80086a2 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8008446:	f107 021c 	add.w	r2, r7, #28
 800844a:	f107 0310 	add.w	r3, r7, #16
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f937 	bl	80086c4 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8008456:	f107 031c 	add.w	r3, r7, #28
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fee5 	bl	800822a <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f107 0210 	add.w	r2, r7, #16
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f93a 	bl	80086e2 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	this->_M_impl._M_swap_data(__x._M_impl);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	4611      	mov	r1, r2
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f934 	bl	80086e2 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff ff98 	bl	80083b2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008482:	4604      	mov	r4, r0
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff ff93 	bl	80083b2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800848c:	4603      	mov	r3, r0
 800848e:	4619      	mov	r1, r3
 8008490:	4620      	mov	r0, r4
 8008492:	f000 f946 	bl	8008722 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8008496:	f107 0310 	add.w	r3, r7, #16
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fe43 	bl	8008126 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 80084a0:	bf00      	nop
 80084a2:	3724      	adds	r7, #36	; 0x24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd90      	pop	{r4, r7, pc}

080084a8 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f85a 	bl	8008586 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first,
 80084f4:	b590      	push	{r4, r7, lr}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	68b8      	ldr	r0, [r7, #8]
 8008506:	f000 f924 	bl	8008752 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800850a:	4603      	mov	r3, r0
 800850c:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start = this->_M_allocate(__n);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6979      	ldr	r1, [r7, #20]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f897 	bl	8008646 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8008518:	4602      	mov	r2, r0
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	441a      	add	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff ff3e 	bl	80083b2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008536:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8008538:	4622      	mov	r2, r4
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	68b8      	ldr	r0, [r7, #8]
 800853e:	f000 f91c 	bl	800877a <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 8008542:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	605a      	str	r2, [r3, #4]
	}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd90      	pop	{r4, r7, pc}

08008550 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f804 	bl	800856a <_ZNSaIhEC1ERKS_>
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f910 	bl	800879c <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ffe9 	bl	800856a <_ZNSaIhEC1ERKS_>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	605a      	str	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	609a      	str	r2, [r3, #8]
	{ }
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f840 	bl	8008646 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80085c6:	4602      	mov	r2, r0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	441a      	add	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	609a      	str	r2, [r3, #8]
      }
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008614:	2301      	movs	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 f8c9 	bl	80087b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8008622:	4603      	mov	r3, r0
    }
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f8cb 	bl	80087d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d006      	beq.n	8008664 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f8c5 	bl	80087ea <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8008660:	4603      	mov	r3, r0
 8008662:	e000      	b.n	8008666 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8008664:	2300      	movs	r3, #0
      }
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f8c2 	bl	8008808 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80086ac:	6838      	ldr	r0, [r7, #0]
 80086ae:	f7ff fe14 	bl	80082da <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ff57 	bl	800856a <_ZNSaIhEC1ERKS_>
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fef3 	bl	80084be <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f8c0 	bl	8008878 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_finish, __x._M_finish);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	1d1a      	adds	r2, r3, #4
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	3304      	adds	r3, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f000 f8b8 	bl	8008878 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f103 0208 	add.w	r2, r3, #8
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f000 f8af 	bl	8008878 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 800872c:	461a      	mov	r2, r3
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f8cb 	bl	80088cc <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008752:	b5b0      	push	{r4, r5, r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800875c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff ffec 	bl	800873e <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8008766:	462a      	mov	r2, r5
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	4620      	mov	r0, r4
 800876c:	f000 f8bb 	bl	80088e6 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8008770:	4603      	mov	r3, r0
    }
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bdb0      	pop	{r4, r5, r7, pc}

0800877a <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	68b9      	ldr	r1, [r7, #8]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f8b9 	bl	8008904 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 8008792:	4603      	mov	r3, r0
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f8af 	bl	8008928 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80087ca:	4603      	mov	r3, r0
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80087f4:	2200      	movs	r2, #0
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8ad 	bl	8008958 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80087fe:	4603      	mov	r3, r0
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8008814:	68b8      	ldr	r0, [r7, #8]
 8008816:	f000 fc83 	bl	8009120 <_ZdlPv>
      }
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f8af 	bl	8008990 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8008832:	4603      	mov	r3, r0
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7fb f897 	bl	8003986 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8008858:	4603      	mov	r3, r0
    }
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ffed 	bl	8008862 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8008888:	4603      	mov	r3, r0
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800888e:	6838      	ldr	r0, [r7, #0]
 8008890:	f7ff ffe7 	bl	8008862 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8008894:	4603      	mov	r3, r0
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff ffde 	bl	8008862 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80088a6:	4603      	mov	r3, r0
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	601a      	str	r2, [r3, #0]
    }
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80088d8:	68b8      	ldr	r0, [r7, #8]
 80088da:	f7ff ffec 	bl	80088b6 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	1ad3      	subs	r3, r2, r3
    }
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f844 	bl	80089a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 800891e:	4603      	mov	r3, r0
    }
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff fea9 	bl	800868c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800893a:	4604      	mov	r4, r0
 800893c:	68b8      	ldr	r0, [r7, #8]
 800893e:	f7ff fea5 	bl	800868c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8008942:	4603      	mov	r3, r0
	       __result));
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	4619      	mov	r1, r3
 8008948:	4620      	mov	r0, r4
 800894a:	f000 f83c 	bl	80089c6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 800894e:	4603      	mov	r3, r0
    }
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	bd90      	pop	{r4, r7, pc}

08008958 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f84a 	bl	80089fe <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800896a:	4602      	mov	r2, r0
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4293      	cmp	r3, r2
 8008970:	bf8c      	ite	hi
 8008972:	2301      	movhi	r3, #1
 8008974:	2300      	movls	r3, #0
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800897c:	f000 fbd2 	bl	8009124 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008980:	68b8      	ldr	r0, [r7, #8]
 8008982:	f000 fbb4 	bl	80090ee <_Znwj>
 8008986:	4603      	mov	r3, r0
      }
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f82d 	bl	8008a16 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 80089bc:	4603      	mov	r3, r0
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80089c6:	b5b0      	push	{r4, r5, r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff ff25 	bl	8008822 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80089d8:	4604      	mov	r4, r0
 80089da:	68b8      	ldr	r0, [r7, #8]
 80089dc:	f7ff ff21 	bl	8008822 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80089e0:	4605      	mov	r5, r0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fa ff64 	bl	80038b0 <_ZSt12__niter_baseIPhET_S1_>
 80089e8:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80089ea:	461a      	mov	r2, r3
 80089ec:	4629      	mov	r1, r5
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ff25 	bl	800883e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 80089f4:	4603      	mov	r3, r0
    }
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bdb0      	pop	{r4, r5, r7, pc}

080089fe <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8008a16:	b590      	push	{r4, r7, lr}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f80f 	bl	8008a46 <_ZSt12__miter_baseIPKhET_S2_>
 8008a28:	4604      	mov	r4, r0
 8008a2a:	68b8      	ldr	r0, [r7, #8]
 8008a2c:	f000 f80b 	bl	8008a46 <_ZSt12__miter_baseIPKhET_S2_>
 8008a30:	4603      	mov	r3, r0
	       __result));
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	4620      	mov	r0, r4
 8008a38:	f000 f810 	bl	8008a5c <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8008a3c:	4603      	mov	r3, r0
    }
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd90      	pop	{r4, r7, pc}

08008a46 <_ZSt12__miter_baseIPKhET_S2_>:
    __miter_base(_Iterator __it)
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008a5c:	b5b0      	push	{r4, r5, r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f813 	bl	8008a94 <_ZSt12__niter_baseIPKhET_S2_>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f000 f80f 	bl	8008a94 <_ZSt12__niter_baseIPKhET_S2_>
 8008a76:	4605      	mov	r5, r0
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fa ff19 	bl	80038b0 <_ZSt12__niter_baseIPhET_S1_>
 8008a7e:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8008a80:	461a      	mov	r2, r3
 8008a82:	4629      	mov	r1, r5
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7ff feda 	bl	800883e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8008a8a:	4603      	mov	r3, r0
    }
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bdb0      	pop	{r4, r5, r7, pc}

08008a94 <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <_Z41__static_initialization_and_destruction_0ii>:
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d10d      	bne.n	8008ad8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d108      	bne.n	8008ad8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
UartHelper uart_helper;
 8008ac6:	480f      	ldr	r0, [pc, #60]	; (8008b04 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8008ac8:	f7fe fb6e 	bl	80071a8 <_ZN10UartHelperC1Ev>
SocketClient socket_client;
 8008acc:	480e      	ldr	r0, [pc, #56]	; (8008b08 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008ace:	f7fe fa07 	bl	8006ee0 <_ZN12SocketClientC1Ev>
SLMPPacket packet;
 8008ad2:	480e      	ldr	r0, [pc, #56]	; (8008b0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008ad4:	f7fa ff9f 	bl	8003a16 <_ZN10SLMPPacketC1Ev>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10d      	bne.n	8008afa <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d108      	bne.n	8008afa <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8008ae8:	4808      	ldr	r0, [pc, #32]	; (8008b0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008aea:	f7ff f8ad 	bl	8007c48 <_ZN10SLMPPacketD1Ev>
SocketClient socket_client;
 8008aee:	4806      	ldr	r0, [pc, #24]	; (8008b08 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008af0:	f7fe fa4c 	bl	8006f8c <_ZN12SocketClientD1Ev>
UartHelper uart_helper;
 8008af4:	4803      	ldr	r0, [pc, #12]	; (8008b04 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8008af6:	f7fe fb6d 	bl	80071d4 <_ZN10UartHelperD1Ev>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200041a4 	.word	0x200041a4
 8008b08:	200041b0 	.word	0x200041b0
 8008b0c:	200041c8 	.word	0x200041c8

08008b10 <_GLOBAL__sub_I_huart>:
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b18:	2001      	movs	r0, #1
 8008b1a:	f7ff ffc7 	bl	8008aac <_Z41__static_initialization_and_destruction_0ii>
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <_GLOBAL__sub_D_huart>:
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b28:	2000      	movs	r0, #0
 8008b2a:	f7ff ffbf 	bl	8008aac <_Z41__static_initialization_and_destruction_0ii>
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b36:	2300      	movs	r3, #0
 8008b38:	607b      	str	r3, [r7, #4]
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <HAL_MspInit+0x54>)
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	4a11      	ldr	r2, [pc, #68]	; (8008b84 <HAL_MspInit+0x54>)
 8008b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b44:	6453      	str	r3, [r2, #68]	; 0x44
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <HAL_MspInit+0x54>)
 8008b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b4e:	607b      	str	r3, [r7, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b52:	2300      	movs	r3, #0
 8008b54:	603b      	str	r3, [r7, #0]
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <HAL_MspInit+0x54>)
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	4a0a      	ldr	r2, [pc, #40]	; (8008b84 <HAL_MspInit+0x54>)
 8008b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b60:	6413      	str	r3, [r2, #64]	; 0x40
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <HAL_MspInit+0x54>)
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	210f      	movs	r1, #15
 8008b72:	f06f 0001 	mvn.w	r0, #1
 8008b76:	f7f7 fe27 	bl	80007c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40023800 	.word	0x40023800

08008b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	; 0x28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	60da      	str	r2, [r3, #12]
 8008b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a19      	ldr	r2, [pc, #100]	; (8008c0c <HAL_SPI_MspInit+0x84>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d12b      	bne.n	8008c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008baa:	2300      	movs	r3, #0
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <HAL_SPI_MspInit+0x88>)
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	4a17      	ldr	r2, [pc, #92]	; (8008c10 <HAL_SPI_MspInit+0x88>)
 8008bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bba:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <HAL_SPI_MspInit+0x88>)
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc2:	613b      	str	r3, [r7, #16]
 8008bc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_SPI_MspInit+0x88>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	4a10      	ldr	r2, [pc, #64]	; (8008c10 <HAL_SPI_MspInit+0x88>)
 8008bd0:	f043 0301 	orr.w	r3, r3, #1
 8008bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	; (8008c10 <HAL_SPI_MspInit+0x88>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008be2:	23e0      	movs	r3, #224	; 0xe0
 8008be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008be6:	2302      	movs	r3, #2
 8008be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008bf2:	2305      	movs	r3, #5
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bf6:	f107 0314 	add.w	r3, r7, #20
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <HAL_SPI_MspInit+0x8c>)
 8008bfe:	f7f7 fe0d 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008c02:	bf00      	nop
 8008c04:	3728      	adds	r7, #40	; 0x28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40013000 	.word	0x40013000
 8008c10:	40023800 	.word	0x40023800
 8008c14:	40020000 	.word	0x40020000

08008c18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08c      	sub	sp, #48	; 0x30
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c20:	f107 031c 	add.w	r3, r7, #28
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	605a      	str	r2, [r3, #4]
 8008c2a:	609a      	str	r2, [r3, #8]
 8008c2c:	60da      	str	r2, [r3, #12]
 8008c2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a32      	ldr	r2, [pc, #200]	; (8008d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d12d      	bne.n	8008c96 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	4a30      	ldr	r2, [pc, #192]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	6453      	str	r3, [r2, #68]	; 0x44
 8008c4a:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	61bb      	str	r3, [r7, #24]
 8008c54:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	4b2a      	ldr	r3, [pc, #168]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	4a29      	ldr	r2, [pc, #164]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008c60:	f043 0301 	orr.w	r3, r3, #1
 8008c64:	6313      	str	r3, [r2, #48]	; 0x30
 8008c66:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c80:	2300      	movs	r3, #0
 8008c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008c84:	2301      	movs	r3, #1
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c88:	f107 031c 	add.w	r3, r7, #28
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	481e      	ldr	r0, [pc, #120]	; (8008d08 <HAL_TIM_Encoder_MspInit+0xf0>)
 8008c90:	f7f7 fdc4 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008c94:	e030      	b.n	8008cf8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d12b      	bne.n	8008cf8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	4a16      	ldr	r2, [pc, #88]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	6413      	str	r3, [r2, #64]	; 0x40
 8008cb0:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc4:	4a0f      	ldr	r2, [pc, #60]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008cc6:	f043 0301 	orr.w	r3, r3, #1
 8008cca:	6313      	str	r3, [r2, #48]	; 0x30
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cec:	f107 031c 	add.w	r3, r7, #28
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4805      	ldr	r0, [pc, #20]	; (8008d08 <HAL_TIM_Encoder_MspInit+0xf0>)
 8008cf4:	f7f7 fd92 	bl	800081c <HAL_GPIO_Init>
}
 8008cf8:	bf00      	nop
 8008cfa:	3730      	adds	r7, #48	; 0x30
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40023800 	.word	0x40023800
 8008d08:	40020000 	.word	0x40020000

08008d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a0b      	ldr	r2, [pc, #44]	; (8008d48 <HAL_TIM_Base_MspInit+0x3c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d10d      	bne.n	8008d3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <HAL_TIM_Base_MspInit+0x40>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <HAL_TIM_Base_MspInit+0x40>)
 8008d28:	f043 0302 	orr.w	r3, r3, #2
 8008d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <HAL_TIM_Base_MspInit+0x40>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008d3a:	bf00      	nop
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40000400 	.word	0x40000400
 8008d4c:	40023800 	.word	0x40023800

08008d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d58:	f107 0314 	add.w	r3, r7, #20
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	609a      	str	r2, [r3, #8]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a21      	ldr	r2, [pc, #132]	; (8008df4 <HAL_TIM_MspPostInit+0xa4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d13c      	bne.n	8008dec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
 8008d76:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <HAL_TIM_MspPostInit+0xa8>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	4a1f      	ldr	r2, [pc, #124]	; (8008df8 <HAL_TIM_MspPostInit+0xa8>)
 8008d7c:	f043 0302 	orr.w	r3, r3, #2
 8008d80:	6313      	str	r3, [r2, #48]	; 0x30
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <HAL_TIM_MspPostInit+0xa8>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	4b19      	ldr	r3, [pc, #100]	; (8008df8 <HAL_TIM_MspPostInit+0xa8>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <HAL_TIM_MspPostInit+0xa8>)
 8008d98:	f043 0304 	orr.w	r3, r3, #4
 8008d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d9e:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <HAL_TIM_MspPostInit+0xa8>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	f003 0304 	and.w	r3, r3, #4
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008daa:	2332      	movs	r3, #50	; 0x32
 8008dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dae:	2302      	movs	r3, #2
 8008db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008db6:	2300      	movs	r3, #0
 8008db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dbe:	f107 0314 	add.w	r3, r7, #20
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	480d      	ldr	r0, [pc, #52]	; (8008dfc <HAL_TIM_MspPostInit+0xac>)
 8008dc6:	f7f7 fd29 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008de0:	f107 0314 	add.w	r3, r7, #20
 8008de4:	4619      	mov	r1, r3
 8008de6:	4806      	ldr	r0, [pc, #24]	; (8008e00 <HAL_TIM_MspPostInit+0xb0>)
 8008de8:	f7f7 fd18 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008dec:	bf00      	nop
 8008dee:	3728      	adds	r7, #40	; 0x28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	40020400 	.word	0x40020400
 8008e00:	40020800 	.word	0x40020800

08008e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e0c:	f107 0314 	add.w	r3, r7, #20
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a19      	ldr	r2, [pc, #100]	; (8008e88 <HAL_UART_MspInit+0x84>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d12b      	bne.n	8008e7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <HAL_UART_MspInit+0x88>)
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	4a17      	ldr	r2, [pc, #92]	; (8008e8c <HAL_UART_MspInit+0x88>)
 8008e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e34:	6413      	str	r3, [r2, #64]	; 0x40
 8008e36:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <HAL_UART_MspInit+0x88>)
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <HAL_UART_MspInit+0x88>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	4a10      	ldr	r2, [pc, #64]	; (8008e8c <HAL_UART_MspInit+0x88>)
 8008e4c:	f043 0301 	orr.w	r3, r3, #1
 8008e50:	6313      	str	r3, [r2, #48]	; 0x30
 8008e52:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <HAL_UART_MspInit+0x88>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008e5e:	230c      	movs	r3, #12
 8008e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e62:	2302      	movs	r3, #2
 8008e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e66:	2301      	movs	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008e6e:	2307      	movs	r3, #7
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	4619      	mov	r1, r3
 8008e78:	4805      	ldr	r0, [pc, #20]	; (8008e90 <HAL_UART_MspInit+0x8c>)
 8008e7a:	f7f7 fccf 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008e7e:	bf00      	nop
 8008e80:	3728      	adds	r7, #40	; 0x28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	40004400 	.word	0x40004400
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	40020000 	.word	0x40020000

08008e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08c      	sub	sp, #48	; 0x30
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	201e      	movs	r0, #30
 8008eaa:	f7f7 fc8d 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8008eae:	201e      	movs	r0, #30
 8008eb0:	f7f7 fca6 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	4b1f      	ldr	r3, [pc, #124]	; (8008f38 <HAL_InitTick+0xa4>)
 8008eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebc:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <HAL_InitTick+0xa4>)
 8008ebe:	f043 0304 	orr.w	r3, r3, #4
 8008ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8008ec4:	4b1c      	ldr	r3, [pc, #112]	; (8008f38 <HAL_InitTick+0xa4>)
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ed0:	f107 0210 	add.w	r2, r7, #16
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7f8 fa8e 	bl	80013fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008ee0:	f7f8 fa64 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <HAL_InitTick+0xa8>)
 8008eee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef2:	0c9b      	lsrs	r3, r3, #18
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <HAL_InitTick+0xac>)
 8008efa:	4a12      	ldr	r2, [pc, #72]	; (8008f44 <HAL_InitTick+0xb0>)
 8008efc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <HAL_InitTick+0xac>)
 8008f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f04:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8008f06:	4a0e      	ldr	r2, [pc, #56]	; (8008f40 <HAL_InitTick+0xac>)
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <HAL_InitTick+0xac>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <HAL_InitTick+0xac>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8008f18:	4809      	ldr	r0, [pc, #36]	; (8008f40 <HAL_InitTick+0xac>)
 8008f1a:	f7f8 fff5 	bl	8001f08 <HAL_TIM_Base_Init>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8008f24:	4806      	ldr	r0, [pc, #24]	; (8008f40 <HAL_InitTick+0xac>)
 8008f26:	f7f9 f81a 	bl	8001f5e <HAL_TIM_Base_Start_IT>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	e000      	b.n	8008f30 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3730      	adds	r7, #48	; 0x30
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	431bde83 	.word	0x431bde83
 8008f40:	2000438c 	.word	0x2000438c
 8008f44:	40000800 	.word	0x40000800

08008f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f4c:	bf00      	nop
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f56:	b480      	push	{r7}
 8008f58:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 8008f5a:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f66:	b480      	push	{r7}
 8008f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f6a:	e7fe      	b.n	8008f6a <MemManage_Handler+0x4>

08008f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f70:	e7fe      	b.n	8008f70 <BusFault_Handler+0x4>

08008f72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f72:	b480      	push	{r7}
 8008f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f76:	e7fe      	b.n	8008f76 <UsageFault_Handler+0x4>

08008f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f7c:	bf00      	nop
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008f8a:	2004      	movs	r0, #4
 8008f8c:	f7f7 fde2 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008f90:	bf00      	nop
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008f98:	2008      	movs	r0, #8
 8008f9a:	f7f7 fddb 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008fa8:	4802      	ldr	r0, [pc, #8]	; (8008fb4 <TIM4_IRQHandler+0x10>)
 8008faa:	f7f9 f8c3 	bl	8002134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008fae:	bf00      	nop
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000438c 	.word	0x2000438c

08008fb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008fbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008fc0:	f7f7 fdc8 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8008fc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008fc8:	f7f7 fdc4 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008fcc:	bf00      	nop
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
	return 1;
 8008fd4:	2301      	movs	r3, #1
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <_kill>:

int _kill(int pid, int sig)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008fea:	f000 f8a5 	bl	8009138 <__errno>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	2316      	movs	r3, #22
 8008ff2:	6013      	str	r3, [r2, #0]
	return -1;
 8008ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <_exit>:

void _exit (int status)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ffe7 	bl	8008fe0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009012:	e7fe      	b.n	8009012 <_exit+0x12>

08009014 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800901c:	4b11      	ldr	r3, [pc, #68]	; (8009064 <_sbrk+0x50>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <_sbrk+0x16>
		heap_end = &end;
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <_sbrk+0x50>)
 8009026:	4a10      	ldr	r2, [pc, #64]	; (8009068 <_sbrk+0x54>)
 8009028:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <_sbrk+0x50>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009030:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <_sbrk+0x50>)
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4413      	add	r3, r2
 8009038:	466a      	mov	r2, sp
 800903a:	4293      	cmp	r3, r2
 800903c:	d907      	bls.n	800904e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800903e:	f000 f87b 	bl	8009138 <__errno>
 8009042:	4602      	mov	r2, r0
 8009044:	230c      	movs	r3, #12
 8009046:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800904c:	e006      	b.n	800905c <_sbrk+0x48>
	}

	heap_end += incr;
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <_sbrk+0x50>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4413      	add	r3, r2
 8009056:	4a03      	ldr	r2, [pc, #12]	; (8009064 <_sbrk+0x50>)
 8009058:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800905a:	68fb      	ldr	r3, [r7, #12]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	2000421c 	.word	0x2000421c
 8009068:	200043d0 	.word	0x200043d0

0800906c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009070:	4b08      	ldr	r3, [pc, #32]	; (8009094 <SystemInit+0x28>)
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009076:	4a07      	ldr	r2, [pc, #28]	; (8009094 <SystemInit+0x28>)
 8009078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800907c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <SystemInit+0x28>)
 8009082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009086:	609a      	str	r2, [r3, #8]
#endif
}
 8009088:	bf00      	nop
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	e000ed00 	.word	0xe000ed00

08009098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80090d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800909c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800909e:	e003      	b.n	80090a8 <LoopCopyDataInit>

080090a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80090a0:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80090a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80090a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80090a6:	3104      	adds	r1, #4

080090a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80090a8:	480b      	ldr	r0, [pc, #44]	; (80090d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80090aa:	4b0c      	ldr	r3, [pc, #48]	; (80090dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80090ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80090ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80090b0:	d3f6      	bcc.n	80090a0 <CopyDataInit>
  ldr  r2, =_sbss
 80090b2:	4a0b      	ldr	r2, [pc, #44]	; (80090e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80090b4:	e002      	b.n	80090bc <LoopFillZerobss>

080090b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80090b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80090b8:	f842 3b04 	str.w	r3, [r2], #4

080090bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80090bc:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80090be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80090c0:	d3f9      	bcc.n	80090b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80090c2:	f7ff ffd3 	bl	800906c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090c6:	f000 f83d 	bl	8009144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80090ca:	f7fe fa03 	bl	80074d4 <main>
  bx  lr    
 80090ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80090d0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80090d4:	08009d00 	.word	0x08009d00
  ldr  r0, =_sdata
 80090d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80090dc:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80090e0:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80090e4:	200043d0 	.word	0x200043d0

080090e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090e8:	e7fe      	b.n	80090e8 <ADC_IRQHandler>

080090ea <_ZdlPvj>:
 80090ea:	f000 b819 	b.w	8009120 <_ZdlPv>

080090ee <_Znwj>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	2800      	cmp	r0, #0
 80090f2:	bf14      	ite	ne
 80090f4:	4604      	movne	r4, r0
 80090f6:	2401      	moveq	r4, #1
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f847 	bl	800918c <malloc>
 80090fe:	b930      	cbnz	r0, 800910e <_Znwj+0x20>
 8009100:	f000 f806 	bl	8009110 <_ZSt15get_new_handlerv>
 8009104:	b908      	cbnz	r0, 800910a <_Znwj+0x1c>
 8009106:	f000 f810 	bl	800912a <abort>
 800910a:	4780      	blx	r0
 800910c:	e7f4      	b.n	80090f8 <_Znwj+0xa>
 800910e:	bd10      	pop	{r4, pc}

08009110 <_ZSt15get_new_handlerv>:
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <_ZSt15get_new_handlerv+0xc>)
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	f3bf 8f5b 	dmb	ish
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	20004220 	.word	0x20004220

08009120 <_ZdlPv>:
 8009120:	f000 b83c 	b.w	800919c <free>

08009124 <_ZSt17__throw_bad_allocv>:
 8009124:	b508      	push	{r3, lr}
 8009126:	f000 f800 	bl	800912a <abort>

0800912a <abort>:
 800912a:	b508      	push	{r3, lr}
 800912c:	2006      	movs	r0, #6
 800912e:	f000 f949 	bl	80093c4 <raise>
 8009132:	2001      	movs	r0, #1
 8009134:	f7ff ff64 	bl	8009000 <_exit>

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	; (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000034 	.word	0x20000034

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4e0d      	ldr	r6, [pc, #52]	; (800917c <__libc_init_array+0x38>)
 8009148:	4c0d      	ldr	r4, [pc, #52]	; (8009180 <__libc_init_array+0x3c>)
 800914a:	1ba4      	subs	r4, r4, r6
 800914c:	10a4      	asrs	r4, r4, #2
 800914e:	2500      	movs	r5, #0
 8009150:	42a5      	cmp	r5, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	4e0b      	ldr	r6, [pc, #44]	; (8009184 <__libc_init_array+0x40>)
 8009156:	4c0c      	ldr	r4, [pc, #48]	; (8009188 <__libc_init_array+0x44>)
 8009158:	f000 fc94 	bl	8009a84 <_init>
 800915c:	1ba4      	subs	r4, r4, r6
 800915e:	10a4      	asrs	r4, r4, #2
 8009160:	2500      	movs	r5, #0
 8009162:	42a5      	cmp	r5, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800916c:	4798      	blx	r3
 800916e:	3501      	adds	r5, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009176:	4798      	blx	r3
 8009178:	3501      	adds	r5, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	08009cf0 	.word	0x08009cf0
 8009180:	08009cf0 	.word	0x08009cf0
 8009184:	08009cf0 	.word	0x08009cf0
 8009188:	08009cf8 	.word	0x08009cf8

0800918c <malloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <malloc+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f000 b885 	b.w	80092a0 <_malloc_r>
 8009196:	bf00      	nop
 8009198:	20000034 	.word	0x20000034

0800919c <free>:
 800919c:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <free+0xc>)
 800919e:	4601      	mov	r1, r0
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	f000 b82f 	b.w	8009204 <_free_r>
 80091a6:	bf00      	nop
 80091a8:	20000034 	.word	0x20000034

080091ac <memcpy>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	1e43      	subs	r3, r0, #1
 80091b0:	440a      	add	r2, r1
 80091b2:	4291      	cmp	r1, r2
 80091b4:	d100      	bne.n	80091b8 <memcpy+0xc>
 80091b6:	bd10      	pop	{r4, pc}
 80091b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c0:	e7f7      	b.n	80091b2 <memcpy+0x6>

080091c2 <memmove>:
 80091c2:	4288      	cmp	r0, r1
 80091c4:	b510      	push	{r4, lr}
 80091c6:	eb01 0302 	add.w	r3, r1, r2
 80091ca:	d807      	bhi.n	80091dc <memmove+0x1a>
 80091cc:	1e42      	subs	r2, r0, #1
 80091ce:	4299      	cmp	r1, r3
 80091d0:	d00a      	beq.n	80091e8 <memmove+0x26>
 80091d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80091da:	e7f8      	b.n	80091ce <memmove+0xc>
 80091dc:	4283      	cmp	r3, r0
 80091de:	d9f5      	bls.n	80091cc <memmove+0xa>
 80091e0:	1881      	adds	r1, r0, r2
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	42d3      	cmn	r3, r2
 80091e6:	d100      	bne.n	80091ea <memmove+0x28>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80091f2:	e7f7      	b.n	80091e4 <memmove+0x22>

080091f4 <memset>:
 80091f4:	4402      	add	r2, r0
 80091f6:	4603      	mov	r3, r0
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d100      	bne.n	80091fe <memset+0xa>
 80091fc:	4770      	bx	lr
 80091fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009202:	e7f9      	b.n	80091f8 <memset+0x4>

08009204 <_free_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4605      	mov	r5, r0
 8009208:	2900      	cmp	r1, #0
 800920a:	d045      	beq.n	8009298 <_free_r+0x94>
 800920c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009210:	1f0c      	subs	r4, r1, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfb8      	it	lt
 8009216:	18e4      	addlt	r4, r4, r3
 8009218:	f000 f92a 	bl	8009470 <__malloc_lock>
 800921c:	4a1f      	ldr	r2, [pc, #124]	; (800929c <_free_r+0x98>)
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	4610      	mov	r0, r2
 8009222:	b933      	cbnz	r3, 8009232 <_free_r+0x2e>
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	6014      	str	r4, [r2, #0]
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800922e:	f000 b920 	b.w	8009472 <__malloc_unlock>
 8009232:	42a3      	cmp	r3, r4
 8009234:	d90c      	bls.n	8009250 <_free_r+0x4c>
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	1862      	adds	r2, r4, r1
 800923a:	4293      	cmp	r3, r2
 800923c:	bf04      	itt	eq
 800923e:	681a      	ldreq	r2, [r3, #0]
 8009240:	685b      	ldreq	r3, [r3, #4]
 8009242:	6063      	str	r3, [r4, #4]
 8009244:	bf04      	itt	eq
 8009246:	1852      	addeq	r2, r2, r1
 8009248:	6022      	streq	r2, [r4, #0]
 800924a:	6004      	str	r4, [r0, #0]
 800924c:	e7ec      	b.n	8009228 <_free_r+0x24>
 800924e:	4613      	mov	r3, r2
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	b10a      	cbz	r2, 8009258 <_free_r+0x54>
 8009254:	42a2      	cmp	r2, r4
 8009256:	d9fa      	bls.n	800924e <_free_r+0x4a>
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	1858      	adds	r0, r3, r1
 800925c:	42a0      	cmp	r0, r4
 800925e:	d10b      	bne.n	8009278 <_free_r+0x74>
 8009260:	6820      	ldr	r0, [r4, #0]
 8009262:	4401      	add	r1, r0
 8009264:	1858      	adds	r0, r3, r1
 8009266:	4282      	cmp	r2, r0
 8009268:	6019      	str	r1, [r3, #0]
 800926a:	d1dd      	bne.n	8009228 <_free_r+0x24>
 800926c:	6810      	ldr	r0, [r2, #0]
 800926e:	6852      	ldr	r2, [r2, #4]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	4401      	add	r1, r0
 8009274:	6019      	str	r1, [r3, #0]
 8009276:	e7d7      	b.n	8009228 <_free_r+0x24>
 8009278:	d902      	bls.n	8009280 <_free_r+0x7c>
 800927a:	230c      	movs	r3, #12
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	e7d3      	b.n	8009228 <_free_r+0x24>
 8009280:	6820      	ldr	r0, [r4, #0]
 8009282:	1821      	adds	r1, r4, r0
 8009284:	428a      	cmp	r2, r1
 8009286:	bf04      	itt	eq
 8009288:	6811      	ldreq	r1, [r2, #0]
 800928a:	6852      	ldreq	r2, [r2, #4]
 800928c:	6062      	str	r2, [r4, #4]
 800928e:	bf04      	itt	eq
 8009290:	1809      	addeq	r1, r1, r0
 8009292:	6021      	streq	r1, [r4, #0]
 8009294:	605c      	str	r4, [r3, #4]
 8009296:	e7c7      	b.n	8009228 <_free_r+0x24>
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	20004224 	.word	0x20004224

080092a0 <_malloc_r>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	1ccd      	adds	r5, r1, #3
 80092a4:	f025 0503 	bic.w	r5, r5, #3
 80092a8:	3508      	adds	r5, #8
 80092aa:	2d0c      	cmp	r5, #12
 80092ac:	bf38      	it	cc
 80092ae:	250c      	movcc	r5, #12
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	db01      	blt.n	80092ba <_malloc_r+0x1a>
 80092b6:	42a9      	cmp	r1, r5
 80092b8:	d903      	bls.n	80092c2 <_malloc_r+0x22>
 80092ba:	230c      	movs	r3, #12
 80092bc:	6033      	str	r3, [r6, #0]
 80092be:	2000      	movs	r0, #0
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
 80092c2:	f000 f8d5 	bl	8009470 <__malloc_lock>
 80092c6:	4a21      	ldr	r2, [pc, #132]	; (800934c <_malloc_r+0xac>)
 80092c8:	6814      	ldr	r4, [r2, #0]
 80092ca:	4621      	mov	r1, r4
 80092cc:	b991      	cbnz	r1, 80092f4 <_malloc_r+0x54>
 80092ce:	4c20      	ldr	r4, [pc, #128]	; (8009350 <_malloc_r+0xb0>)
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	b91b      	cbnz	r3, 80092dc <_malloc_r+0x3c>
 80092d4:	4630      	mov	r0, r6
 80092d6:	f000 f83d 	bl	8009354 <_sbrk_r>
 80092da:	6020      	str	r0, [r4, #0]
 80092dc:	4629      	mov	r1, r5
 80092de:	4630      	mov	r0, r6
 80092e0:	f000 f838 	bl	8009354 <_sbrk_r>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d124      	bne.n	8009332 <_malloc_r+0x92>
 80092e8:	230c      	movs	r3, #12
 80092ea:	6033      	str	r3, [r6, #0]
 80092ec:	4630      	mov	r0, r6
 80092ee:	f000 f8c0 	bl	8009472 <__malloc_unlock>
 80092f2:	e7e4      	b.n	80092be <_malloc_r+0x1e>
 80092f4:	680b      	ldr	r3, [r1, #0]
 80092f6:	1b5b      	subs	r3, r3, r5
 80092f8:	d418      	bmi.n	800932c <_malloc_r+0x8c>
 80092fa:	2b0b      	cmp	r3, #11
 80092fc:	d90f      	bls.n	800931e <_malloc_r+0x7e>
 80092fe:	600b      	str	r3, [r1, #0]
 8009300:	50cd      	str	r5, [r1, r3]
 8009302:	18cc      	adds	r4, r1, r3
 8009304:	4630      	mov	r0, r6
 8009306:	f000 f8b4 	bl	8009472 <__malloc_unlock>
 800930a:	f104 000b 	add.w	r0, r4, #11
 800930e:	1d23      	adds	r3, r4, #4
 8009310:	f020 0007 	bic.w	r0, r0, #7
 8009314:	1ac3      	subs	r3, r0, r3
 8009316:	d0d3      	beq.n	80092c0 <_malloc_r+0x20>
 8009318:	425a      	negs	r2, r3
 800931a:	50e2      	str	r2, [r4, r3]
 800931c:	e7d0      	b.n	80092c0 <_malloc_r+0x20>
 800931e:	428c      	cmp	r4, r1
 8009320:	684b      	ldr	r3, [r1, #4]
 8009322:	bf16      	itet	ne
 8009324:	6063      	strne	r3, [r4, #4]
 8009326:	6013      	streq	r3, [r2, #0]
 8009328:	460c      	movne	r4, r1
 800932a:	e7eb      	b.n	8009304 <_malloc_r+0x64>
 800932c:	460c      	mov	r4, r1
 800932e:	6849      	ldr	r1, [r1, #4]
 8009330:	e7cc      	b.n	80092cc <_malloc_r+0x2c>
 8009332:	1cc4      	adds	r4, r0, #3
 8009334:	f024 0403 	bic.w	r4, r4, #3
 8009338:	42a0      	cmp	r0, r4
 800933a:	d005      	beq.n	8009348 <_malloc_r+0xa8>
 800933c:	1a21      	subs	r1, r4, r0
 800933e:	4630      	mov	r0, r6
 8009340:	f000 f808 	bl	8009354 <_sbrk_r>
 8009344:	3001      	adds	r0, #1
 8009346:	d0cf      	beq.n	80092e8 <_malloc_r+0x48>
 8009348:	6025      	str	r5, [r4, #0]
 800934a:	e7db      	b.n	8009304 <_malloc_r+0x64>
 800934c:	20004224 	.word	0x20004224
 8009350:	20004228 	.word	0x20004228

08009354 <_sbrk_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4c06      	ldr	r4, [pc, #24]	; (8009370 <_sbrk_r+0x1c>)
 8009358:	2300      	movs	r3, #0
 800935a:	4605      	mov	r5, r0
 800935c:	4608      	mov	r0, r1
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	f7ff fe58 	bl	8009014 <_sbrk>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_sbrk_r+0x1a>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	b103      	cbz	r3, 800936e <_sbrk_r+0x1a>
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	200043cc 	.word	0x200043cc

08009374 <_raise_r>:
 8009374:	291f      	cmp	r1, #31
 8009376:	b538      	push	{r3, r4, r5, lr}
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	d904      	bls.n	8009388 <_raise_r+0x14>
 800937e:	2316      	movs	r3, #22
 8009380:	6003      	str	r3, [r0, #0]
 8009382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800938a:	b112      	cbz	r2, 8009392 <_raise_r+0x1e>
 800938c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009390:	b94b      	cbnz	r3, 80093a6 <_raise_r+0x32>
 8009392:	4620      	mov	r0, r4
 8009394:	f000 f830 	bl	80093f8 <_getpid_r>
 8009398:	462a      	mov	r2, r5
 800939a:	4601      	mov	r1, r0
 800939c:	4620      	mov	r0, r4
 800939e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a2:	f000 b817 	b.w	80093d4 <_kill_r>
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d00a      	beq.n	80093c0 <_raise_r+0x4c>
 80093aa:	1c59      	adds	r1, r3, #1
 80093ac:	d103      	bne.n	80093b6 <_raise_r+0x42>
 80093ae:	2316      	movs	r3, #22
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7e7      	b.n	8009386 <_raise_r+0x12>
 80093b6:	2400      	movs	r4, #0
 80093b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093bc:	4628      	mov	r0, r5
 80093be:	4798      	blx	r3
 80093c0:	2000      	movs	r0, #0
 80093c2:	e7e0      	b.n	8009386 <_raise_r+0x12>

080093c4 <raise>:
 80093c4:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <raise+0xc>)
 80093c6:	4601      	mov	r1, r0
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	f7ff bfd3 	b.w	8009374 <_raise_r>
 80093ce:	bf00      	nop
 80093d0:	20000034 	.word	0x20000034

080093d4 <_kill_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4c07      	ldr	r4, [pc, #28]	; (80093f4 <_kill_r+0x20>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4605      	mov	r5, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	4611      	mov	r1, r2
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	f7ff fdfd 	bl	8008fe0 <_kill>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	d102      	bne.n	80093f0 <_kill_r+0x1c>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	b103      	cbz	r3, 80093f0 <_kill_r+0x1c>
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	bf00      	nop
 80093f4:	200043cc 	.word	0x200043cc

080093f8 <_getpid_r>:
 80093f8:	f7ff bdea 	b.w	8008fd0 <_getpid>

080093fc <_vsniprintf_r>:
 80093fc:	b530      	push	{r4, r5, lr}
 80093fe:	1e14      	subs	r4, r2, #0
 8009400:	4605      	mov	r5, r0
 8009402:	b09b      	sub	sp, #108	; 0x6c
 8009404:	4618      	mov	r0, r3
 8009406:	da05      	bge.n	8009414 <_vsniprintf_r+0x18>
 8009408:	238b      	movs	r3, #139	; 0x8b
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009410:	b01b      	add	sp, #108	; 0x6c
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009418:	f8ad 300c 	strh.w	r3, [sp, #12]
 800941c:	bf14      	ite	ne
 800941e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009422:	4623      	moveq	r3, r4
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	9305      	str	r3, [sp, #20]
 8009428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800942c:	9100      	str	r1, [sp, #0]
 800942e:	9104      	str	r1, [sp, #16]
 8009430:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009434:	4602      	mov	r2, r0
 8009436:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009438:	4669      	mov	r1, sp
 800943a:	4628      	mov	r0, r5
 800943c:	f000 f874 	bl	8009528 <_svfiprintf_r>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	bfbc      	itt	lt
 8009444:	238b      	movlt	r3, #139	; 0x8b
 8009446:	602b      	strlt	r3, [r5, #0]
 8009448:	2c00      	cmp	r4, #0
 800944a:	d0e1      	beq.n	8009410 <_vsniprintf_r+0x14>
 800944c:	9b00      	ldr	r3, [sp, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	e7dd      	b.n	8009410 <_vsniprintf_r+0x14>

08009454 <vsniprintf>:
 8009454:	b507      	push	{r0, r1, r2, lr}
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	4613      	mov	r3, r2
 800945a:	460a      	mov	r2, r1
 800945c:	4601      	mov	r1, r0
 800945e:	4803      	ldr	r0, [pc, #12]	; (800946c <vsniprintf+0x18>)
 8009460:	6800      	ldr	r0, [r0, #0]
 8009462:	f7ff ffcb 	bl	80093fc <_vsniprintf_r>
 8009466:	b003      	add	sp, #12
 8009468:	f85d fb04 	ldr.w	pc, [sp], #4
 800946c:	20000034 	.word	0x20000034

08009470 <__malloc_lock>:
 8009470:	4770      	bx	lr

08009472 <__malloc_unlock>:
 8009472:	4770      	bx	lr

08009474 <__ssputs_r>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	688e      	ldr	r6, [r1, #8]
 800947a:	429e      	cmp	r6, r3
 800947c:	4682      	mov	sl, r0
 800947e:	460c      	mov	r4, r1
 8009480:	4690      	mov	r8, r2
 8009482:	4699      	mov	r9, r3
 8009484:	d837      	bhi.n	80094f6 <__ssputs_r+0x82>
 8009486:	898a      	ldrh	r2, [r1, #12]
 8009488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800948c:	d031      	beq.n	80094f2 <__ssputs_r+0x7e>
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	6909      	ldr	r1, [r1, #16]
 8009492:	1a6f      	subs	r7, r5, r1
 8009494:	6965      	ldr	r5, [r4, #20]
 8009496:	2302      	movs	r3, #2
 8009498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800949c:	fb95 f5f3 	sdiv	r5, r5, r3
 80094a0:	f109 0301 	add.w	r3, r9, #1
 80094a4:	443b      	add	r3, r7
 80094a6:	429d      	cmp	r5, r3
 80094a8:	bf38      	it	cc
 80094aa:	461d      	movcc	r5, r3
 80094ac:	0553      	lsls	r3, r2, #21
 80094ae:	d530      	bpl.n	8009512 <__ssputs_r+0x9e>
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7ff fef5 	bl	80092a0 <_malloc_r>
 80094b6:	4606      	mov	r6, r0
 80094b8:	b950      	cbnz	r0, 80094d0 <__ssputs_r+0x5c>
 80094ba:	230c      	movs	r3, #12
 80094bc:	f8ca 3000 	str.w	r3, [sl]
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d0:	463a      	mov	r2, r7
 80094d2:	6921      	ldr	r1, [r4, #16]
 80094d4:	f7ff fe6a 	bl	80091ac <memcpy>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	6126      	str	r6, [r4, #16]
 80094e6:	6165      	str	r5, [r4, #20]
 80094e8:	443e      	add	r6, r7
 80094ea:	1bed      	subs	r5, r5, r7
 80094ec:	6026      	str	r6, [r4, #0]
 80094ee:	60a5      	str	r5, [r4, #8]
 80094f0:	464e      	mov	r6, r9
 80094f2:	454e      	cmp	r6, r9
 80094f4:	d900      	bls.n	80094f8 <__ssputs_r+0x84>
 80094f6:	464e      	mov	r6, r9
 80094f8:	4632      	mov	r2, r6
 80094fa:	4641      	mov	r1, r8
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	f7ff fe60 	bl	80091c2 <memmove>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	1b9b      	subs	r3, r3, r6
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	441e      	add	r6, r3
 800950c:	6026      	str	r6, [r4, #0]
 800950e:	2000      	movs	r0, #0
 8009510:	e7dc      	b.n	80094cc <__ssputs_r+0x58>
 8009512:	462a      	mov	r2, r5
 8009514:	f000 fa88 	bl	8009a28 <_realloc_r>
 8009518:	4606      	mov	r6, r0
 800951a:	2800      	cmp	r0, #0
 800951c:	d1e2      	bne.n	80094e4 <__ssputs_r+0x70>
 800951e:	6921      	ldr	r1, [r4, #16]
 8009520:	4650      	mov	r0, sl
 8009522:	f7ff fe6f 	bl	8009204 <_free_r>
 8009526:	e7c8      	b.n	80094ba <__ssputs_r+0x46>

08009528 <_svfiprintf_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	461d      	mov	r5, r3
 800952e:	898b      	ldrh	r3, [r1, #12]
 8009530:	061f      	lsls	r7, r3, #24
 8009532:	b09d      	sub	sp, #116	; 0x74
 8009534:	4680      	mov	r8, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4616      	mov	r6, r2
 800953a:	d50f      	bpl.n	800955c <_svfiprintf_r+0x34>
 800953c:	690b      	ldr	r3, [r1, #16]
 800953e:	b96b      	cbnz	r3, 800955c <_svfiprintf_r+0x34>
 8009540:	2140      	movs	r1, #64	; 0x40
 8009542:	f7ff fead 	bl	80092a0 <_malloc_r>
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	6120      	str	r0, [r4, #16]
 800954a:	b928      	cbnz	r0, 8009558 <_svfiprintf_r+0x30>
 800954c:	230c      	movs	r3, #12
 800954e:	f8c8 3000 	str.w	r3, [r8]
 8009552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009556:	e0c8      	b.n	80096ea <_svfiprintf_r+0x1c2>
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	6163      	str	r3, [r4, #20]
 800955c:	2300      	movs	r3, #0
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	2320      	movs	r3, #32
 8009562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009566:	2330      	movs	r3, #48	; 0x30
 8009568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800956c:	9503      	str	r5, [sp, #12]
 800956e:	f04f 0b01 	mov.w	fp, #1
 8009572:	4637      	mov	r7, r6
 8009574:	463d      	mov	r5, r7
 8009576:	f815 3b01 	ldrb.w	r3, [r5], #1
 800957a:	b10b      	cbz	r3, 8009580 <_svfiprintf_r+0x58>
 800957c:	2b25      	cmp	r3, #37	; 0x25
 800957e:	d13e      	bne.n	80095fe <_svfiprintf_r+0xd6>
 8009580:	ebb7 0a06 	subs.w	sl, r7, r6
 8009584:	d00b      	beq.n	800959e <_svfiprintf_r+0x76>
 8009586:	4653      	mov	r3, sl
 8009588:	4632      	mov	r2, r6
 800958a:	4621      	mov	r1, r4
 800958c:	4640      	mov	r0, r8
 800958e:	f7ff ff71 	bl	8009474 <__ssputs_r>
 8009592:	3001      	adds	r0, #1
 8009594:	f000 80a4 	beq.w	80096e0 <_svfiprintf_r+0x1b8>
 8009598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959a:	4453      	add	r3, sl
 800959c:	9309      	str	r3, [sp, #36]	; 0x24
 800959e:	783b      	ldrb	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 809d 	beq.w	80096e0 <_svfiprintf_r+0x1b8>
 80095a6:	2300      	movs	r3, #0
 80095a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	9307      	str	r3, [sp, #28]
 80095b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b8:	931a      	str	r3, [sp, #104]	; 0x68
 80095ba:	462f      	mov	r7, r5
 80095bc:	2205      	movs	r2, #5
 80095be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80095c2:	4850      	ldr	r0, [pc, #320]	; (8009704 <_svfiprintf_r+0x1dc>)
 80095c4:	f7f6 fe14 	bl	80001f0 <memchr>
 80095c8:	9b04      	ldr	r3, [sp, #16]
 80095ca:	b9d0      	cbnz	r0, 8009602 <_svfiprintf_r+0xda>
 80095cc:	06d9      	lsls	r1, r3, #27
 80095ce:	bf44      	itt	mi
 80095d0:	2220      	movmi	r2, #32
 80095d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095d6:	071a      	lsls	r2, r3, #28
 80095d8:	bf44      	itt	mi
 80095da:	222b      	movmi	r2, #43	; 0x2b
 80095dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095e0:	782a      	ldrb	r2, [r5, #0]
 80095e2:	2a2a      	cmp	r2, #42	; 0x2a
 80095e4:	d015      	beq.n	8009612 <_svfiprintf_r+0xea>
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	462f      	mov	r7, r5
 80095ea:	2000      	movs	r0, #0
 80095ec:	250a      	movs	r5, #10
 80095ee:	4639      	mov	r1, r7
 80095f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f4:	3b30      	subs	r3, #48	; 0x30
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	d94d      	bls.n	8009696 <_svfiprintf_r+0x16e>
 80095fa:	b1b8      	cbz	r0, 800962c <_svfiprintf_r+0x104>
 80095fc:	e00f      	b.n	800961e <_svfiprintf_r+0xf6>
 80095fe:	462f      	mov	r7, r5
 8009600:	e7b8      	b.n	8009574 <_svfiprintf_r+0x4c>
 8009602:	4a40      	ldr	r2, [pc, #256]	; (8009704 <_svfiprintf_r+0x1dc>)
 8009604:	1a80      	subs	r0, r0, r2
 8009606:	fa0b f000 	lsl.w	r0, fp, r0
 800960a:	4318      	orrs	r0, r3
 800960c:	9004      	str	r0, [sp, #16]
 800960e:	463d      	mov	r5, r7
 8009610:	e7d3      	b.n	80095ba <_svfiprintf_r+0x92>
 8009612:	9a03      	ldr	r2, [sp, #12]
 8009614:	1d11      	adds	r1, r2, #4
 8009616:	6812      	ldr	r2, [r2, #0]
 8009618:	9103      	str	r1, [sp, #12]
 800961a:	2a00      	cmp	r2, #0
 800961c:	db01      	blt.n	8009622 <_svfiprintf_r+0xfa>
 800961e:	9207      	str	r2, [sp, #28]
 8009620:	e004      	b.n	800962c <_svfiprintf_r+0x104>
 8009622:	4252      	negs	r2, r2
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	9207      	str	r2, [sp, #28]
 800962a:	9304      	str	r3, [sp, #16]
 800962c:	783b      	ldrb	r3, [r7, #0]
 800962e:	2b2e      	cmp	r3, #46	; 0x2e
 8009630:	d10c      	bne.n	800964c <_svfiprintf_r+0x124>
 8009632:	787b      	ldrb	r3, [r7, #1]
 8009634:	2b2a      	cmp	r3, #42	; 0x2a
 8009636:	d133      	bne.n	80096a0 <_svfiprintf_r+0x178>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9203      	str	r2, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfb8      	it	lt
 8009644:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009648:	3702      	adds	r7, #2
 800964a:	9305      	str	r3, [sp, #20]
 800964c:	4d2e      	ldr	r5, [pc, #184]	; (8009708 <_svfiprintf_r+0x1e0>)
 800964e:	7839      	ldrb	r1, [r7, #0]
 8009650:	2203      	movs	r2, #3
 8009652:	4628      	mov	r0, r5
 8009654:	f7f6 fdcc 	bl	80001f0 <memchr>
 8009658:	b138      	cbz	r0, 800966a <_svfiprintf_r+0x142>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	1b40      	subs	r0, r0, r5
 800965e:	fa03 f000 	lsl.w	r0, r3, r0
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	4303      	orrs	r3, r0
 8009666:	3701      	adds	r7, #1
 8009668:	9304      	str	r3, [sp, #16]
 800966a:	7839      	ldrb	r1, [r7, #0]
 800966c:	4827      	ldr	r0, [pc, #156]	; (800970c <_svfiprintf_r+0x1e4>)
 800966e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009672:	2206      	movs	r2, #6
 8009674:	1c7e      	adds	r6, r7, #1
 8009676:	f7f6 fdbb 	bl	80001f0 <memchr>
 800967a:	2800      	cmp	r0, #0
 800967c:	d038      	beq.n	80096f0 <_svfiprintf_r+0x1c8>
 800967e:	4b24      	ldr	r3, [pc, #144]	; (8009710 <_svfiprintf_r+0x1e8>)
 8009680:	bb13      	cbnz	r3, 80096c8 <_svfiprintf_r+0x1a0>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	3307      	adds	r3, #7
 8009686:	f023 0307 	bic.w	r3, r3, #7
 800968a:	3308      	adds	r3, #8
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009690:	444b      	add	r3, r9
 8009692:	9309      	str	r3, [sp, #36]	; 0x24
 8009694:	e76d      	b.n	8009572 <_svfiprintf_r+0x4a>
 8009696:	fb05 3202 	mla	r2, r5, r2, r3
 800969a:	2001      	movs	r0, #1
 800969c:	460f      	mov	r7, r1
 800969e:	e7a6      	b.n	80095ee <_svfiprintf_r+0xc6>
 80096a0:	2300      	movs	r3, #0
 80096a2:	3701      	adds	r7, #1
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	4619      	mov	r1, r3
 80096a8:	250a      	movs	r5, #10
 80096aa:	4638      	mov	r0, r7
 80096ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b0:	3a30      	subs	r2, #48	; 0x30
 80096b2:	2a09      	cmp	r2, #9
 80096b4:	d903      	bls.n	80096be <_svfiprintf_r+0x196>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c8      	beq.n	800964c <_svfiprintf_r+0x124>
 80096ba:	9105      	str	r1, [sp, #20]
 80096bc:	e7c6      	b.n	800964c <_svfiprintf_r+0x124>
 80096be:	fb05 2101 	mla	r1, r5, r1, r2
 80096c2:	2301      	movs	r3, #1
 80096c4:	4607      	mov	r7, r0
 80096c6:	e7f0      	b.n	80096aa <_svfiprintf_r+0x182>
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	4622      	mov	r2, r4
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <_svfiprintf_r+0x1ec>)
 80096d0:	a904      	add	r1, sp, #16
 80096d2:	4640      	mov	r0, r8
 80096d4:	f3af 8000 	nop.w
 80096d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80096dc:	4681      	mov	r9, r0
 80096de:	d1d6      	bne.n	800968e <_svfiprintf_r+0x166>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	065b      	lsls	r3, r3, #25
 80096e4:	f53f af35 	bmi.w	8009552 <_svfiprintf_r+0x2a>
 80096e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ea:	b01d      	add	sp, #116	; 0x74
 80096ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	ab03      	add	r3, sp, #12
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	4622      	mov	r2, r4
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <_svfiprintf_r+0x1ec>)
 80096f8:	a904      	add	r1, sp, #16
 80096fa:	4640      	mov	r0, r8
 80096fc:	f000 f882 	bl	8009804 <_printf_i>
 8009700:	e7ea      	b.n	80096d8 <_svfiprintf_r+0x1b0>
 8009702:	bf00      	nop
 8009704:	08009cb4 	.word	0x08009cb4
 8009708:	08009cba 	.word	0x08009cba
 800970c:	08009cbe 	.word	0x08009cbe
 8009710:	00000000 	.word	0x00000000
 8009714:	08009475 	.word	0x08009475

08009718 <_printf_common>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	4691      	mov	r9, r2
 800971e:	461f      	mov	r7, r3
 8009720:	688a      	ldr	r2, [r1, #8]
 8009722:	690b      	ldr	r3, [r1, #16]
 8009724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009728:	4293      	cmp	r3, r2
 800972a:	bfb8      	it	lt
 800972c:	4613      	movlt	r3, r2
 800972e:	f8c9 3000 	str.w	r3, [r9]
 8009732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009736:	4606      	mov	r6, r0
 8009738:	460c      	mov	r4, r1
 800973a:	b112      	cbz	r2, 8009742 <_printf_common+0x2a>
 800973c:	3301      	adds	r3, #1
 800973e:	f8c9 3000 	str.w	r3, [r9]
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	0699      	lsls	r1, r3, #26
 8009746:	bf42      	ittt	mi
 8009748:	f8d9 3000 	ldrmi.w	r3, [r9]
 800974c:	3302      	addmi	r3, #2
 800974e:	f8c9 3000 	strmi.w	r3, [r9]
 8009752:	6825      	ldr	r5, [r4, #0]
 8009754:	f015 0506 	ands.w	r5, r5, #6
 8009758:	d107      	bne.n	800976a <_printf_common+0x52>
 800975a:	f104 0a19 	add.w	sl, r4, #25
 800975e:	68e3      	ldr	r3, [r4, #12]
 8009760:	f8d9 2000 	ldr.w	r2, [r9]
 8009764:	1a9b      	subs	r3, r3, r2
 8009766:	42ab      	cmp	r3, r5
 8009768:	dc28      	bgt.n	80097bc <_printf_common+0xa4>
 800976a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	3300      	adds	r3, #0
 8009772:	bf18      	it	ne
 8009774:	2301      	movne	r3, #1
 8009776:	0692      	lsls	r2, r2, #26
 8009778:	d42d      	bmi.n	80097d6 <_printf_common+0xbe>
 800977a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800977e:	4639      	mov	r1, r7
 8009780:	4630      	mov	r0, r6
 8009782:	47c0      	blx	r8
 8009784:	3001      	adds	r0, #1
 8009786:	d020      	beq.n	80097ca <_printf_common+0xb2>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	68e5      	ldr	r5, [r4, #12]
 800978c:	f8d9 2000 	ldr.w	r2, [r9]
 8009790:	f003 0306 	and.w	r3, r3, #6
 8009794:	2b04      	cmp	r3, #4
 8009796:	bf08      	it	eq
 8009798:	1aad      	subeq	r5, r5, r2
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	6922      	ldr	r2, [r4, #16]
 800979e:	bf0c      	ite	eq
 80097a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097a4:	2500      	movne	r5, #0
 80097a6:	4293      	cmp	r3, r2
 80097a8:	bfc4      	itt	gt
 80097aa:	1a9b      	subgt	r3, r3, r2
 80097ac:	18ed      	addgt	r5, r5, r3
 80097ae:	f04f 0900 	mov.w	r9, #0
 80097b2:	341a      	adds	r4, #26
 80097b4:	454d      	cmp	r5, r9
 80097b6:	d11a      	bne.n	80097ee <_printf_common+0xd6>
 80097b8:	2000      	movs	r0, #0
 80097ba:	e008      	b.n	80097ce <_printf_common+0xb6>
 80097bc:	2301      	movs	r3, #1
 80097be:	4652      	mov	r2, sl
 80097c0:	4639      	mov	r1, r7
 80097c2:	4630      	mov	r0, r6
 80097c4:	47c0      	blx	r8
 80097c6:	3001      	adds	r0, #1
 80097c8:	d103      	bne.n	80097d2 <_printf_common+0xba>
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	3501      	adds	r5, #1
 80097d4:	e7c3      	b.n	800975e <_printf_common+0x46>
 80097d6:	18e1      	adds	r1, r4, r3
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	2030      	movs	r0, #48	; 0x30
 80097dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097e0:	4422      	add	r2, r4
 80097e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097ea:	3302      	adds	r3, #2
 80097ec:	e7c5      	b.n	800977a <_printf_common+0x62>
 80097ee:	2301      	movs	r3, #1
 80097f0:	4622      	mov	r2, r4
 80097f2:	4639      	mov	r1, r7
 80097f4:	4630      	mov	r0, r6
 80097f6:	47c0      	blx	r8
 80097f8:	3001      	adds	r0, #1
 80097fa:	d0e6      	beq.n	80097ca <_printf_common+0xb2>
 80097fc:	f109 0901 	add.w	r9, r9, #1
 8009800:	e7d8      	b.n	80097b4 <_printf_common+0x9c>
	...

08009804 <_printf_i>:
 8009804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009808:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800980c:	460c      	mov	r4, r1
 800980e:	7e09      	ldrb	r1, [r1, #24]
 8009810:	b085      	sub	sp, #20
 8009812:	296e      	cmp	r1, #110	; 0x6e
 8009814:	4617      	mov	r7, r2
 8009816:	4606      	mov	r6, r0
 8009818:	4698      	mov	r8, r3
 800981a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800981c:	f000 80b3 	beq.w	8009986 <_printf_i+0x182>
 8009820:	d822      	bhi.n	8009868 <_printf_i+0x64>
 8009822:	2963      	cmp	r1, #99	; 0x63
 8009824:	d036      	beq.n	8009894 <_printf_i+0x90>
 8009826:	d80a      	bhi.n	800983e <_printf_i+0x3a>
 8009828:	2900      	cmp	r1, #0
 800982a:	f000 80b9 	beq.w	80099a0 <_printf_i+0x19c>
 800982e:	2958      	cmp	r1, #88	; 0x58
 8009830:	f000 8083 	beq.w	800993a <_printf_i+0x136>
 8009834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009838:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800983c:	e032      	b.n	80098a4 <_printf_i+0xa0>
 800983e:	2964      	cmp	r1, #100	; 0x64
 8009840:	d001      	beq.n	8009846 <_printf_i+0x42>
 8009842:	2969      	cmp	r1, #105	; 0x69
 8009844:	d1f6      	bne.n	8009834 <_printf_i+0x30>
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	6813      	ldr	r3, [r2, #0]
 800984a:	0605      	lsls	r5, r0, #24
 800984c:	f103 0104 	add.w	r1, r3, #4
 8009850:	d52a      	bpl.n	80098a8 <_printf_i+0xa4>
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6011      	str	r1, [r2, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	da03      	bge.n	8009862 <_printf_i+0x5e>
 800985a:	222d      	movs	r2, #45	; 0x2d
 800985c:	425b      	negs	r3, r3
 800985e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009862:	486f      	ldr	r0, [pc, #444]	; (8009a20 <_printf_i+0x21c>)
 8009864:	220a      	movs	r2, #10
 8009866:	e039      	b.n	80098dc <_printf_i+0xd8>
 8009868:	2973      	cmp	r1, #115	; 0x73
 800986a:	f000 809d 	beq.w	80099a8 <_printf_i+0x1a4>
 800986e:	d808      	bhi.n	8009882 <_printf_i+0x7e>
 8009870:	296f      	cmp	r1, #111	; 0x6f
 8009872:	d020      	beq.n	80098b6 <_printf_i+0xb2>
 8009874:	2970      	cmp	r1, #112	; 0x70
 8009876:	d1dd      	bne.n	8009834 <_printf_i+0x30>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	f043 0320 	orr.w	r3, r3, #32
 800987e:	6023      	str	r3, [r4, #0]
 8009880:	e003      	b.n	800988a <_printf_i+0x86>
 8009882:	2975      	cmp	r1, #117	; 0x75
 8009884:	d017      	beq.n	80098b6 <_printf_i+0xb2>
 8009886:	2978      	cmp	r1, #120	; 0x78
 8009888:	d1d4      	bne.n	8009834 <_printf_i+0x30>
 800988a:	2378      	movs	r3, #120	; 0x78
 800988c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009890:	4864      	ldr	r0, [pc, #400]	; (8009a24 <_printf_i+0x220>)
 8009892:	e055      	b.n	8009940 <_printf_i+0x13c>
 8009894:	6813      	ldr	r3, [r2, #0]
 8009896:	1d19      	adds	r1, r3, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6011      	str	r1, [r2, #0]
 800989c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098a4:	2301      	movs	r3, #1
 80098a6:	e08c      	b.n	80099c2 <_printf_i+0x1be>
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6011      	str	r1, [r2, #0]
 80098ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098b0:	bf18      	it	ne
 80098b2:	b21b      	sxthne	r3, r3
 80098b4:	e7cf      	b.n	8009856 <_printf_i+0x52>
 80098b6:	6813      	ldr	r3, [r2, #0]
 80098b8:	6825      	ldr	r5, [r4, #0]
 80098ba:	1d18      	adds	r0, r3, #4
 80098bc:	6010      	str	r0, [r2, #0]
 80098be:	0628      	lsls	r0, r5, #24
 80098c0:	d501      	bpl.n	80098c6 <_printf_i+0xc2>
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	e002      	b.n	80098cc <_printf_i+0xc8>
 80098c6:	0668      	lsls	r0, r5, #25
 80098c8:	d5fb      	bpl.n	80098c2 <_printf_i+0xbe>
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	4854      	ldr	r0, [pc, #336]	; (8009a20 <_printf_i+0x21c>)
 80098ce:	296f      	cmp	r1, #111	; 0x6f
 80098d0:	bf14      	ite	ne
 80098d2:	220a      	movne	r2, #10
 80098d4:	2208      	moveq	r2, #8
 80098d6:	2100      	movs	r1, #0
 80098d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098dc:	6865      	ldr	r5, [r4, #4]
 80098de:	60a5      	str	r5, [r4, #8]
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	f2c0 8095 	blt.w	8009a10 <_printf_i+0x20c>
 80098e6:	6821      	ldr	r1, [r4, #0]
 80098e8:	f021 0104 	bic.w	r1, r1, #4
 80098ec:	6021      	str	r1, [r4, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d13d      	bne.n	800996e <_printf_i+0x16a>
 80098f2:	2d00      	cmp	r5, #0
 80098f4:	f040 808e 	bne.w	8009a14 <_printf_i+0x210>
 80098f8:	4665      	mov	r5, ip
 80098fa:	2a08      	cmp	r2, #8
 80098fc:	d10b      	bne.n	8009916 <_printf_i+0x112>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	07db      	lsls	r3, r3, #31
 8009902:	d508      	bpl.n	8009916 <_printf_i+0x112>
 8009904:	6923      	ldr	r3, [r4, #16]
 8009906:	6862      	ldr	r2, [r4, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	bfde      	ittt	le
 800990c:	2330      	movle	r3, #48	; 0x30
 800990e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009912:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009916:	ebac 0305 	sub.w	r3, ip, r5
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	f8cd 8000 	str.w	r8, [sp]
 8009920:	463b      	mov	r3, r7
 8009922:	aa03      	add	r2, sp, #12
 8009924:	4621      	mov	r1, r4
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff fef6 	bl	8009718 <_printf_common>
 800992c:	3001      	adds	r0, #1
 800992e:	d14d      	bne.n	80099cc <_printf_i+0x1c8>
 8009930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009934:	b005      	add	sp, #20
 8009936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800993a:	4839      	ldr	r0, [pc, #228]	; (8009a20 <_printf_i+0x21c>)
 800993c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	6821      	ldr	r1, [r4, #0]
 8009944:	1d1d      	adds	r5, r3, #4
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6015      	str	r5, [r2, #0]
 800994a:	060a      	lsls	r2, r1, #24
 800994c:	d50b      	bpl.n	8009966 <_printf_i+0x162>
 800994e:	07ca      	lsls	r2, r1, #31
 8009950:	bf44      	itt	mi
 8009952:	f041 0120 	orrmi.w	r1, r1, #32
 8009956:	6021      	strmi	r1, [r4, #0]
 8009958:	b91b      	cbnz	r3, 8009962 <_printf_i+0x15e>
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	f022 0220 	bic.w	r2, r2, #32
 8009960:	6022      	str	r2, [r4, #0]
 8009962:	2210      	movs	r2, #16
 8009964:	e7b7      	b.n	80098d6 <_printf_i+0xd2>
 8009966:	064d      	lsls	r5, r1, #25
 8009968:	bf48      	it	mi
 800996a:	b29b      	uxthmi	r3, r3
 800996c:	e7ef      	b.n	800994e <_printf_i+0x14a>
 800996e:	4665      	mov	r5, ip
 8009970:	fbb3 f1f2 	udiv	r1, r3, r2
 8009974:	fb02 3311 	mls	r3, r2, r1, r3
 8009978:	5cc3      	ldrb	r3, [r0, r3]
 800997a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800997e:	460b      	mov	r3, r1
 8009980:	2900      	cmp	r1, #0
 8009982:	d1f5      	bne.n	8009970 <_printf_i+0x16c>
 8009984:	e7b9      	b.n	80098fa <_printf_i+0xf6>
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	6825      	ldr	r5, [r4, #0]
 800998a:	6961      	ldr	r1, [r4, #20]
 800998c:	1d18      	adds	r0, r3, #4
 800998e:	6010      	str	r0, [r2, #0]
 8009990:	0628      	lsls	r0, r5, #24
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	d501      	bpl.n	800999a <_printf_i+0x196>
 8009996:	6019      	str	r1, [r3, #0]
 8009998:	e002      	b.n	80099a0 <_printf_i+0x19c>
 800999a:	066a      	lsls	r2, r5, #25
 800999c:	d5fb      	bpl.n	8009996 <_printf_i+0x192>
 800999e:	8019      	strh	r1, [r3, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	6123      	str	r3, [r4, #16]
 80099a4:	4665      	mov	r5, ip
 80099a6:	e7b9      	b.n	800991c <_printf_i+0x118>
 80099a8:	6813      	ldr	r3, [r2, #0]
 80099aa:	1d19      	adds	r1, r3, #4
 80099ac:	6011      	str	r1, [r2, #0]
 80099ae:	681d      	ldr	r5, [r3, #0]
 80099b0:	6862      	ldr	r2, [r4, #4]
 80099b2:	2100      	movs	r1, #0
 80099b4:	4628      	mov	r0, r5
 80099b6:	f7f6 fc1b 	bl	80001f0 <memchr>
 80099ba:	b108      	cbz	r0, 80099c0 <_printf_i+0x1bc>
 80099bc:	1b40      	subs	r0, r0, r5
 80099be:	6060      	str	r0, [r4, #4]
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	2300      	movs	r3, #0
 80099c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ca:	e7a7      	b.n	800991c <_printf_i+0x118>
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	462a      	mov	r2, r5
 80099d0:	4639      	mov	r1, r7
 80099d2:	4630      	mov	r0, r6
 80099d4:	47c0      	blx	r8
 80099d6:	3001      	adds	r0, #1
 80099d8:	d0aa      	beq.n	8009930 <_printf_i+0x12c>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	079b      	lsls	r3, r3, #30
 80099de:	d413      	bmi.n	8009a08 <_printf_i+0x204>
 80099e0:	68e0      	ldr	r0, [r4, #12]
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	4298      	cmp	r0, r3
 80099e6:	bfb8      	it	lt
 80099e8:	4618      	movlt	r0, r3
 80099ea:	e7a3      	b.n	8009934 <_printf_i+0x130>
 80099ec:	2301      	movs	r3, #1
 80099ee:	464a      	mov	r2, r9
 80099f0:	4639      	mov	r1, r7
 80099f2:	4630      	mov	r0, r6
 80099f4:	47c0      	blx	r8
 80099f6:	3001      	adds	r0, #1
 80099f8:	d09a      	beq.n	8009930 <_printf_i+0x12c>
 80099fa:	3501      	adds	r5, #1
 80099fc:	68e3      	ldr	r3, [r4, #12]
 80099fe:	9a03      	ldr	r2, [sp, #12]
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	42ab      	cmp	r3, r5
 8009a04:	dcf2      	bgt.n	80099ec <_printf_i+0x1e8>
 8009a06:	e7eb      	b.n	80099e0 <_printf_i+0x1dc>
 8009a08:	2500      	movs	r5, #0
 8009a0a:	f104 0919 	add.w	r9, r4, #25
 8009a0e:	e7f5      	b.n	80099fc <_printf_i+0x1f8>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1ac      	bne.n	800996e <_printf_i+0x16a>
 8009a14:	7803      	ldrb	r3, [r0, #0]
 8009a16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a1e:	e76c      	b.n	80098fa <_printf_i+0xf6>
 8009a20:	08009cc5 	.word	0x08009cc5
 8009a24:	08009cd6 	.word	0x08009cd6

08009a28 <_realloc_r>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	460e      	mov	r6, r1
 8009a30:	b921      	cbnz	r1, 8009a3c <_realloc_r+0x14>
 8009a32:	4611      	mov	r1, r2
 8009a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a38:	f7ff bc32 	b.w	80092a0 <_malloc_r>
 8009a3c:	b922      	cbnz	r2, 8009a48 <_realloc_r+0x20>
 8009a3e:	f7ff fbe1 	bl	8009204 <_free_r>
 8009a42:	4625      	mov	r5, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a48:	f000 f814 	bl	8009a74 <_malloc_usable_size_r>
 8009a4c:	42a0      	cmp	r0, r4
 8009a4e:	d20f      	bcs.n	8009a70 <_realloc_r+0x48>
 8009a50:	4621      	mov	r1, r4
 8009a52:	4638      	mov	r0, r7
 8009a54:	f7ff fc24 	bl	80092a0 <_malloc_r>
 8009a58:	4605      	mov	r5, r0
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0f2      	beq.n	8009a44 <_realloc_r+0x1c>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4622      	mov	r2, r4
 8009a62:	f7ff fba3 	bl	80091ac <memcpy>
 8009a66:	4631      	mov	r1, r6
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff fbcb 	bl	8009204 <_free_r>
 8009a6e:	e7e9      	b.n	8009a44 <_realloc_r+0x1c>
 8009a70:	4635      	mov	r5, r6
 8009a72:	e7e7      	b.n	8009a44 <_realloc_r+0x1c>

08009a74 <_malloc_usable_size_r>:
 8009a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a78:	1f18      	subs	r0, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfbc      	itt	lt
 8009a7e:	580b      	ldrlt	r3, [r1, r0]
 8009a80:	18c0      	addlt	r0, r0, r3
 8009a82:	4770      	bx	lr

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
